<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>老何的 1001 夜之 - 如何成为优秀的 leader</title>
    <url>/leader/way/leader_way/</url>
    <content><![CDATA[<p>“Leader lead the way” — Anonymous</p>
<h1 id="要素"><a href="#要素" class="headerlink" title="要素"></a>要素</h1><pre><code>Help
Target
Check
Result
</code></pre><a id="more"></a>
<h1 id="Help"><a href="#Help" class="headerlink" title="Help"></a>Help</h1><pre><code>A helping heart to live happily everyday
Help members to grow them up
Help colleagues to obtain the result fast
Help your boss to make company run
</code></pre><h1 id="Target"><a href="#Target" class="headerlink" title="Target"></a>Target</h1><pre><code>Set target for your team to match company need
Set your target to improve whole team efficiency
Set your member target to help them to reach higher goal
Set your/your team weekly target to know where to go
Set your/your team daily target to know what your are doing everyday
</code></pre><h1 id="Check"><a href="#Check" class="headerlink" title="Check"></a>Check</h1><pre><code>Check yourself everyday, to find if there anything you need to check for your team
Check your team every week, especially begin of a week and end of a week to see if they are on track
Check the status of your man to see if they are in suitable condition
</code></pre><p>Result</p>
]]></content>
      <categories>
        <category>leader</category>
        <category>way</category>
      </categories>
      <tags>
        <tag>leader</tag>
        <tag>way</tag>
      </tags>
  </entry>
  <entry>
    <title>PostgreSQL内存结构</title>
    <url>/PostgreSQL/memory-architecture/PostgreSQL%E5%86%85%E5%AD%98%E7%BB%93%E6%9E%84/</url>
    <content><![CDATA[<p>在PostgreSQL内存结构中，主要分为本地缓冲区(Local Memory Area)和共享缓冲区(hared Memory Area)两部分, 本文主要介绍这两种缓冲区的功能。</p>
<a id="more"></a>
<h1 id="本地缓冲区"><a href="#本地缓冲区" class="headerlink" title="本地缓冲区"></a>本地缓冲区</h1><p>当连接建立时, postgres都会为每一个backend process分配Local Memory Area，可以分为三个子区域, 如下表所示:</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">子区域</th>
<th style="text-align:center">GUC参数</th>
<th style="text-align:center">默认值</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">Work Memory</td>
<td style="text-align:center">work_mem</td>
<td style="text-align:center">4MB</td>
<td style="text-align:left">指定在写到临时磁盘文件之前被内部排序操作和哈希表使用的内存量, ORDER BY、DISTINCT和归并连接都要用到排序操作。哈希连接、基于哈希的聚集以及基于哈希的IN子查询处理中都要用到哈希表。</td>
</tr>
<tr>
<td style="text-align:center">Maintenance Work Memory</td>
<td style="text-align:center">maintenance_work_mem</td>
<td style="text-align:center">64MB</td>
<td style="text-align:left">指定在维护性操作(如VACUUM,CREATE INDEX和ALTER TABLE ADD FOREIGN KEY等)中使用的最大的内存量。</td>
</tr>
<tr>
<td style="text-align:center">Temp Buffers</td>
<td style="text-align:center">temp_buffers</td>
<td style="text-align:center">8MB</td>
<td style="text-align:left">设置每个数据库会话使用的临时缓冲区的最大数目，只用于访问临时表。可以在独立的会话内部被改变，但是只有在会话第一次使用临时表之前才能改变, 在会话中随后企图改变该值是无效的。</td>
</tr>
<tr>
<td style="text-align:center">Vacuum Buffers</td>
<td style="text-align:center">autovacuum_work_mem</td>
<td style="text-align:center">-1</td>
<td style="text-align:left">指定每个vacuum worker进程能使用的最大内存量。其默认值-1，表示使用maintenance_work_mem的值。这个设置对正在运行VACUUM的没有影响。</td>
</tr>
</tbody>
</table>
</div>
<h1 id="共享缓冲区"><a href="#共享缓冲区" class="headerlink" title="共享缓冲区"></a>共享缓冲区</h1><p>这块区域在服务器启动的时候分配</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">子区域</th>
<th style="text-align:center">参数</th>
<th style="text-align:center">默认值</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">Shared Buffers</td>
<td style="text-align:center">shared_buffers</td>
<td style="text-align:center">128MB</td>
<td style="text-align:left">设置数据库服务器将使用的共享内存缓冲区量。通常设置为25%-40%比较合适。默认block_size下，至少为128千字节(KB)</td>
</tr>
<tr>
<td style="text-align:center">WAL Buffers</td>
<td style="text-align:center">wal_buffers</td>
<td style="text-align:center">16MB</td>
<td style="text-align:left">用于还未写入磁盘的 WAL 数据的共享内存量。默认值-1表示选择等于shared_buffers的1/32的尺寸(约3%)，但是不小于64kB也不大于WAL段的尺寸(通常为16MB)。任何小于32kB的正值都将被当作32kB。</td>
</tr>
<tr>
<td style="text-align:center">CLOG Buffers</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:left">存储了所有表明事物提交状态的元数据。</td>
</tr>
<tr>
<td style="text-align:center">Memory for Locks Space</td>
<td style="text-align:center">max_locks_per_transaction max_pred_locks_per_transaction</td>
<td style="text-align:center">64</td>
<td style="text-align:left">存储所有PostgreSQL实例所有heavyweight locks信息，这些锁信息被所有的background process和backend process共享。</td>
</tr>
</tbody>
</table>
</div>
]]></content>
      <categories>
        <category>PostgreSQL</category>
        <category>memory architecture</category>
      </categories>
      <tags>
        <tag>PostgreSQL</tag>
        <tag>memory architecture</tag>
      </tags>
  </entry>
  <entry>
    <title>PostgreSQL双主逻辑复制</title>
    <url>/PostgreSQL/multi-master/logical-replication/%E5%8F%8C%E4%B8%BB%E9%80%BB%E8%BE%91%E5%A4%8D%E5%88%B6/</url>
    <content><![CDATA[<p>利用PostgreSQL逻辑复制和触发器实现PostgreSQL双主复制</p>
<a id="more"></a>
<h1 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h1><h2 id="实例信息"><a href="#实例信息" class="headerlink" title="实例信息"></a>实例信息</h2><p>主实例1<br><figure class="highlight routeros"><table><tr><td class="code"><pre><code class="hljs routeros"><span class="hljs-attribute">pg13</span>=#  \conninfo<br>You are connected <span class="hljs-keyword">to</span> database <span class="hljs-string">&quot;pg13&quot;</span> as<span class="hljs-built_in"> user </span><span class="hljs-string">&quot;postgres&quot;</span> via socket <span class="hljs-keyword">in</span> <span class="hljs-string">&quot;/tmp&quot;</span> at<span class="hljs-built_in"> port </span><span class="hljs-string">&quot;5557&quot;</span>.<br><span class="hljs-attribute">pg13</span>=# show wal_level ;<br> wal_level<br>-----------<br> logical<br>(1 row)<br><br><span class="hljs-attribute">pg13</span>=# \du postgres<br>           List of roles<br> Role name | Attributes | Member of<br>-----------+------------+-----------<br> postgres  | Superuser  | &#123;&#125;<br><br><span class="hljs-attribute">pg13</span>=#<br></code></pre></td></tr></table></figure></p>
<p>主实例2<br><figure class="highlight routeros"><table><tr><td class="code"><pre><code class="hljs routeros"><span class="hljs-attribute">postgres</span>=# \conninfo<br>You are connected <span class="hljs-keyword">to</span> database <span class="hljs-string">&quot;postgres&quot;</span> as<span class="hljs-built_in"> user </span><span class="hljs-string">&quot;postgres&quot;</span> via socket <span class="hljs-keyword">in</span> <span class="hljs-string">&quot;/tmp&quot;</span> at<span class="hljs-built_in"> port </span><span class="hljs-string">&quot;5556&quot;</span>.<br><span class="hljs-attribute">postgres</span>=# show wal_level ;<br> wal_level<br>-----------<br> logical<br>(1 row)<br><br><span class="hljs-attribute">postgres</span>=# \du postgres<br>                                   List of roles<br> Role name |                         Attributes                         | Member of<br>-----------+------------------------------------------------------------+-----------<br> postgres  | Superuser, Create role, Create DB, Replication, Bypass RLS | &#123;&#125;<br><br><span class="hljs-attribute">postgres</span>=#<br></code></pre></td></tr></table></figure></p>
<h1 id="创建测试表"><a href="#创建测试表" class="headerlink" title="创建测试表"></a>创建测试表</h1><h2 id="主实例1"><a href="#主实例1" class="headerlink" title="主实例1"></a>主实例1</h2><figure class="highlight routeros"><table><tr><td class="code"><pre><code class="hljs routeros"><span class="hljs-attribute">pg13</span>=# create table test_logical_repl(id serial primary key, islocal bool, create_time timestamptz<span class="hljs-built_in"> default </span>clock_timestamp(), name text, update_time timestamptz;<br>CREATE TABLE<br><span class="hljs-attribute">pg13</span>=# \d+ test_logical_repl<br>                                                           Table <span class="hljs-string">&quot;public.test_logical_repl&quot;</span><br>   Column    |          <span class="hljs-built_in"> Type </span>          | Collation | Nullable |                   <span class="hljs-built_in"> Default </span>                   | Storage  | Stats target | Description<br>-------------+--------------------------+-----------+----------+-----------------------------------------------+----------+--------------+-------------<br> id          | integer                  |           | <span class="hljs-keyword">not</span> <span class="hljs-literal">null</span> | nextval(<span class="hljs-string">&#x27;test_logical_repl_id_seq&#x27;</span>::regclass) | plain    |              |<br> islocal     | boolean                  |           |          |                                               | plain    |              |<br> create_time | timestamp with time zone |           |          | clock_timestamp()                             | plain    |              |<br> name        | text                     |           |          |                                               | extended |              |<br> update_time | timestamp with time zone |           |          |                                               | plain    |              |<br>Indexes:<br>    <span class="hljs-string">&quot;test_logical_repl_pkey&quot;</span> PRIMARY KEY, btree (id)<br>Access method: heap<br><br><span class="hljs-attribute">pg13</span>=# alter sequence test_logical_repl_id_seq increment 4;<br>ALTER SEQUENCE<br><span class="hljs-attribute">pg13</span>=# select setval(<span class="hljs-string">&#x27;test_logical_repl_id_seq&#x27;</span>, 1)<br>pg13-# ;<br> setval<br>--------<br>      1<br>(1 row)<br><br><span class="hljs-attribute">pg13</span>=# \d+ test_logical_repl_id_seq<br>              Sequence <span class="hljs-string">&quot;public.test_logical_repl_id_seq&quot;</span><br> <span class="hljs-built_in"> Type </span>  | Start | Minimum |  Maximum   | Increment | Cycles? | Cache<br>---------+-------+---------+------------+-----------+---------+-------<br> integer |     1 |       1 | 2147483647 |         4 | <span class="hljs-literal">no</span>      |     1<br>Owned by: public.test_logical_repl.id<br><br><span class="hljs-attribute">pg13</span>=# select nextval(<span class="hljs-string">&#x27;test_logical_repl_id_seq&#x27;</span>);<br> nextval<br>---------<br>       5<br>(1 row)<br><br><span class="hljs-attribute">pg13</span>=# select nextval(<span class="hljs-string">&#x27;test_logical_repl_id_seq&#x27;</span>);<br> nextval<br>---------<br>       9<br>(1 row)<br><br><span class="hljs-attribute">pg13</span>=#<br><br></code></pre></td></tr></table></figure>
<h2 id="主实例2"><a href="#主实例2" class="headerlink" title="主实例2"></a>主实例2</h2><figure class="highlight routeros"><table><tr><td class="code"><pre><code class="hljs routeros"><span class="hljs-attribute">postgres</span>=# create table test_logical_repl(id serial primary key, islocal bool, create_time timestamptz<span class="hljs-built_in"> default </span>clock_timestamp(), name text, update_time timestamptz;<br>CREATE TABLE<br><span class="hljs-attribute">postgres</span>=#<br><span class="hljs-attribute">postgres</span>=# \d+ test_logical_repl<br>                                                           Table <span class="hljs-string">&quot;public.test_logical_repl&quot;</span><br>   Column    |          <span class="hljs-built_in"> Type </span>          | Collation | Nullable |                   <span class="hljs-built_in"> Default </span>                   | Storage  | Stats target | Description<br>-------------+--------------------------+-----------+----------+-----------------------------------------------+----------+--------------+-------------<br> id          | integer                  |           | <span class="hljs-keyword">not</span> <span class="hljs-literal">null</span> | nextval(<span class="hljs-string">&#x27;test_logical_repl_id_seq&#x27;</span>::regclass) | plain    |              |<br> islocal     | boolean                  |           |          |                                               | plain    |              |<br> create_time | timestamp with time zone |           |          | clock_timestamp()                             | plain    |              |<br> name        | text                     |           |          |                                               | extended |              |<br> update_time | timestamp with time zone |           |          |                                               | plain    |              |<br>Indexes:<br>    <span class="hljs-string">&quot;test_logical_repl_pkey&quot;</span> PRIMARY KEY, btree (id)<br>Access method: heap<br><br><span class="hljs-attribute">postgres</span>=# alter sequence test_logical_repl_id_seq increment 4;<br>ALTER SEQUENCE<br><span class="hljs-attribute">postgres</span>=# select setval(<span class="hljs-string">&#x27;test_logical_repl_id_seq&#x27;</span>, 2);<br> setval<br>--------<br>      2<br>(1 row)<br><br><span class="hljs-attribute">postgres</span>=# \d+ test_logical_repl_id_seq<br>              Sequence <span class="hljs-string">&quot;public.test_logical_repl_id_seq&quot;</span><br> <span class="hljs-built_in"> Type </span>  | Start | Minimum |  Maximum   | Increment | Cycles? | Cache<br>---------+-------+---------+------------+-----------+---------+-------<br> integer |     1 |       1 | 2147483647 |         4 | <span class="hljs-literal">no</span>      |     1<br>Owned by: public.test_logical_repl.id<br><br><span class="hljs-attribute">postgres</span>=# select nextval(<span class="hljs-string">&#x27;test_logical_repl_id_seq&#x27;</span>);<br> nextval<br>---------<br>       6<br>(1 row)<br><br><span class="hljs-attribute">postgres</span>=# select nextval(<span class="hljs-string">&#x27;test_logical_repl_id_seq&#x27;</span>);<br> nextval<br>---------<br>      10<br>(1 row)<br><br><span class="hljs-attribute">postgres</span>=#<br></code></pre></td></tr></table></figure>
<h1 id="两实例创建发布"><a href="#两实例创建发布" class="headerlink" title="两实例创建发布"></a>两实例创建发布</h1><h2 id="主实例1-1"><a href="#主实例1-1" class="headerlink" title="主实例1"></a>主实例1</h2><figure class="highlight coq"><table><tr><td class="code"><pre><code class="hljs coq">pg13=# create publication pub_pg13 <span class="hljs-keyword">for</span> table test_logical_repl <span class="hljs-built_in">with</span> (publish = &#x27;insert, delete, update&#x27;);<br>CREATE PUBLICATION<br>pg13=#<br>pg13=# \dRp+<br>                            Publication pub_pg13<br>  Owner   | <span class="hljs-type">All</span> tables | <span class="hljs-type">Inserts</span> | <span class="hljs-type">Updates</span> | <span class="hljs-type">Deletes</span> | <span class="hljs-type">Truncates</span> | <span class="hljs-type">Via</span> root<br>----------+------------+---------+---------+---------+-----------+----------<br> postgres | <span class="hljs-type">f</span>          | <span class="hljs-type">t</span>       | <span class="hljs-type">t</span>       | <span class="hljs-type">t</span>       | <span class="hljs-type">f</span>         | <span class="hljs-type">f</span><br><span class="hljs-keyword">Tables</span>:<br>    <span class="hljs-string">&quot;public.test_logical_repl&quot;</span><br><br>pg13=#<br></code></pre></td></tr></table></figure>
<h2 id="主实例2-1"><a href="#主实例2-1" class="headerlink" title="主实例2"></a>主实例2</h2><figure class="highlight coq"><table><tr><td class="code"><pre><code class="hljs coq">postgres=# create publication pub_pg12 <span class="hljs-keyword">for</span> table test_logical_repl <span class="hljs-built_in">with</span> (publish = &#x27;insert, delete, update&#x27;);<br>CREATE PUBLICATION<br>postgres=# \dRp+<br>                      Publication pub_pg12<br>  Owner   | <span class="hljs-type">All</span> tables | <span class="hljs-type">Inserts</span> | <span class="hljs-type">Updates</span> | <span class="hljs-type">Deletes</span> | <span class="hljs-type">Truncates</span><br>----------+------------+---------+---------+---------+-----------<br> postgres | <span class="hljs-type">f</span>          | <span class="hljs-type">t</span>       | <span class="hljs-type">t</span>       | <span class="hljs-type">t</span>       | <span class="hljs-type">f</span><br><span class="hljs-keyword">Tables</span>:<br>    <span class="hljs-string">&quot;public.test_logical_repl&quot;</span><br><br>postgres=#<br></code></pre></td></tr></table></figure>
<h1 id="创建触发器，防止死循环"><a href="#创建触发器，防止死循环" class="headerlink" title="创建触发器，防止死循环"></a>创建触发器，防止死循环</h1><h2 id="主实例1-2"><a href="#主实例1-2" class="headerlink" title="主实例1"></a>主实例1</h2><figure class="highlight oxygene"><table><tr><td class="code"><pre><code class="hljs oxygene">pg13=# <span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">OR</span> REPLACE <span class="hljs-function"><span class="hljs-keyword">FUNCTION</span> <span class="hljs-title">public</span>.<span class="hljs-title">prevent_round_robin_func</span><span class="hljs-params">()</span></span><br><span class="hljs-function"> <span class="hljs-title">RETURNS</span> <span class="hljs-title">trigger</span></span><br><span class="hljs-function"> <span class="hljs-title">LANGUAGE</span> <span class="hljs-title">plpgsql</span></span><br><span class="hljs-function"> <span class="hljs-title">STRICT</span></span><br><span class="hljs-function"><span class="hljs-title">AS</span> $<span class="hljs-title">function</span>$</span><br><span class="hljs-function"><span class="hljs-title">declare</span> <span class="hljs-title">replica_pids</span> <span class="hljs-title">int</span>[];</span><br><span class="hljs-keyword">begin</span><br>    perform <span class="hljs-keyword">from</span> pg_stat_activity <span class="hljs-keyword">where</span> backend_type ~ <span class="hljs-string">&#x27;logical replication worker&#x27;</span> <span class="hljs-keyword">and</span> pid = pg_backend_pid();<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> found <span class="hljs-keyword">then</span><br>        <span class="hljs-keyword">NEW</span>.islocal = <span class="hljs-keyword">true</span>;<br>    elsif <span class="hljs-keyword">NEW</span>.islocal = <span class="hljs-keyword">false</span> <span class="hljs-keyword">then</span><br>        return null;<br>    <span class="hljs-keyword">else</span><br>        <span class="hljs-keyword">NEW</span>.islocal = <span class="hljs-keyword">false</span>;<br>    <span class="hljs-keyword">end</span> <span class="hljs-keyword">if</span>;<br>    return <span class="hljs-keyword">NEW</span>;<br><span class="hljs-keyword">end</span>;<br>$<span class="hljs-function"><span class="hljs-keyword">function</span>$;</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-function"><span class="hljs-keyword">FUNCTION</span></span><br><span class="hljs-function"><span class="hljs-title">pg13</span>=#</span><br><span class="hljs-function"><span class="hljs-title">pg13</span>=# <span class="hljs-title">create</span> <span class="hljs-title">trigger</span> <span class="hljs-title">tg</span> <span class="hljs-title">before</span> <span class="hljs-title">insert</span> <span class="hljs-title">or</span> <span class="hljs-title">update</span> <span class="hljs-title">on</span> <span class="hljs-title">test_logical_repl</span> <span class="hljs-title">for</span> <span class="hljs-title">each</span> <span class="hljs-title">row</span> <span class="hljs-title">execute</span> <span class="hljs-title">FUNCTION</span> <span class="hljs-title">prevent_round_robin_func</span> <span class="hljs-params">()</span>;</span><br><span class="hljs-keyword">CREATE</span> TRIGGER<br>pg13=#<br><br></code></pre></td></tr></table></figure>
<h2 id="主实例2-2"><a href="#主实例2-2" class="headerlink" title="主实例2"></a>主实例2</h2><figure class="highlight ruby"><table><tr><td class="code"><pre><code class="hljs ruby">postgres=<span class="hljs-comment"># CREATE OR REPLACE FUNCTION public.prevent_round_robin_func()</span><br>postgres-<span class="hljs-comment">#  RETURNS trigger</span><br>postgres-<span class="hljs-comment">#  LANGUAGE plpgsql</span><br>postgres-<span class="hljs-comment">#  STRICT</span><br>postgres-<span class="hljs-comment"># AS $function$</span><br>postgres$# declare replica_pids int[];<br>postgres$# <span class="hljs-keyword">begin</span><br>postgres$#     perform from pg_stat_activity where backend_type ~ <span class="hljs-string">&#x27;logical replication worker&#x27;</span> <span class="hljs-keyword">and</span> pid = pg_backend_pid();<br>postgres$#     <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> found <span class="hljs-keyword">then</span><br>postgres$#         NEW.islocal = <span class="hljs-literal">true</span>;<br>postgres$#     <span class="hljs-keyword">elsif</span> NEW.islocal = <span class="hljs-literal">false</span> <span class="hljs-keyword">then</span><br>postgres$#         <span class="hljs-keyword">return</span> null;<br>postgres$#     <span class="hljs-keyword">else</span><br>postgres$#         NEW.islocal = <span class="hljs-literal">false</span>;<br>postgres$#     <span class="hljs-keyword">end</span> <span class="hljs-keyword">if</span>;<br>postgres$#     <span class="hljs-keyword">return</span> NEW;<br>postgres$# <span class="hljs-keyword">end</span>;<br>postgres$# $function$;<br>CREATE FUNCTION<br>postgres=<span class="hljs-comment">#</span><br>postgres=<span class="hljs-comment"># create trigger tg before insert or update on test_logical_repl for each row execute FUNCTION prevent_round_robin_func ();</span><br>CREATE TRIGGER<br>postgres=<span class="hljs-comment">#</span><br></code></pre></td></tr></table></figure>
<h1 id="订阅"><a href="#订阅" class="headerlink" title="订阅"></a>订阅</h1><h2 id="主实例1-3"><a href="#主实例1-3" class="headerlink" title="主实例1"></a>主实例1</h2><figure class="highlight gherkin"><table><tr><td class="code"><pre><code class="hljs gherkin">pg13=<span class="hljs-comment"># create subscription sub_pg13 CONNECTION &#x27;host=127.0.0.1 port=5556 user=postgres dbname=postgres password=postgres&#x27; PUBLICATION pub_pg12 with (COPY_DATA=false);</span><br>NOTICE:  created replication slot <span class="hljs-string">&quot;sub_pg13&quot;</span> on publisher<br>CREATE SUBSCRIPTION<br>pg13=<span class="hljs-comment"># </span><br>pg13=<span class="hljs-comment"># table pg_stat_replication ;</span><br>   pid   |<span class="hljs-string"> usesysid </span>|<span class="hljs-string"> usename  </span>|<span class="hljs-string"> application_name </span>|<span class="hljs-string"> client_addr </span>|<span class="hljs-string"> client_hostname </span>|<span class="hljs-string"> client_port </span>|<span class="hljs-string">         backend_start         </span>|<span class="hljs-string"> backend_xmin </span>|<span class="hljs-string">   state   </span>|<span class="hljs-string"> sent_lsn  </span>|<span class="hljs-string"> write_lsn </span>|<span class="hljs-string"> flush_lsn </span>|<span class="hljs-string"> replay_lsn </span>|<span class="hljs-string"> write_lag </span>|<span class="hljs-string"> flush_lag </span>|<span class="hljs-string"> replay_lag </span>|<span class="hljs-string"> sync_priority </span>|<span class="hljs-string"> sync_state </span>|<span class="hljs-string">          r</span><br><span class="hljs-string">eply_time</span><br><span class="hljs-string">---------+----------+----------+------------------+-------------+-----------------+-------------+-------------------------------+--------------+-----------+-----------+-----------+-----------+------------+-----------+-----------+------------+---------------+------------+-----------</span><br><span class="hljs-string">--------------------</span><br><span class="hljs-string"> 1847284 </span>|<span class="hljs-string">    16385 </span>|<span class="hljs-string"> postgres </span>|<span class="hljs-string"> sub_pg12         </span>|<span class="hljs-string"> 127.0.0.1   </span>|<span class="hljs-string">                 </span>|<span class="hljs-string">       40564 </span>|<span class="hljs-string"> 2021-05-26 14:52:31.174826+08 </span>|<span class="hljs-string">              </span>|<span class="hljs-string"> streaming </span>|<span class="hljs-string"> 0/B9416A0 </span>|<span class="hljs-string"> 0/B9416A0 </span>|<span class="hljs-string"> 0/B9416A0 </span>|<span class="hljs-string"> 0/B9416A0  </span>|<span class="hljs-string">           </span>|<span class="hljs-string">           </span>|<span class="hljs-string">            </span>|<span class="hljs-string">             0 </span>|<span class="hljs-string"> async      </span>|<span class="hljs-string"> 2021-05-26</span><br><span class="hljs-string"> 14:53:21.238743+08</span><br><span class="hljs-string">(1 row)</span><br><br><span class="hljs-string">pg13=#</span><br></code></pre></td></tr></table></figure>
<h2 id="主实例2-3"><a href="#主实例2-3" class="headerlink" title="主实例2"></a>主实例2</h2><figure class="highlight gherkin"><table><tr><td class="code"><pre><code class="hljs gherkin">postgres=<span class="hljs-comment"># create subscription sub_pg12 CONNECTION &#x27;host=127.0.0.1 port=5557 user=postgres dbname=pg13 password=postgres&#x27; PUBLICATION pub_pg13 with (COPY_DATA=false);</span><br>NOTICE:  created replication slot <span class="hljs-string">&quot;sub_pg12&quot;</span> on publisher<br>CREATE SUBSCRIPTION<br>postgres=<span class="hljs-comment">#</span><br>postgres=<span class="hljs-comment"># table pg_stat_replication ;</span><br>   pid   |<span class="hljs-string"> usesysid </span>|<span class="hljs-string"> usename  </span>|<span class="hljs-string"> application_name </span>|<span class="hljs-string"> client_addr </span>|<span class="hljs-string"> client_hostname </span>|<span class="hljs-string"> client_port </span>|<span class="hljs-string">         backend_start         </span>|<span class="hljs-string"> backend_xmin </span>|<span class="hljs-string">   state   </span>|<span class="hljs-string">  sent_lsn   </span>|<span class="hljs-string">  write_lsn  </span>|<span class="hljs-string">  flush_lsn  </span>|<span class="hljs-string"> replay_lsn  </span>|<span class="hljs-string"> write_lag </span>|<span class="hljs-string"> flush_lag </span>|<span class="hljs-string"> replay_lag </span>|<span class="hljs-string"> sync_priority </span>|<span class="hljs-string"> sync_state </span>|<br>      reply_time<br>---------+----------+----------+------------------+-------------+-----------------+-------------+-------------------------------+--------------+-----------+-------------+-------------+-------------+-------------+-----------+-----------+------------+---------------+------------+----<br>---------------------------<br> 1847272 |<span class="hljs-string">       10 </span>|<span class="hljs-string"> postgres </span>|<span class="hljs-string"> sub_pg13         </span>|<span class="hljs-string"> 127.0.0.1   </span>|<span class="hljs-string">                 </span>|<span class="hljs-string">       40110 </span>|<span class="hljs-string"> 2021-05-26 14:52:10.578243+08 </span>|<span class="hljs-string">              </span>|<span class="hljs-string"> streaming </span>|<span class="hljs-string"> 10/7F7646E0 </span>|<span class="hljs-string"> 10/7F7646E0 </span>|<span class="hljs-string"> 10/7F7646E0 </span>|<span class="hljs-string"> 10/7F7646E0 </span>|<span class="hljs-string">           </span>|<span class="hljs-string">           </span>|<span class="hljs-string">            </span>|<span class="hljs-string">             0 </span>|<span class="hljs-string"> async      </span>|<span class="hljs-string"> 202</span><br><span class="hljs-string">1-05-26 14:53:28.851805+08</span><br><span class="hljs-string">(1 row)</span><br><br><span class="hljs-string">postgres=#</span><br></code></pre></td></tr></table></figure>
<h1 id="冲突的解决"><a href="#冲突的解决" class="headerlink" title="冲突的解决"></a>冲突的解决</h1><ol>
<li>停掉冲突端订阅，手动删除冲突的数据，这样就不会与复制过来的数据冲突了</li>
<li>使用 pg_replication_origin_advance跳过冲突的事务</li>
</ol>
<p>发布端获取冲突的lsn<br><figure class="highlight pgsql"><table><tr><td class="code"><pre><code class="hljs pgsql">pg13=# <span class="hljs-keyword">SELECT</span> pg_copy_logical_replication_slot(<span class="hljs-string">&#x27;sub_pg12&#x27;</span>, <span class="hljs-string">&#x27;sub_pg12_copy_1&#x27;</span>, <span class="hljs-keyword">true</span>, <span class="hljs-string">&#x27;test_decoding&#x27;</span>);<br> pg_copy_logical_replication_slot<br><span class="hljs-comment">----------------------------------</span><br> (sub_pg12_copy_1,<span class="hljs-number">0</span>/<span class="hljs-number">109</span>FDF28)<br>(<span class="hljs-number">1</span> <span class="hljs-keyword">row</span>)<br><br>pg13=#<br>pg13=# <span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">from</span> pg_logical_slot_peek_changes(<span class="hljs-string">&#x27;sub_pg12_copy_1&#x27;</span>, <span class="hljs-keyword">NULL</span>, <span class="hljs-keyword">NULL</span>);<br>    lsn     |  xid  |                                                                                                                    data<br><span class="hljs-comment">------------+-------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------</span><br> <span class="hljs-number">0</span>/<span class="hljs-number">109</span>FE1E0 | <span class="hljs-number">55884</span> | <span class="hljs-keyword">BEGIN</span> <span class="hljs-number">55884</span><br> <span class="hljs-number">0</span>/<span class="hljs-number">109</span>FE1E0 | <span class="hljs-number">55884</span> | <span class="hljs-keyword">table</span> <span class="hljs-built_in">public</span>.test_logical_repl: <span class="hljs-keyword">INSERT</span>: id[<span class="hljs-type">integer</span>]:<span class="hljs-number">108</span> islocal[<span class="hljs-type">boolean</span>]:<span class="hljs-keyword">true</span> create_time[<span class="hljs-type">timestamp</span> <span class="hljs-type">with time zone</span>]:<span class="hljs-string">&#x27;2021-05-26 16:19:39.554447+08&#x27;</span> <span class="hljs-type">name</span>[<span class="hljs-type">text</span>]:<span class="hljs-string">&#x27;pg13&#x27;</span> update_time[<span class="hljs-type">timestamp</span> <span class="hljs-type">with time zone</span>]:<span class="hljs-string">&#x27;2021-05-26 16:19:39.554234+08&#x27;</span><br> <span class="hljs-number">0</span>/<span class="hljs-number">109</span>FE380 | <span class="hljs-number">55884</span> | <span class="hljs-keyword">COMMIT</span> <span class="hljs-number">55884</span><br>(<span class="hljs-number">3</span> <span class="hljs-keyword">rows</span>)<br><br>pg13=#<br></code></pre></td></tr></table></figure><br>一般是第一个记录的commit这里。 也就是0/109FE380</p>
<p>订阅端执行pg_replication_origin_advance<br><figure class="highlight pgsql"><table><tr><td class="code"><pre><code class="hljs pgsql"><br>postgres=# <span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> pg_replication_origin_status;<br> local_id | external_id | remote_lsn |  local_lsn<br><span class="hljs-comment">----------+-------------+------------+-------------</span><br>        <span class="hljs-number">1</span> | pg_308115   | <span class="hljs-number">0</span>/<span class="hljs-number">109</span>FE380 | <span class="hljs-number">10</span>/<span class="hljs-number">8477</span>F0B0<br>(<span class="hljs-number">1</span> <span class="hljs-keyword">rows</span>)<br><br>postgres=#<br>postgres=# <span class="hljs-keyword">SELECT</span> pg_replication_origin_advance (<span class="hljs-string">&#x27;pg_308115&#x27;</span>, <span class="hljs-string">&#x27;0/4A903B98&#x27;</span>::pg_lsn);<br> pg_replication_origin_advance<br><span class="hljs-comment">-------------------------------</span><br><br>(<span class="hljs-number">1</span> <span class="hljs-keyword">row</span>)<br><br></code></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>PostgreSQL</category>
        <category>multi-master</category>
        <category>logical replication</category>
      </categories>
      <tags>
        <tag>PostgreSQL</tag>
        <tag>multi-master</tag>
        <tag>logical replication</tag>
      </tags>
  </entry>
  <entry>
    <title>PostgreSQL14 允许配置TOAST压缩方法</title>
    <url>/COMPRESSION/POstgreSQL/lz4/pglz/PostgreSQL14_Allow_configurable_LZ4_TOAST_compression/</url>
    <content><![CDATA[<p>PostgreSQL 14 允许配置TOAST压缩方法, 默认为pglz, 可以通过GUC default_toast_compression 设置默认值，当前支持pglz, lz4两种配置, 支持lz4需要在configure时增加—with-lz4.</p>
<a id="more"></a>
<h1 id="查看当前default-toast-compression"><a href="#查看当前default-toast-compression" class="headerlink" title="查看当前default_toast_compression"></a>查看当前default_toast_compression</h1><figure class="highlight asciidoc"><table><tr><td class="code"><pre><code class="hljs asciidoc">postgres=# show default<span class="hljs-emphasis">_toast_</span>compression;<br><span class="hljs-code"> default_toast_compression</span><br>---------------------------<br><span class="hljs-code"> pglz</span><br>(1 row)<br><br>postgres=#<br></code></pre></td></tr></table></figure>
<h1 id="设置toast压缩方法"><a href="#设置toast压缩方法" class="headerlink" title="设置toast压缩方法"></a>设置toast压缩方法</h1><figure class="highlight routeros"><table><tr><td class="code"><pre><code class="hljs routeros"><span class="hljs-attribute">mydb</span>=# CREATE TABLE test_compression (f1 TEXT COMPRESSION pglz, f2 TEXT COMPRESSION lz4);<br>CREATE TABLE<br><span class="hljs-attribute">mydb</span>=#<br><span class="hljs-attribute">mydb</span>=# \d+ test_compression<br>                                   Table <span class="hljs-string">&quot;public.test_compression&quot;</span><br> Column |<span class="hljs-built_in"> Type </span>| Collation | Nullable |<span class="hljs-built_in"> Default </span>| Storage  | Compression | Stats target | Description<br>--------+------+-----------+----------+---------+----------+-------------+--------------+-------------<br> f1     | text |           |          |         | extended | pglz        |              |<br> f2     | text |           |          |         | extended | lz4         |              |<br>Access method: heap<br><br><span class="hljs-attribute">mydb</span>=#<br><span class="hljs-attribute">mydb</span>=# alter table test_compression alter COLUMN f1 <span class="hljs-builtin-name">set</span> compression lz4;<br>ALTER TABLE<br><span class="hljs-attribute">mydb</span>=# alter table test_compression alter COLUMN f2 <span class="hljs-builtin-name">set</span> compression pglz;<br>ALTER TABLE<br><span class="hljs-attribute">mydb</span>=#<br><span class="hljs-attribute">mydb</span>=# \d+ test_compression<br>                                   Table <span class="hljs-string">&quot;public.test_compression&quot;</span><br> Column |<span class="hljs-built_in"> Type </span>| Collation | Nullable |<span class="hljs-built_in"> Default </span>| Storage  | Compression | Stats target | Description<br>--------+------+-----------+----------+---------+----------+-------------+--------------+-------------<br> f1     | text |           |          |         | extended | lz4         |              |<br> f2     | text |           |          |         | extended | pglz        |              |<br>Access method: heap<br><br><span class="hljs-attribute">mydb</span>=#<br><br></code></pre></td></tr></table></figure>
<h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><figure class="highlight pgsql"><table><tr><td class="code"><pre><code class="hljs pgsql">mydb=# <span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> test_compression <span class="hljs-keyword">select</span> repeat(<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-number">204800</span>) , repeat(<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-number">204800</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-number">0</span> <span class="hljs-number">1</span><br>mydb=#<br>mydb=#<br>mydb=# <span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> test_compression <span class="hljs-keyword">select</span> repeat(<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-number">2048000</span>) , repeat(<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-number">2048000</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-number">0</span> <span class="hljs-number">1</span><br>mydb=#<br>mydb=# <span class="hljs-keyword">select</span> pg_column_compression(f1),<br>       pg_column_size(f1),<br>       pg_column_compression(f2),<br>       pg_column_size(f2),<br>       pg_column_size(f2)/pg_column_size(f1)::<span class="hljs-type">numeric</span> <span class="hljs-keyword">from</span> test_compression<br>;<br> pg_column_compression | pg_column_size | pg_column_compression | pg_column_size |      ?<span class="hljs-keyword">column</span>?<br><span class="hljs-comment">-----------------------+----------------+-----------------------+----------------+--------------------</span><br> lz4                   |            <span class="hljs-number">822</span> | pglz                  |           <span class="hljs-number">2356</span> | <span class="hljs-number">2.8661800486618005</span><br> lz4                   |           <span class="hljs-number">8050</span> | pglz                  |          <span class="hljs-number">23449</span> | <span class="hljs-number">2.9129192546583851</span><br>(<span class="hljs-number">2</span> <span class="hljs-keyword">rows</span>)<br><br>mydb=#<br>mydb=# \<span class="hljs-keyword">timing</span><br><span class="hljs-keyword">Timing</span> <span class="hljs-keyword">is</span> <span class="hljs-keyword">on</span>.<br>mydb=#<br>mydb=# <span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> test_pglz(f1 <span class="hljs-type">text</span> compression pglz);<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span><br><span class="hljs-type">Time</span>: <span class="hljs-number">7.706</span> ms<br>mydb=#<br>mydb=# <span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> test_lz4(f1 <span class="hljs-type">text</span> compression lz4);<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span><br><span class="hljs-type">Time</span>: <span class="hljs-number">5.601</span> ms<br>mydb=#<br>mydb=# <span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> test_pglz <span class="hljs-keyword">select</span> repeat(<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-number">204800</span>) <span class="hljs-keyword">from</span> generate_series(<span class="hljs-number">1</span>, <span class="hljs-number">10000</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-number">0</span> <span class="hljs-number">10000</span><br><span class="hljs-type">Time</span>: <span class="hljs-number">39956.824</span> ms (<span class="hljs-number">00</span>:<span class="hljs-number">39.957</span>)<br>mydb=#<br>mydb=# <span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> test_lz4 <span class="hljs-keyword">select</span> repeat(<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-number">204800</span>) <span class="hljs-keyword">from</span> generate_series(<span class="hljs-number">1</span>, <span class="hljs-number">10000</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-number">0</span> <span class="hljs-number">10000</span><br><span class="hljs-type">Time</span>: <span class="hljs-number">523.663</span> ms<br>mydb=#<br>mydb=# <span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> test_pglz <span class="hljs-keyword">select</span> repeat(<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-number">204800</span>) <span class="hljs-keyword">from</span> generate_series(<span class="hljs-number">1</span>, <span class="hljs-number">10000</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-number">0</span> <span class="hljs-number">10000</span><br><span class="hljs-type">Time</span>: <span class="hljs-number">34295.272</span> ms (<span class="hljs-number">00</span>:<span class="hljs-number">34.295</span>)<br>mydb=#<br>mydb=# <span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> test_lz4 <span class="hljs-keyword">select</span> repeat(<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-number">204800</span>) <span class="hljs-keyword">from</span> generate_series(<span class="hljs-number">1</span>, <span class="hljs-number">10000</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-number">0</span> <span class="hljs-number">10000</span><br><span class="hljs-type">Time</span>: <span class="hljs-number">527.297</span> ms<br>mydb=#<br>mydb=# <span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> test_pglz <span class="hljs-keyword">select</span> repeat(<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-number">204800</span>) <span class="hljs-keyword">from</span> generate_series(<span class="hljs-number">1</span>, <span class="hljs-number">10000</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-number">0</span> <span class="hljs-number">10000</span><br><span class="hljs-type">Time</span>: <span class="hljs-number">33774.475</span> ms (<span class="hljs-number">00</span>:<span class="hljs-number">33.774</span>)<br>mydb=#<br>mydb=# <span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> test_lz4 <span class="hljs-keyword">select</span> repeat(<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-number">204800</span>) <span class="hljs-keyword">from</span> generate_series(<span class="hljs-number">1</span>, <span class="hljs-number">10000</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-number">0</span> <span class="hljs-number">10000</span><br><span class="hljs-type">Time</span>: <span class="hljs-number">588.888</span> ms<br>mydb=#<br>mydb=# <span class="hljs-keyword">select</span> pg_size_pretty(pg_table_size(<span class="hljs-string">&#x27;test_lz4&#x27;</span>)) size_of_lz4, pg_size_pretty(pg_table_size(<span class="hljs-string">&#x27;test_pglz&#x27;</span>)) size_of_pglz;<br> size_of_lz4 | size_of_pglz<br><span class="hljs-comment">-------------+--------------</span><br> <span class="hljs-number">25</span> MB       | <span class="hljs-number">118</span> MB<br>(<span class="hljs-number">1</span> <span class="hljs-keyword">row</span>)<br><br><span class="hljs-type">Time</span>: <span class="hljs-number">0.548</span> ms<br>mydb=#<br><br></code></pre></td></tr></table></figure>
<p>好家伙, lz4相比pglz来说, 对于压缩比高的数据, 不仅空间占用更小, 效率更是大大提高。</p>
]]></content>
      <categories>
        <category>COMPRESSION</category>
        <category>POstgreSQL</category>
        <category>lz4</category>
        <category>pglz</category>
      </categories>
      <tags>
        <tag>COMPRESSION</tag>
        <tag>POstgreSQL</tag>
        <tag>lz4</tag>
        <tag>pglz</tag>
      </tags>
  </entry>
  <entry>
    <title>PostgreSQL旧触发器分区表更换为新分区表</title>
    <url>/PostgreSQL/partition-table/PostgreSQL_old_partition_change_to_new_partition/</url>
    <content><![CDATA[<p>利用PostgreSQL新分区表attach功能，完成旧分区表替换成新分区表</p>
<a id="more"></a>
<h1 id="创建旧分区表-仅用于测试，触发器函数就不写了"><a href="#创建旧分区表-仅用于测试，触发器函数就不写了" class="headerlink" title="创建旧分区表 (仅用于测试，触发器函数就不写了)"></a>创建旧分区表 (仅用于测试，触发器函数就不写了)</h1><figure class="highlight routeros"><table><tr><td class="code"><pre><code class="hljs routeros"><span class="hljs-attribute">mydb</span>=# create table t_partition(id int, name text, create_time timestamptz);<br>CREATE TABLE<br><span class="hljs-attribute">mydb</span>=#<br><span class="hljs-attribute">mydb</span>=# create table t_old_child_2020() inherits ( t_partition);<br>CREATE TABLE<br><span class="hljs-attribute">mydb</span>=# \d+ t_old_child_2020<br>                                                Table <span class="hljs-string">&quot;public.t_old_child_2020&quot;</span><br>   Column    |          <span class="hljs-built_in"> Type </span>          | Collation | Nullable |<span class="hljs-built_in"> Default </span>| Storage  | Compression | Stats target | Description<br>-------------+--------------------------+-----------+----------+---------+----------+-------------+--------------+-------------<br> id          | integer                  |           |          |         | plain    |             |              |<br> name        | text                     |           |          |         | extended | pglz        |              |<br> create_time | timestamp with time zone |           |          |         | plain    |             |              |<br>Inherits: t_partition<br>Access method: heap<br><br><span class="hljs-attribute">mydb</span>=# create table t_old_child_2021() inherits ( t_partition);<br>CREATE TABLE<br><span class="hljs-attribute">mydb</span>=#<br><span class="hljs-attribute">mydb</span>=#<br><span class="hljs-attribute">mydb</span>=# \d+ t_partition<br>                                                  Table <span class="hljs-string">&quot;public.t_partition&quot;</span><br>   Column    |          <span class="hljs-built_in"> Type </span>          | Collation | Nullable |<span class="hljs-built_in"> Default </span>| Storage  | Compression | Stats target | Description<br>-------------+--------------------------+-----------+----------+---------+----------+-------------+--------------+-------------<br> id          | integer                  |           |          |         | plain    |             |              |<br> name        | text                     |           |          |         | extended | pglz        |              |<br> create_time | timestamp with time zone |           |          |         | plain    |             |              |<br>Child tables: t_old_child_2020,<br>              t_old_child_2021<br>Access method: heap<br><br><span class="hljs-attribute">mydb</span>=# alter table t_old_child_2020 <span class="hljs-builtin-name">add</span> check (create_time&gt;=<span class="hljs-string">&#x27;2020-01-01 00:00:00&#x27;</span> <span class="hljs-keyword">and</span> create_time&lt;<span class="hljs-string">&#x27;2021-01-01 00:00:00&#x27;</span> );<br>ALTER TABLE<br><span class="hljs-attribute">mydb</span>=#<br><span class="hljs-attribute">mydb</span>=# alter table t_old_child_2021 <span class="hljs-builtin-name">add</span> check (create_time&gt;=<span class="hljs-string">&#x27;2021-01-01 00:00:00&#x27;</span> <span class="hljs-keyword">and</span> create_time&lt;<span class="hljs-string">&#x27;2022-01-01 00:00:00&#x27;</span> );<br>ALTER TABLE<br><span class="hljs-attribute">mydb</span>=#<br><span class="hljs-attribute">mydb</span>=# insert into t_old_child_2020 select 1, <span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;2020-03-01 00:00:00&#x27;</span>;<br>INSERT 0 1<br><span class="hljs-attribute">mydb</span>=# insert into t_old_child_2021 select 1, <span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;2021-03-01 00:00:00&#x27;</span>;<br>INSERT 0 1<br><span class="hljs-attribute">mydb</span>=#<br><br></code></pre></td></tr></table></figure>
<h1 id="创建新分区表"><a href="#创建新分区表" class="headerlink" title="创建新分区表"></a>创建新分区表</h1><figure class="highlight pgsql"><table><tr><td class="code"><pre><code class="hljs pgsql">mydb=# <span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> t_partition_new(id <span class="hljs-type">int</span>, <span class="hljs-type">name</span> <span class="hljs-type">text</span>, create_time <span class="hljs-type">timestamptz</span>) <span class="hljs-keyword">partition by range</span>(create_time);<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span><br>mydb=# <br><br></code></pre></td></tr></table></figure>
<h1 id="交换分区表"><a href="#交换分区表" class="headerlink" title="交换分区表"></a>交换分区表</h1><figure class="highlight pgsql"><table><tr><td class="code"><pre><code class="hljs pgsql">db=# <span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> t_old_child_2020 <span class="hljs-keyword">no</span> <span class="hljs-keyword">inherit</span> t_partition;<br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span><br>mydb=# <span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> t_partition_new <span class="hljs-keyword">attach partition</span> t_old_child_2020 <span class="hljs-keyword">for</span> <span class="hljs-keyword">values</span> <span class="hljs-keyword">from</span> (<span class="hljs-string">&#x27;2020-01-01 00:00:00&#x27;</span>) <span class="hljs-keyword">to</span> (<span class="hljs-string">&#x27;2021-01-01 00:00:00&#x27;</span>);<br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span><br>mydb=# <br>mydb=# <span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> t_old_child_2021 <span class="hljs-keyword">no</span> <span class="hljs-keyword">inherit</span> t_partition;<br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span><br>mydb=# <br>mydb=# <span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> t_partition_new <span class="hljs-keyword">attach partition</span> t_old_child_2021 <span class="hljs-keyword">for</span> <span class="hljs-keyword">values</span> <span class="hljs-keyword">from</span> (<span class="hljs-string">&#x27;2021-01-01 00:00:00&#x27;</span>) <span class="hljs-keyword">to</span> (<span class="hljs-string">&#x27;2022-01-01 00:00:00&#x27;</span>);<br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span><br>mydb=# <br>mydb=# <span class="hljs-keyword">begin</span> ;<span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> t_partition <span class="hljs-keyword">rename</span>  <span class="hljs-keyword">to</span> t_partition_old; <span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> t_partition_new <span class="hljs-keyword">rename</span> <span class="hljs-keyword">to</span> t_partition; <span class="hljs-keyword">commit</span>;<br><span class="hljs-keyword">BEGIN</span><br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span><br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span><br><span class="hljs-keyword">COMMIT</span><br>mydb=# <br><br></code></pre></td></tr></table></figure>
<h1 id="验证数据"><a href="#验证数据" class="headerlink" title="验证数据"></a>验证数据</h1><figure class="highlight angelscript"><table><tr><td class="code"><pre><code class="hljs angelscript">mydb=# table  t_partition;<br> id | name |      create_time<br>----+------+------------------------<br>  <span class="hljs-number">1</span> | a    | <span class="hljs-number">2020</span><span class="hljs-number">-03</span><span class="hljs-number">-01</span> <span class="hljs-number">00</span>:<span class="hljs-number">00</span>:<span class="hljs-number">00</span>+<span class="hljs-number">08</span><br>  <span class="hljs-number">1</span> | a    | <span class="hljs-number">2021</span><span class="hljs-number">-03</span><span class="hljs-number">-01</span> <span class="hljs-number">00</span>:<span class="hljs-number">00</span>:<span class="hljs-number">00</span>+<span class="hljs-number">08</span><br>(<span class="hljs-number">2</span> rows)<br><br>mydb=#<br><br></code></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>PostgreSQL</category>
        <category>partition table</category>
      </categories>
      <tags>
        <tag>PostgreSQL</tag>
        <tag>partition table</tag>
      </tags>
  </entry>
  <entry>
    <title>PostgreSQL 13 新特性汇总</title>
    <url>/PostgreSQL/release-note/PostgreSQL_13_release_note/</url>
    <content><![CDATA[<p>PostgreSQL 13 Beta1版本已于2020-05-21发行，目前最新版为Beta2，尽管 PostgreSQL 13 版本没有像10、11、12版本新增重量级的功能，但13版本依然增加了不少新特性和功能提升，值得细细研究。</p>
<p>PostgreSQL 13 典型变化如下:</p>
<p>逻辑复制支持分区表<br>Btree索引优化(引入Deduplication技术)<br>增量排序(Incremental Sorting)<br>并行VACUUM索引<br>并行Reindexdb<br>手册新增术语(Glossary)附录</p>
<p>本文从新特性、性能提升、数据库管理、其它亮点四方面详细介绍 PostgreSQL 13的变化。</p>
<a id="more"></a>
<h1 id="新特性"><a href="#新特性" class="headerlink" title="新特性"></a>新特性</h1><figure class="highlight angelscript"><table><tr><td class="code"><pre><code class="hljs angelscript">PostgreSQL <span class="hljs-number">13</span>: 逻辑复制支持分区表<br>PostgreSQL <span class="hljs-number">13</span>: CREATE SUBSCRIPTION新增publish_via_partition_root选项支持异构分区表间的数据逻辑复制<br>PostgreSQL <span class="hljs-number">13</span>: 新增内置函数Gen_random_uuid()生成UUID数据<br></code></pre></td></tr></table></figure>
<h1 id="性能提升"><a href="#性能提升" class="headerlink" title="性能提升"></a>性能提升</h1><figure class="highlight angelscript"><table><tr><td class="code"><pre><code class="hljs angelscript">PostgreSQL <span class="hljs-number">13</span>: Btree索引优化(引入Deduplication技术)<br>PostgreSQL <span class="hljs-number">13</span>: 支持增量排序(Incremental Sorting)<br></code></pre></td></tr></table></figure>
<h1 id="数据库管理"><a href="#数据库管理" class="headerlink" title="数据库管理"></a>数据库管理</h1><figure class="highlight pgsql"><table><tr><td class="code"><pre><code class="hljs pgsql">PostgreSQL <span class="hljs-number">13</span>: <span class="hljs-keyword">EXPLAIN</span>、Auto_explain、autovacuum、pg_stat_statements跟踪WAL使用信息<br>PostgreSQL <span class="hljs-number">13</span>: 新增log_min_duration_sample参数控制日志记录的慢<span class="hljs-keyword">SQL</span>百分比<br>PostgreSQL <span class="hljs-number">13</span>: 系统视图pg_stat_activity新增leader_pid字段显示父进程信息<br>PostgreSQL <span class="hljs-number">13</span>: 新增pg_stat_progress_analyze视图监控表分析进度<br>PostgreSQL <span class="hljs-number">13</span>: pg_stat_statements视图新增执行计划耗时信息<br>PostgreSQL <span class="hljs-number">13</span>: psql客户端提示符新增%x变量显示事务状态<br>PostgreSQL <span class="hljs-number">13</span>: <span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span>命令新增<span class="hljs-keyword">DROP</span> EXPRESSION选项<br>PostgreSQL <span class="hljs-number">13</span>: Reindexdb命令新增-j选项，支持全库并行索引重建<br>PostgreSQL <span class="hljs-number">13</span>: 新增ignore_invalid_pages参数<br>PostgreSQL <span class="hljs-number">13</span>: 普通表数据逻辑复制到分区表<br>PostgreSQL <span class="hljs-number">13</span>: 多源逻辑复制实践<br></code></pre></td></tr></table></figure>
<h1 id="其它亮点"><a href="#其它亮点" class="headerlink" title="其它亮点"></a>其它亮点</h1><figure class="highlight apache"><table><tr><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">PostgreSQL</span> <span class="hljs-number">13</span>: 日期格式新增对FF<span class="hljs-number">1</span>-FF<span class="hljs-number">6</span>的支持<br><span class="hljs-attribute">PostgreSQL</span> <span class="hljs-number">13</span>: 手册中新增术语(Glossary)附录<br></code></pre></td></tr></table></figure>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://www.postgresql.org/about/news/postgresql-13-beta-1-released-2040/">PostgreSQL 13 Beta 1 Released!</a><br><a href="https://www.postgresql.org/docs/13/release-13.html">E.1. Release 13</a><br><a href="https://postgres.fun/20200724165800.html">PostgreSQL 13 新特性汇总</a></p>
]]></content>
      <categories>
        <category>PostgreSQL</category>
        <category>release note</category>
      </categories>
      <tags>
        <tag>PostgreSQL</tag>
        <tag>release note</tag>
      </tags>
  </entry>
  <entry>
    <title>PostgreSQL 12 新特性汇总</title>
    <url>/PostgreSQL/release-note/PostgreSQL_12_release_note/</url>
    <content><![CDATA[<p>尽管现阶段 PostgreSQL 12 才出 Beta3 版本，但 12 版本的新特性和正式版不会有太大出入，最近抽时间对 12 版本的新特性进行了探索，整体上 12 版本的变化不小。</p>
<p>12 版本的典型新特性如下:</p>
<pre><code>支持 SQL/JSON path
支持 Generated Columns
CTE 支持 Inlined With Queries
新增 Pluggable Table Storage Interface
分区表性能大辐提升
在线重建索引(Reindex Concurrently)
</code></pre><a id="more"></a>
<p>详见以下，文中的链接对每一个特性进行了介绍。<br>新功能</p>
<p>12 版本新功能主要包括 JSON path queries 、Generated Columns、Pluggable Table Storage Interface，如下:</p>
<pre><code>PostgreSQL 12: 支持 SQL/JSON path 特性
PostgreSQL 12: 支持 Generated Columns 特性
PostgreSQL 12: 新增 Pluggable Table Storage Interface
</code></pre><p>性能优化</p>
<p>12 版本性能提升主要体现在分区表性能提升、CTE 支持 Inlined With Queries、Btree 索引性能提升等，如下:</p>
<pre><code>PostgreSQL 12: 分区表DML性能大辐提升
PostgreSQL 12: 分区表数据导入性能提升
PostgreSQL 12: CTE 支持 Inlined With Queries
PostgreSQL 12: 新增 plan_cache_mode 参数设置执行计划策略
</code></pre><p>备份复制相关</p>
<p>备份、复制相关变化较大，包括配置文件的变化、新增流复制备库激活方式、max_wal_senders连接数变化等，如下:</p>
<pre><code>PostgreSQL 12: Recovery.conf 文件参数合并到 postgresql.conf
PostgreSQL 12: 新增 pg_promote() 函数用于激活备库(流复制主备切换)
PostgreSQL 12: COPY FROM 命令支持 WHERE 过滤条件
PostgreSQL 12: max_wal_senders 连接数从 max_connections 剥离
</code></pre><p>监控相关</p>
<p>监控方面主要体现在支持在线重建索引、新增 pg_stat_progress_create_index 视图监控索引创建进度、新增 log_statement_sample_rate 参数控制数据库日志中慢SQL百分比等，如下:</p>
<pre><code>PostgreSQL 12: 支持在线重建索引(Reindex Concurrently)
PostgreSQL 12: 新增 pg_stat_progress_create_index 视图监控索引创建进度
PostgreSQL 12: 新增 log_statement_sample_rate 参数控制数据库日志中慢SQL百分比
PostgreSQL 12: 新增 pg_partition_tree() 函数显示分区表信息
</code></pre><p>其它</p>
<p>其它方面的增强主要体现在命令行工具，如下:</p>
<pre><code>PostgreSQL 12: psql 命令增强
PostgreSQL 12: EXPLAIN 新增 SETTINGS 选项显示非默认优化器参数
PostgreSQL 12: pgbench 新增 \gset 命令支持将SQL结果存入变量
PostgreSQL 12: VACUUM 新增 INDEX_CLEANUP 选项控制是否回收索引
</code></pre><p>参考</p>
<p><a href="https://www.postgresql.org/about/news/postgresql-12-beta-1-released-1943/">PostgreSQL 12 Beta 1 Released!</a></p>
]]></content>
      <categories>
        <category>PostgreSQL</category>
        <category>release note</category>
      </categories>
      <tags>
        <tag>PostgreSQL</tag>
        <tag>release note</tag>
      </tags>
  </entry>
  <entry>
    <title>PostgreSQL 11 新特性汇总</title>
    <url>/PostgreSQL/release-note/PostgreSQL_11_release_note/</url>
    <content><![CDATA[<p>2018-10-18 PostgreSQL官网 宣布 PostgreSQL 11 正式版发行，PostgreSQL 11 重点对性能进行了提升和功能完善，特别是对大数据库和高计算负载的情况下进行了增强，主要包括以下:</p>
<pre><code>对分区表进行了大幅的改进和增强。
增加了对存储过程的支持，存储过程支持事务。
增强了并行查询能力和并行数据定义能力。
增加了对 just-in-time (JIT) 编译的支持，加速SQL中的表达式执行效率。
</code></pre><p>最近对PostgreSQL以上新特性和其它功能完善做了演示，希望对PostgreSQL从业者有帮助，详见以下。<br>分区表的改进</p>
<a id="more"></a>
<p>PostgreSQL 11 对分区表进行了重大的改进，例如增加了哈希分区、支持创建主键、外键、索引、支持UPDATE分区键以及增加了默认分区，这些功能的完善极大的增强了分区表的可用性，详见以下:</p>
<pre><code>PostgreSQL11: 分区表增加哈希分区
PostgreSQL11：分区表支持创建主键、外键、索引
PostgreSQL11: 分区表支持UPDATE分区键
PostgreSQL11: 分区表增加 Default Partition
</code></pre><p>支持存储过程</p>
<p>PostgreSQL 11 版本一个重量级新特性是对存储过程的支持，同时支持存储过程嵌入事务，存储过程是很多 PostgreSQL 从业者期待已久的特性，尤其是很多从Oracle转到PostgreSQL朋友。</p>
<p>尽管PostgreSQL提供函数可以实现大多数存储过程的功能，但函数不支持部分提交，换句话说，函数中的SQL要么都执行成功，要不全部返回失败，详见以下:</p>
<pre><code>PostgreSQL11: 支持存储过程(SQL Stored Procedures)
</code></pre><p>并行能力的增强</p>
<p>PostgreSQL 11 版本在并行方面得到较大增强，例如支持并行创建索引、并行Hash Join、并行 CREATE TABLE .. AS等，详见以下:</p>
<pre><code>PostgreSQL11：支持并行创建索引(Parallel Index Builds)
PostgreSQL11：支持并行哈希连接(Parallel Hash Joins)
</code></pre><p>增加对Just-in-Time (JIT)编译的支持</p>
<p>PostgreSQL 11 版本的一个重量级新特性是引入了 JIT (Just-in-Time) 编译来加速SQL中的表达式计算效率。</p>
<p>JIT 表达式的编译使用LLVM项目编译器来提升在WHERE条件、指定列表、聚合以及一些内部操作表达式的编译执行，详见以下:</p>
<pre><code>PostgreSQL11: 增加对JIT(just-in-time)编译的支持提升分析型SQL执行效率
</code></pre><p>其它功能完善</p>
<p>此外， PostgreSQL 11 增强了其它新特性以增加用户体验，以下列举了主要的几点，详见以下:</p>
<pre><code>PostgreSQL11: 新增非空默认值字段不需要重写表
PostgreSQL11: Indexs With Include Columns
PostgreSQL11: 新增三个默认角色
PostgreSQL11: 可通过GRNAT权限下放的四个系统函数
PostgreSQL11: Initdb/Pg_resetwal支持修改WAL文件大小
PostgreSQL11: psql 新增 \gdesc 显示查询结果的列名和类型
PostgreSQL11: psql 新增变量记录SQL语句的执行情况和错误
</code></pre><p>关于PostgreSQL</p>
<p>PostgreSQL 号称世界上最先进的开源关系型数据库，PostgreSQL 全球社区是一个由数千名用户、开发人员、公司或其他组织组成。 PostgreSQL 起源于加利福利亚的伯克利大学，有30年以上历史，经历了无数次开发升级。</p>
<p>PostgreSQL 的出众之处在于不仅具有商业数据库的功能特性，同时在扩展性、安全性、稳定性等高级数据库特性方面超越了它们。</p>
<p>若想获取到更多关于PostgreSQL的信息或者加入PostgreSQL社区，请浏览官网 PostgreSQL.org 。</p>
<p>参考</p>
<pre><code>[PostgreSQL 11 Released!](https://www.postgresql.org/about/news/postgresql-11-released-1894/)
[PostgreSQL 11 有哪些引人瞩目的新特性？](https://postgres.fun/20181102084300.html)
</code></pre>]]></content>
      <categories>
        <category>PostgreSQL</category>
        <category>release note</category>
      </categories>
      <tags>
        <tag>PostgreSQL</tag>
        <tag>release note</tag>
      </tags>
  </entry>
  <entry>
    <title>PostgreSQL 10 新特性汇总</title>
    <url>/PostgreSQL/release-note/PostgreSQL_10_release_note/</url>
    <content><![CDATA[<p>PostgreSQL10Beta1 版本于 2017年5月18日发行，PostgreSQL 10 新增了大量新特性，其中特重量级新特性如下：</p>
<pre><code>内置分区表（ Native Table Partitioning）
逻辑复制（Logical Replication）
并行功能增强（Enhancement of Parallel Query）
Quorum Commit for Synchronous Replication
全文检索支持JSON和JSONB数据类型
</code></pre><p>其它新特性详见 PostgreSQL10 Release ，这里不详细列出，由于时间和精力的关系，目前仅对部分新特性进行演示，详见以下博客：</p>
<pre><code>PostgreSQL10：重量级新特性-支持分区表
PostgreSQL10：Parallel Queries 增强
PostgreSQL10：Additional FDW Push-Down
PostgreSQL10：逻辑复制（Logical Replication）之一
PostgreSQL10：逻辑复制（Logical Replication）之二
PostgreSQL10：Quorum Commit for Synchronous Replication
PostgreSQL10：Multi-column Correlation Statistics
PostgreSQL10：新增 pg_hba_file_rules 视图
PostgreSQL10：全文检索支持 JSON 和 JSONB
PostgreSQL10：Identity Columns 特性介绍
PostgreSQL10：Incompatible Changes
PostgreSQL10：新增 pg_sequence 系统表
</code></pre><p>参考<br><a href="https://www.postgresql.org/docs/10/release-10.html">E.17. Release 10</a></p>
]]></content>
      <categories>
        <category>PostgreSQL</category>
        <category>release note</category>
      </categories>
      <tags>
        <tag>PostgreSQL</tag>
        <tag>release note</tag>
      </tags>
  </entry>
  <entry>
    <title>TimescaleDB 使用记录</title>
    <url>/PostgreSQL/TimescaleDB/PostgreSQL_timescaledb/</url>
    <content><![CDATA[<p>记录timescaledb使用过程中遇到的一些问题及解决方案</p>
<a id="more"></a>
<h1 id="用函数的方式重启TimescaleDB-Background-Worker-Scheduler-不影响业务的正常使用"><a href="#用函数的方式重启TimescaleDB-Background-Worker-Scheduler-不影响业务的正常使用" class="headerlink" title="用函数的方式重启TimescaleDB Background Worker Scheduler, 不影响业务的正常使用"></a>用函数的方式重启TimescaleDB Background Worker Scheduler, 不影响业务的正常使用</h1><figure class="highlight routeros"><table><tr><td class="code"><pre><code class="hljs routeros">postgres@jintao-ThinkPad-L490:~/timescaledb-1.7.5/sql$ psql<br>psql (12.3)<br>Type <span class="hljs-string">&quot;help&quot;</span> <span class="hljs-keyword">for</span> help.<br><br><span class="hljs-attribute">postgres</span>=# CREATE <span class="hljs-keyword">OR</span> REPLACE FUNCTION _timescaledb_internal.restart_background_workers()<br>RETURNS BOOL<br>AS <span class="hljs-string">&#x27;/home/postgres/pg12/lib/timescaledb&#x27;</span>, <span class="hljs-string">&#x27;ts_bgw_db_workers_restart&#x27;</span><br>LANGUAGE C VOLATILE;<br>CREATE FUNCTION<br><span class="hljs-attribute">postgres</span>=#<br><br>postgres@jintao-ThinkPad-L490:~/pg12/lib$ ps -ef|grep <span class="hljs-string">&quot;TimescaleDB Background Worker Scheduler&quot;</span><br>postgres 2641542 2634972  0 16:11 ?        00:00:00 postgres: TimescaleDB Background Worker Scheduler<br>postgres 2641572 2544080  0 16:12 pts/9    00:00:00 grep <span class="hljs-attribute">--color</span>=auto TimescaleDB Background Worker Scheduler<br>postgres@jintao-ThinkPad-L490:~/pg12/lib$<br>postgres@jintao-ThinkPad-L490:~/pg12/lib$<br>postgres@jintao-ThinkPad-L490:~/pg12/lib$ psql -c <span class="hljs-string">&quot;select _timescaledb_internal.restart_background_workers();&quot;</span><br> restart_background_workers<br>----------------------------<br> t<br>(1 row)<br><br>postgres@jintao-ThinkPad-L490:~/pg12/lib$ ps -ef|grep <span class="hljs-string">&quot;TimescaleDB Background Worker Scheduler&quot;</span><br>postgres 2641592 2634972  1 16:12 ?        00:00:00 postgres: TimescaleDB Background Worker Scheduler<br>postgres 2641594 2544080  0 16:12 pts/9    00:00:00 grep <span class="hljs-attribute">--color</span>=auto TimescaleDB Background Worker Scheduler<br>postgres@jintao-ThinkPad-L490:~/pg12/lib$<br><br></code></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>PostgreSQL</category>
        <category>TimescaleDB</category>
      </categories>
      <tags>
        <tag>PostgreSQL</tag>
        <tag>TimescaleDB</tag>
      </tags>
  </entry>
  <entry>
    <title>SQL正则判断字符串是不是数字</title>
    <url>/PostgreSQL/regexp/Linux_string_is_digit/</url>
    <content><![CDATA[<p>SQL正则判断字符串是不是数字</p>
<a id="more"></a>
<figure class="highlight asciidoc"><table><tr><td class="code"><pre><code class="hljs asciidoc">test=# select <span class="hljs-emphasis">&#x27;11.1.1.1&#x27;</span> ~ <span class="hljs-emphasis">&#x27;^(-?\d+)(\.\d+)?$&#x27;</span>;<br><span class="hljs-code"> ?column?</span><br>----------<br><span class="hljs-code"> f</span><br>(1 row)<br><br>test=# select <span class="hljs-emphasis">&#x27;11.1&#x27;</span> ~ <span class="hljs-emphasis">&#x27;^(-?\d+)(\.\d+)?$&#x27;</span>;<br><span class="hljs-code"> ?column?</span><br>----------<br><span class="hljs-code"> t</span><br>(1 row)<br><br>test=# select <span class="hljs-emphasis">&#x27;-11.1&#x27;</span> ~ <span class="hljs-emphasis">&#x27;^(-?\d+)(\.\d+)?$&#x27;</span>;<br><span class="hljs-code"> ?column?</span><br>----------<br><span class="hljs-code"> t</span><br>(1 row)<br><br>test=# select <span class="hljs-emphasis">&#x27;-11.1a&#x27;</span> ~ <span class="hljs-emphasis">&#x27;^(-?\d+)(\.\d+)?$&#x27;</span>;<br><span class="hljs-code"> ?column?</span><br>----------<br><span class="hljs-code"> f</span><br>(1 row)<br><br>test=# select <span class="hljs-emphasis">&#x27;-11&#x27;</span> ~ <span class="hljs-emphasis">&#x27;^(-?\d+)(\.\d+)?$&#x27;</span>;<br><span class="hljs-code"> ?column?</span><br>----------<br><span class="hljs-code"> t</span><br>(1 row)<br><br>test=#<br></code></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>PostgreSQL</category>
        <category>regexp</category>
      </categories>
      <tags>
        <tag>PostgreSQL</tag>
        <tag>regexp</tag>
      </tags>
  </entry>
  <entry>
    <title>PostgreSQL 12 实现 MYSQL ON UPDATE CURRENT_TIMESTAMPTZ功能</title>
    <url>/PostgreSQL/default/on-update/PostgreSQL_on_Update_current_timestamptz/</url>
    <content><![CDATA[<p>PostgreSQL 12 实现 MYSQL ON UPDATE CURRENT_TIMESTAMPTZ功能</p>
<a id="more"></a>
<figure class="highlight routeros"><table><tr><td class="code"><pre><code class="hljs routeros"><span class="hljs-attribute">postgres</span>=# create <span class="hljs-keyword">or</span> replace function im_now () returns timestamptz as $$<br>postgres<span class="hljs-variable">$#</span>   select CURRENT_TIMESTAMP;<br>postgres<span class="hljs-variable">$#</span> $$ language sql strict immutable;<br>CREATE FUNCTION<br><br><span class="hljs-attribute">postgres</span>=# create table test_generated (id int primary key, <span class="hljs-builtin-name">info</span> text, crt_time timestamp, <br>mod_time timestamp GENERATED ALWAYS AS (im_now()) stored);<br>CREATE TABLE<br><br><span class="hljs-attribute">postgres</span>=# table  test_generated ;<br> id | <span class="hljs-builtin-name">info</span> | crt_time | mod_time<br>----+------+----------+----------<br>(0 rows)<br><br><span class="hljs-attribute">postgres</span>=# insert into test_generated select 1;<br>INSERT 0 1<br><span class="hljs-attribute">postgres</span>=# table  test_generated ;<br> id | <span class="hljs-builtin-name">info</span> | crt_time |          mod_time<br>----+------+----------+----------------------------<br>  1 |      |          | 2021-04-21 14:54:24.886718<br>(1 row)<br><br><span class="hljs-attribute">postgres</span>=# insert into test_generated select 2;<br>INSERT 0 1<br><span class="hljs-attribute">postgres</span>=# table  test_generated ;<br> id | <span class="hljs-builtin-name">info</span> | crt_time |          mod_time<br>----+------+----------+----------------------------<br>  1 |      |          | 2021-04-21 14:54:24.886718<br>  2 |      |          | 2021-04-21 14:54:29.742564<br>(2 rows)<br><br><span class="hljs-attribute">postgres</span>=# update test_generated <span class="hljs-builtin-name">set</span> <span class="hljs-builtin-name">info</span> = <span class="hljs-string">&#x27;a&#x27;</span> where id =1;<br>UPDATE 1<br><span class="hljs-attribute">postgres</span>=# update test_generated <span class="hljs-builtin-name">set</span> <span class="hljs-builtin-name">info</span> = <span class="hljs-string">&#x27;a&#x27;</span> where id =2;<br>UPDATE 1<br><span class="hljs-attribute">postgres</span>=# table  test_generated ;<br> id | <span class="hljs-builtin-name">info</span> | crt_time |          mod_time<br>----+------+----------+----------------------------<br>  1 | a    |          | 2021-04-21 14:54:46.63875<br>  2 | a    |          | 2021-04-21 14:54:48.158909<br>(2 rows)<br><br><span class="hljs-attribute">postgres</span>=# \d+ test_generated<br>                                                         Table <span class="hljs-string">&quot;public.test_generated&quot;</span><br>  Column  |           <span class="hljs-built_in"> Type </span>            | Collation | Nullable |               <span class="hljs-built_in"> Default </span>               | Storage  | Stats target | Description<br>----------+-----------------------------+-----------+----------+---------------------------------------+----------+--------------+-------------<br> id       | integer                     |           | <span class="hljs-keyword">not</span> <span class="hljs-literal">null</span> |                                       | plain    |              |<br> <span class="hljs-builtin-name">info</span>     | text                        |           |          |                                       | extended |              |<br> crt_time | timestamp without time zone |           |          |                                       | plain    |              |<br> mod_time | timestamp without time zone |           |          | generated always as (im_now()) stored | plain    |              |<br>Indexes:<br>    <span class="hljs-string">&quot;test_generated_pkey&quot;</span> PRIMARY KEY, btree (id)<br>Access method: heap<br><br><span class="hljs-attribute">postgres</span>=#<br><br></code></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>PostgreSQL</category>
        <category>default</category>
        <category>on update</category>
      </categories>
      <tags>
        <tag>PostgreSQL</tag>
        <tag>default</tag>
        <tag>on update</tag>
      </tags>
  </entry>
  <entry>
    <title>PostgreSQL 游标获取多行</title>
    <url>/PostgreSQL/refcursor/cursor/PostgreSQL_refcursor_fetch_multiple_rows/</url>
    <content><![CDATA[<p>函数/匿名块/存储过程中游标返回多行数据.</p>
<a id="more"></a>
<h1 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h1><figure class="highlight pgsql"><table><tr><td class="code"><pre><code class="hljs pgsql">postgres=# <span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> t(id <span class="hljs-type">int</span>);<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span><br>postgres=#<br>postgres=# <span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> t <span class="hljs-keyword">select</span> generate_series(<span class="hljs-number">1</span>,<span class="hljs-number">100</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-number">0</span> <span class="hljs-number">100</span><br>postgres=#<br><br></code></pre></td></tr></table></figure>
<h1 id="匿名块"><a href="#匿名块" class="headerlink" title="匿名块"></a>匿名块</h1><figure class="highlight pgsql"><table><tr><td class="code"><pre><code class="hljs pgsql">postgres=# <span class="hljs-keyword">do</span><br>$$<br><span class="pgsql"><span class="hljs-keyword">declare</span> cur <span class="hljs-keyword">cursor</span> <span class="hljs-keyword">for</span> <span class="hljs-keyword">select</span> id <span class="hljs-keyword">from</span>  t; <span class="hljs-keyword">row</span> <span class="hljs-type">record</span>;</span><br><span class="pgsql"><span class="hljs-keyword">begin</span></span><br><span class="pgsql">  <span class="hljs-keyword">open</span> cur;</span><br><span class="pgsql">  <span class="hljs-keyword">for</span> <span class="hljs-keyword">row</span> <span class="hljs-keyword">in</span> <span class="hljs-keyword">execute</span> <span class="hljs-string">&#x27;fetch 10 from cur&#x27;</span></span><br><span class="pgsql">  <span class="hljs-keyword">loop</span></span><br><span class="pgsql">      <span class="hljs-keyword">raise</span> <span class="hljs-keyword">notice</span> <span class="hljs-string">&#x27;%&#x27;</span>, <span class="hljs-keyword">row</span>.id;</span><br><span class="pgsql">  <span class="hljs-keyword">end</span> <span class="hljs-keyword">loop</span>;</span><br><br><span class="pgsql">  <span class="hljs-keyword">for</span> <span class="hljs-keyword">row</span> <span class="hljs-keyword">in</span> <span class="hljs-keyword">execute</span> <span class="hljs-string">&#x27;fetch 10 from cur&#x27;</span></span><br><span class="pgsql">  <span class="hljs-keyword">loop</span></span><br><span class="pgsql">      <span class="hljs-keyword">raise</span> <span class="hljs-keyword">notice</span> <span class="hljs-string">&#x27;%&#x27;</span>, <span class="hljs-keyword">row</span>.id;</span><br><span class="pgsql">  <span class="hljs-keyword">end</span> <span class="hljs-keyword">loop</span>;</span><br><br><span class="pgsql">  <span class="hljs-keyword">close</span> cur;</span><br><br><span class="pgsql"><span class="hljs-keyword">end</span>;</span><br><span class="ruby">$$</span><span class="hljs-keyword">language</span> plpgsql;<br><span class="hljs-keyword">NOTICE</span>:  <span class="hljs-number">1</span><br><span class="hljs-keyword">NOTICE</span>:  <span class="hljs-number">2</span><br><span class="hljs-keyword">NOTICE</span>:  <span class="hljs-number">3</span><br><span class="hljs-keyword">NOTICE</span>:  <span class="hljs-number">4</span><br><span class="hljs-keyword">NOTICE</span>:  <span class="hljs-number">5</span><br><span class="hljs-keyword">NOTICE</span>:  <span class="hljs-number">6</span><br><span class="hljs-keyword">NOTICE</span>:  <span class="hljs-number">7</span><br><span class="hljs-keyword">NOTICE</span>:  <span class="hljs-number">8</span><br><span class="hljs-keyword">NOTICE</span>:  <span class="hljs-number">9</span><br><span class="hljs-keyword">NOTICE</span>:  <span class="hljs-number">10</span><br><span class="hljs-keyword">NOTICE</span>:  <span class="hljs-number">11</span><br><span class="hljs-keyword">NOTICE</span>:  <span class="hljs-number">12</span><br><span class="hljs-keyword">NOTICE</span>:  <span class="hljs-number">13</span><br><span class="hljs-keyword">NOTICE</span>:  <span class="hljs-number">14</span><br><span class="hljs-keyword">NOTICE</span>:  <span class="hljs-number">15</span><br><span class="hljs-keyword">NOTICE</span>:  <span class="hljs-number">16</span><br><span class="hljs-keyword">NOTICE</span>:  <span class="hljs-number">17</span><br><span class="hljs-keyword">NOTICE</span>:  <span class="hljs-number">18</span><br><span class="hljs-keyword">NOTICE</span>:  <span class="hljs-number">19</span><br><span class="hljs-keyword">NOTICE</span>:  <span class="hljs-number">20</span><br><span class="hljs-keyword">DO</span><br>postgres=#<br></code></pre></td></tr></table></figure>
<h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><figure class="highlight pgsql"><table><tr><td class="code"><pre><code class="hljs pgsql">postgres=# <span class="hljs-keyword">create</span> <span class="hljs-keyword">or replace</span> <span class="hljs-keyword">function</span> test_func() <span class="hljs-keyword">returns</span> <span class="hljs-keyword">setof</span> <span class="hljs-type">record</span> <span class="hljs-keyword">as</span><br>$$<br><span class="pgsql"><span class="hljs-keyword">declare</span> cur <span class="hljs-keyword">cursor</span> <span class="hljs-keyword">for</span> <span class="hljs-keyword">select</span> id <span class="hljs-keyword">from</span>  t; <span class="hljs-keyword">row</span> <span class="hljs-type">record</span>;</span><br><span class="pgsql"><span class="hljs-keyword">begin</span></span><br><span class="pgsql"><span class="hljs-keyword">open</span> cur; <span class="hljs-keyword">MOVE FORWARD</span> <span class="hljs-number">3</span> <span class="hljs-keyword">FROM</span> cur;</span><br><span class="pgsql">  <span class="hljs-keyword">for</span> <span class="hljs-keyword">row</span> <span class="hljs-keyword">in</span> <span class="hljs-keyword">execute</span> <span class="hljs-string">&#x27;fetch 10 from cur&#x27;</span></span><br><span class="pgsql">  <span class="hljs-keyword">loop</span></span><br><span class="pgsql">      <span class="hljs-keyword">raise</span> <span class="hljs-keyword">notice</span> <span class="hljs-string">&#x27;%&#x27;</span>, <span class="hljs-keyword">row</span>.id;</span><br><span class="pgsql">  <span class="hljs-keyword">end</span> <span class="hljs-keyword">loop</span>;</span><br><br><span class="pgsql">  <span class="hljs-keyword">for</span> <span class="hljs-keyword">row</span> <span class="hljs-keyword">in</span> <span class="hljs-keyword">execute</span> <span class="hljs-string">&#x27;fetch 10 from cur&#x27;</span></span><br><span class="pgsql">  <span class="hljs-keyword">loop</span></span><br><span class="pgsql">      <span class="hljs-keyword">raise</span> <span class="hljs-keyword">notice</span> <span class="hljs-string">&#x27;%&#x27;</span>, <span class="hljs-keyword">row</span>.id;</span><br><span class="pgsql">  <span class="hljs-keyword">end</span> <span class="hljs-keyword">loop</span>;</span><br><br><span class="pgsql">  <span class="hljs-keyword">close</span> cur;</span><br><br><span class="pgsql"><span class="hljs-keyword">end</span>;</span><br><span class="ruby">$$</span><span class="hljs-keyword">language</span> plpgsql;<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">FUNCTION</span><br>postgres=# \e<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">FUNCTION</span><br>postgres=#<br>postgres=#<br>postgres=# <span class="hljs-keyword">select</span> test_func();<br><span class="hljs-keyword">NOTICE</span>:  <span class="hljs-number">4</span><br><span class="hljs-keyword">NOTICE</span>:  <span class="hljs-number">5</span><br><span class="hljs-keyword">NOTICE</span>:  <span class="hljs-number">6</span><br><span class="hljs-keyword">NOTICE</span>:  <span class="hljs-number">7</span><br><span class="hljs-keyword">NOTICE</span>:  <span class="hljs-number">8</span><br><span class="hljs-keyword">NOTICE</span>:  <span class="hljs-number">9</span><br><span class="hljs-keyword">NOTICE</span>:  <span class="hljs-number">10</span><br><span class="hljs-keyword">NOTICE</span>:  <span class="hljs-number">11</span><br><span class="hljs-keyword">NOTICE</span>:  <span class="hljs-number">12</span><br><span class="hljs-keyword">NOTICE</span>:  <span class="hljs-number">13</span><br><span class="hljs-keyword">NOTICE</span>:  <span class="hljs-number">14</span><br><span class="hljs-keyword">NOTICE</span>:  <span class="hljs-number">15</span><br><span class="hljs-keyword">NOTICE</span>:  <span class="hljs-number">16</span><br><span class="hljs-keyword">NOTICE</span>:  <span class="hljs-number">17</span><br><span class="hljs-keyword">NOTICE</span>:  <span class="hljs-number">18</span><br><span class="hljs-keyword">NOTICE</span>:  <span class="hljs-number">19</span><br><span class="hljs-keyword">NOTICE</span>:  <span class="hljs-number">20</span><br><span class="hljs-keyword">NOTICE</span>:  <span class="hljs-number">21</span><br><span class="hljs-keyword">NOTICE</span>:  <span class="hljs-number">22</span><br><span class="hljs-keyword">NOTICE</span>:  <span class="hljs-number">23</span><br> test_func<br><span class="hljs-comment">-----------</span><br>(<span class="hljs-number">0</span> <span class="hljs-keyword">rows</span>)<br><br>postgres=#<br><br></code></pre></td></tr></table></figure>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><code class="hljs pgsql">postgres=# <span class="hljs-keyword">create</span> <span class="hljs-keyword">or replace</span> <span class="hljs-keyword">function</span> test_func()<br><span class="hljs-keyword">returns</span> <span class="hljs-keyword">setof</span> <span class="hljs-type">record</span><br><span class="hljs-keyword">as</span><br>$$<br><span class="pgsql"><span class="hljs-keyword">declare</span></span><br><span class="pgsql">  cur <span class="hljs-keyword">cursor</span> <span class="hljs-keyword">for</span> <span class="hljs-keyword">select</span> id <span class="hljs-keyword">from</span>  t;</span><br><span class="pgsql">  <span class="hljs-keyword">row</span> <span class="hljs-type">record</span>;</span><br><span class="pgsql"><span class="hljs-keyword">begin</span></span><br><span class="pgsql">  <span class="hljs-keyword">open</span> cur;</span><br><br><span class="pgsql">  <span class="hljs-keyword">MOVE FORWARD</span> <span class="hljs-number">3</span> <span class="hljs-keyword">FROM</span> cur;</span><br><br><span class="pgsql">  <span class="hljs-keyword">return query</span> <span class="hljs-keyword">execute</span> <span class="hljs-string">&#x27;fetch 10 from cur&#x27;</span>;</span><br><br><span class="pgsql">  <span class="hljs-keyword">close</span> cur;</span><br><br><span class="pgsql"><span class="hljs-keyword">end</span>;</span><br><span class="ruby">$$</span><span class="hljs-keyword">language</span> plpgsql;<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">FUNCTION</span><br><br>postgres=# <span class="hljs-keyword">select</span> id <span class="hljs-keyword">from</span>  test_func() <span class="hljs-keyword">as</span> t(id <span class="hljs-type">int</span>);<br> id<br><span class="hljs-comment">----</span><br>  <span class="hljs-number">4</span><br>  <span class="hljs-number">5</span><br>  <span class="hljs-number">6</span><br>  <span class="hljs-number">7</span><br>  <span class="hljs-number">8</span><br>  <span class="hljs-number">9</span><br> <span class="hljs-number">10</span><br> <span class="hljs-number">11</span><br> <span class="hljs-number">12</span><br> <span class="hljs-number">13</span><br>(<span class="hljs-number">10</span> <span class="hljs-keyword">rows</span>)<br><br>postgres=#<br></code></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>PostgreSQL</category>
        <category>refcursor</category>
        <category>cursor</category>
      </categories>
      <tags>
        <tag>PostgreSQL</tag>
        <tag>cursor</tag>
        <tag>refcursor</tag>
      </tags>
  </entry>
  <entry>
    <title>OpenSSL的简单使用</title>
    <url>/openssl/ssl/openssl/</url>
    <content><![CDATA[<p>OpenSSL 不仅仅是 SSL。它可以实现消息摘要、文件的加密和解密、数字证书、数字签名 和随机数字。关于 OpenSSL 库的内容非常多，远不是一篇文章可以容纳的。<br>OpenSSL 不只是 API，它还是一个命令行工具。命令行工具可以完成与 API 同样的工作， 而且更进一步，可以测试 SSL 服务器和客户机。它还让开发人员对 OpenSSL 的能力有一个 认识。要获得关于如何使用 OpenSSL 命令行工具的资料, 请参阅<a href="https://www.openssl.org/docs/apps/openssl.html">官方手册</a></p>
<a id="more"></a>
<h1 id="编译安装"><a href="#编译安装" class="headerlink" title="编译安装"></a>编译安装</h1><figure class="highlight routeros"><table><tr><td class="code"><pre><code class="hljs routeros">$ ./config<br>$ make<br>$ make test<br>$ make install<br></code></pre></td></tr></table></figure>
<h1 id="产生私钥"><a href="#产生私钥" class="headerlink" title="产生私钥"></a>产生私钥</h1><figure class="highlight gradle"><table><tr><td class="code"><pre><code class="hljs gradle">jintao@jintao-ThinkPad-L490:~<span class="hljs-regexp">/personal/</span>code$ openssl genrsa -out rsa_private_key.pem <span class="hljs-number">1024</span><br>Generating RSA <span class="hljs-keyword">private</span> key, <span class="hljs-number">1024</span> bit <span class="hljs-keyword">long</span> modulus (<span class="hljs-number">2</span> primes)<br>.......+++++<br>..............+++++<br>e is <span class="hljs-number">65537</span> (<span class="hljs-number">0</span>x010001)<br>jintao@jintao-ThinkPad-L490:~<span class="hljs-regexp">/personal/</span>code$ cat rsa_private_key.pem<br>-----BEGIN RSA <span class="hljs-keyword">PRIVATE</span> KEY-----<br>MIICXQIBAAKBgQC<span class="hljs-regexp">/DCmUwW3FwCLB4Wtm4jw+b5RCIRJwl/</span>QustuIyHmWsTXApp9v<br>pnRfZtojgh9FUjIsxWmg3Gc5gLn8r4k+pI8Fk77lff2ewSOM2ZVHZkmrFtg7vSmC<br>tVY+uPLjdw3aONYUXj3+cZgbpemLY0v07EkrwGS8jzztABlFauWreEvX1wIDAQAB<br>AoGAa/+<span class="hljs-number">8</span>IdOW8otDGscLqAWMeN8quJdpjSzZZOzHHfP2iDF1aYrH5p36e1PxTNFq<br>TA3DP3v50m3GDMOwYB<span class="hljs-regexp">/7PeZY0pvvrKPSunq0/</span>tbcVVjr2pKs3X1rRtZQ2X8EaH8f<br>IzKmQM+NT0Av0gLK6txJ4vONzbzuiGTqFtF/mRAJiHOMoIECQQDom1CFf49zVvtu<br>g88GwXlRGrOlfGHQ0vBj+h8dYc0AbWlrPjbkcOoThLvkgUhXCquaof<span class="hljs-regexp">/Ku4qDG/</span>VH<br><span class="hljs-number">0</span>YgAzuAfAkEA0kLdv<span class="hljs-regexp">/IafPTNCc83U/</span>hjUCoZhHYYiM5ghRRa2jMjmKQDogcHhvfb<br><span class="hljs-number">7</span>PaLOvxuWxWx<span class="hljs-regexp">/adIKLXRvcnGU9E/</span>LpgxSQJBAIvD<span class="hljs-regexp">/18n5bdFVbDzLGt/</span>x3ivVbCj<br>C1dh2CYKvbV29apDE+vnpy4eltgBkrDb6e67L5+rpbpYdAMRwpFT2qe5prsCQHRd<br>STgnlv08xhT9t1MjjmMZSZIDgcSE4uoDv9wunS6m5tPPLB1II1DbiWaVucVzFlSZ<br>NdhB99gfSUGt9lelJvECQQDRS7+I5nX0/ZhQDwb29ZMw1EhzczCQr0fIjDYHsCZ4<br>HJqOoycG9EvOQW99NDlYV5vUAhKu3QfdfCDsfjm0bCr5<br>-----END RSA <span class="hljs-keyword">PRIVATE</span> KEY-----<br>jintao@jintao-ThinkPad-L490:~<span class="hljs-regexp">/personal/</span>code$ openssl genrsa -out rsa_private_key.pem <span class="hljs-number">2048</span><br>Generating RSA <span class="hljs-keyword">private</span> key, <span class="hljs-number">2048</span> bit <span class="hljs-keyword">long</span> modulus (<span class="hljs-number">2</span> primes)<br>..+++++<br>.+++++<br>e is <span class="hljs-number">65537</span> (<span class="hljs-number">0</span>x010001)<br>jintao@jintao-ThinkPad-L490:~<span class="hljs-regexp">/personal/</span>code$ cat rsa_private_key.pem<br>-----BEGIN RSA <span class="hljs-keyword">PRIVATE</span> KEY-----<br>MIIEpAIBAAKCAQEAuaUSgbK540vy3TMpgREW2+apXbfYO3TvMmxWiupN9WypGOzA<br><span class="hljs-number">1</span>yFo/udaYWKvoPhEau2S9Z+oS5CV8e8KhEoJc6TJklipAj+SAtAKpBL0138Uwsv1<br>cRiGLKLWHz1hfqUZE6nReLz1rkTvnicestJvVvG7P1Ey4d9GF73VMWM+TGYXv+Mc<br>fsi2XeJGD9mz7bitsnKMsehqd0yy6rmOthu/<span class="hljs-number">3</span>CIj1xycOPs7dESt3gYUv+Ve7vGD<br>ZNKzieNlfO3Kv64KWsoXGNvkDMMklxQVLY8ceTtsqTBtqr5Cz0M27YkG39WtH5xJ<br>fgqUBu48mr7xZ5RoiXweB43xxvDweZAPZkW7JwIDAQABAoIBAF5Jzvp80hj1zCY5<br>BA1<span class="hljs-regexp">/poKNxtvIslSQcaTEjbgEhQ/</span>v3nrAVLlvSKqeyrLHsrgpIGbGv2ttacbnaqD0<br>bfz+tYo82fwwd7ainwA6tgzba+u/qcW+XazRbeRh2CsJu+jc5b2s9K1EG+wlKybC<br>a78bTl10bUwda6B5DFqmmg95fnzCSDgWOSGNs3k4Z3B45a0Rl73pQYTdGHb+SuX8<br>sYmuGMNaWz0nWPfLbzg2cxIeUTSJSmMhSYX8yChXKouUXwYmuBlAQeKxrsrTiQZI<br>EgW7hKykcebGvCBV<span class="hljs-regexp">/H9AVtoeBx0i31+TVrt672hVO6ZeGU6/</span>rydzIJ9BExJI3uTr<br>OrGJUeECgYEA3WXyVQ+MiCLduV2pY234ubsBQcvmxLs8Qx+<span class="hljs-number">2</span>K9BZQAGiK6Vm6hVj<br>jKIcRPopisxqU215oDsEm/lsH+qLqMLU7thng7yfw5EzGhhg23NW+<span class="hljs-number">4</span>rrr8Iz1F0v<br><span class="hljs-number">0</span>jLvjfh1Ff1E5ZVZpiAoXjv5ASiCPmoyapmo3I4JIpjdeFeYRhW+X9kCgYEA1qil<br>Yh20dW0OS+<span class="hljs-number">6</span>Hc5HkAHXfpXNQj7j3dRj8pxkDzqyfY9r/b3sQ4k6B2GOBNOnoyYuP<br>sYQryB+<span class="hljs-number">08</span>jY9MkH17l0kk<span class="hljs-regexp">/vPNkZatpqQRo6xMiw2+/</span><span class="hljs-number">09</span>RcV0<span class="hljs-regexp">/e3zqT7/</span>Cv6Tc7Sh<br>veD0cjfjIL8WM2<span class="hljs-regexp">/gqYM2PMPQvzfznqpzNpi/</span>Ev8CgYEAvcxi5gbxa9ewCvQ/fYzO<br>WLL3Tee2SttUuxqZepAfox6DXzVpt61kbTCgWYW4TVQWprTIOtO9jNVTmzzgQ2nb<br>T3LXsvjmYaq9i1Zw2lDTtcsPZ9ptwlWs5F9kPGpOPe6kvMi/VQpmcPqq6hJHLaiu<br><span class="hljs-number">1</span>fIq8AEX1cAExOEbGqITVWkCgYABnjfQ64RmtjG7ZMrklh7v2fObnajnzG8hFNUi<br>tU+QCUESUZ5HStgvvIPCC833hiPZERI+Nk7WLVcB1GLVtCWUbGNQMj+<span class="hljs-number">3</span>mwQoCDY6<br>Me0oAalQcPI7Sme9WkPR7MWjYZPe9WeatM1i5wTxRD94l8lLvc902c0DA/r0ITjJ<br>GpGmJQKBgQCTM38D80Z2JnzsG/wP6N0LBeiBRbPOU4FD+GUHiSKE7EKA+MWZTs7C<br>G5IAXyG7eHsGqRNKu8VBNtpEpWMfcpWDdalWx2NG4uqk<span class="hljs-regexp">/M3/</span><span class="hljs-number">7</span>NMsPIrJ6VryD809<br><span class="hljs-number">1</span>pBKr1HyRafzDNiJvZ<span class="hljs-regexp">/SIoyrKZs0dkz/</span>jaOvx6dmrpegWMExKktEEA==<br>-----END RSA <span class="hljs-keyword">PRIVATE</span> KEY-----<br></code></pre></td></tr></table></figure>
<h1 id="产生公钥"><a href="#产生公钥" class="headerlink" title="产生公钥"></a>产生公钥</h1><figure class="highlight ruby"><table><tr><td class="code"><pre><code class="hljs ruby">jintao@jintao-ThinkPad-<span class="hljs-symbol">L490:</span>~<span class="hljs-regexp">/personal/code</span>$ openssl rsa -<span class="hljs-keyword">in</span> rsa_private_key.pem -pubout -out rsa_public_key.pem<br>writing RSA key<br>jintao@jintao-ThinkPad-<span class="hljs-symbol">L490:</span>~<span class="hljs-regexp">/personal/code</span>$ cat rsa_public_key.pem<br>-----<span class="hljs-keyword">BEGIN</span> PUBLIC KEY-----<br>MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAuaUSgbK540vy3TMpgREW<br><span class="hljs-number">2</span>+apXbfYO3TvMmxWiupN9WypGOzA1yFo/udaYWKvoPhEau2S9Z+oS5CV8e8KhEoJ<br>c6TJklipAj+SAtAKpBL0138Uwsv1cRiGLKLWHz1hfqUZE6nReLz1rkTvnicestJv<br>VvG7P1Ey4d9GF73VMWM+TGYXv+Mcfsi2XeJGD9mz7bitsnKMsehqd0yy6rmOthu/<br><span class="hljs-number">3</span>CIj1xycOPs7dESt3gYUv+Ve7vGDZNKzieNlfO3Kv64KWsoXGNvkDMMklxQVLY8c<br>eTtsqTBtqr5Cz0M27YkG39WtH5xJfgqUBu48mr7xZ5RoiXweB43xxvDweZAPZkW7<br>JwIDAQAB<br>-----<span class="hljs-keyword">END</span> PUBLIC KEY-----<br></code></pre></td></tr></table></figure>
<h1 id="生成证书"><a href="#生成证书" class="headerlink" title="生成证书"></a>生成证书</h1><figure class="highlight routeros"><table><tr><td class="code"><pre><code class="hljs routeros">jintao@jintao-ThinkPad-L490:~/personal/code$ openssl req -new -key rsa_private_key.pem -out zongbao.csr<br>You are about <span class="hljs-keyword">to</span> be asked <span class="hljs-keyword">to</span> enter information that will be incorporated<br>into your certificate request.<br>What you are about <span class="hljs-keyword">to</span> enter is what is called a Distinguished Name <span class="hljs-keyword">or</span> a DN.<br>There are quite a few fields but you can leave some blank<br><span class="hljs-keyword">For</span> some fields there will be a<span class="hljs-built_in"> default </span>value,<br><span class="hljs-keyword">If</span> you enter <span class="hljs-string">&#x27;.&#x27;</span>, the field will be left blank.<br>-----<br>Country Name (2 letter code) [AU]:<br>State <span class="hljs-keyword">or</span> Province Name (full name) [Some-State]:<br>Locality Name (eg, city) []:<br>Organization Name (eg, company) [Internet Widgits Pty Ltd]:<br>Organizational Unit Name (eg, section) []:<br>Common Name (e.g.<span class="hljs-built_in"> server </span>FQDN <span class="hljs-keyword">or</span> YOUR name) []:<br>Email<span class="hljs-built_in"> Address </span>[]:<br><br>Please enter the following <span class="hljs-string">&#x27;extra&#x27;</span> attributes<br><span class="hljs-keyword">to</span> be sent with your certificate request<br>A challenge password []:<br>An optional company name []:<br>jintao@jintao-ThinkPad-L490:~/personal/code$ cat zongbao.csr<br>-----BEGIN CERTIFICATE REQUEST-----<br>MIICijCCAXICAQAwRTELMAkGA1UEBhMCQVUxEzARBgNVBAgMClNvbWUtU3RhdGUx<br>ITAfBgNVBAoMGEludGVybmV0IFdpZGdpdHMgUHR5IEx0ZDCCASIwDQYJKoZIhvcN<br>AQEBBQADggEPADCCAQoCggEBALmlEoGyueNL8t0zKYERFtvmqV232Dt07zJsVorq<br>TfVsqRjswNchaP7nWmFir6D4RGrtkvWfqEuQlfHvCoRKCXOkyZJYqQI/kgLQCqQS<br>9Nd/FMLL9XEYhiyi1h89YX6lGROp0Xi89a5E754nHrLSb1bxuz9RMuHfRhe91TFj<br>PkxmF7/jHH7Itl3iRg/Zs+24rbJyjLHoandMsuq5jrYbv9wiI9ccnDj7O3RErd4G<br>FL/lXu7xg2TSs4njZXztyr+uClrKFxjb5AzDJJcUFS2PHHk7bKkwbaq+Qs9DNu2J<br>Bt/VrR+cSX4KlAbuPJq+8WeUaIl8HgeN8cbw8HmQD2ZFuycCAwEAAaAAMA0GCSqG<br>SIb3DQEBCwUAA4IBAQCJkU68WPfMrMKiNJlXvPbPMLSyF6Q7zx8mL/JGeKctqRzm<br>4DUZHUiPjLiXBPXtXM87HMApEbA8UyU8g7Bx1GWnFc2ZDihaXgdAPs9CEaEBvu0x<br>naWT1BviOMy4CbjybrQjE5QvRHGcKt2b28cmfpAKiXYHKEFw7DH/yDkWbQPDyuPY<br>5JHC35olabvVc7H/+V8fQUssorj+9NKrUKhahH4oITfRvizkdPiF1acWF+XtbtHm<br>YK7rTHYCr/n8lLAY9etUtAHaTPQMDH5T7ZjngljT2kvMHdUAf+jIJHeIAoLZd9PO<br>zYYzuhFuPXKb0seQ1u9LlL+FjdwUVJS3O3r9pFdR<br>-----END CERTIFICATE REQUEST-----<br></code></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>openssl</category>
        <category>ssl</category>
      </categories>
      <tags>
        <tag>openssl</tag>
        <tag>ssl</tag>
      </tags>
  </entry>
  <entry>
    <title>SQL-standard function body</title>
    <url>/PostgreSQL/function/SQL-standard/PostgreSQL_SQL-standard_function_body/</url>
    <content><![CDATA[<p>PostgreSQL 函数和储存过程支持SQL-standard function body</p>
<a id="more"></a>
<h1 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h1><p>SQL-standard function body　在定义的时parse,并已expression nodes形式储存在pg_proc.prosqlbody字段, 因此在执行的时候不需要再次被parse.<br>由于在执行时不parse, 因此不支持多态的参数</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><code class="hljs pgsql">However, this form does <span class="hljs-keyword">not</span> support polymorphic arguments, because<br>there <span class="hljs-keyword">is</span> <span class="hljs-keyword">no</span> more parse analysis done at <span class="hljs-keyword">call</span> <span class="hljs-type">time</span><br>The <span class="hljs-keyword">function</span> body <span class="hljs-keyword">is</span> parsed at <span class="hljs-keyword">function</span> definition <span class="hljs-type">time</span> <span class="hljs-keyword">and</span> stored <span class="hljs-keyword">as</span><br>expression nodes <span class="hljs-keyword">in</span> a <span class="hljs-built_in">new</span> pg_proc <span class="hljs-keyword">column</span> prosqlbody.  So at run <span class="hljs-type">time</span>,<br><span class="hljs-keyword">no</span> further parsing <span class="hljs-keyword">is</span> required.<br><br></code></pre></td></tr></table></figure>
<h1 id="例子1"><a href="#例子1" class="headerlink" title="例子1"></a>例子1</h1><figure class="highlight pgsql"><table><tr><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">or replace</span>  <span class="hljs-keyword">FUNCTION</span> <span class="hljs-keyword">add</span>(a <span class="hljs-type">integer</span>, b <span class="hljs-type">integer</span>) <span class="hljs-keyword">RETURNS</span> <span class="hljs-type">integer</span> <span class="hljs-keyword">as</span><br>$$<br><span class="pgsql">    <span class="hljs-keyword">select</span> a + b;</span><br><span class="ruby">$$</span><span class="hljs-keyword">LANGUAGE</span> <span class="hljs-keyword">SQL</span>;<br></code></pre></td></tr></table></figure>
<h1 id="例子2"><a href="#例子2" class="headerlink" title="例子2"></a>例子2</h1><figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">FUNCTION</span> <span class="hljs-keyword">add</span>(a <span class="hljs-built_in">integer</span>, b <span class="hljs-built_in">integer</span>) <span class="hljs-keyword">RETURNS</span> <span class="hljs-built_in">integer</span><br><span class="hljs-keyword">LANGUAGE</span> <span class="hljs-keyword">SQL</span><br><span class="hljs-keyword">RETURN</span> a + b;<br></code></pre></td></tr></table></figure>
<h1 id="例子3"><a href="#例子3" class="headerlink" title="例子3"></a>例子3</h1><figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">or</span> <span class="hljs-keyword">replace</span>  <span class="hljs-keyword">PROCEDURE</span> insert_data(a <span class="hljs-built_in">integer</span>, b <span class="hljs-built_in">integer</span>)<br><span class="hljs-keyword">LANGUAGE</span> <span class="hljs-keyword">SQL</span><br><span class="hljs-keyword">as</span> $$<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> tbl <span class="hljs-keyword">VALUES</span> (a);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> tbl <span class="hljs-keyword">VALUES</span> (b);<br>$$;<br></code></pre></td></tr></table></figure>
<h1 id="例子4"><a href="#例子4" class="headerlink" title="例子4"></a>例子4</h1><figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">PROCEDURE</span> insert_data(a <span class="hljs-built_in">integer</span>, b <span class="hljs-built_in">integer</span>)<br><span class="hljs-keyword">LANGUAGE</span> <span class="hljs-keyword">SQL</span><br><span class="hljs-keyword">BEGIN</span> ATOMIC<br>  <span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> tbl <span class="hljs-keyword">VALUES</span> (a);<br>  <span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> tbl <span class="hljs-keyword">VALUES</span> (b);<br><span class="hljs-keyword">END</span>;<br></code></pre></td></tr></table></figure>
<h1 id="duplicate-function-body"><a href="#duplicate-function-body" class="headerlink" title="duplicate function body"></a>duplicate function body</h1><figure class="highlight pgsql"><table><tr><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">FUNCTION</span> functest_S_xxx(x <span class="hljs-type">int</span>) <span class="hljs-keyword">RETURNS</span> <span class="hljs-type">int</span><br>    <span class="hljs-keyword">LANGUAGE</span> <span class="hljs-keyword">SQL</span><br>    <span class="hljs-keyword">AS</span> $$<span class="pgsql"> <span class="hljs-keyword">SELECT</span> x * <span class="hljs-number">2</span> $$</span><br>    <span class="hljs-keyword">RETURN</span> x * <span class="hljs-number">3</span>;<br></code></pre></td></tr></table></figure>
<h1 id="polymorphic-arguments-not-allowed-in-this-form"><a href="#polymorphic-arguments-not-allowed-in-this-form" class="headerlink" title="polymorphic arguments not allowed in this form"></a>polymorphic arguments not allowed in this form</h1><figure class="highlight pgsql"><table><tr><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">FUNCTION</span> functest_S_xx(x <span class="hljs-type">anyarray</span>) <span class="hljs-keyword">RETURNS</span> <span class="hljs-type">anyelement</span><br>    <span class="hljs-keyword">LANGUAGE</span> <span class="hljs-keyword">SQL</span><br>    <span class="hljs-keyword">RETURN</span> x[<span class="hljs-number">1</span>];<br></code></pre></td></tr></table></figure>
<h1 id="check-reporting-of-parse-analysis-errors"><a href="#check-reporting-of-parse-analysis-errors" class="headerlink" title="check reporting of parse-analysis errors"></a>check reporting of parse-analysis errors</h1><figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">FUNCTION</span> functest_S_xx(x <span class="hljs-built_in">date</span>) <span class="hljs-keyword">RETURNS</span> <span class="hljs-built_in">boolean</span><br>    <span class="hljs-keyword">LANGUAGE</span> <span class="hljs-keyword">SQL</span><br>    <span class="hljs-keyword">RETURN</span> x &gt; <span class="hljs-number">1</span>;<br></code></pre></td></tr></table></figure>
<h1 id="tricky-parsing"><a href="#tricky-parsing" class="headerlink" title="tricky parsing"></a>tricky parsing</h1><figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">FUNCTION</span> functest_S_15(x <span class="hljs-built_in">int</span>) <span class="hljs-keyword">RETURNS</span> <span class="hljs-built_in">boolean</span><br><span class="hljs-keyword">LANGUAGE</span> <span class="hljs-keyword">SQL</span><br><span class="hljs-keyword">BEGIN</span> ATOMIC<br>    <span class="hljs-keyword">select</span> <span class="hljs-keyword">case</span> <span class="hljs-keyword">when</span> x % <span class="hljs-number">2</span> = <span class="hljs-number">0</span> <span class="hljs-keyword">then</span> <span class="hljs-literal">true</span> <span class="hljs-keyword">else</span> <span class="hljs-literal">false</span> <span class="hljs-keyword">end</span>;<br><span class="hljs-keyword">END</span>;<br><br></code></pre></td></tr></table></figure>
<h1 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h1><figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">FUNCTION</span> functest_S_1(a <span class="hljs-built_in">text</span>, b <span class="hljs-built_in">date</span>) <span class="hljs-keyword">RETURNS</span> <span class="hljs-built_in">boolean</span><br>    <span class="hljs-keyword">LANGUAGE</span> <span class="hljs-keyword">SQL</span><br>    <span class="hljs-keyword">RETURN</span> a = <span class="hljs-string">&#x27;abcd&#x27;</span> <span class="hljs-keyword">AND</span> b &gt; <span class="hljs-string">&#x27;2001-01-01&#x27;</span>;<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">FUNCTION</span> functest_S_2(a <span class="hljs-built_in">text</span>[]) <span class="hljs-keyword">RETURNS</span> <span class="hljs-built_in">int</span><br>    <span class="hljs-keyword">RETURN</span> a[<span class="hljs-number">1</span>]::<span class="hljs-built_in">int</span>;<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">FUNCTION</span> functest_S_3() <span class="hljs-keyword">RETURNS</span> <span class="hljs-built_in">boolean</span><br>    <span class="hljs-keyword">RETURN</span> <span class="hljs-literal">false</span>;<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">FUNCTION</span> functest_S_3a() <span class="hljs-keyword">RETURNS</span> <span class="hljs-built_in">boolean</span><br>    <span class="hljs-keyword">BEGIN</span> ATOMIC<br>        <span class="hljs-keyword">RETURN</span> <span class="hljs-literal">false</span>;<br>    <span class="hljs-keyword">END</span>;<br><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">FUNCTION</span> functest_S_10(a <span class="hljs-built_in">text</span>, b <span class="hljs-built_in">date</span>) <span class="hljs-keyword">RETURNS</span> <span class="hljs-built_in">boolean</span><br>    <span class="hljs-keyword">LANGUAGE</span> <span class="hljs-keyword">SQL</span><br>    <span class="hljs-keyword">BEGIN</span> ATOMIC<br>        <span class="hljs-keyword">SELECT</span> a = <span class="hljs-string">&#x27;abcd&#x27;</span> <span class="hljs-keyword">AND</span> b &gt; <span class="hljs-string">&#x27;2001-01-01&#x27;</span>;<br>    <span class="hljs-keyword">END</span>;<br><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">FUNCTION</span> functest_S_13() <span class="hljs-keyword">RETURNS</span> <span class="hljs-built_in">boolean</span><br>    <span class="hljs-keyword">BEGIN</span> ATOMIC<br>        <span class="hljs-keyword">SELECT</span> <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">SELECT</span> <span class="hljs-literal">false</span>;<br>    <span class="hljs-keyword">END</span>;<br></code></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>PostgreSQL</category>
        <category>function</category>
        <category>SQL-standard</category>
      </categories>
      <tags>
        <tag>PostgreSQL</tag>
        <tag>function</tag>
        <tag>SQL-standard</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux 新机配置</title>
    <url>/linux/linux_new_machine/</url>
    <content><![CDATA[<p>记录一些linux新机器常用的配置, 方便更换系统时更快的配置个人环境.</p>
<a id="more"></a>
<h1 id="bashrc相关配置"><a href="#bashrc相关配置" class="headerlink" title=".bashrc相关配置"></a>.bashrc相关配置</h1><h2 id="历史命令的上下翻页"><a href="#历史命令的上下翻页" class="headerlink" title="历史命令的上下翻页"></a>历史命令的上下翻页</h2><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">bind</span> <span class="hljs-string">&#x27;&quot;\e[A&quot;:history-search-backward&#x27;</span><br><span class="hljs-built_in">bind</span> <span class="hljs-string">&#x27;&quot;\e[B&quot;:history-search-forward&#x27;</span><br></code></pre></td></tr></table></figure>
<h2 id="历史命令保留个数，文件大小"><a href="#历史命令保留个数，文件大小" class="headerlink" title="历史命令保留个数，文件大小"></a>历史命令保留个数，文件大小</h2><figure class="highlight ini"><table><tr><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">HISTSIZE</span>=<span class="hljs-number">100000</span><br><span class="hljs-attr">HISTFILESIZE</span>=<span class="hljs-number">80000</span><br></code></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>PostgreSQL 生成列</title>
    <url>/PostgreSQL/Generated-column/pg_grnerated_column/</url>
    <content><![CDATA[<p>PostgreSQL 生成列的三种使用方式</p>
<a id="more"></a>
<h1 id="自定义函数"><a href="#自定义函数" class="headerlink" title="自定义函数"></a>自定义函数</h1><figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">REPLACE</span> <span class="hljs-keyword">FUNCTION</span> public.f2 (<span class="hljs-keyword">name</span> <span class="hljs-built_in">text</span>)<br>    <span class="hljs-keyword">RETURNS</span> <span class="hljs-built_in">text</span><br>    <span class="hljs-keyword">LANGUAGE</span> plpgsql<br>    IMMUTABLE<br>    <span class="hljs-keyword">AS</span> $<span class="hljs-keyword">function</span>$<br><span class="hljs-keyword">BEGIN</span><br>    <span class="hljs-keyword">RETURN</span> <span class="hljs-keyword">substring</span>($<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">10</span>);<br><span class="hljs-keyword">END</span>;<br>$function$ <br><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> people_gc_stored (<br>    <span class="hljs-keyword">name</span> <span class="hljs-built_in">text</span>,<br>    small_name <span class="hljs-built_in">text</span> <span class="hljs-keyword">GENERATED</span> <span class="hljs-keyword">ALWAYS</span> <span class="hljs-keyword">AS</span> (f2 (<span class="hljs-keyword">name</span>)) <span class="hljs-keyword">STORED</span><br>);<br><br></code></pre></td></tr></table></figure>
<h1 id="GENERATED-ALWAYS"><a href="#GENERATED-ALWAYS" class="headerlink" title="GENERATED ALWAYS"></a>GENERATED ALWAYS</h1><figure class="highlight routeros"><table><tr><td class="code"><pre><code class="hljs routeros">CREATE TABLE people_gc_stored1 (<br>    name text,<br>    small_name text GENERATED ALWAYS AS IDENTITY<br>);<br></code></pre></td></tr></table></figure>
<h1 id="GENERATED-DEFAULT"><a href="#GENERATED-DEFAULT" class="headerlink" title="GENERATED DEFAULT"></a>GENERATED DEFAULT</h1><figure class="highlight routeros"><table><tr><td class="code"><pre><code class="hljs routeros">CREATE TABLE people_gc_stored2 (<br>    name text,<br>    small_name text GENERATED<span class="hljs-built_in"> DEFAULT </span>AS IDENTITY<br>);<br><br></code></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>PostgreSQL</category>
        <category>Generated column</category>
      </categories>
      <tags>
        <tag>PostgreSQL</tag>
        <tag>Generated column</tag>
      </tags>
  </entry>
  <entry>
    <title>PostgreSQL WAL 记录了什么?</title>
    <url>/WAL/PostgreSQL/pg_wal/</url>
    <content><![CDATA[<h1 id="关于持久性"><a href="#关于持久性" class="headerlink" title="关于持久性"></a>关于持久性</h1><figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">持久性是指，事务提交后，对系统的影响必须是永久的，即使系统意外宕机，也必须确保事务提交时的修改已真正永久写入到永久存储中。<br>最简单的实现方法，当然是在事务提交后立即刷新事务修改后的数据到磁盘。但是磁盘和内存之间的IO操作是最影响数据库系统影响时间的，一有事务提交就去刷新磁盘，会对数据库性能产生不好影响。<br></code></pre></td></tr></table></figure>
<a id="more"></a>
<h1 id="WAL记录了什么"><a href="#WAL记录了什么" class="headerlink" title="WAL记录了什么"></a>WAL记录了什么</h1><p>XLOG Record按存储的数据内容来划分，大体可以分为三类</p>
<h2 id="Record-for-backup-block"><a href="#Record-for-backup-block" class="headerlink" title="Record for backup block"></a>Record for backup block</h2><figure class="highlight pgsql"><table><tr><td class="code"><pre><code class="hljs pgsql">存储<span class="hljs-keyword">full</span>-<span class="hljs-keyword">write</span>-page的block，这种类型<span class="hljs-type">Record</span>是为了解决page部分写的问题。在<span class="hljs-keyword">checkpoint</span>完成后第一次修改数据page，在记录此变更写入事务日志文件时整页写入（需设置相应的初始化参数，默认为打开）；<br></code></pre></td></tr></table></figure>
<h2 id="Record-for-tuple-data-block："><a href="#Record-for-tuple-data-block：" class="headerlink" title="Record for tuple data block："></a>Record for tuple data block：</h2><figure class="highlight oxygene"><table><tr><td class="code"><pre><code class="hljs oxygene">存储page中的<span class="hljs-keyword">tuple</span>变更，使用这种类型的<span class="hljs-keyword">Record</span>记录；<br></code></pre></td></tr></table></figure>
<h2 id="Record-for-Checkpoint"><a href="#Record-for-Checkpoint" class="headerlink" title="Record for Checkpoint"></a>Record for Checkpoint</h2><figure class="highlight pgsql"><table><tr><td class="code"><pre><code class="hljs pgsql">在<span class="hljs-keyword">checkpoint</span>发生时，在事务日志文件中记录<span class="hljs-keyword">checkpoint</span>信息(其中包括Redo <span class="hljs-type">point</span>)。<br></code></pre></td></tr></table></figure>
<h1 id="WAL机制的引入"><a href="#WAL机制的引入" class="headerlink" title="WAL机制的引入"></a>WAL机制的引入</h1><figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">WAL机制的引入，即保证了事务持久性和数据完整性，又尽量地避免了频繁IO对性能的影响。<br></code></pre></td></tr></table></figure>
<h1 id="WAL过程分析"><a href="#WAL过程分析" class="headerlink" title="WAL过程分析"></a>WAL过程分析</h1><figure class="highlight pgsql"><table><tr><td class="code"><pre><code class="hljs pgsql">先写到缓冲区Buffer-再刷新到磁盘Disk。<br>WAL机制实际是在这个写数据的过程中加入了对应的写wal <span class="hljs-keyword">log</span>的过程，步骤一样是先到Buffer，再刷新到Disk。<br><br>Change发生时：先将变更后内容记入WAL Buffer,再将更新后的数据写入Data Buffer<br><span class="hljs-keyword">Commit</span>发生时：WAL Buffer刷新到Disk, Data Buffer写磁盘推迟<br><span class="hljs-keyword">Checkpoint</span>发生时：将所有Data Buffer刷新到磁盘<br>数据发生变动时: <span class="hljs-keyword">commit</span>和<span class="hljs-keyword">checkpoint</span><br><br></code></pre></td></tr></table></figure>
<h1 id="WAL的好处"><a href="#WAL的好处" class="headerlink" title="WAL的好处"></a>WAL的好处</h1><figure class="highlight arcade"><table><tr><td class="code"><pre><code class="hljs arcade">通过上面的分析，可以看到：<br><br>当宕机发生时，Data <span class="hljs-built_in">Buffer</span>的内容还没有全部写入到永久存储中，数据丢失；但是WAL <span class="hljs-built_in">Buffer</span>的内容已写入磁盘，根据WAL日志的内容，可以恢复库丢失的内容。<br>在提交时，仅把WAL刷新到了磁盘，而不是Data刷新：<br></code></pre></td></tr></table></figure>
<p>从IO次数来说，WAL刷新是少量IO，Data刷新是大量IO，WAL刷新次数少得多；<br>从IO花销来说，WAL刷新是连续IO，Data刷新是随机IO，WAL刷新花销小得多。<br>因此WAL机制在保证事务持久性和数据完整性的同时，成功地提升了系统性能。</p>
]]></content>
      <categories>
        <category>WAL</category>
        <category>PostgreSQL</category>
      </categories>
      <tags>
        <tag>PostgreSQL</tag>
        <tag>WAL</tag>
      </tags>
  </entry>
  <entry>
    <title>order by + limit N index backward scan 慢SQL优化</title>
    <url>/sql/limit/order-by/slow-query/pg_turn_away_from_index_backward_scan/</url>
    <content><![CDATA[<h1 id="backward-index-scan"><a href="#backward-index-scan" class="headerlink" title="backward  index scan"></a>backward  index scan</h1><figure class="highlight angelscript"><table><tr><td class="code"><pre><code class="hljs angelscript">mydb=# explain analyze select data_id,create_time <span class="hljs-keyword">from</span> test_table where status=<span class="hljs-number">0</span> <span class="hljs-keyword">and</span> city_id=<span class="hljs-number">310188</span> <span class="hljs-keyword">and</span> type=<span class="hljs-number">103</span>  <span class="hljs-keyword">and</span> sub_type=any(<span class="hljs-built_in">array</span>[<span class="hljs-number">10306</span>,<span class="hljs-number">10304</span>,<span class="hljs-number">10305</span>]) order by create_time desc limit <span class="hljs-number">1</span>;<br>                                                                                    QUERY PLAN                                                                                    <br>----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------<br> Limit  (cost=<span class="hljs-number">0.44</span>.<span class="hljs-number">.1615</span><span class="hljs-number">.86</span> rows=<span class="hljs-number">1</span> width=<span class="hljs-number">16</span>) (actual time=<span class="hljs-number">10945.944</span>.<span class="hljs-number">.10945</span><span class="hljs-number">.945</span> rows=<span class="hljs-number">1</span> loops=<span class="hljs-number">1</span>)<br>   -&gt;  Index Scan Backward using test_table_create_time_idx on test_table  (cost=<span class="hljs-number">0.44</span>.<span class="hljs-number">.1936888</span><span class="hljs-number">.15</span> rows=<span class="hljs-number">1199</span> width=<span class="hljs-number">16</span>) (actual time=<span class="hljs-number">10945.942</span>.<span class="hljs-number">.10945</span><span class="hljs-number">.942</span> rows=<span class="hljs-number">1</span> loops=<span class="hljs-number">1</span>)<br>         Filter: ((status = <span class="hljs-number">0</span>) AND (city_id = <span class="hljs-number">310188</span>) AND (type = <span class="hljs-number">103</span>) AND (sub_type = ANY (<span class="hljs-string">&#x27;&#123;10306,10304,10305&#125;&#x27;</span>::<span class="hljs-built_in">int</span>eger[])))<br>         Rows Removed by Filter: <span class="hljs-number">9975856</span><br> Planning time: <span class="hljs-number">0.573</span> ms<br> Execution time: <span class="hljs-number">10945.974</span> ms<br>(<span class="hljs-number">6</span> rows) <br></code></pre></td></tr></table></figure>
<a id="more"></a>
<h1 id="set-enable-indexscan-to-off"><a href="#set-enable-indexscan-to-off" class="headerlink" title="set  enable_indexscan to off;"></a>set  enable_indexscan to off;</h1><figure class="highlight routeros"><table><tr><td class="code"><pre><code class="hljs routeros"><span class="hljs-attribute">mydb</span>=# <span class="hljs-builtin-name">set</span>  enable_indexscan <span class="hljs-keyword">to</span> off;<br>SET<br><span class="hljs-attribute">mydb</span>=# explain analyze select data_id,create_time <span class="hljs-keyword">from</span> test_table where <span class="hljs-attribute">status</span>=0 <span class="hljs-keyword">and</span> <span class="hljs-attribute">city_id</span>=310188 <span class="hljs-keyword">and</span> <span class="hljs-attribute">type</span>=103  <span class="hljs-keyword">and</span> <span class="hljs-attribute">sub_type</span>=any(array[10306,10304,10305]) order by create_time desc limit 1;<br>                                                                                QUERY PLAN                                                                                <br>--------------------------------------------------------------------------------------------------------------------------------------------------------------------------<br> Limit  (<span class="hljs-attribute">cost</span>=4593.63..4593.63 <span class="hljs-attribute">rows</span>=1 <span class="hljs-attribute">width</span>=16) (actual <span class="hljs-attribute">time</span>=0.642..0.642 <span class="hljs-attribute">rows</span>=1 <span class="hljs-attribute">loops</span>=1)<br>   -&gt;  Sort  (<span class="hljs-attribute">cost</span>=4593.63..4596.63 <span class="hljs-attribute">rows</span>=1199 <span class="hljs-attribute">width</span>=16) (actual <span class="hljs-attribute">time</span>=0.642..0.642 <span class="hljs-attribute">rows</span>=1 <span class="hljs-attribute">loops</span>=1)<br>         Sort Key: create_time<br>         Sort Method: top-N heapsort  Memory: 25kB<br>         -&gt;  Bitmap Heap Scan on test_table  (<span class="hljs-attribute">cost</span>=25.61..4587.64 <span class="hljs-attribute">rows</span>=1199 <span class="hljs-attribute">width</span>=16) (actual <span class="hljs-attribute">time</span>=0.603..0.636 <span class="hljs-attribute">rows</span>=15 <span class="hljs-attribute">loops</span>=1)<br>               Recheck Cond: ((city_id = 310188) <span class="hljs-keyword">AND</span> (sub_type = ANY (<span class="hljs-string">&#x27;&#123;10306,10304,10305&#125;&#x27;</span>::integer[])) <span class="hljs-keyword">AND</span> (type = 103) <span class="hljs-keyword">AND</span> (status = 0))<br>               Heap Blocks: <span class="hljs-attribute">exact</span>=11<br>               -&gt;  Bitmap Index Scan on test_table_city_id_sub_type_create_time_idx  (<span class="hljs-attribute">cost</span>=0.00..25.31 <span class="hljs-attribute">rows</span>=1199 <span class="hljs-attribute">width</span>=0) (actual <span class="hljs-attribute">time</span>=0.581..0.581 <span class="hljs-attribute">rows</span>=15 <span class="hljs-attribute">loops</span>=1)<br>                     Index Cond: ((city_id = 310188) <span class="hljs-keyword">AND</span> (sub_type = ANY (<span class="hljs-string">&#x27;&#123;10306,10304,10305&#125;&#x27;</span>::integer[])))<br> Planning time: 0.395 ms<br> Execution time: 0.671 ms<br>(11 rows)<br></code></pre></td></tr></table></figure>
<h1 id="with子句"><a href="#with子句" class="headerlink" title="with子句"></a>with子句</h1><figure class="highlight routeros"><table><tr><td class="code"><pre><code class="hljs routeros"><span class="hljs-attribute">mydb</span>=# explain analyze with cte as(select data_id,create_time <span class="hljs-keyword">from</span> test_table where <span class="hljs-attribute">status</span>=0 <span class="hljs-keyword">and</span> <span class="hljs-attribute">city_id</span>=310188 <span class="hljs-keyword">and</span> <span class="hljs-attribute">type</span>=103  <span class="hljs-keyword">and</span> <span class="hljs-attribute">sub_type</span>=any(array[10306,10304,10305]) order by create_time desc)<br>mydb-# select * <span class="hljs-keyword">from</span> cte limit 1;<br>                                                                                 QUERY PLAN                                                                                 <br>----------------------------------------------------------------------------------------------------------------------------------------------------------------------------<br> Limit  (<span class="hljs-attribute">cost</span>=4651.95..4651.97 <span class="hljs-attribute">rows</span>=1 <span class="hljs-attribute">width</span>=16) (actual <span class="hljs-attribute">time</span>=0.093..0.093 <span class="hljs-attribute">rows</span>=1 <span class="hljs-attribute">loops</span>=1)<br>   CTE cte<br>     -&gt;  Sort  (<span class="hljs-attribute">cost</span>=4648.95..4651.95 <span class="hljs-attribute">rows</span>=1199 <span class="hljs-attribute">width</span>=16) (actual <span class="hljs-attribute">time</span>=0.090..0.090 <span class="hljs-attribute">rows</span>=1 <span class="hljs-attribute">loops</span>=1)<br>           Sort Key: test_table.create_time<br>           Sort Method: quicksort  Memory: 25kB<br>           -&gt;  Bitmap Heap Scan on test_table  (<span class="hljs-attribute">cost</span>=25.61..4587.64 <span class="hljs-attribute">rows</span>=1199 <span class="hljs-attribute">width</span>=16) (actual <span class="hljs-attribute">time</span>=0.048..0.078 <span class="hljs-attribute">rows</span>=15 <span class="hljs-attribute">loops</span>=1)<br>                 Recheck Cond: ((city_id = 310188) <span class="hljs-keyword">AND</span> (sub_type = ANY (<span class="hljs-string">&#x27;&#123;10306,10304,10305&#125;&#x27;</span>::integer[])) <span class="hljs-keyword">AND</span> (type = 103) <span class="hljs-keyword">AND</span> (status = 0))<br>                 Heap Blocks: <span class="hljs-attribute">exact</span>=11<br>                 -&gt;  Bitmap Index Scan on test_table_city_id_sub_type_create_time_idx  (<span class="hljs-attribute">cost</span>=0.00..25.31 <span class="hljs-attribute">rows</span>=1199 <span class="hljs-attribute">width</span>=0) (actual <span class="hljs-attribute">time</span>=0.041..0.041 <span class="hljs-attribute">rows</span>=15 <span class="hljs-attribute">loops</span>=1)<br>                       Index Cond: ((city_id = 310188) <span class="hljs-keyword">AND</span> (sub_type = ANY (<span class="hljs-string">&#x27;&#123;10306,10304,10305&#125;&#x27;</span>::integer[])))<br>   -&gt;  CTE Scan on cte  (<span class="hljs-attribute">cost</span>=0.00..23.98 <span class="hljs-attribute">rows</span>=1199 <span class="hljs-attribute">width</span>=16) (actual <span class="hljs-attribute">time</span>=0.092..0.092 <span class="hljs-attribute">rows</span>=1 <span class="hljs-attribute">loops</span>=1)<br> Planning time: 0.476 ms<br> Execution time: 0.132 ms<br>(13 rows)<br></code></pre></td></tr></table></figure>
<h1 id="增加无关排序列"><a href="#增加无关排序列" class="headerlink" title="增加无关排序列"></a>增加无关排序列</h1><figure class="highlight routeros"><table><tr><td class="code"><pre><code class="hljs routeros"><span class="hljs-attribute">mydb</span>=# explain analyze with cte as(select data_id,create_time <span class="hljs-keyword">from</span> test_table where <span class="hljs-attribute">status</span>=0 <span class="hljs-keyword">and</span> <span class="hljs-attribute">city_id</span>=310188 <span class="hljs-keyword">and</span> <span class="hljs-attribute">type</span>=103  <span class="hljs-keyword">and</span> <span class="hljs-attribute">sub_type</span>=any(array[10306,10304,10305]) order by create_time desc)<br>select * <span class="hljs-keyword">from</span> cte limit 1;<br>                                                                                       QUERY PLAN                                                                                       <br>----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------<br> Limit  (<span class="hljs-attribute">cost</span>=4504.43..4504.45 <span class="hljs-attribute">rows</span>=1 <span class="hljs-attribute">width</span>=16) (actual <span class="hljs-attribute">time</span>=0.387..0.387 <span class="hljs-attribute">rows</span>=1 <span class="hljs-attribute">loops</span>=1)<br>   CTE cte<br>     -&gt;  Sort  (<span class="hljs-attribute">cost</span>=4501.43..4504.43 <span class="hljs-attribute">rows</span>=1199 <span class="hljs-attribute">width</span>=16) (actual <span class="hljs-attribute">time</span>=0.385..0.385 <span class="hljs-attribute">rows</span>=1 <span class="hljs-attribute">loops</span>=1)<br>           Sort Key: test_table.create_time<br>           Sort Method: quicksort  Memory: 25kB<br>           -&gt;  Index Scan using test_table_city_id_sub_type_create_time_idx on test_table  (<span class="hljs-attribute">cost</span>=0.44..4440.12 <span class="hljs-attribute">rows</span>=1199 <span class="hljs-attribute">width</span>=16) (actual <span class="hljs-attribute">time</span>=0.138..0.351 <span class="hljs-attribute">rows</span>=15 <span class="hljs-attribute">loops</span>=1)<br>                 Index Cond: ((city_id = 310188) <span class="hljs-keyword">AND</span> (sub_type = ANY (<span class="hljs-string">&#x27;&#123;10306,10304,10305&#125;&#x27;</span>::integer[])))<br>   -&gt;  CTE Scan on cte  (<span class="hljs-attribute">cost</span>=0.00..23.98 <span class="hljs-attribute">rows</span>=1199 <span class="hljs-attribute">width</span>=16) (actual <span class="hljs-attribute">time</span>=0.387..0.387 <span class="hljs-attribute">rows</span>=1 <span class="hljs-attribute">loops</span>=1)<br> Planning time: 3.259 ms<br> Execution time: 0.438 ms<br>(10 rows)<br><br></code></pre></td></tr></table></figure>
<h1 id="新建索引"><a href="#新建索引" class="headerlink" title="新建索引"></a>新建索引</h1><figure class="highlight pgsql"><table><tr><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">index</span> <span class="hljs-keyword">CONCURRENTLY</span> myindex <span class="hljs-keyword">on</span> test_table(city_id, create_time) <span class="hljs-keyword">where</span>  status=<span class="hljs-number">0</span>  <span class="hljs-keyword">and</span> <span class="hljs-keyword">type</span>=<span class="hljs-number">103</span>;<br><br>mydb=# <span class="hljs-keyword">explain</span> <span class="hljs-keyword">analyze</span>  <span class="hljs-keyword">select</span> ctid,data_id <span class="hljs-keyword">from</span> test_table <span class="hljs-keyword">where</span> status=<span class="hljs-number">0</span> <span class="hljs-keyword">and</span> city_id=<span class="hljs-number">310188</span> <span class="hljs-keyword">and</span> <span class="hljs-keyword">type</span>=<span class="hljs-number">103</span>  <span class="hljs-keyword">and</span> sub_type=<span class="hljs-keyword">any</span>(<span class="hljs-keyword">array</span>[<span class="hljs-number">10306</span>,<span class="hljs-number">10304</span>,<span class="hljs-number">10305</span>]) <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> create_time <span class="hljs-keyword">desc</span> <span class="hljs-keyword">limit</span> <span class="hljs-number">1</span>;<br>                                                                                   QUERY PLAN                                                                                   <br><span class="hljs-comment">--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------</span><br> <span class="hljs-keyword">Limit</span>  (<span class="hljs-keyword">cost</span>=<span class="hljs-number">0.44</span>.<span class="hljs-number">.76</span><span class="hljs-number">.86</span> <span class="hljs-keyword">rows</span>=<span class="hljs-number">1</span> width=<span class="hljs-number">22</span>) (actual <span class="hljs-type">time</span>=<span class="hljs-number">1.134</span>.<span class="hljs-number">.1</span><span class="hljs-number">.134</span> <span class="hljs-keyword">rows</span>=<span class="hljs-number">1</span> loops=<span class="hljs-number">1</span>)<br>   -&gt;  <span class="hljs-keyword">Index</span> Scan Backward <span class="hljs-keyword">using</span> test_table_city_id_create_time_idx <span class="hljs-keyword">on</span> test_table  (<span class="hljs-keyword">cost</span>=<span class="hljs-number">0.44</span>.<span class="hljs-number">.91628</span><span class="hljs-number">.47</span> <span class="hljs-keyword">rows</span>=<span class="hljs-number">1199</span> width=<span class="hljs-number">22</span>) (actual <span class="hljs-type">time</span>=<span class="hljs-number">1.133</span>.<span class="hljs-number">.1</span><span class="hljs-number">.133</span> <span class="hljs-keyword">rows</span>=<span class="hljs-number">1</span> loops=<span class="hljs-number">1</span>)<br>         <span class="hljs-keyword">Index</span> Cond: (city_id = <span class="hljs-number">310188</span>)<br>         <span class="hljs-keyword">Filter</span>: (sub_type = <span class="hljs-keyword">ANY</span> (<span class="hljs-string">&#x27;&#123;10306,10304,10305&#125;&#x27;</span>::<span class="hljs-type">integer</span>[]))<br>         <span class="hljs-keyword">Rows</span> Removed <span class="hljs-keyword">by</span> <span class="hljs-keyword">Filter</span>: <span class="hljs-number">796</span><br> Planning <span class="hljs-type">time</span>: <span class="hljs-number">0.344</span> ms<br> Execution <span class="hljs-type">time</span>: <span class="hljs-number">1.153</span> ms<br>(<span class="hljs-number">7</span> <span class="hljs-keyword">rows</span>)<br><br></code></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>sql</category>
        <category>limit</category>
        <category>order by</category>
        <category>slow query</category>
      </categories>
      <tags>
        <tag>sql</tag>
        <tag>limit</tag>
        <tag>order by</tag>
        <tag>slow query</tag>
      </tags>
  </entry>
  <entry>
    <title>PostgreSQL格式化SQL</title>
    <url>/PostgreSQL/sql/pg_sql_format/</url>
    <content><![CDATA[<p>利用pg_get_viewdef完成SQL美化。</p>
<a id="more"></a>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><code class="hljs pgsql">mydb=# <span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">OR REPLACE</span> <span class="hljs-keyword">FUNCTION</span> format_sql(<span class="hljs-type">text</span>)<br><span class="hljs-keyword">RETURNS</span> <span class="hljs-type">text</span> <span class="hljs-keyword">AS</span><br>$$<br><span class="pgsql">   <span class="hljs-keyword">DECLARE</span></span><br><span class="pgsql">      v_ugly_string       <span class="hljs-keyword">ALIAS</span> <span class="hljs-keyword">FOR</span> <span class="hljs-meta">$1</span>;</span><br><span class="pgsql">      v_beauty            <span class="hljs-type">text</span>;</span><br><span class="pgsql">      v_tmp_name          <span class="hljs-type">text</span>;</span><br><span class="pgsql">   <span class="hljs-keyword">BEGIN</span></span><br><span class="pgsql">      <span class="hljs-comment">-- let us create a unique view name</span></span><br><span class="pgsql">      v_tmp_name := <span class="hljs-string">&#x27;temp_&#x27;</span> || md5(v_ugly_string);</span><br><span class="pgsql">      <span class="hljs-keyword">EXECUTE</span> <span class="hljs-string">&#x27;CREATE TEMPORARY VIEW &#x27;</span> ||</span><br><span class="ruby">      v_tmp_name <span class="hljs-params">||</span> <span class="hljs-string">&#x27; AS &#x27;</span> <span class="hljs-params">||</span> v_ugly_string;</span><br><br><span class="pgsql">      <span class="hljs-comment">-- the magic happens here</span></span><br><span class="pgsql">      <span class="hljs-keyword">SELECT</span> pg_get_viewdef(v_tmp_name) <span class="hljs-keyword">INTO</span> v_beauty;</span><br><br><span class="pgsql">      <span class="hljs-comment">-- cleanup the temporary object</span></span><br><span class="pgsql">      <span class="hljs-keyword">EXECUTE</span> <span class="hljs-string">&#x27;DROP VIEW &#x27;</span> || v_tmp_name;</span><br><span class="pgsql">      <span class="hljs-keyword">RETURN</span> v_beauty;</span><br><span class="pgsql">   <span class="hljs-keyword">EXCEPTION</span> <span class="hljs-keyword">WHEN</span> OTHERS <span class="hljs-keyword">THEN</span></span><br><span class="pgsql">      <span class="hljs-keyword">RAISE</span> <span class="hljs-keyword">EXCEPTION</span> <span class="hljs-string">&#x27;you have provided an invalid string: % / %&#x27;</span>,</span><br><span class="pgsql">            <span class="hljs-built_in">sqlstate</span>, <span class="hljs-built_in">sqlerrm</span>;</span><br><span class="pgsql">   <span class="hljs-keyword">END</span>;</span><br><span class="ruby">$$</span> <span class="hljs-keyword">LANGUAGE</span> <span class="hljs-string">&#x27;plpgsql&#x27;</span>;<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">FUNCTION</span><br>mydb=# <span class="hljs-keyword">SELECT</span> format_sql(<span class="hljs-string">&#x27;SELECT * FROM</span><br><span class="hljs-string">                  pg_tables UNION</span><br><span class="hljs-string">                    ALL SELECT * FROM</span><br><span class="hljs-string">          pg_tables&#x27;</span>);<br>-[ <span class="hljs-type">RECORD</span> <span class="hljs-number">1</span> ]<span class="hljs-comment">-----------------------------</span><br>format_sql |  <span class="hljs-keyword">SELECT</span> pg_tables.schemaname,+<br>           |     pg_tables.tablename,     +<br>           |     pg_tables.tableowner,    +<br>           |     pg_tables.<span class="hljs-keyword">tablespace</span>,    +<br>           |     pg_tables.hasindexes,    +<br>           |     pg_tables.hasrules,      +<br>           |     pg_tables.hastriggers,   +<br>           |     pg_tables.rowsecurity    +<br>           |    <span class="hljs-keyword">FROM</span> pg_tables            +<br>           | <span class="hljs-keyword">UNION</span> <span class="hljs-keyword">ALL</span>                    +<br>           |  <span class="hljs-keyword">SELECT</span> pg_tables.schemaname,+<br>           |     pg_tables.tablename,     +<br>           |     pg_tables.tableowner,    +<br>           |     pg_tables.<span class="hljs-keyword">tablespace</span>,    +<br>           |     pg_tables.hasindexes,    +<br>           |     pg_tables.hasrules,      +<br>           |     pg_tables.hastriggers,   +<br>           |     pg_tables.rowsecurity    +<br>           |    <span class="hljs-keyword">FROM</span> pg_tables;<br><br>mydb=#<br><br><br></code></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>PostgreSQL</category>
        <category>sql</category>
      </categories>
      <tags>
        <tag>PostgreSQL</tag>
        <tag>sql</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu终端常用的快捷键</title>
    <url>/ubuntu/Linux/ubuntu_quick_key/</url>
    <content><![CDATA[<p>Ubuntu中的许多操作在终端（Terminal）中十分的快捷，记住一些快捷键的操作更得心应手。在Ubuntu中打开终端的快捷键是Ctrl+Alt+T。其他的一些常用的快捷键如下：</p>
<a id="more"></a>
<h1 id="terminal"><a href="#terminal" class="headerlink" title="terminal"></a>terminal</h1><figure class="highlight dos"><table><tr><td class="code"><pre><code class="hljs dos">Tab         自动补全<br>Ctrl+a      光标移动到开始位置<br>Ctrl+e      光标移动到最末尾<br>Ctrl+k      删除此处至末尾的所有内容<br>Ctrl+u      删除此处至开始的所有内容<br>Ctrl+d      删除当前字符<br>Ctrl+h      删除当前字符前一个字符<br>Ctrl+w      删除此处到左边的单词<br>Ctrl+y      粘贴由Ctrl+u， Ctrl+d， Ctrl+w删除的单词<br>Ctrl+l      相当于clear，即清屏<br>Ctrl+r      查找历史命令<br>Ctrl+b      向回移动光标<br>Ctrl+f      向前移动光标<br>Ctrl+t      将光标位置的字符和前一个字符进行位置交换<br>Ctrl+&amp;      恢复 ctrl+h 或者 ctrl+d 或者 ctrl+w 删除的内容<br>Ctrl+S      暂停屏幕输出<br>Ctrl+Q      继续屏幕输出<br>Ctrl+Left-Arrow     光标移动到上一个单词的词首<br>Ctrl+Right-Arrow    光标移动到下一个单词的词尾<br>Ctrl+p              向上显示缓存命令<br>Ctrl+n              向下显示缓存命令<br>Ctrl+d              关闭终端<br>Ctrl+xx             在EOL和当前光标位置移动<br>Ctrl+x@             显示可能hostname补全<br>Ctrl+c              终止进程/命令<br><span class="hljs-built_in">Shift</span>+上或下        终端上下滚动<br><span class="hljs-built_in">Shift</span>+PgUp/PgDn     终端上下翻页滚动<br>Ctrl+<span class="hljs-built_in">Shift</span>+n        新终端<br>alt+F2              输入gnome-terminal打开终端<br><span class="hljs-built_in">Shift</span>+Ctrl+T        打开新的标签页<br><span class="hljs-built_in">Shift</span>+Ctrl+W        关闭标签页<br><span class="hljs-built_in">Shift</span>+Ctrl+C        复制<br><span class="hljs-built_in">Shift</span>+Ctrl+V        粘贴<br>Alt+数字            切换至对应的标签页<br><span class="hljs-built_in">Shift</span>+Ctrl+N        打开新的终端窗口<br><span class="hljs-built_in">Shift</span>+Ctrl+Q        管壁终端窗口<br><span class="hljs-built_in">Shift</span>+Ctrl+PgUp/PgDn左移右移标签页<br>Ctrl+PgUp/PgDn      切换标签页<br>F1                  打开帮助指南<br>F10                 激活菜单栏<br>F11                 全屏切换<br>Alt+F               打开 “文件” 菜单（file）<br>Alt+E               打开 “编辑” 菜单（edit）<br>Alt+V               打开 “查看” 菜单（view）<br>Alt+S               打开 “搜索” 菜单（search）<br>Alt+T               打开 “终端” 菜单（terminal）<br>Alt+H               打开 “帮助” 菜单（<span class="hljs-built_in">help</span>）<br></code></pre></td></tr></table></figure>
<p>另外一些小技巧包括：在终端窗口命令提示符下，连续按两次 Tab 键、或者连续按三次 Esc 键、或者按 Ctrl+I 组合键，将显示所有的命令及工具名称。Application 键即位置在键盘上右 Ctrl 键左边的那个键，作用相当于单击鼠标右键。</p>
<h1 id="Terminal终端"><a href="#Terminal终端" class="headerlink" title="Terminal终端"></a>Terminal终端</h1><figure class="highlight ldif"><table><tr><td class="code"><pre><code class="hljs ldif"><span class="hljs-attribute">CTRL + ALT + T</span>: 打开终端<br><span class="hljs-attribute">TAB</span>: 自动补全命令或文件名<br><span class="hljs-attribute">CTRL + SHIFT + V</span>: 粘贴（Linux中不需要复制的动作，文本被选择就自动被复制）<br><span class="hljs-attribute">CTRL + SHIFT + T</span>: 新建标签页<br><span class="hljs-attribute">CTRL + D</span>: 关闭标签页<br><span class="hljs-attribute">CTRL + L</span>: 清楚屏幕<br><span class="hljs-attribute">CTRL + R + 文本</span>: 在输入历史中搜索<br><span class="hljs-attribute">CTRL + A</span>: 移动到行首<br><span class="hljs-attribute">CTRL + E</span>: 移动到行末<br><span class="hljs-attribute">CTRL + C</span>: 终止当前任务<br><span class="hljs-attribute">CTRL + Z</span>: 把当前任务放到后台运行（相当于运行命令时后面加&amp;）<br>~: 表示用户目录路径<br></code></pre></td></tr></table></figure>
<h1 id="如何打开一个程序"><a href="#如何打开一个程序" class="headerlink" title="如何打开一个程序"></a>如何打开一个程序</h1><figure class="highlight gradle"><table><tr><td class="code"><pre><code class="hljs gradle">以“系统配置”为例，先按<span class="hljs-keyword">SUPER</span> + A，<span class="hljs-keyword">SUPER</span>即Win键，然后切换到中文输入法，输入“系统配置”，按回车即打开程序。再按TAB键浏览系统配置里的子配置程序<br></code></pre></td></tr></table></figure>
<h1 id="桌面"><a href="#桌面" class="headerlink" title="桌面"></a>桌面</h1><figure class="highlight groovy"><table><tr><td class="code"><pre><code class="hljs groovy">ALT + <span class="hljs-attr">F1:</span> 聚焦到桌面左侧任务导航栏，可按上下键导航。<br>ALT + <span class="hljs-attr">F2:</span> 运行命令<br>ALT + <span class="hljs-attr">F4:</span> 关闭窗口<br>ALT + <span class="hljs-attr">TAB:</span> 切换程序窗口<br>ALT + 空格: 打开窗口菜单<br><span class="hljs-attr">PRINT:</span> 桌面截图<br><span class="hljs-attr">SUPER:</span> 打开Dash面板，可搜索或浏览项目，默认有个搜索框，按“下”方向键进入浏览区域（SUPER键指Win键或苹果电脑的Command键）<br>在Dash面板中按CTRL + <span class="hljs-attr">TAB:</span> 切换到下一个子面板（可搜索不同类型项目，如程序、文件、音乐）<br>SUPER + <span class="hljs-attr">A:</span> 搜索或浏览程序（Application）<br>SUPER + <span class="hljs-attr">F:</span> 搜索或浏览文件（File）<br>SUPER + <span class="hljs-attr">M:</span> 搜索或浏览音乐文件（Music）<br></code></pre></td></tr></table></figure>
<h1 id="Orca读屏软件"><a href="#Orca读屏软件" class="headerlink" title="Orca读屏软件"></a>Orca读屏软件</h1><figure class="highlight ldif"><table><tr><td class="code"><pre><code class="hljs ldif">启动Orca: SUPER + A，然后输入orca，然后回车<br><span class="hljs-attribute">ORCA + 空格</span>: 显示首选项对话框（ORCA键是指Insert插入键或CAPS LOCK大小写转换键，取决于设置）<br><span class="hljs-attribute">ORCA + t</span>: 读当前时间<br><span class="hljs-attribute">ORCA + tt</span>: 读当前日期<br><span class="hljs-attribute">ORCA + s</span>: 切换合成语音开关<br><span class="hljs-attribute">ORCA + /</span>: 朗读标题<br><span class="hljs-attribute">ORCA + //</span>: 朗读状态栏<br><span class="hljs-attribute">ORCA + 分号</span>: 朗读整个文件<br><span class="hljs-attribute">ORCA + Q</span>: 退出Orca<br>更多快捷键请参考Orca首选项的键绑定标签页<br></code></pre></td></tr></table></figure>
<h1 id="Firefox浏览器"><a href="#Firefox浏览器" class="headerlink" title="Firefox浏览器"></a>Firefox浏览器</h1><figure class="highlight yaml"><table><tr><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">进入Firefox的方法：</span><br><span class="hljs-number">1</span><span class="hljs-string">.</span> <span class="hljs-string">SUPER</span> <span class="hljs-string">+</span> <span class="hljs-string">A，然后按firefox，回车。这个是在Dash面板中搜索应用程序运行。事实上，只要按fir就能定位到Firefox程序。</span><br><span class="hljs-number">2</span><span class="hljs-string">.</span> <span class="hljs-string">ALT，然后按firefox，回车。这个相当于在命令行运行一条命令。</span><br><span class="hljs-number">3</span><span class="hljs-string">.</span> <span class="hljs-string">在终端中按firefox&amp;，回车。这个适用于以终端作为主要操作窗口的用户，使用TAB键还可以自动补全命令（只需输入前几个字母再按TAB键）。&amp;在shell中是后台运行的意思，这样终端就不会被Firefox独占。</span><br><span class="hljs-string">CTRL</span> <span class="hljs-string">+</span> <span class="hljs-attr">T:</span> <span class="hljs-string">新建标签页</span><br><span class="hljs-string">CTRL</span> <span class="hljs-string">+</span> <span class="hljs-attr">W:</span> <span class="hljs-string">关闭标签页</span><br><span class="hljs-string">CTRL</span> <span class="hljs-string">+</span> <span class="hljs-string">SHIFT</span> <span class="hljs-string">+</span> <span class="hljs-attr">T:</span> <span class="hljs-string">重新打开最近关闭的一个标签页</span><br><span class="hljs-string">CTRL</span> <span class="hljs-string">+</span> <span class="hljs-attr">TAB:</span> <span class="hljs-string">切换到下一个标签页</span><br><span class="hljs-string">CTRL</span> <span class="hljs-string">+</span> <span class="hljs-string">SHIFT</span> <span class="hljs-string">+</span> <span class="hljs-attr">TAB:</span> <span class="hljs-string">切换到上一个标签页</span><br><span class="hljs-string">ALT</span> <span class="hljs-string">+</span> [<span class="hljs-number">1</span><span class="hljs-number">-8</span>]<span class="hljs-string">:</span> <span class="hljs-string">跳到制定标签页</span><br><span class="hljs-string">ALT</span> <span class="hljs-string">+</span> <span class="hljs-attr">9:</span> <span class="hljs-string">跳到最后一个标签页</span><br><span class="hljs-string">CTRL</span> <span class="hljs-string">+</span> <span class="hljs-attr">L:</span> <span class="hljs-string">跳到地址栏</span><br><span class="hljs-attr">ESC:</span> <span class="hljs-string">停止加载当前页面</span><br><span class="hljs-string">CTRL</span> <span class="hljs-string">+</span> <span class="hljs-attr">K:</span> <span class="hljs-string">跳到搜索引擎输入框</span><br><span class="hljs-string">CTRL</span> <span class="hljs-string">+</span> <span class="hljs-attr">F:</span> <span class="hljs-string">在当前页面中搜索</span><br><span class="hljs-string">/:</span> <span class="hljs-string">快速查找。在Linux中很多程序（如VI、Man、Less）都使用/作为搜索的快捷键，并且可使用正则表达式查找。但在Firefox中没有正则表达式搜索的功能。</span><br><span class="hljs-string">CTRL</span> <span class="hljs-string">+</span> <span class="hljs-attr">D:</span> <span class="hljs-string">收藏到书签</span><br><span class="hljs-string">ALT</span> <span class="hljs-string">+</span> <span class="hljs-string">左方向键:</span> <span class="hljs-string">后退</span><br><span class="hljs-string">ALT</span> <span class="hljs-string">+</span> <span class="hljs-attr">v:</span> <span class="hljs-string">前进</span><br><span class="hljs-string">CTRL</span> <span class="hljs-string">+</span> <span class="hljs-attr">Q:</span> <span class="hljs-string">退出</span><br></code></pre></td></tr></table></figure>
<h1 id="Gedit文本编辑器"><a href="#Gedit文本编辑器" class="headerlink" title="Gedit文本编辑器"></a>Gedit文本编辑器</h1><figure class="highlight groovy"><table><tr><td class="code"><pre><code class="hljs groovy">启动gedit：SUPER + A，然后按gedit，回车<br>CTRL + <span class="hljs-attr">N:</span> 新建文档<br>CTRL + <span class="hljs-attr">W:</span> 关闭文档<br>CTRL + <span class="hljs-attr">S:</span> 保存<br>CTRL + SHIFT + <span class="hljs-attr">S:</span> 另存为<br>CTRL + <span class="hljs-attr">S:</span> 搜索<br>CTRL + <span class="hljs-attr">H:</span> 搜索并替换<br>CTRL + <span class="hljs-attr">I:</span> 跳到某一行<br>CTRL + <span class="hljs-attr">C:</span> 复制<br>CTRL + <span class="hljs-attr">V:</span> 粘贴<br>CTRL + <span class="hljs-attr">X:</span> 剪切<br>CTRL + <span class="hljs-attr">Q:</span> 退出<br></code></pre></td></tr></table></figure>
<h1 id="Nautilus文件管理器"><a href="#Nautilus文件管理器" class="headerlink" title="Nautilus文件管理器"></a>Nautilus文件管理器</h1><figure class="highlight yaml"><table><tr><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">启动Nautilus的方法：</span><br><span class="hljs-number">1</span><span class="hljs-string">.</span> <span class="hljs-string">SUPER</span> <span class="hljs-string">+</span> <span class="hljs-number">1</span><span class="hljs-string">，这个方法仅适用于Nautilus在左边快速启动的位置没有改变的情况。</span><br><span class="hljs-number">2</span><span class="hljs-string">.</span> <span class="hljs-string">SUPER</span> <span class="hljs-string">+</span> <span class="hljs-string">A，然后输入nautilus，然后回车</span><br><span class="hljs-attr">F2:</span> <span class="hljs-string">重命名</span><br><span class="hljs-string">CTRL</span> <span class="hljs-string">+</span> <span class="hljs-attr">1:</span> <span class="hljs-string">图标视图</span><br><span class="hljs-string">CTRL</span> <span class="hljs-string">+</span> <span class="hljs-attr">2:</span> <span class="hljs-string">列表视图</span><br><span class="hljs-string">CTRL</span> <span class="hljs-string">+</span> <span class="hljs-attr">T:</span> <span class="hljs-string">新建标签页</span><br><span class="hljs-string">CTRL</span> <span class="hljs-string">+</span> <span class="hljs-attr">W:</span> <span class="hljs-string">关闭标签页</span><br><span class="hljs-string">CTRL</span> <span class="hljs-string">+</span> <span class="hljs-attr">D:</span> <span class="hljs-string">收藏到书签</span><br><span class="hljs-string">CTRL</span> <span class="hljs-string">+</span> <span class="hljs-attr">Q:</span> <span class="hljs-string">退出</span><br><span class="hljs-string">Nautilus还有很多和Firefox一致的快捷键。</span><br></code></pre></td></tr></table></figure>
<h1 id="Rhythmbox音频播放器"><a href="#Rhythmbox音频播放器" class="headerlink" title="Rhythmbox音频播放器"></a>Rhythmbox音频播放器</h1><figure class="highlight ldif"><table><tr><td class="code"><pre><code class="hljs ldif"><span class="hljs-attribute">CTRL + 空格</span>: 播放/暂停<br><span class="hljs-attribute">ALT + 右方向键</span>: 下一首<br><span class="hljs-attribute">ALT + 左方向键</span>: 上一首<br><span class="hljs-attribute">CTRL + 上方向键</span>: 增大音量<br><span class="hljs-attribute">CTRL + 下方向键</span>: 减少音量<br><span class="hljs-attribute">CTRL + U</span>: 随机播放<br><span class="hljs-attribute">CTRL + R</span>: 重复播放<br><span class="hljs-attribute">CTRL + Q</span>: 退出<br></code></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>ubuntu</category>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>PostgreSQL函数/存储过程返回多个游标</title>
    <url>/PostgreSQL/cursor/refcursor/PostgreSQL_refcursor/</url>
    <content><![CDATA[<h1 id="function-返回多个游标"><a href="#function-返回多个游标" class="headerlink" title="function 返回多个游标"></a>function 返回多个游标</h1><figure class="highlight pgsql"><table><tr><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">OR REPLACE</span> <span class="hljs-keyword">FUNCTION</span> show_cities_multiple() <span class="hljs-keyword">RETURNS</span> <span class="hljs-keyword">SETOF</span> <span class="hljs-type">refcursor</span> <span class="hljs-keyword">AS</span> $$<br><span class="pgsql"> <span class="hljs-keyword">DECLARE</span></span><br><span class="pgsql">   ref1 <span class="hljs-type">refcursor</span>;           <span class="hljs-comment">-- Declare cursor variables</span></span><br><span class="pgsql">   ref2 <span class="hljs-type">refcursor</span>;</span><br><span class="pgsql"> <span class="hljs-keyword">BEGIN</span></span><br><span class="pgsql">   <span class="hljs-keyword">OPEN</span> ref1 <span class="hljs-keyword">FOR</span> <span class="hljs-keyword">SELECT</span> <span class="hljs-number">1</span>;   <span class="hljs-comment">-- Open the first cursor</span></span><br><span class="pgsql">   <span class="hljs-keyword">RETURN NEXT</span> ref1;                                                                              <span class="hljs-comment">-- Return the cursor to the caller</span></span><br><br><span class="pgsql">   <span class="hljs-keyword">OPEN</span> ref2 <span class="hljs-keyword">FOR</span> <span class="hljs-keyword">SELECT</span> <span class="hljs-number">2</span>;   <span class="hljs-comment">-- Open the second cursor</span></span><br><span class="pgsql">   <span class="hljs-keyword">RETURN NEXT</span> ref2;                                                                              <span class="hljs-comment">-- Return the cursor to the caller</span></span><br><span class="pgsql"> <span class="hljs-keyword">END</span>;</span><br><span class="ruby"> $$</span> <span class="hljs-keyword">LANGUAGE</span> plpgsql;<br></code></pre></td></tr></table></figure>
<a id="more"></a>
<h1 id="procedure-返回多个游标"><a href="#procedure-返回多个游标" class="headerlink" title="procedure 返回多个游标"></a>procedure 返回多个游标</h1><figure class="highlight cal"><table><tr><td class="code"><pre><code class="hljs cal">CREATE <span class="hljs-keyword">OR</span> REPLACE <span class="hljs-function"><span class="hljs-keyword">PROCEDURE</span> <span class="hljs-title">public</span>.<span class="hljs-title">test_p1</span><span class="hljs-params">(INOUT ref refcursor[])</span></span><br><span class="hljs-function"> <span class="hljs-title">LANGUAGE</span> <span class="hljs-title">plpgsql</span></span><br><span class="hljs-function"><span class="hljs-title">AS</span> $<span class="hljs-title">procedure</span>$</span><br><span class="hljs-function"><span class="hljs-title">declare</span> <span class="hljs-title">ref0</span> <span class="hljs-title">refcursor</span>;</span> ref1 refcursor;<br><span class="hljs-keyword">begin</span><br>open ref0 <span class="hljs-keyword">for</span> select <span class="hljs-number">1</span>; ref[<span class="hljs-number">0</span>] = ref0;<br>open ref1 <span class="hljs-keyword">for</span> select <span class="hljs-number">2</span>; ref[<span class="hljs-number">1</span>] = ref1;<br><span class="hljs-keyword">end</span>;<br>$<span class="hljs-function"><span class="hljs-keyword">procedure</span>$</span><br></code></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>PostgreSQL</category>
        <category>cursor</category>
        <category>refcursor</category>
      </categories>
      <tags>
        <tag>PostgreSQL</tag>
        <tag>cursor</tag>
        <tag>refcursor</tag>
      </tags>
  </entry>
  <entry>
    <title>docker常用命令</title>
    <url>/docker/docker_command/</url>
    <content><![CDATA[<h1 id="将-image-文件从仓库抓取到本地，-默认library组"><a href="#将-image-文件从仓库抓取到本地，-默认library组" class="headerlink" title="将 image 文件从仓库抓取到本地， 默认library组"></a>将 image 文件从仓库抓取到本地， 默认library组</h1><figure class="highlight arduino"><table><tr><td class="code"><pre><code class="hljs arduino">$ docker <span class="hljs-built_in">image</span> pull library/hello-world<br>$ docker <span class="hljs-built_in">image</span> pull hello-world<br><br></code></pre></td></tr></table></figure>
<h1 id="列出本机的所有-image-文件。"><a href="#列出本机的所有-image-文件。" class="headerlink" title="列出本机的所有 image 文件。"></a>列出本机的所有 image 文件。</h1><figure class="highlight mel"><table><tr><td class="code"><pre><code class="hljs mel">$ docker <span class="hljs-keyword">image</span> <span class="hljs-keyword">ls</span><br></code></pre></td></tr></table></figure>
<h1 id="删除-image-文件"><a href="#删除-image-文件" class="headerlink" title="删除 image 文件"></a>删除 image 文件</h1><figure class="highlight elixir"><table><tr><td class="code"><pre><code class="hljs elixir"><span class="hljs-variable">$ </span>docker rmi [imageName]<br></code></pre></td></tr></table></figure>
<a id="more"></a>
<h1 id="启动并进入终端"><a href="#启动并进入终端" class="headerlink" title="启动并进入终端"></a>启动并进入终端</h1><figure class="highlight routeros"><table><tr><td class="code"><pre><code class="hljs routeros">$ sudo docker <span class="hljs-builtin-name">run</span> -i -t <span class="hljs-attribute">--name</span>=docker_run centos /bin/bash<br></code></pre></td></tr></table></figure>
<h1 id="进入docker终端"><a href="#进入docker终端" class="headerlink" title="进入docker终端$"></a>进入docker终端$</h1><figure class="highlight apache"><table><tr><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">sudo</span> docker run -it postgres:<span class="hljs-number">11</span>.<span class="hljs-number">2</span>  /bin/bash<br></code></pre></td></tr></table></figure>
<h1 id="查看容器重启次数"><a href="#查看容器重启次数" class="headerlink" title="查看容器重启次数"></a>查看容器重启次数</h1><figure class="highlight handlebars"><table><tr><td class="code"><pre><code class="hljs handlebars"><span class="xml">docker inspect -f &quot;</span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">.RestartCount</span> &#125;&#125;</span><span class="xml">&quot; containerid</span><br></code></pre></td></tr></table></figure>
<h1 id="查看容器最后一次的启动时间"><a href="#查看容器最后一次的启动时间" class="headerlink" title="查看容器最后一次的启动时间"></a>查看容器最后一次的启动时间</h1><figure class="highlight handlebars"><table><tr><td class="code"><pre><code class="hljs handlebars"><span class="xml">docker inspect -f &quot;</span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">.State.StartedAt</span> &#125;&#125;</span><span class="xml">&quot; containerid</span><br></code></pre></td></tr></table></figure>
<h1 id="获取container-ip"><a href="#获取container-ip" class="headerlink" title="获取container ip"></a>获取container ip</h1><figure class="highlight handlebars"><table><tr><td class="code"><pre><code class="hljs handlebars"><span class="xml">docker inspect --format &#x27;</span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">.NetworkSettings.IPAddress</span>&#125;&#125;</span><span class="xml">&#x27;  containerid</span><br></code></pre></td></tr></table></figure>
<h1 id="获取网络配置"><a href="#获取网络配置" class="headerlink" title="获取网络配置"></a>获取网络配置</h1><figure class="highlight nginx"><table><tr><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">docker</span> incontainerid | jq <span class="hljs-string">&#x27;.[].NetworkSettings.Networks&#x27;</span><br></code></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>docker</category>
      </categories>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>CentOS7+PostgreSQL11.2+Docker</title>
    <url>/PostgreSQL/docker/PostgreSQL_docker/</url>
    <content><![CDATA[<h1 id="OS-image"><a href="#OS-image" class="headerlink" title="OS image"></a>OS image</h1><h2 id="编写centos7-sh"><a href="#编写centos7-sh" class="headerlink" title="编写centos7.sh"></a>编写centos7.sh</h2><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br>mkdir centos7<br><span class="hljs-built_in">cd</span> centos7<br>supermin5 -v --prepare bash grep yum yum-plugin rpm systemd pkgconfig initscripts -o supermin.d<br>supermin5 -v --build --format chroot supermin.d -o appliance.d<br>cp /etc/resolv.conf appliance.d/etc/<br><span class="hljs-built_in">echo</span> 7 &gt; appliance.d/etc/yum/vars/releasever<br>tar --numeric-owner -cpf centos-7.tar -C appliance.d .<br>cat centos-7.tar | docker import - os/centos<br></code></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="生成OS-image"><a href="#生成OS-image" class="headerlink" title="生成OS image"></a>生成OS image</h2><figure class="highlight apache"><table><tr><td class="code"><pre><code class="hljs apache"><span class="hljs-comment"># docker images</span><br><span class="hljs-attribute">REPOSITORY</span>          TAG                 IMAGE ID            CREATED              SIZE<br><span class="hljs-attribute">os</span>/centos           latest              <span class="hljs-number">88805</span>d<span class="hljs-number">994</span>ae<span class="hljs-number">8</span>        About a minute ago   <span class="hljs-number">279</span>MB<br></code></pre></td></tr></table></figure>
<h1 id="PostgreSQL-image"><a href="#PostgreSQL-image" class="headerlink" title="PostgreSQL image"></a>PostgreSQL image</h1><h2 id="初始化PostgreSQL基础信息脚本"><a href="#初始化PostgreSQL基础信息脚本" class="headerlink" title="初始化PostgreSQL基础信息脚本"></a>初始化PostgreSQL基础信息脚本</h2><figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk"><span class="hljs-comment">#!/bin/bash</span><br>su postgres &lt;&lt;EOF<br><span class="hljs-regexp">/opt/</span>pg11<span class="hljs-regexp">/bin/</span>pg_ctl start -D <span class="hljs-regexp">/export/</span>pg110_data;<br><span class="hljs-keyword">exit</span>;<br>EOF<br></code></pre></td></tr></table></figure>
<h2 id="自定义dockerfile"><a href="#自定义dockerfile" class="headerlink" title="自定义dockerfile"></a>自定义dockerfile</h2><figure class="highlight dockerfile"><table><tr><td class="code"><pre><code class="hljs dockerfile"><span class="hljs-keyword">FROM</span> os/centos<br> <br><span class="hljs-keyword">RUN</span><span class="bash"> localedef -c -f UTF-8 -i en_US en_US.utf8</span><br> <br><span class="hljs-keyword">ENV</span> LANG=en_US.UTF-<span class="hljs-number">8</span> \<br>    LANGUAGE=en_US:zh \<br>    LC_ALL=en_US.UTF-<span class="hljs-number">8</span><br> <br><span class="hljs-keyword">MAINTAINER</span> taot.jin &lt;<span class="hljs-number">84660320</span>@qq.com&gt;<br> <br><span class="hljs-keyword">RUN</span><span class="bash"> mkdir /<span class="hljs-built_in">export</span></span><br><span class="hljs-keyword">ADD</span><span class="bash"> ./pg110_data /<span class="hljs-built_in">export</span>/pg110_data</span><br> <br><span class="hljs-keyword">RUN</span><span class="bash"> mkdir /<span class="hljs-built_in">export</span>/rpms</span><br><span class="hljs-keyword">ADD</span><span class="bash"> ./rpms/*.rpm /<span class="hljs-built_in">export</span>/rpms/</span><br><span class="hljs-comment">#RUN rpm -ivh  /export/rpms/geos-*.rpm  /export/rpms/proj-*.rpm /export/rpms/gdal-*.rpm /export/rpms/json-c*.rpm  /export/rpms/postgis-*.rpm</span><br> <br><span class="hljs-keyword">RUN</span><span class="bash"> useradd postgres</span><br><span class="hljs-keyword">RUN</span><span class="bash"> chown -R postgres:postgres /<span class="hljs-built_in">export</span>/pg110_data</span><br><span class="hljs-keyword">RUN</span><span class="bash"> chmod 0700 /<span class="hljs-built_in">export</span>/pg110_data</span><br> <br><span class="hljs-keyword">RUN</span><span class="bash"> rm /etc/yum.repos.d/*.repo</span><br><span class="hljs-keyword">ADD</span><span class="bash"> ./my.repo /etc/yum.repos.d/</span><br> <br><span class="hljs-keyword">ENV</span> LD_LIBRARY_PATH <span class="hljs-string">&quot;/opt/pg11/lib:/usr/lib64:/lib64:/usr/lib:/lib&quot;</span><br><span class="hljs-keyword">ENV</span> PATH  <span class="hljs-string">&quot;/opt/pg11/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin&quot;</span><br> <br><span class="hljs-keyword">RUN</span><span class="bash"> ldconfig</span><br> <br><span class="hljs-keyword">RUN</span><span class="bash"> yum clean all &amp;&amp; yum makecache &amp;&amp; yum install -y postgresql wget pkgconfig</span><br> <br><span class="hljs-keyword">ADD</span><span class="bash"> ./start_postgres.sh /start_postgres.sh</span><br><span class="hljs-keyword">RUN</span><span class="bash"> chmod +x /start_postgres.sh</span><br> <br><span class="hljs-comment">#RUN echo &quot;su postgres -c \&quot;/opt/pg11/bin/pg_ctl -D /export/pg110_data restart &amp;&gt;/export/pg110_data/log/postgre_start.log\&quot;&quot; &gt;&gt; /etc/rc.local</span><br> <br><span class="hljs-keyword">VOLUME</span><span class="bash"> [<span class="hljs-string">&quot;/export/pg110_data&quot;</span>]</span><br><span class="hljs-keyword">VOLUME</span><span class="bash"> [<span class="hljs-string">&quot;/opt/pg11&quot;</span>]</span><br><span class="hljs-keyword">EXPOSE</span> <span class="hljs-number">5432</span><br> <br><span class="hljs-comment">#RUN echo &quot;host    all             all             0.0.0.0/0               md5&quot; &gt;&gt; /var/lib/pgsql/data/pg_hba.conf</span><br> <br><span class="hljs-keyword">CMD</span><span class="bash"> [<span class="hljs-string">&quot;/start_postgres.sh&quot;</span>]</span><br></code></pre></td></tr></table></figure>
<h2 id="生成image"><a href="#生成image" class="headerlink" title="生成image"></a>生成image</h2><figure class="highlight angelscript"><table><tr><td class="code"><pre><code class="hljs angelscript"># docker image build -t postgresql11<span class="hljs-number">.2</span><span class="hljs-number">.1</span> .<br></code></pre></td></tr></table></figure>
<h1 id="数据持久化"><a href="#数据持久化" class="headerlink" title="数据持久化"></a>数据持久化</h1><figure class="highlight dockerfile"><table><tr><td class="code"><pre><code class="hljs dockerfile">docker <span class="hljs-keyword">volume</span><span class="bash"> ls</span><br>docker <span class="hljs-keyword">volume</span><span class="bash"> create pg110_data</span><br>docker <span class="hljs-keyword">volume</span><span class="bash"> create opt_pg11_1</span><br><br><br>docker <span class="hljs-keyword">run</span><span class="bash"> -it -v pg110_data:/<span class="hljs-built_in">export</span>/pg110_data -v  opt_pg11_1:/opt/pg11 postgresql:11.2.1</span><br>docker <span class="hljs-keyword">run</span><span class="bash"> -it --mount <span class="hljs-built_in">type</span>=<span class="hljs-built_in">bind</span>,<span class="hljs-built_in">source</span>=/<span class="hljs-built_in">export</span>,target=/<span class="hljs-built_in">export</span> postgresql:11.2.1</span><br></code></pre></td></tr></table></figure>
<h1 id="更新image"><a href="#更新image" class="headerlink" title="更新image"></a>更新image</h1><figure class="highlight routeros"><table><tr><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment"># rpm -qa|grep  proj</span><br><span class="hljs-comment"># rpm -ivh proj-4.9.2-1.el7.x86_64.rpm</span><br>Preparing<span class="hljs-built_in">..</span>.                          ################################# [100%]<br>Updating / installing<span class="hljs-built_in">..</span>.<br>   1:proj-4.9.2-1.el7                 ################################# [100%]<br><span class="hljs-comment"># rpm -qa|grep proj</span><br>proj-4.9.2-1.el7.x86_64<br><span class="hljs-comment"># docker container ps -l</span><br>CONTAINER ID        IMAGE               COMMAND                  CREATED              STATUS                       PORTS               NAMES<br>5aeefd7f48e9        postgresql:11.2.1   <span class="hljs-string">&quot;/bin/sh -c /start_p…&quot;</span>   About a minute ago   Exited (130) 9 seconds ago                       zealous_ganguly<br><br><span class="hljs-comment"># docker commit -m &quot;test commit&quot; 5aeefd7f48e9 postgresql:11.2.2</span><br>sha256:df7a3a3cff7fd017e889dce7d03885e65f1b512ad3e443ab8254e5375805e24d<br><br><span class="hljs-comment"># docker run -it -v pg110_data:/export/pg110_data -v  opt_pg11_1:/opt/pg11 postgresql:11.2.2</span><br>pg_ctl: another<span class="hljs-built_in"> server </span>might be running; trying <span class="hljs-keyword">to</span> start<span class="hljs-built_in"> server </span>anyway<br>waiting <span class="hljs-keyword">for</span><span class="hljs-built_in"> server </span><span class="hljs-keyword">to</span> start<span class="hljs-built_in">..</span><span class="hljs-built_in">..</span>[    2019-03-04 17:23:41.736 CST 10 5c7cee9d.a 1  0]LOG:  listening on IPv4<span class="hljs-built_in"> address </span><span class="hljs-string">&quot;0.0.0.0&quot;</span>,<span class="hljs-built_in"> port </span>5432<br>[    2019-03-04 17:23:41.736 CST 10 5c7cee9d.a 2  0]LOG:  listening on<span class="hljs-built_in"> IPv6 address </span><span class="hljs-string">&quot;::&quot;</span>,<span class="hljs-built_in"> port </span>5432<br>[    2019-03-04 17:23:41.740 CST 10 5c7cee9d.a 3  0]LOG:  listening on Unix socket <span class="hljs-string">&quot;/tmp/.s.PGSQL.5432&quot;</span><br>[    2019-03-04 17:23:41.766 CST 10 5c7cee9d.a 4  0]LOG:  redirecting log output <span class="hljs-keyword">to</span><span class="hljs-built_in"> logging </span>collector process<br>[    2019-03-04 17:23:41.766 CST 10 5c7cee9d.a 5  0]HINT:  Future log output will appear <span class="hljs-keyword">in</span> directory <span class="hljs-string">&quot;log&quot;</span>.<br> done<br>server started<br></code></pre></td></tr></table></figure>
<h1 id="image迁移"><a href="#image迁移" class="headerlink" title="image迁移"></a>image迁移</h1><h2 id="save-load"><a href="#save-load" class="headerlink" title="save/load"></a>save/load</h2><h3 id="save导出"><a href="#save导出" class="headerlink" title="save导出"></a>save导出</h3><figure class="highlight apache"><table><tr><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">docker</span> save c<span class="hljs-number">92217432</span>f<span class="hljs-number">48</span> &gt; postgresql.tar<br></code></pre></td></tr></table></figure>
<h3 id="load导入"><a href="#load导入" class="headerlink" title="load导入"></a>load导入</h3><figure class="highlight apache"><table><tr><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">docker</span> load &lt; postgresql.tar<br><span class="hljs-attribute">docker</span> tag c<span class="hljs-number">92217432</span>f<span class="hljs-number">48</span> postgresql:<span class="hljs-number">11</span>.<span class="hljs-number">2</span>.<span class="hljs-number">4</span><br></code></pre></td></tr></table></figure>
<h2 id="export-import"><a href="#export-import" class="headerlink" title="export/import"></a>export/import</h2><h3 id="export导出"><a href="#export导出" class="headerlink" title="export导出"></a>export导出</h3><figure class="highlight apache"><table><tr><td class="code"><pre><code class="hljs apache"><span class="hljs-comment"># docker container ps -l</span><br><span class="hljs-attribute">CONTAINER</span> ID        IMAGE               COMMAND                  CREATED             STATUS                     PORTS               NAMES<br><span class="hljs-attribute">9caea184f25b</span>        postgresql:<span class="hljs-number">11</span>.<span class="hljs-number">2</span>.<span class="hljs-number">1</span>   <span class="hljs-string">&quot;/bin/sh -c /start_p…&quot;</span>   <span class="hljs-number">6</span> minutes ago       Exited (<span class="hljs-number">0</span>) <span class="hljs-number">8</span> seconds ago                       relaxed_benz<br><br><span class="hljs-comment"># docker export 9caea184f25b &gt; postgresql.tar</span><br></code></pre></td></tr></table></figure>
<h3 id="import导入"><a href="#import导入" class="headerlink" title="import导入"></a>import导入</h3><figure class="highlight angelscript"><table><tr><td class="code"><pre><code class="hljs angelscript">cat postgresql.tar |docker <span class="hljs-keyword">import</span> - postgresql:<span class="hljs-number">11.2</span><span class="hljs-number">.2</span><br></code></pre></td></tr></table></figure>
<h1 id="错误处理"><a href="#错误处理" class="headerlink" title="错误处理"></a>错误处理</h1><figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">https:<span class="hljs-regexp">//</span>www.libaocai.com/<span class="hljs-number">2767</span>.html<br></code></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>PostgreSQL</category>
        <category>docker</category>
      </categories>
      <tags>
        <tag>PostgreSQL</tag>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>gcc, g++ 使用切换</title>
    <url>/Linux/g/gcc/Linux_gxx/</url>
    <content><![CDATA[<h1 id="安装版本"><a href="#安装版本" class="headerlink" title="安装版本"></a>安装版本</h1><figure class="highlight apache"><table><tr><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">sudo</span> apt-get install gcc-<span class="hljs-number">4</span>.<span class="hljs-number">8</span> gcc-<span class="hljs-number">4</span>.<span class="hljs-number">8</span>-multilib g++-<span class="hljs-number">4</span>.<span class="hljs-number">8</span> g++-<span class="hljs-number">4</span>.<span class="hljs-number">8</span>-multilib<br></code></pre></td></tr></table></figure>
<a id="more"></a>
<h1 id="添加候选版本"><a href="#添加候选版本" class="headerlink" title="添加候选版本"></a>添加候选版本</h1><figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">sudo update-alternatives --install <span class="hljs-regexp">/usr/</span>bin<span class="hljs-regexp">/g++ g++ /u</span>sr<span class="hljs-regexp">/bin/g</span>++-<span class="hljs-number">4.8</span> <span class="hljs-number">100</span><br>sudo update-alternatives --install <span class="hljs-regexp">/usr/</span>bin<span class="hljs-regexp">/gcc gcc /u</span>sr<span class="hljs-regexp">/bin/g</span>cc-<span class="hljs-number">4.8</span> <span class="hljs-number">100</span><br></code></pre></td></tr></table></figure>
<h1 id="版本切换"><a href="#版本切换" class="headerlink" title="版本切换"></a>版本切换</h1><figure class="highlight pgsql"><table><tr><td class="code"><pre><code class="hljs pgsql">sudo <span class="hljs-keyword">update</span>-alternatives <span class="hljs-comment">--config g++</span><br>sudo <span class="hljs-keyword">update</span>-alternatives <span class="hljs-comment">--config gcc</span><br></code></pre></td></tr></table></figure>
<h1 id="验证版本"><a href="#验证版本" class="headerlink" title="验证版本"></a>验证版本</h1><figure class="highlight routeros"><table><tr><td class="code"><pre><code class="hljs routeros">jintao@localhost:~/soft/postgresql-9.1.6$ g++ -v<br>Using built-in specs.<br><span class="hljs-attribute">COLLECT_GCC</span>=g++<br><span class="hljs-attribute">COLLECT_LTO_WRAPPER</span>=/usr/lib/gcc/x86_64-linux-gnu/4.8/lto-wrapper<br>Target: x86_64-linux-gnu<br>Configured with: <span class="hljs-built_in">..</span>/src/configure -v <span class="hljs-attribute">--with-pkgversion</span>=<span class="hljs-string">&#x27;Ubuntu 4.8.5-4ubuntu8&#x27;</span> <span class="hljs-attribute">--with-bugurl</span>=file:///usr/share/doc/gcc-4.8/README.Bugs --enable-        <span class="hljs-attribute">languages</span>=c,c++,go,d,fortran,objc,obj-c++ <span class="hljs-attribute">--prefix</span>=/usr <span class="hljs-attribute">--program-suffix</span>=-4.8 --enable-shared --enable-linker-build-id <span class="hljs-attribute">--libexecdir</span>=/usr/lib --without-included-gettext <span class="hljs-attribute">--enable-threads</span>=posix <span class="hljs-attribute">--with-gxx-include-dir</span>=/usr/include/c++/4.8 <span class="hljs-attribute">--libdir</span>=/usr/lib --enable-nls <span class="hljs-attribute">--with-sysroot</span>=/ <span class="hljs-attribute">--enable-clocale</span>=gnu --enable-libstdcxx-<span class="hljs-builtin-name">debug</span> <span class="hljs-attribute">--enable-libstdcxx-time</span>=<span class="hljs-literal">yes</span> --enable-gnu-unique-object --disable-libmudflap --enable-plugin --with-system-zlib --enable-objc-gc --enable-multiarch --disable-werror <span class="hljs-attribute">--with-arch-32</span>=i686 <span class="hljs-attribute">--with-abi</span>=m64 <span class="hljs-attribute">--with-multilib-list</span>=m32,m64,mx32 <span class="hljs-attribute">--with-tune</span>=generic <span class="hljs-attribute">--enable-checking</span>=release <span class="hljs-attribute">--build</span>=x86_64-linux-gnu <span class="hljs-attribute">--host</span>=x86_64-linux-gnu <span class="hljs-attribute">--target</span>=x86_64-linux-gnu<br>Thread model: posix<br>gcc version 4.8.5 (Ubuntu 4.8.5-4ubuntu8)<br><br>jintao@localhost:~/soft/postgresql-9.1.6$ gcc -v<br>Using built-in specs.<br><span class="hljs-attribute">COLLECT_GCC</span>=gcc<br><span class="hljs-attribute">COLLECT_LTO_WRAPPER</span>=/usr/lib/gcc/x86_64-linux-gnu/4.8/lto-wrapper<br>Target: x86_64-linux-gnu<br>Configured with: <span class="hljs-built_in">..</span>/src/configure -v <span class="hljs-attribute">--with-pkgversion</span>=<span class="hljs-string">&#x27;Ubuntu 4.8.5-4ubuntu8&#x27;</span> <span class="hljs-attribute">--with-bugurl</span>=file:///usr/share/doc/gcc-4.8/README.Bugs <span class="hljs-attribute">--enable-languages</span>=c,c++,go,d,fortran,objc,obj-c++ <span class="hljs-attribute">--prefix</span>=/usr <span class="hljs-attribute">--program-suffix</span>=-4.8 --enable-shared --enable-linker-build-id <span class="hljs-attribute">--libexecdir</span>=/usr/lib --without-included-gettext <span class="hljs-attribute">--enable-threads</span>=posix <span class="hljs-attribute">--with-gxx-include-dir</span>=/usr/include/c++/4.8 <span class="hljs-attribute">--libdir</span>=/usr/lib --enable-nls <span class="hljs-attribute">--with-sysroot</span>=/ <span class="hljs-attribute">--enable-clocale</span>=gnu --enable-libstdcxx-<span class="hljs-builtin-name">debug</span> <span class="hljs-attribute">--enable-libstdcxx-time</span>=<span class="hljs-literal">yes</span> --enable-gnu-unique-object --disable-libmudflap --enable-plugin --with-system-zlib --enable-objc-gc --enable-multiarch --disable-werror <span class="hljs-attribute">--with-arch-32</span>=i686 <span class="hljs-attribute">--with-abi</span>=m64 <span class="hljs-attribute">--with-multilib-list</span>=m32,m64,mx32 <span class="hljs-attribute">--with-tune</span>=generic <span class="hljs-attribute">--enable-checking</span>=release <span class="hljs-attribute">--build</span>=x86_64-linux-gnu <span class="hljs-attribute">--host</span>=x86_64-linux-gnu <span class="hljs-attribute">--target</span>=x86_64-linux-gnu<br>Thread model: posix<br>gcc version 4.8.5 (Ubuntu 4.8.5-4ubuntu8)<br><br></code></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Linux</category>
        <category>g++</category>
        <category>gcc</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>g++</tag>
        <tag>gcc</tag>
      </tags>
  </entry>
  <entry>
    <title>PostgreSQL git commit 阅读记录</title>
    <url>/PostgreSQL/PostgreSQL_git_log/</url>
    <content><![CDATA[<p>记录阅读PostgreSQL git 提交记录, 觉得好的记录一下.</p>
<a id="more"></a>
<h1 id="PG14"><a href="#PG14" class="headerlink" title="PG14"></a>PG14</h1><h2 id="Support-tab-complete-for-TRUNCATE-on-foreign-tables"><a href="#Support-tab-complete-for-TRUNCATE-on-foreign-tables" class="headerlink" title="Support tab-complete for TRUNCATE on foreign tables."></a>Support tab-complete for TRUNCATE on foreign tables.</h2><figure class="highlight apache"><table><tr><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">commit</span> <span class="hljs-number">81</span>e<span class="hljs-number">094</span>bdfdd<span class="hljs-number">6</span>cf<span class="hljs-number">6568</span>cba<span class="hljs-number">2</span>b<span class="hljs-number">25</span>eea<span class="hljs-number">9876</span>daceaacb<br><span class="hljs-attribute">Author</span>: Fujii Masao &lt;fujii@postgresql.org&gt;<br><span class="hljs-attribute">Date</span>:   Mon Apr <span class="hljs-number">12</span> <span class="hljs-number">21</span>:<span class="hljs-number">34</span>:<span class="hljs-number">23</span> <span class="hljs-number">2021</span> +<span class="hljs-number">0900</span><br><br>    <span class="hljs-attribute">Support</span> tab-complete for TRUNCATE <span class="hljs-literal">on</span> foreign tables.<br><br>    <span class="hljs-attribute">Commit</span> <span class="hljs-number">8</span>ff<span class="hljs-number">1</span>c<span class="hljs-number">94649</span> extended TRUNCATE command so that it can also truncate<br>    <span class="hljs-attribute">foreign</span> tables. But it forgot to support tab-complete for TRUNCATE <span class="hljs-literal">on</span><br>    <span class="hljs-attribute">foreign</span> tables. That is, previously tab-complete for TRUNCATE displayed<br>    <span class="hljs-attribute">only</span> the names of regular tables.<br><br>    <span class="hljs-attribute">This</span> commit improves tab-complete for TRUNCATE so that it displays also<br>    <span class="hljs-attribute">the</span> names of foreign tables.<br><br>    <span class="hljs-attribute">Author</span>: Fujii Masao<br>    <span class="hljs-attribute">Reviewed</span>-by: Bharath Rupireddy<br>    <span class="hljs-attribute">Discussion</span>: https://postgr.es/m/<span class="hljs-number">551</span>ed<span class="hljs-number">8</span>c<span class="hljs-number">1</span>-f<span class="hljs-number">531</span>-<span class="hljs-number">818</span>b-<span class="hljs-number">664</span>a-<span class="hljs-number">2</span>cecdab<span class="hljs-number">99</span>cd<span class="hljs-number">8</span>@oss.nttdata.com<br><br></code></pre></td></tr></table></figure>
<h2 id="Add-information-of-total-data-processed-to-replication-slot-stats"><a href="#Add-information-of-total-data-processed-to-replication-slot-stats" class="headerlink" title="Add information of total data processed to replication slot stats."></a>Add information of total data processed to replication slot stats.</h2><figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">commit</span> f5fc2f5b23d1b1dff60f8ca5dc211161df47eda4 (<span class="hljs-keyword">HEAD</span> -&gt; <span class="hljs-keyword">master</span>, origin/<span class="hljs-keyword">master</span>, origin/<span class="hljs-keyword">HEAD</span>)<br>Author: Amit Kapila &lt;akapila@postgresql.org&gt;<br><span class="hljs-built_in">Date</span>:   Fri Apr <span class="hljs-number">16</span> <span class="hljs-number">07</span>:<span class="hljs-number">34</span>:<span class="hljs-number">43</span> <span class="hljs-number">2021</span> +<span class="hljs-number">0530</span><br><br>    <span class="hljs-keyword">Add</span> information <span class="hljs-keyword">of</span> total <span class="hljs-keyword">data</span> processed <span class="hljs-keyword">to</span> <span class="hljs-keyword">replication</span> slot stats.<br><br>    This adds the <span class="hljs-keyword">statistics</span> about total transactions <span class="hljs-keyword">count</span> <span class="hljs-keyword">and</span> total<br>    <span class="hljs-keyword">transaction</span> <span class="hljs-keyword">data</span> logically sent <span class="hljs-keyword">to</span> the decoding <span class="hljs-keyword">output</span> <span class="hljs-keyword">plugin</span> <span class="hljs-keyword">from</span><br>    ReorderBuffer. <span class="hljs-keyword">Users</span> can <span class="hljs-keyword">query</span> the pg_stat_replication_slots <span class="hljs-keyword">view</span> <span class="hljs-keyword">to</span> <span class="hljs-keyword">check</span><br>    these stats.<br><br>    Suggested-<span class="hljs-keyword">by</span>: Andres Freund<br>    Author: Vignesh C <span class="hljs-keyword">and</span> Amit Kapila<br>    Reviewed-<span class="hljs-keyword">by</span>: Sawada Masahiko, Amit Kapila<br>    Discussion: https://postgr.es/m/<span class="hljs-number">20210319185247.</span>ldebgpdaxsowiflw@alap3.anarazel.de<br><br><br></code></pre></td></tr></table></figure>
<h2 id="Add-missing-COMPRESSION-into-CREATE-TABLE-synopsis"><a href="#Add-missing-COMPRESSION-into-CREATE-TABLE-synopsis" class="headerlink" title="Add missing COMPRESSION into CREATE TABLE synopsis."></a>Add missing COMPRESSION into CREATE TABLE synopsis.</h2><figure class="highlight apache"><table><tr><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">commit</span> e<span class="hljs-number">2</span>e<span class="hljs-number">2</span>efca<span class="hljs-number">85</span>b<span class="hljs-number">4857361780</span>ed<span class="hljs-number">0</span>c<span class="hljs-number">736</span>c<span class="hljs-number">2</span>a<span class="hljs-number">44</span>edb<span class="hljs-number">458</span>a<br><span class="hljs-attribute">Author</span>: Fujii Masao &lt;fujii@postgresql.org&gt;<br><span class="hljs-attribute">Date</span>:   Thu Apr <span class="hljs-number">15</span> <span class="hljs-number">23</span>:<span class="hljs-number">15</span>:<span class="hljs-number">19</span> <span class="hljs-number">2021</span> +<span class="hljs-number">0900</span><br><br>    <span class="hljs-attribute">doc</span>: Add missing COMPRESSION into CREATE TABLE synopsis.<br><br>    <span class="hljs-attribute">Commit</span> bbe<span class="hljs-number">0</span>a<span class="hljs-number">81</span>db<span class="hljs-number">6</span> introduced <span class="hljs-string">&quot;INCLUDING COMPRESSION&quot;</span> option<br>    <span class="hljs-attribute">in</span> CREATE TABLE command, but forgot to mention it in the<br>    <span class="hljs-attribute">CREATE</span> TABLE syntax synopsis.<br><br>    <span class="hljs-attribute">Author</span>: Fujii Masao<br>    <span class="hljs-attribute">Reviewed</span>-by: Michael Paquier<br>    <span class="hljs-attribute">Discussion</span>: https://postgr.es/m/<span class="hljs-number">54</span>d<span class="hljs-number">30</span>e<span class="hljs-number">66</span>-dbd<span class="hljs-number">6</span>-<span class="hljs-number">5485</span>-aaf<span class="hljs-number">6</span>-a<span class="hljs-number">291</span>ed<span class="hljs-number">55919</span>d@oss.nttdata.com<br><br></code></pre></td></tr></table></figure>
<h2 id="新增语法ALTER-SUBSCRIPTION-…-ADD-DROP-PUBLICATION"><a href="#新增语法ALTER-SUBSCRIPTION-…-ADD-DROP-PUBLICATION" class="headerlink" title="新增语法ALTER SUBSCRIPTION … ADD/DROP PUBLICATION"></a>新增语法ALTER SUBSCRIPTION … ADD/DROP PUBLICATION</h2><figure class="highlight apache"><table><tr><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">commit</span> <span class="hljs-number">82</span>ed<span class="hljs-number">7748</span>b<span class="hljs-number">710</span>e<span class="hljs-number">3</span>ddce<span class="hljs-number">3</span>f<span class="hljs-number">7</span>ebc<span class="hljs-number">74</span>af<span class="hljs-number">80</span>fe<span class="hljs-number">4869492</span>f<br><span class="hljs-attribute">Author</span>: Peter Eisentraut &lt;peter@eisentraut.org&gt;<br><span class="hljs-attribute">Date</span>:   Tue Apr <span class="hljs-number">6</span> <span class="hljs-number">10</span>:<span class="hljs-number">44</span>:<span class="hljs-number">26</span> <span class="hljs-number">2021</span> +<span class="hljs-number">0200</span><br><br>    <span class="hljs-attribute">ALTER</span> SUBSCRIPTION ... ADD/DROP PUBLICATION<br><br>    <span class="hljs-attribute">At</span> present, if we want to update publications in a subscription, we<br>    <span class="hljs-attribute">can</span> use SET PUBLICATION.  However, it requires supplying <span class="hljs-literal">all</span><br>    <span class="hljs-attribute">publications</span> that exists and the new publications.  If we want to add<br>    <span class="hljs-attribute">new</span> publications, it&#x27;s inconvenient.  The new syntax only supplies the<br>    <span class="hljs-attribute">new</span> publications.  When the refresh is true, it only refreshes the new<br>    <span class="hljs-attribute">publications</span>.<br><br>    <span class="hljs-attribute">Author</span>: Japin Li &lt;japinli@hotmail.com&gt;<br>    <span class="hljs-attribute">Author</span>: Bharath Rupireddy &lt;bharath.rupireddyforpostgres@gmail.com&gt;<br>    <span class="hljs-attribute">Discussion</span>: https://www.postgresql.org/message-id/flat/MEYP<span class="hljs-number">282</span>MB<span class="hljs-number">166939</span>D<span class="hljs-number">0</span>D<span class="hljs-number">6</span>C<span class="hljs-number">480</span>B<span class="hljs-number">7</span>FBE<span class="hljs-number">7</span>EFFBB<span class="hljs-number">6</span>BC<span class="hljs-number">0</span>@MEYP<span class="hljs-number">282</span>MB<span class="hljs-number">1669</span>.AUSP<span class="hljs-number">282</span>.PROD.OUTLOOK.COM<br><br></code></pre></td></tr></table></figure>
<h2 id="SP-GiST-Support-INCLUDE’d-columns"><a href="#SP-GiST-Support-INCLUDE’d-columns" class="headerlink" title="SP-GiST. Support INCLUDE’d columns"></a>SP-GiST. Support INCLUDE’d columns</h2><figure class="highlight apache"><table><tr><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">commit</span> <span class="hljs-number">09</span>c<span class="hljs-number">1</span>c<span class="hljs-number">6</span>ab<span class="hljs-number">4</span>bc<span class="hljs-number">5764</span>dd<span class="hljs-number">69</span>c<span class="hljs-number">53</span>ccfd<span class="hljs-number">43</span>b<span class="hljs-number">2060</span>b<span class="hljs-number">1</span>fd<span class="hljs-number">090</span><br><span class="hljs-attribute">Author</span>: Tom Lane &lt;tgl@sss.pgh.pa.us&gt;<br><span class="hljs-attribute">Date</span>:   Mon Apr <span class="hljs-number">5</span> <span class="hljs-number">18</span>:<span class="hljs-number">41</span>:<span class="hljs-number">09</span> <span class="hljs-number">2021</span> -<span class="hljs-number">0400</span><br><br>    <span class="hljs-attribute">Support</span> INCLUDE&#x27;d columns in SP-GiST.<br><br>    <span class="hljs-attribute">Not</span> much to say here: does what it says <span class="hljs-literal">on</span> the tin.<br>    <span class="hljs-attribute">We</span> steal a previously-always-zero bit from the nextOffset<br>    <span class="hljs-attribute">field</span> of leaf index tuples in order to track whether there<br>    <span class="hljs-attribute">is</span> a nulls bitmap.  Otherwise it works about like included<br>    <span class="hljs-attribute">columns</span> in other index types.<br><br>    <span class="hljs-attribute">Pavel</span> Borisov, reviewed by Andrey Borodin and Anastasia Lubennikova,<br>    <span class="hljs-attribute">and</span> rather heavily editorialized <span class="hljs-literal">on</span> by me<br><br>    <span class="hljs-attribute">Discussion</span>: https://postgr.es/m/CALT<span class="hljs-number">9</span>ZEFi-vMp<span class="hljs-number">4</span>faht<span class="hljs-number">9</span>f<span class="hljs-number">9</span>Junb<span class="hljs-number">1</span>nO<span class="hljs-number">3</span>NOSjhpxTmbm<span class="hljs-number">1</span>UGLMsLqiEQ@mail.gmail.com<br><br></code></pre></td></tr></table></figure>
<h2 id="Change-return-type-of-EXTRACT-from-float8-to-numeric"><a href="#Change-return-type-of-EXTRACT-from-float8-to-numeric" class="headerlink" title="Change return type of EXTRACT from float8 to numeric"></a>Change return type of EXTRACT from float8 to numeric</h2><figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">commit</span> a2da77cdb4661826482ebf2ddba1f953bc74afe4<br>Author: Peter Eisentraut &lt;peter@eisentraut.org&gt;<br><span class="hljs-built_in">Date</span>:   Tue Apr <span class="hljs-number">6</span> <span class="hljs-number">07</span>:<span class="hljs-number">17</span>:<span class="hljs-number">13</span> <span class="hljs-number">2021</span> +<span class="hljs-number">0200</span><br><br>    <span class="hljs-keyword">Change</span> <span class="hljs-keyword">return</span> <span class="hljs-keyword">type</span> <span class="hljs-keyword">of</span> <span class="hljs-keyword">EXTRACT</span> <span class="hljs-keyword">to</span> <span class="hljs-built_in">numeric</span><br><br>    The previous implementation <span class="hljs-keyword">of</span> <span class="hljs-keyword">EXTRACT</span> mapped internally <span class="hljs-keyword">to</span><br>    date_part(), which returned <span class="hljs-keyword">type</span> <span class="hljs-keyword">double</span> <span class="hljs-keyword">precision</span> (since it was<br>    implemented <span class="hljs-keyword">long</span> <span class="hljs-keyword">before</span> the <span class="hljs-built_in">numeric</span> <span class="hljs-keyword">type</span> existed).  This can <span class="hljs-keyword">lead</span> <span class="hljs-keyword">to</span><br>    imprecise <span class="hljs-keyword">output</span> <span class="hljs-keyword">in</span> <span class="hljs-keyword">some</span> cases, so <span class="hljs-keyword">returning</span> <span class="hljs-built_in">numeric</span> would be<br>    preferrable.  Changing the <span class="hljs-keyword">return</span> <span class="hljs-keyword">type</span> <span class="hljs-keyword">of</span> an existing <span class="hljs-keyword">function</span> <span class="hljs-keyword">is</span> a<br>    <span class="hljs-built_in">bit</span> risky, so instead we <span class="hljs-keyword">do</span> the <span class="hljs-keyword">following</span>:  We implement a <span class="hljs-keyword">new</span> <span class="hljs-keyword">set</span> <span class="hljs-keyword">of</span><br>    functions, which <span class="hljs-keyword">are</span> <span class="hljs-keyword">now</span> called <span class="hljs-string">&quot;extract&quot;</span>, <span class="hljs-keyword">in</span> <span class="hljs-keyword">parallel</span> <span class="hljs-keyword">to</span> the existing<br>    date_part functions.  They <span class="hljs-keyword">work</span> the same way internally but <span class="hljs-keyword">use</span><br>    <span class="hljs-built_in">numeric</span> instead <span class="hljs-keyword">of</span> float8.  The <span class="hljs-keyword">EXTRACT</span> construct <span class="hljs-keyword">is</span> <span class="hljs-keyword">now</span> mapped <span class="hljs-keyword">by</span> the<br>    parser <span class="hljs-keyword">to</span> these <span class="hljs-keyword">new</span> <span class="hljs-keyword">extract</span> functions.  That way, dumps <span class="hljs-keyword">of</span> views<br>    etc. <span class="hljs-keyword">from</span> <span class="hljs-keyword">old</span> <span class="hljs-keyword">versions</span> (which would <span class="hljs-keyword">use</span> date_part) continue <span class="hljs-keyword">to</span> <span class="hljs-keyword">work</span><br>    unchanged, but <span class="hljs-keyword">new</span> uses will <span class="hljs-keyword">map</span> <span class="hljs-keyword">to</span> the <span class="hljs-keyword">new</span> <span class="hljs-keyword">extract</span> functions.<br><br>    Additionally, the <span class="hljs-keyword">reverse</span> compilation <span class="hljs-keyword">of</span> <span class="hljs-keyword">EXTRACT</span> <span class="hljs-keyword">now</span> reproduces the<br>    original syntax, <span class="hljs-keyword">using</span> the <span class="hljs-keyword">new</span> mechanism introduced <span class="hljs-keyword">in</span><br>    <span class="hljs-number">40</span>c24bfef92530bd846e111c1742c2a54441c62c.<br><br>    The <span class="hljs-keyword">following</span> minor changes <span class="hljs-keyword">of</span> behavior <span class="hljs-keyword">result</span> <span class="hljs-keyword">from</span> the <span class="hljs-keyword">new</span><br>    implementation:<br><br>    - The <span class="hljs-keyword">column</span> <span class="hljs-keyword">name</span> <span class="hljs-keyword">from</span> an isolated <span class="hljs-keyword">EXTRACT</span> <span class="hljs-keyword">call</span> <span class="hljs-keyword">is</span> <span class="hljs-keyword">now</span> <span class="hljs-string">&quot;extract&quot;</span><br>      instead <span class="hljs-keyword">of</span> <span class="hljs-string">&quot;date_part&quot;</span>.<br><br>    - <span class="hljs-keyword">Extract</span> <span class="hljs-keyword">from</span> <span class="hljs-built_in">date</span> <span class="hljs-keyword">now</span> rejects inappropriate <span class="hljs-keyword">field</span> <span class="hljs-keyword">names</span> such <span class="hljs-keyword">as</span><br>      HOUR.  It was previously mapped internally <span class="hljs-keyword">to</span> <span class="hljs-keyword">extract</span> <span class="hljs-keyword">from</span><br>      <span class="hljs-built_in">timestamp</span>, so it would silently <span class="hljs-keyword">accept</span> everything appropriate <span class="hljs-keyword">for</span><br>      timestamp.<br><br>    - <span class="hljs-keyword">Return</span> <span class="hljs-keyword">values</span> <span class="hljs-keyword">when</span> extracting <span class="hljs-keyword">fields</span> <span class="hljs-keyword">with</span> possibly fractional<br>      <span class="hljs-keyword">values</span>, such <span class="hljs-keyword">as</span> <span class="hljs-keyword">second</span> <span class="hljs-keyword">and</span> epoch, <span class="hljs-keyword">now</span> have the <span class="hljs-keyword">full</span> scale that the<br>      <span class="hljs-keyword">value</span> has internally (so, <span class="hljs-keyword">for</span> example, <span class="hljs-string">&#x27;1.000000&#x27;</span> instead <span class="hljs-keyword">of</span> just<br>      <span class="hljs-string">&#x27;1&#x27;</span>).<br><br>    Reported-<span class="hljs-keyword">by</span>: Petr Fedorov &lt;petr.fedorov@phystech.edu&gt;<br>    Reviewed-<span class="hljs-keyword">by</span>: Tom Lane &lt;tgl@sss.pgh.pa.us&gt;<br>    Discussion: https://www.postgresql.org/message-<span class="hljs-keyword">id</span>/flat/<span class="hljs-number">42</span>b73d2d-da12-ba9f<span class="hljs-number">-570</span>a<span class="hljs-number">-420e0</span>cce19d9@phystech.edu<br><br></code></pre></td></tr></table></figure>
<h2 id="Add-function-pg-log-backend-memory-contexts-to-log-the-memory-contexts-of-specified-backend-process"><a href="#Add-function-pg-log-backend-memory-contexts-to-log-the-memory-contexts-of-specified-backend-process" class="headerlink" title="Add function pg_log_backend_memory_contexts to log the memory contexts of specified backend process."></a>Add function pg_log_backend_memory_contexts to log the memory contexts of specified backend process.</h2><figure class="highlight pgsql"><table><tr><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">commit</span> <span class="hljs-number">43620e328617</span>c1f41a2a54c8cee01723064e3ffa<br>Author: Fujii Masao &lt;fujii@postgresql.org&gt;<br><span class="hljs-type">Date</span>:   Tue Apr <span class="hljs-number">6</span> <span class="hljs-number">13</span>:<span class="hljs-number">44</span>:<span class="hljs-number">15</span> <span class="hljs-number">2021</span> +<span class="hljs-number">0900</span><br><br>    <span class="hljs-keyword">Add</span> <span class="hljs-keyword">function</span> <span class="hljs-keyword">to</span> <span class="hljs-keyword">log</span> the memory contexts <span class="hljs-keyword">of</span> specified backend process.<br><br>    <span class="hljs-keyword">Commit</span> <span class="hljs-number">3e98</span>c0bafb added pg_backend_memory_contexts <span class="hljs-keyword">view</span> <span class="hljs-keyword">to</span> display<br>    the memory contexts <span class="hljs-keyword">of</span> the backend process. However its target process<br>    <span class="hljs-keyword">is</span> limited <span class="hljs-keyword">to</span> the backend that <span class="hljs-keyword">is</span> accessing <span class="hljs-keyword">to</span> the <span class="hljs-keyword">view</span>. So this <span class="hljs-keyword">is</span><br>    <span class="hljs-keyword">not</span> so convenient <span class="hljs-keyword">when</span> investigating the <span class="hljs-keyword">local</span> memory bloat <span class="hljs-keyword">of</span> other<br>    backend process. <span class="hljs-keyword">To</span> improve this situation, this <span class="hljs-keyword">commit</span> adds<br>    pg_log_backend_memory_contexts() <span class="hljs-keyword">function</span> that requests <span class="hljs-keyword">to</span> <span class="hljs-keyword">log</span><br>    the memory contexts <span class="hljs-keyword">of</span> the specified backend process.<br><br>    This information can be <span class="hljs-keyword">also</span> collected <span class="hljs-keyword">by</span> calling<br>    MemoryContextStats(TopMemoryContext) via a debugger. But<br>    this technique cannot be used <span class="hljs-keyword">in</span> <span class="hljs-keyword">some</span> environments because <span class="hljs-keyword">no</span> debugger<br>    <span class="hljs-keyword">is</span> available there. So, pg_log_backend_memory_contexts() allows us <span class="hljs-keyword">to</span><br>    see the memory contexts <span class="hljs-keyword">of</span> specified backend more easily.<br><br>    <span class="hljs-keyword">Only</span> superusers are allowed <span class="hljs-keyword">to</span> request <span class="hljs-keyword">to</span> <span class="hljs-keyword">log</span> the memory contexts<br>    because allowing <span class="hljs-keyword">any</span> users <span class="hljs-keyword">to</span> issue this request at an <span class="hljs-keyword">unbounded</span> rate<br>    would cause lots <span class="hljs-keyword">of</span> <span class="hljs-keyword">log</span> messages <span class="hljs-keyword">and</span> which can lead <span class="hljs-keyword">to</span> denial <span class="hljs-keyword">of</span> service.<br><br>    <span class="hljs-keyword">On</span> receipt <span class="hljs-keyword">of</span> the request, at the next CHECK_FOR_INTERRUPTS(),<br>    the target backend logs its memory contexts at LOG_SERVER_ONLY <span class="hljs-keyword">level</span>,<br>    so that these memory contexts will appear <span class="hljs-keyword">in</span> the <span class="hljs-keyword">server</span> <span class="hljs-keyword">log</span> but <span class="hljs-keyword">not</span><br>    be sent <span class="hljs-keyword">to</span> the client. It logs one message per memory context.<br>    Because <span class="hljs-keyword">if</span> it <span class="hljs-keyword">buffers</span> <span class="hljs-keyword">all</span> memory contexts <span class="hljs-keyword">into</span> StringInfo <span class="hljs-keyword">to</span> <span class="hljs-keyword">log</span> them<br>    <span class="hljs-keyword">as</span> one message, which may require the buffer <span class="hljs-keyword">to</span> be enlarged very much<br>    <span class="hljs-keyword">and</span> lead <span class="hljs-keyword">to</span> OOM error since there can be a <span class="hljs-keyword">large</span> number <span class="hljs-keyword">of</span> memory<br>    contexts <span class="hljs-keyword">in</span> a backend.<br><br>    <span class="hljs-keyword">When</span> a backend process <span class="hljs-keyword">is</span> consuming huge memory, logging <span class="hljs-keyword">all</span> its<br>    memory contexts might overrun available disk space. <span class="hljs-keyword">To</span> prevent this,<br>    now this patch limits the number <span class="hljs-keyword">of</span> child contexts <span class="hljs-keyword">to</span> <span class="hljs-keyword">log</span> per parent<br>    <span class="hljs-keyword">to</span> <span class="hljs-number">100.</span> <span class="hljs-keyword">As</span> <span class="hljs-keyword">with</span> MemoryContextStats(), it supposes that practical cases<br>    <span class="hljs-keyword">where</span> the <span class="hljs-keyword">log</span> gets long will typically be huge numbers <span class="hljs-keyword">of</span> siblings<br>    under the same parent context; <span class="hljs-keyword">while</span> the additional debugging <span class="hljs-keyword">value</span><br>    <span class="hljs-keyword">from</span> seeing details about individual siblings beyond <span class="hljs-number">100</span> will <span class="hljs-keyword">not</span> be <span class="hljs-keyword">large</span>.<br><br>    There was another proposed patch <span class="hljs-keyword">to</span> <span class="hljs-keyword">add</span> the <span class="hljs-keyword">function</span> <span class="hljs-keyword">to</span> <span class="hljs-keyword">return</span><br>    the memory contexts <span class="hljs-keyword">of</span> specified backend <span class="hljs-keyword">as</span> the result sets,<br>    <span class="hljs-keyword">instead</span> <span class="hljs-keyword">of</span> logging them, <span class="hljs-keyword">in</span> the discussion. However that patch <span class="hljs-keyword">is</span><br>    <span class="hljs-keyword">not</span> included <span class="hljs-keyword">in</span> this <span class="hljs-keyword">commit</span> because it had several issues <span class="hljs-keyword">to</span> address.<br><br>    Thanks <span class="hljs-keyword">to</span> Tatsuhito Kasahara, Andres Freund, Tom Lane, Tomas Vondra,<br>    Michael Paquier, Kyotaro Horiguchi <span class="hljs-keyword">and</span> Zhihong Yu <span class="hljs-keyword">for</span> the discussion.<br><br>    Bump catalog <span class="hljs-keyword">version</span>.<br><br>    Author: Atsushi Torikoshi<br>    Reviewed-<span class="hljs-keyword">by</span>: Kyotaro Horiguchi, Zhihong Yu, Fujii Masao<br>    Discussion: https://postgr.es/m/<span class="hljs-number">0271</span>f440ac77f2a4180e0e56ebd944d1@oss.nttdata.com<br><br></code></pre></td></tr></table></figure>
<h2 id="new-GUC-recovery-prefetch"><a href="#new-GUC-recovery-prefetch" class="headerlink" title="new GUC recovery_prefetch"></a>new GUC recovery_prefetch</h2><figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">commit</span> <span class="hljs-number">1</span>d257577e08d3e598011d6850fd1025858de8c8c<br>Author: Thomas Munro &lt;tmunro@postgresql.org&gt;<br><span class="hljs-built_in">Date</span>:   Thu Apr <span class="hljs-number">8</span> <span class="hljs-number">23</span>:<span class="hljs-number">03</span>:<span class="hljs-number">43</span> <span class="hljs-number">2021</span> +<span class="hljs-number">1200</span><br><br>    <span class="hljs-keyword">Optionally</span> prefetch <span class="hljs-keyword">referenced</span> <span class="hljs-keyword">data</span> <span class="hljs-keyword">in</span> recovery.<br>    <br>    Introduce a <span class="hljs-keyword">new</span> GUC recovery_prefetch, disabled <span class="hljs-keyword">by</span> default.  <span class="hljs-keyword">When</span><br>    enabled, look ahead <span class="hljs-keyword">in</span> the WAL <span class="hljs-keyword">and</span> try <span class="hljs-keyword">to</span> initiate <span class="hljs-keyword">asynchronous</span> reading<br>    <span class="hljs-keyword">of</span> <span class="hljs-keyword">referenced</span> <span class="hljs-keyword">data</span> blocks that <span class="hljs-keyword">are</span> <span class="hljs-keyword">not</span> yet cached <span class="hljs-keyword">in</span> our buffer pool.<br>    <span class="hljs-keyword">For</span> <span class="hljs-keyword">now</span>, this <span class="hljs-keyword">is</span> done <span class="hljs-keyword">with</span> posix_fadvise(), which has several caveats.<br>    Better mechanisms will follow <span class="hljs-keyword">in</span> later <span class="hljs-keyword">work</span> <span class="hljs-keyword">on</span> the I/O subsystem.<br>    <br>    The GUC maintenance_io_concurrency <span class="hljs-keyword">is</span> used <span class="hljs-keyword">to</span> <span class="hljs-keyword">limit</span> the <span class="hljs-built_in">number</span> <span class="hljs-keyword">of</span><br>    <span class="hljs-keyword">concurrent</span> I/Os we <span class="hljs-keyword">allow</span> ourselves <span class="hljs-keyword">to</span> initiate, based <span class="hljs-keyword">on</span> pessimistic<br>    heuristics used <span class="hljs-keyword">to</span> infer that I/Os have begun <span class="hljs-keyword">and</span> completed.<br>    <br>    The GUC wal_decode_buffer_size <span class="hljs-keyword">is</span> used <span class="hljs-keyword">to</span> <span class="hljs-keyword">limit</span> the maximum distance we<br>    <span class="hljs-keyword">are</span> prepared <span class="hljs-keyword">to</span> <span class="hljs-keyword">read</span> ahead <span class="hljs-keyword">in</span> the WAL <span class="hljs-keyword">to</span> find uncached blocks.<br>    <br>    Reviewed-<span class="hljs-keyword">by</span>: Alvaro Herrera &lt;alvherre@<span class="hljs-number">2</span>ndquadrant.com&gt; (parts)<br>    Reviewed-<span class="hljs-keyword">by</span>: Andres Freund &lt;andres@anarazel.de&gt; (parts)<br>    Reviewed-<span class="hljs-keyword">by</span>: Tomas Vondra &lt;tomas.vondra@<span class="hljs-number">2</span>ndquadrant.com&gt; (parts)<br>    Tested-<span class="hljs-keyword">by</span>: Tomas Vondra &lt;tomas.vondra@<span class="hljs-number">2</span>ndquadrant.com&gt;<br>    Tested-<span class="hljs-keyword">by</span>: Jakub Wartak &lt;Jakub.Wartak@tomtom.com&gt;<br>    Tested-<span class="hljs-keyword">by</span>: Dmitry Dolgov &lt;<span class="hljs-number">9</span>erthalion6@gmail.com&gt;<br>    Tested-<span class="hljs-keyword">by</span>: Sait Talha Nisanci &lt;Sait.Nisanci@microsoft.com&gt;<br>    Discussion: https://postgr.es/m/CA%<span class="hljs-number">2</span>BhUKGJ4VJN8ttxScUFM8dOKX0BrBiboo5uz1cq%<span class="hljs-number">3</span>DAovOddfHpA%<span class="hljs-number">40</span>mail.gmail.com<br><br></code></pre></td></tr></table></figure>
<h2 id="new-GUC-wal-decode-buffer-size"><a href="#new-GUC-wal-decode-buffer-size" class="headerlink" title="new GUC wal_decode_buffer_size."></a>new GUC wal_decode_buffer_size.</h2><figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">commit</span> f003d9f8721b3249e4aec8a1946034579d40d42c<br>Author: Thomas Munro &lt;tmunro@postgresql.org&gt;<br><span class="hljs-built_in">Date</span>:   Thu Apr <span class="hljs-number">8</span> <span class="hljs-number">23</span>:<span class="hljs-number">03</span>:<span class="hljs-number">34</span> <span class="hljs-number">2021</span> +<span class="hljs-number">1200</span><br><br>    <span class="hljs-keyword">Add</span> circular WAL decoding buffer.<br><br>    Teach xlogreader.c <span class="hljs-keyword">to</span> <span class="hljs-keyword">decode</span> its <span class="hljs-keyword">output</span> <span class="hljs-keyword">into</span> a circular buffer, <span class="hljs-keyword">to</span><br>    support optimizations based <span class="hljs-keyword">on</span> looking ahead.<br><br>     * XLogReadRecord() works <span class="hljs-keyword">as</span> <span class="hljs-keyword">before</span>, consuming <span class="hljs-keyword">records</span> one <span class="hljs-keyword">by</span> one, <span class="hljs-keyword">and</span><br>       allowing them <span class="hljs-keyword">to</span> be examined via the traditional XLogRecGetXXX()<br>       macros.<br><br>     * An alternative <span class="hljs-keyword">new</span> <span class="hljs-keyword">interface</span> XLogNextRecord() <span class="hljs-keyword">is</span> added that <span class="hljs-keyword">returns</span><br>       pointers <span class="hljs-keyword">to</span> DecodedXLogRecord structs that can be examined directly.<br><br>     * XLogReadAhead() provides a <span class="hljs-keyword">second</span> <span class="hljs-keyword">cursor</span> that lets you see<br>       further ahead, <span class="hljs-keyword">as</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">as</span> <span class="hljs-keyword">data</span> <span class="hljs-keyword">is</span> available <span class="hljs-keyword">and</span> there <span class="hljs-keyword">is</span> enough <span class="hljs-keyword">space</span><br>       <span class="hljs-keyword">in</span> the decoding buffer.  This <span class="hljs-keyword">returns</span> DecodedXLogRecord pointers <span class="hljs-keyword">to</span> the<br>       caller, but also adds them <span class="hljs-keyword">to</span> a queue <span class="hljs-keyword">of</span> <span class="hljs-keyword">records</span> that will later be<br>       consumed <span class="hljs-keyword">by</span> XLogNextRecord()/XLogReadRecord().<br><br>    The buffer<span class="hljs-string">&#x27;s size is controlled with wal_decode_buffer_size.  The buffer</span><br><span class="hljs-string">    could potentially be placed into shared memory, for future projects.</span><br><span class="hljs-string">    Large records that don&#x27;</span>t fit <span class="hljs-keyword">in</span> the circular buffer <span class="hljs-keyword">are</span> called<br>    <span class="hljs-string">&quot;oversized&quot;</span> <span class="hljs-keyword">and</span> allocated separately <span class="hljs-keyword">with</span> palloc().<br><br>    Discussion: https://postgr.es/m/CA+hUKGJ4VJN8ttxScUFM8dOKX0BrBiboo5uz1cq=AovOddfHpA@mail.gmail.com<br><br></code></pre></td></tr></table></figure>
<h2 id="Add-functions-to-wait-for-backend-termination"><a href="#Add-functions-to-wait-for-backend-termination" class="headerlink" title="Add functions to wait for backend termination"></a>Add functions to wait for backend termination</h2><figure class="highlight pgsql"><table><tr><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">commit</span> aaf043257205ec523f1ba09a3856464d17cf2281<br>Author: Magnus Hagander &lt;magnus@hagander.net&gt;<br><span class="hljs-type">Date</span>:   Thu Apr <span class="hljs-number">8</span> <span class="hljs-number">11</span>:<span class="hljs-number">32</span>:<span class="hljs-number">14</span> <span class="hljs-number">2021</span> +<span class="hljs-number">0200</span><br><br>    <span class="hljs-keyword">Add</span> <span class="hljs-keyword">functions</span> <span class="hljs-keyword">to</span> wait <span class="hljs-keyword">for</span> backend termination<br><br>    This adds a <span class="hljs-keyword">function</span>, pg_wait_for_backend_termination(), <span class="hljs-keyword">and</span> a <span class="hljs-built_in">new</span><br>    timeout argument <span class="hljs-keyword">to</span> pg_terminate_backend(), which will wait <span class="hljs-keyword">for</span> the<br>    backend <span class="hljs-keyword">to</span> actually terminate (<span class="hljs-keyword">with</span> <span class="hljs-keyword">or</span> <span class="hljs-keyword">without</span> signaling it <span class="hljs-keyword">to</span> <span class="hljs-keyword">do</span> so<br>    depending <span class="hljs-keyword">on</span> which <span class="hljs-keyword">function</span> <span class="hljs-keyword">is</span> <span class="hljs-keyword">called</span>). The <span class="hljs-keyword">default</span> behaviour <span class="hljs-keyword">of</span><br>    pg_terminate_backend() remains being timeout=<span class="hljs-number">0</span> which does <span class="hljs-keyword">not</span> waiting.<br>    <span class="hljs-keyword">For</span> pg_wait_for_backend_termination() the <span class="hljs-keyword">default</span> wait <span class="hljs-keyword">is</span> <span class="hljs-number">5</span> seconds.<br><br>    Author: Bharath Rupireddy<br>    Reviewed-<span class="hljs-keyword">By</span>: Fujii Masao, David Johnston, Muhammad Usama,<br>                 Hou Zhijie, Magnus Hagander<br>    Discussion: https://postgr.es/m/CALj2ACUBpunmyhYZw-kXCYs5NM+h6oG_7Df_Tn4mLmmUQifkqA@mail.gmail.com<br><br></code></pre></td></tr></table></figure>
<h2 id="Add-csvlog-output-for-the-new-query-id-value"><a href="#Add-csvlog-output-for-the-new-query-id-value" class="headerlink" title="Add csvlog output for the new query_id value"></a>Add csvlog output for the new query_id value</h2><figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">commit</span> f57a2f5e03054ade221e554c70e628e1ffae1b66<br>Author: Bruce Momjian &lt;bruce@momjian.us&gt;<br><span class="hljs-built_in">Date</span>:   Wed Apr <span class="hljs-number">7</span> <span class="hljs-number">22</span>:<span class="hljs-number">30</span>:<span class="hljs-number">30</span> <span class="hljs-number">2021</span> <span class="hljs-number">-0400</span><br><br>    <span class="hljs-keyword">Add</span> csvlog <span class="hljs-keyword">output</span> <span class="hljs-keyword">for</span> the <span class="hljs-keyword">new</span> query_id <span class="hljs-keyword">value</span><br><br>    This also adjusts the printf <span class="hljs-keyword">format</span> <span class="hljs-keyword">for</span> <span class="hljs-keyword">query</span> <span class="hljs-keyword">id</span> used <span class="hljs-keyword">by</span> log_line_prefix<br>    (%Q).<br><br>    Reported-<span class="hljs-keyword">by</span>: Justin Pryzby<br><br>    Discussion: https://postgr.es/m/<span class="hljs-number">20210408005402.</span>GG24239@momjian.us<br><br>    Author: Julien Rouhaud, Bruce Momjian<br><br></code></pre></td></tr></table></figure>
<h2 id="SQL-standard-function-body"><a href="#SQL-standard-function-body" class="headerlink" title="SQL-standard function body"></a>SQL-standard function body</h2><figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">commit</span> e717a9a18b2e34c9c40e5259ad4d31cd7e420750<br>Author: Peter Eisentraut &lt;peter@eisentraut.org&gt;<br><span class="hljs-built_in">Date</span>:   Wed Apr <span class="hljs-number">7</span> <span class="hljs-number">21</span>:<span class="hljs-number">30</span>:<span class="hljs-number">08</span> <span class="hljs-number">2021</span> +<span class="hljs-number">0200</span><br><br>    <span class="hljs-keyword">SQL</span>-standard <span class="hljs-keyword">function</span> <span class="hljs-keyword">body</span><br><br>    This adds support <span class="hljs-keyword">for</span> writing <span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">FUNCTION</span> <span class="hljs-keyword">and</span> <span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">PROCEDURE</span><br>    statements <span class="hljs-keyword">for</span> <span class="hljs-keyword">language</span> <span class="hljs-keyword">SQL</span> <span class="hljs-keyword">with</span> a <span class="hljs-keyword">function</span> <span class="hljs-keyword">body</span> that conforms <span class="hljs-keyword">to</span> the<br>    <span class="hljs-keyword">SQL</span> standard <span class="hljs-keyword">and</span> <span class="hljs-keyword">is</span> portable <span class="hljs-keyword">to</span> other implementations.<br><br>    Instead <span class="hljs-keyword">of</span> the PostgreSQL-specific <span class="hljs-keyword">AS</span> $$ <span class="hljs-keyword">string</span> literal $$ syntax,<br>    this allows writing <span class="hljs-keyword">out</span> the <span class="hljs-keyword">SQL</span> statements making up the <span class="hljs-keyword">body</span><br>    unquoted, either <span class="hljs-keyword">as</span> a single <span class="hljs-keyword">statement</span>:<br><br>        <span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">FUNCTION</span> <span class="hljs-keyword">add</span>(a <span class="hljs-built_in">integer</span>, b <span class="hljs-built_in">integer</span>) <span class="hljs-keyword">RETURNS</span> <span class="hljs-built_in">integer</span><br>            <span class="hljs-keyword">LANGUAGE</span> <span class="hljs-keyword">SQL</span><br>            <span class="hljs-keyword">RETURN</span> a + b;<br><br>    or as a block<br><br>        <span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">PROCEDURE</span> insert_data(a <span class="hljs-built_in">integer</span>, b <span class="hljs-built_in">integer</span>)<br>        <span class="hljs-keyword">LANGUAGE</span> <span class="hljs-keyword">SQL</span><br>        <span class="hljs-keyword">BEGIN</span> ATOMIC<br>          <span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> tbl <span class="hljs-keyword">VALUES</span> (a);<br>          <span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> tbl <span class="hljs-keyword">VALUES</span> (b);<br>        <span class="hljs-keyword">END</span>;<br><br>    The function body is parsed at function definition time and stored as<br>    expression nodes in a new pg_proc column prosqlbody.  So at run time,<br>    no further parsing is required.<br><br>    However, this form does not support polymorphic arguments, because<br>    there is no more parse analysis done at <span class="hljs-keyword">call</span> time.<br><br>    Dependencies <span class="hljs-keyword">between</span> the <span class="hljs-keyword">function</span> <span class="hljs-keyword">and</span> the objects it uses <span class="hljs-keyword">are</span> fully<br>    tracked.<br><br>    A <span class="hljs-keyword">new</span> <span class="hljs-keyword">RETURN</span> <span class="hljs-keyword">statement</span> <span class="hljs-keyword">is</span> introduced.  This can <span class="hljs-keyword">only</span> be used inside<br>    <span class="hljs-keyword">function</span> bodies.  Internally, it <span class="hljs-keyword">is</span> treated much <span class="hljs-keyword">like</span> a <span class="hljs-keyword">SELECT</span><br>    statement.<br><br>    psql needs <span class="hljs-keyword">some</span> <span class="hljs-keyword">new</span> intelligence <span class="hljs-keyword">to</span> <span class="hljs-keyword">keep</span> track <span class="hljs-keyword">of</span> <span class="hljs-keyword">function</span> <span class="hljs-keyword">body</span><br>    boundaries so that it doesn<span class="hljs-string">&#x27;t send off statements when it sees</span><br><span class="hljs-string">    semicolons that are inside a function body.</span><br><span class="hljs-string"></span><br><span class="hljs-string">    Tested-by: Jaime Casanova &lt;jcasanov@systemguards.com.ec&gt;</span><br><span class="hljs-string">    Reviewed-by: Julien Rouhaud &lt;rjuju123@gmail.com&gt;</span><br><span class="hljs-string">    Discussion: https://www.postgresql.org/message-id/flat/1c11f1eb-f00c-43b7-799d-2d44132c02d7@2ndquadrant.com</span><br><span class="hljs-string"></span><br></code></pre></td></tr></table></figure>
<h2 id="Enable-parallel-SELECT-for-“INSERT-INTO-…-SELECT-…”"><a href="#Enable-parallel-SELECT-for-“INSERT-INTO-…-SELECT-…”" class="headerlink" title="Enable parallel SELECT for “INSERT INTO … SELECT …”"></a>Enable parallel SELECT for “INSERT INTO … SELECT …”</h2><figure class="highlight vhdl"><table><tr><td class="code"><pre><code class="hljs vhdl">commit <span class="hljs-number">05</span>c8482f7f69a954fd65fce85f896e848fc48197<br>Author: Amit Kapila &lt;akapila@postgresql.org&gt;<br>Date:   Wed Mar <span class="hljs-number">10</span> <span class="hljs-number">07</span>:<span class="hljs-number">38</span>:<span class="hljs-number">58</span> <span class="hljs-number">2021</span> +<span class="hljs-number">0530</span><br><br>    Enable parallel <span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">for</span> <span class="hljs-string">&quot;INSERT INTO ... SELECT ...&quot;</span>.<br><br>    Parallel <span class="hljs-keyword">SELECT</span> can<span class="hljs-symbol">&#x27;t</span> be utilized <span class="hljs-keyword">for</span> INSERT <span class="hljs-keyword">in</span> the following cases:<br>    - INSERT statement uses the <span class="hljs-keyword">ON</span> CONFLICT DO UPDATE clause<br>    - Target table has a parallel-unsafe: trigger, index expression <span class="hljs-keyword">or</span><br>      predicate, column <span class="hljs-keyword">default</span> expression <span class="hljs-keyword">or</span> check constraint<br>    - Target table has a parallel-unsafe domain constraint <span class="hljs-keyword">on</span> any column<br>    - Target table <span class="hljs-keyword">is</span> a partitioned table <span class="hljs-keyword">with</span> a parallel-unsafe partition key<br>      expression <span class="hljs-keyword">or</span> support <span class="hljs-keyword">function</span><br><br>    The planner <span class="hljs-keyword">is</span> updated <span class="hljs-keyword">to</span> perform additional parallel-safety checks <span class="hljs-keyword">for</span><br>    the cases listed above, <span class="hljs-keyword">for</span> determining whether it <span class="hljs-keyword">is</span> safe <span class="hljs-keyword">to</span> run INSERT<br>    <span class="hljs-keyword">in</span> parallel-mode <span class="hljs-keyword">with</span> an underlying parallel <span class="hljs-keyword">SELECT</span>. The planner will<br>    consider using parallel <span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">for</span> <span class="hljs-string">&quot;INSERT INTO ... SELECT ...&quot;</span>, provided<br>    nothing unsafe <span class="hljs-keyword">is</span> found from the additional parallel-safety checks, <span class="hljs-keyword">or</span><br>    from the existing parallel-safety checks <span class="hljs-keyword">for</span> <span class="hljs-keyword">SELECT</span>.<br><br>    <span class="hljs-keyword">While</span> checking parallel-safety, we need <span class="hljs-keyword">to</span> check it <span class="hljs-keyword">for</span> <span class="hljs-keyword">all</span> the partitions<br>    <span class="hljs-keyword">on</span> the table which can be costly especially <span class="hljs-keyword">when</span> we decide <span class="hljs-keyword">not</span> <span class="hljs-keyword">to</span> <span class="hljs-keyword">use</span> a<br>    parallel plan. So, <span class="hljs-keyword">in</span> a separate patch, we will introduce a GUC <span class="hljs-keyword">and</span> <span class="hljs-keyword">or</span> a<br>    reloption <span class="hljs-keyword">to</span> enable/disable parallelism <span class="hljs-keyword">for</span> Insert statements.<br><br>    Prior <span class="hljs-keyword">to</span> entering parallel-mode <span class="hljs-keyword">for</span> the execution <span class="hljs-keyword">of</span> INSERT <span class="hljs-keyword">with</span> parallel<br>    <span class="hljs-keyword">SELECT</span>, a TransactionId <span class="hljs-keyword">is</span> acquired <span class="hljs-keyword">and</span> assigned <span class="hljs-keyword">to</span> the current<br>    transaction state. This <span class="hljs-keyword">is</span> necessary <span class="hljs-keyword">to</span> prevent the INSERT from attempting<br>    <span class="hljs-keyword">to</span> assign the TransactionId whilst <span class="hljs-keyword">in</span> parallel-mode, which <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> allowed.<br>    This approach has a disadvantage <span class="hljs-keyword">in</span> that <span class="hljs-keyword">if</span> the underlying <span class="hljs-keyword">SELECT</span> does <span class="hljs-keyword">not</span><br>    <span class="hljs-keyword">return</span> any rows, <span class="hljs-keyword">then</span> the TransactionId <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> used, however that<br>    shouldn<span class="hljs-symbol">&#x27;t</span> happen <span class="hljs-keyword">in</span> practice <span class="hljs-keyword">in</span> many cases.<br><br>    Author: Greg Nancarrow, Amit Langote, Amit Kapila<br>    Reviewed-by: Amit Langote, Hou Zhijie, Takayuki Tsunakawa, Antonin Houska, Bharath Rupireddy, Dilip Kumar, Vignesh C, Zhihong Yu, Amit Kapila<br>    Tested-by: Tang, Haiying<br>    Discussion: https://postgr.es/m/CAJcOf-cXnB5cnMKqWEp2E2z7Mvcd04iLVmV=qpFJrR3AcrTS3g@mail.gmail.com<br>    Discussion: https://postgr.es/m/CAJcOf-fAdj=nDKMsRhQzndm-O13NY4dL6xGcEvdX5Xvbbi0V7g@mail.gmail.com<br><br>commit <span class="hljs-number">0</span>ba71107efeeccde9158f47118f95043afdca0bb<br><br></code></pre></td></tr></table></figure>
<h2 id="Add-—tablespace-option-to-reindexd"><a href="#Add-—tablespace-option-to-reindexd" class="headerlink" title="Add —tablespace option to reindexd"></a>Add —tablespace option to reindexd</h2><figure class="highlight pgsql"><table><tr><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">Add</span> <span class="hljs-comment">--tablespace option to reindexdb</span><br><br>This <span class="hljs-keyword">option</span> provides <span class="hljs-keyword">REINDEX</span> (<span class="hljs-keyword">TABLESPACE</span>) <span class="hljs-keyword">for</span> reindexdb, applying the<br><span class="hljs-keyword">tablespace</span> <span class="hljs-keyword">value</span> given <span class="hljs-keyword">by</span> the caller <span class="hljs-keyword">to</span> <span class="hljs-keyword">all</span> the <span class="hljs-keyword">REINDEX</span> queries<br><span class="hljs-keyword">generated</span>.<br><br><span class="hljs-keyword">While</span> <span class="hljs-keyword">on</span> it, this <span class="hljs-keyword">commit</span> adds <span class="hljs-keyword">some</span> tests <span class="hljs-keyword">for</span> <span class="hljs-keyword">REINDEX</span> <span class="hljs-keyword">TABLESPACE</span>, <span class="hljs-keyword">with</span><br><span class="hljs-keyword">and</span> <span class="hljs-keyword">without</span> <span class="hljs-keyword">CONCURRENTLY</span>, <span class="hljs-keyword">when</span> run <span class="hljs-keyword">on</span> toast indexes <span class="hljs-keyword">and</span> <span class="hljs-keyword">tables</span>.  Such<br>operations are <span class="hljs-keyword">not</span> allowed, <span class="hljs-keyword">and</span> toast relation names are <span class="hljs-keyword">not</span> <span class="hljs-keyword">stable</span><br>enough <span class="hljs-keyword">to</span> be part <span class="hljs-keyword">of</span> the main regression test suite (even <span class="hljs-keyword">if</span> <span class="hljs-keyword">using</span> a PL<br><span class="hljs-keyword">function</span> <span class="hljs-keyword">with</span> a TRY/CATCH logic, <span class="hljs-keyword">as</span> <span class="hljs-keyword">CONCURRENTLY</span> could <span class="hljs-keyword">not</span> be tested).<br><br>Author: Michael Paquier<br><br></code></pre></td></tr></table></figure>
<h2 id="target-session-attrs-增加-read-only-primary-standby-prefer-standby-支持"><a href="#target-session-attrs-增加-read-only-primary-standby-prefer-standby-支持" class="headerlink" title="target_session_attrs 增加　read-only primary standby prefer-standby 支持"></a>target_session_attrs 增加　read-only primary standby prefer-standby 支持</h2><figure class="highlight stata"><table><tr><td class="code"><pre><code class="hljs stata">Extend the abilities of libpq&#x27;s target_session_attrs parameter.<br><br><span class="hljs-keyword">In</span> addition to the existing options of <span class="hljs-string">&quot;any&quot;</span> and <span class="hljs-string">&quot;read-write&quot;</span>, we<br>now support <span class="hljs-string">&quot;read-only&quot;</span>, <span class="hljs-string">&quot;primary&quot;</span>, <span class="hljs-string">&quot;standby&quot;</span>, and <span class="hljs-string">&quot;prefer-standby&quot;</span>.<br><span class="hljs-string">&quot;read-write&quot;</span> retains its previous meaning of &quot;transactions are<br><span class="hljs-keyword">read</span>-write <span class="hljs-keyword">by</span> default<span class="hljs-string">&quot;, and &quot;</span><span class="hljs-keyword">read</span>-only&quot; inverts that.  The other<br>three modes <span class="hljs-keyword">test</span> specifically <span class="hljs-keyword">for</span> hot-standby status, <span class="hljs-keyword">which</span> is not<br>quite the same thing.  (Setting default_transaction_read_only <span class="hljs-keyword">on</span><br>a primary server renders it <span class="hljs-keyword">read</span>-only to this logic, but not a<br>standby.)<br><br>Furthermore, <span class="hljs-keyword">if</span> talking to a v14 or later server, <span class="hljs-keyword">no</span> extra network<br>round trip is needed to detect the session&#x27;s status; the GUC_REPORT<br>variables delivered <span class="hljs-keyword">by</span> the server are enough.  When talking to <span class="hljs-keyword">an</span><br>older server, a SHOW or SELECT <span class="hljs-keyword">query</span> is issued to detect session<br><span class="hljs-keyword">read</span>-only-ness or server hot-standby state, <span class="hljs-keyword">as</span> needed.<br><br>Haribabu Kommi, Greg Nancarrow, Vignesh C, Tom Lane; reviewed at<br>various times <span class="hljs-keyword">by</span> Laurenz Albe, Takayuki Tsunakawa, Peter Smith.<br><br>Discussion: https:<span class="hljs-comment">//postgr.es/m/CAF3+xM+8-ztOkaV9gHiJ3wfgENTq97QcjXQt+rbFQ6F7oNzt9A@mail.gmail.com</span><br><br></code></pre></td></tr></table></figure>
<h2 id="Add-option-PROCESS-TOAST-to-VACUUM"><a href="#Add-option-PROCESS-TOAST-to-VACUUM" class="headerlink" title="Add option PROCESS_TOAST to VACUUM"></a>Add option PROCESS_TOAST to VACUUM</h2><figure class="highlight http"><table><tr><td class="code"><pre><code class="hljs http"><span class="hljs-attribute">Author</span>: Michael Paquier &lt;michael@paquier.xyz&gt;<br><span class="hljs-attribute">Date</span>:   Tue Feb 9 14:13:57 2021 +0900<br><br>    Add option PROCESS_TOAST to VACUUM<br><br>    This option controls if toast tables associated with a relation are<br>    vacuumed or not when running a manual VACUUM.  It was already possible<br>    to trigger a manual VACUUM on a toast relation without processing its<br>    main relation, but a manual vacuum on a main relation always forced a<br>    vacuum on its toast table.  This is useful in scenarios where the level<br>    of bloat or transaction age of the main and toast relations differs a<br>    lot.<br><br>    This option is an extension of the existing VACOPT_SKIPTOAST that was<br>    used by autovacuum to control if toast relations should be skipped or<br>    not.  This internal flag is renamed to VACOPT_PROCESS_TOAST for<br>    consistency with the new option.<br><br>    A new option switch, called --no-process-toast, is added to vacuumdb.<br><br>    Author: Nathan Bossart<br>    Reviewed-by: Kirk Jamison, Michael Paquier, Justin Pryzby<br>    Discussion: https://postgr.es/m/BA8951E9-1524-48C5-94AF-73B1F0D7857F@amazon.com<br><br></code></pre></td></tr></table></figure>
<h2 id="added-“hostgssenc”-type-HBA-entries"><a href="#added-“hostgssenc”-type-HBA-entries" class="headerlink" title="added “hostgssenc” type HBA entries"></a>added “hostgssenc” type HBA entries</h2><figure class="highlight apache"><table><tr><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">commit</span> <span class="hljs-number">3995</span>c<span class="hljs-number">424984</span>e<span class="hljs-number">991</span>b<span class="hljs-number">1069</span>a<span class="hljs-number">2869</span>af<span class="hljs-number">972</span>dc<span class="hljs-number">07574</span>c<span class="hljs-number">0</span>b<br><span class="hljs-attribute">Author</span>: Tom Lane &lt;tgl@sss.pgh.pa.us&gt;<br><span class="hljs-attribute">Date</span>:   Mon Dec <span class="hljs-number">28</span> <span class="hljs-number">17</span>:<span class="hljs-number">58</span>:<span class="hljs-number">58</span> <span class="hljs-number">2020</span> -<span class="hljs-number">0500</span><br><br>    <span class="hljs-attribute">Improve</span> log messages related to pg_hba.conf not matching a connection.<br><br>    <span class="hljs-attribute">Include</span> details <span class="hljs-literal">on</span> whether GSS encryption has been activated;<br>    <span class="hljs-attribute">since</span> we added <span class="hljs-string">&quot;hostgssenc&quot;</span> type HBA entries, that&#x27;s relevant info.<br><br>    <span class="hljs-attribute">Kyotaro</span> Horiguchi and Tom Lane.  Back-patch to v<span class="hljs-number">12</span> where<br>    <span class="hljs-attribute">GSS</span> encryption was introduced.<br><br>    <span class="hljs-attribute">Discussion</span>: https://postgr.es/m/e<span class="hljs-number">5</span>b<span class="hljs-number">0</span>b<span class="hljs-number">6</span>ed<span class="hljs-number">05764324</span>a<span class="hljs-number">2</span>f<span class="hljs-number">3</span>fe<span class="hljs-number">7</span>acfc<span class="hljs-number">766</span>d<span class="hljs-number">5</span>@smhi.se<br><br></code></pre></td></tr></table></figure>
<h2 id="Introduce-a-new-GUC-REPORT-setting-“in-hot-standby”"><a href="#Introduce-a-new-GUC-REPORT-setting-“in-hot-standby”" class="headerlink" title="Introduce a new GUC_REPORT setting “in_hot_standby”"></a>Introduce a new GUC_REPORT setting “in_hot_standby”</h2><figure class="highlight apache"><table><tr><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">commit</span> bf<span class="hljs-number">8</span>a<span class="hljs-number">662</span>c<span class="hljs-number">9</span>afad<span class="hljs-number">6</span>fd<span class="hljs-number">07</span>b<span class="hljs-number">42</span>cdc<span class="hljs-number">5</span>e<span class="hljs-number">71416</span>c<span class="hljs-number">51</span>f<span class="hljs-number">75</span>d<span class="hljs-number">31</span><br><span class="hljs-attribute">Author</span>: Tom Lane &lt;tgl@sss.pgh.pa.us&gt;<br><span class="hljs-attribute">Date</span>:   Tue Jan <span class="hljs-number">5</span> <span class="hljs-number">16</span>:<span class="hljs-number">18</span>:<span class="hljs-number">01</span> <span class="hljs-number">2021</span> -<span class="hljs-number">0500</span><br><br>    <span class="hljs-attribute">Introduce</span> a new GUC_REPORT setting <span class="hljs-string">&quot;in_hot_standby&quot;</span>.<br><br>    <span class="hljs-attribute">Aside</span> from being queriable via SHOW, this value is sent to the client<br>    <span class="hljs-attribute">immediately</span> at session startup, and again later <span class="hljs-literal">on</span> if the server gets<br>    <span class="hljs-attribute">promoted</span> to primary during the session.  The immediate report will be<br>    <span class="hljs-attribute">used</span> in an upcoming patch to avoid an extra round trip when trying to<br>    <span class="hljs-attribute">connect</span> to a primary server.<br><br>    <span class="hljs-attribute">Haribabu</span> Kommi, Greg Nancarrow, Tom Lane; reviewed at various times<br>    <span class="hljs-attribute">by</span> Laurenz Albe, Takayuki Tsunakawa, Peter Smith.<br><br>    <span class="hljs-attribute">Discussion</span>: https://postgr.es/m/CAF<span class="hljs-number">3</span>+xM+<span class="hljs-number">8</span>-ztOkaV<span class="hljs-number">9</span>gHiJ<span class="hljs-number">3</span>wfgENTq<span class="hljs-number">97</span>QcjXQt+rbFQ<span class="hljs-number">6</span>F<span class="hljs-number">7</span>oNzt<span class="hljs-number">9</span>A@mail.gmail.com<br><br></code></pre></td></tr></table></figure>
<h2 id="Add-idle-session-timeout-GUC-好东西-不听话的应用连接就得杀"><a href="#Add-idle-session-timeout-GUC-好东西-不听话的应用连接就得杀" class="headerlink" title="Add idle_session_timeout　GUC 好东西, 不听话的应用连接就得杀"></a>Add idle_session_timeout　GUC 好东西, 不听话的应用连接就得杀</h2><figure class="highlight apache"><table><tr><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">commit</span> <span class="hljs-number">9877374</span>bef<span class="hljs-number">76</span>ef<span class="hljs-number">03923</span>f<span class="hljs-number">6</span>aa<span class="hljs-number">8</span>b<span class="hljs-number">955</span>f<span class="hljs-number">2</span>dbcbe<span class="hljs-number">6</span>c<span class="hljs-number">2</span>c<span class="hljs-number">7</span><br><span class="hljs-attribute">Author</span>: Tom Lane &lt;tgl@sss.pgh.pa.us&gt;<br><span class="hljs-attribute">Date</span>:   Wed Jan <span class="hljs-number">6</span> <span class="hljs-number">18</span>:<span class="hljs-number">28</span>:<span class="hljs-number">42</span> <span class="hljs-number">2021</span> -<span class="hljs-number">0500</span><br><br>    <span class="hljs-attribute">Add</span> idle_session_timeout.<br><br>    <span class="hljs-attribute">This</span> GUC variable works much like idle_in_transaction_session_timeout,<br>    <span class="hljs-attribute">in</span> that it kills sessions that have waited too long for a new client<br>    <span class="hljs-attribute">query</span>.  But it applies when we&#x27;re not in a transaction, rather than<br>    <span class="hljs-attribute">when</span> we are.<br><br>    <span class="hljs-attribute">Li</span> Japin, reviewed by David Johnston and Hayato Kuroda, some<br>    <span class="hljs-attribute">fixes</span> by me<br><br>    <span class="hljs-attribute">Discussion</span>: https://postgr.es/m/<span class="hljs-number">763</span>A<span class="hljs-number">0689</span>-F<span class="hljs-number">189</span>-<span class="hljs-number">459</span>E-<span class="hljs-number">946</span>F-F<span class="hljs-number">0</span>EC<span class="hljs-number">4458980</span>B@hotmail.com<br><br><br></code></pre></td></tr></table></figure>
<h2 id="Add-GUC-to-log-long-wait-times-on-recovery-conflicts-好东西，一定要开哟"><a href="#Add-GUC-to-log-long-wait-times-on-recovery-conflicts-好东西，一定要开哟" class="headerlink" title="Add GUC to log long wait times on recovery conflicts. 好东西，一定要开哟"></a>Add GUC to log long wait times on recovery conflicts. 好东西，一定要开哟</h2><figure class="highlight pgsql"><table><tr><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">commit</span> <span class="hljs-number">0650</span>ff23038bc3eb8d8fd851744db837d921e285<br>Author: Fujii Masao &lt;fujii@postgresql.org&gt;<br><span class="hljs-type">Date</span>:   Fri Jan <span class="hljs-number">8</span> <span class="hljs-number">00</span>:<span class="hljs-number">47</span>:<span class="hljs-number">03</span> <span class="hljs-number">2021</span> +<span class="hljs-number">0900</span><br><br>    <span class="hljs-keyword">Add</span> GUC <span class="hljs-keyword">to</span> <span class="hljs-keyword">log</span> long wait times <span class="hljs-keyword">on</span> recovery conflicts.<br><br>    This <span class="hljs-keyword">commit</span> adds GUC log_recovery_conflict_waits that controls whether<br>    a <span class="hljs-keyword">log</span> message <span class="hljs-keyword">is</span> produced <span class="hljs-keyword">when</span> the startup process <span class="hljs-keyword">is</span> waiting longer than<br>    deadlock_timeout <span class="hljs-keyword">for</span> recovery conflicts. This <span class="hljs-keyword">is</span> useful <span class="hljs-keyword">in</span> determining<br>    <span class="hljs-keyword">if</span> recovery conflicts prevent the recovery <span class="hljs-keyword">from</span> applying WAL.<br><br>    Note that currently a <span class="hljs-keyword">log</span> message <span class="hljs-keyword">is</span> produced <span class="hljs-keyword">only</span> <span class="hljs-keyword">when</span> recovery <span class="hljs-keyword">conflict</span><br>    has <span class="hljs-keyword">not</span> been resolved yet even <span class="hljs-keyword">after</span> deadlock_timeout passes, i.e.,<br>    <span class="hljs-keyword">only</span> <span class="hljs-keyword">when</span> the startup process <span class="hljs-keyword">is</span> still waiting <span class="hljs-keyword">for</span> recovery <span class="hljs-keyword">conflict</span><br>    even <span class="hljs-keyword">after</span> deadlock_timeout.<br><br>    Author: Bertrand Drouvot, Masahiko Sawada<br>    Reviewed-<span class="hljs-keyword">by</span>: Alvaro Herrera, Kyotaro Horiguchi, Fujii Masao<br>    Discussion: https://postgr.es/m/<span class="hljs-number">9</span>a60178c-a853<span class="hljs-number">-1440</span><span class="hljs-number">-2</span>cdc-c3af916cff59@amazon.com<br><br></code></pre></td></tr></table></figure>
<h2 id="Add-pg-stat-database-counters-for-sessions-and-session-time"><a href="#Add-pg-stat-database-counters-for-sessions-and-session-time" class="headerlink" title="Add pg_stat_database counters for sessions and session time"></a>Add pg_stat_database counters for sessions and session time</h2><figure class="highlight pgsql"><table><tr><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">commit</span> <span class="hljs-number">960869</span>da0803427d14335bba24393f414b476e2c<br>Author: Magnus Hagander &lt;magnus@hagander.net&gt;<br><span class="hljs-type">Date</span>:   Sun Jan <span class="hljs-number">17</span> <span class="hljs-number">13</span>:<span class="hljs-number">34</span>:<span class="hljs-number">09</span> <span class="hljs-number">2021</span> +<span class="hljs-number">0100</span><br><br>    <span class="hljs-keyword">Add</span> pg_stat_database counters <span class="hljs-keyword">for</span> sessions <span class="hljs-keyword">and</span> <span class="hljs-keyword">session</span> <span class="hljs-type">time</span><br><br>    This <span class="hljs-keyword">add</span> counters <span class="hljs-keyword">for</span> number <span class="hljs-keyword">of</span> sessions, the different kind <span class="hljs-keyword">of</span> <span class="hljs-keyword">session</span><br>    termination <span class="hljs-keyword">types</span>, <span class="hljs-keyword">and</span> timers <span class="hljs-keyword">for</span> how much <span class="hljs-type">time</span> <span class="hljs-keyword">is</span> spent <span class="hljs-keyword">in</span> active vs<br>    idle <span class="hljs-keyword">in</span> a <span class="hljs-keyword">database</span> <span class="hljs-keyword">to</span> pg_stat_database.<br><br>    Internally this <span class="hljs-keyword">also</span> renames the parameter &quot;force&quot; <span class="hljs-keyword">to</span> disconnect. This<br>    was the <span class="hljs-keyword">only</span> use-<span class="hljs-keyword">case</span> <span class="hljs-keyword">for</span> the parameter <span class="hljs-keyword">before</span>, so repurposing it <span class="hljs-keyword">to</span><br>    this mroe narrow usecase makes things cleaner than inventing something<br>    <span class="hljs-built_in">new</span>.<br><br>    Author: Laurenz Albe<br>    Reviewed-<span class="hljs-keyword">By</span>: Magnus Hagander, Soumyadeep Chakraborty, Masahiro Ikeda<br>    Discussion: https://postgr.es/m/b07e1f9953701b90c66ed368656f2aef40cac4fb.camel@cybertec.at<br><br></code></pre></td></tr></table></figure>
<h2 id="psql-dX-list-extended-statistics-objects"><a href="#psql-dX-list-extended-statistics-objects" class="headerlink" title="psql \dX: list extended statistics objects"></a>psql \dX: list extended statistics objects</h2><figure class="highlight apache"><table><tr><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">commit</span> <span class="hljs-number">891</span>a<span class="hljs-number">1</span>d<span class="hljs-number">0</span>bca<span class="hljs-number">262</span>ca<span class="hljs-number">78564</span>e<span class="hljs-number">0</span>fea<span class="hljs-number">1</span>eaa<span class="hljs-number">5</span>ae<span class="hljs-number">544</span>ea<span class="hljs-number">5</span>ee<br><span class="hljs-attribute">Author</span>: Tomas Vondra &lt;tomas.vondra@postgresql.org&gt;<br><span class="hljs-attribute">Date</span>:   Sun Jan <span class="hljs-number">17</span> <span class="hljs-number">00</span>:<span class="hljs-number">16</span>:<span class="hljs-number">25</span> <span class="hljs-number">2021</span> +<span class="hljs-number">0100</span><br><br>    <span class="hljs-attribute">psql</span> \dX: list extended statistics objects<br><br>    <span class="hljs-attribute">The</span> new command lists extended statistics objects, possibly with their<br>    <span class="hljs-attribute">sizes</span>. <span class="hljs-literal">All</span> past releases with extended statistics are supported.<br><br>    <span class="hljs-attribute">Author</span>: Tatsuro Yamada<br>    <span class="hljs-attribute">Reviewed</span>-by: Julien Rouhaud, Alvaro Herrera, Tomas Vondra<br>    <span class="hljs-attribute">Discussion</span>: https://postgr.es/m/c<span class="hljs-number">027</span>a<span class="hljs-number">541</span>-<span class="hljs-number">5856</span>-<span class="hljs-number">75</span>a<span class="hljs-number">5</span>-<span class="hljs-number">0868</span>-<span class="hljs-number">341301</span>e<span class="hljs-number">1624</span>b%<span class="hljs-number">40</span>nttcom.co.jp_<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure>
<figure class="highlight apache"><table><tr><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">commit</span> <span class="hljs-number">1</span>db<span class="hljs-number">0</span>d<span class="hljs-number">173</span>a<span class="hljs-number">2201119</span>f<span class="hljs-number">297</span>ea<span class="hljs-number">35</span>edfb<span class="hljs-number">41579893</span>dd<span class="hljs-number">8</span>c<br><span class="hljs-attribute">Author</span>: Tomas Vondra &lt;tomas.vondra@postgresql.org&gt;<br><span class="hljs-attribute">Date</span>:   Sun Jan <span class="hljs-number">17</span> <span class="hljs-number">15</span>:<span class="hljs-number">11</span>:<span class="hljs-number">14</span> <span class="hljs-number">2021</span> +<span class="hljs-number">0100</span><br><br>    <span class="hljs-attribute">Revert</span> <span class="hljs-string">&quot;psql \dX: list extended statistics objects&quot;</span><br><br>    <span class="hljs-attribute">Reverts</span> <span class="hljs-number">891</span>a<span class="hljs-number">1</span>d<span class="hljs-number">0</span>bca, because the new  psql command \dX only worked for<br>    <span class="hljs-attribute">users</span> users who can read pg_statistic_ext_data catalog, and most regular<br>    <span class="hljs-attribute">users</span> lack that privilege (the catalog may contain sensitive user data).<br><br>    <span class="hljs-attribute">Reported</span>-by: Noriyoshi Shinoda<br>    <span class="hljs-attribute">Discussion</span>: https://postgr.es/m/c<span class="hljs-number">027</span>a<span class="hljs-number">541</span>-<span class="hljs-number">5856</span>-<span class="hljs-number">75</span>a<span class="hljs-number">5</span>-<span class="hljs-number">0868</span>-<span class="hljs-number">341301</span>e<span class="hljs-number">1624</span>b%<span class="hljs-number">40</span>nttcom.co.jp_<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure>
<h2 id="感觉14版本做了很多FDW的优化，是为集群模式做准备"><a href="#感觉14版本做了很多FDW的优化，是为集群模式做准备" class="headerlink" title="感觉14版本做了很多FDW的优化，是为集群模式做准备?"></a>感觉14版本做了很多FDW的优化，是为集群模式做准备?</h2><figure class="highlight pgsql"><table><tr><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">commit</span> <span class="hljs-number">8e396</span>a773b80c72e5d5a0ca9755dffe043c97a05<br>Author: Tom Lane &lt;tgl@sss.pgh.pa.us&gt;<br><span class="hljs-type">Date</span>:   Thu Jan <span class="hljs-number">14</span> <span class="hljs-number">16</span>:<span class="hljs-number">19</span>:<span class="hljs-number">38</span> <span class="hljs-number">2021</span> <span class="hljs-number">-0500</span><br><br>    pg_dump: label <span class="hljs-keyword">PUBLICATION</span> <span class="hljs-keyword">TABLE</span> ArchiveEntries <span class="hljs-keyword">with</span> an <span class="hljs-keyword">owner</span>.<br><br>    This <span class="hljs-keyword">is</span> the same fix <span class="hljs-keyword">as</span> <span class="hljs-keyword">commit</span> <span class="hljs-number">9</span>eabfe300 applied <span class="hljs-keyword">to</span> <span class="hljs-keyword">INDEX</span> ATTACH<br>    entries, but <span class="hljs-keyword">for</span> <span class="hljs-keyword">table</span>-<span class="hljs-keyword">to</span>-<span class="hljs-keyword">publication</span> attachments.  <span class="hljs-keyword">As</span> <span class="hljs-keyword">in</span> that<br>    <span class="hljs-keyword">case</span>, even though the backend doesn<span class="hljs-string">&#x27;t record &quot;ownership&quot; of the</span><br><span class="hljs-string">    attachment, we still ought to label it in the dump archive with</span><br><span class="hljs-string">    the role name that should run the ALTER PUBLICATION command.</span><br><span class="hljs-string">    The existing behavior causes the ALTER to be done by the original</span><br><span class="hljs-string">    role that started the restore; that will usually work fine, but</span><br><span class="hljs-string">    there may be corner cases where it fails.</span><br><span class="hljs-string"></span><br><span class="hljs-string">    The bulk of the patch is concerned with changing struct</span><br><span class="hljs-string">    PublicationRelInfo to include a pointer to the associated</span><br><span class="hljs-string">    PublicationInfo object, so that we can get the owner&#x27;</span>s <span class="hljs-type">name</span><br>    <span class="hljs-keyword">out</span> <span class="hljs-keyword">of</span> that <span class="hljs-keyword">when</span> the <span class="hljs-type">time</span> comes.  <span class="hljs-keyword">While</span> at it, I rewrote<br>    getPublicationTables() <span class="hljs-keyword">to</span> <span class="hljs-keyword">do</span> just one query <span class="hljs-keyword">of</span> pg_publication_rel,<br>    <span class="hljs-keyword">not</span> one per <span class="hljs-keyword">table</span>.<br><br>    Back-patch <span class="hljs-keyword">to</span> v10 <span class="hljs-keyword">where</span> this code was introduced.<br><br>    Discussion: https://postgr.es/m/<span class="hljs-number">1165710.1610473242</span>@sss.pgh.pa.us<br></code></pre></td></tr></table></figure>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">commit</span> <span class="hljs-number">708</span>d165ddb92c54077a372acf6417e258dcb5fef<br>Author: Fujii Masao &lt;fujii@postgresql.org&gt;<br><span class="hljs-type">Date</span>:   Mon Jan <span class="hljs-number">18</span> <span class="hljs-number">15</span>:<span class="hljs-number">11</span>:<span class="hljs-number">08</span> <span class="hljs-number">2021</span> +<span class="hljs-number">0900</span><br><br>    postgres_fdw: <span class="hljs-keyword">Add</span> <span class="hljs-keyword">function</span> <span class="hljs-keyword">to</span> list cached connections <span class="hljs-keyword">to</span> <span class="hljs-keyword">foreign</span> servers.<br><br>    This <span class="hljs-keyword">commit</span> adds <span class="hljs-keyword">function</span> postgres_fdw_get_connections() <span class="hljs-keyword">to</span> <span class="hljs-keyword">return</span><br>    the <span class="hljs-keyword">foreign</span> <span class="hljs-keyword">server</span> names <span class="hljs-keyword">of</span> <span class="hljs-keyword">all</span> the <span class="hljs-keyword">open</span> connections that postgres_fdw<br>    established <span class="hljs-keyword">from</span> the <span class="hljs-keyword">local</span> <span class="hljs-keyword">session</span> <span class="hljs-keyword">to</span> the <span class="hljs-keyword">foreign</span> servers. This <span class="hljs-keyword">function</span><br>    <span class="hljs-keyword">also</span> <span class="hljs-keyword">returns</span> whether <span class="hljs-keyword">each</span> <span class="hljs-keyword">connection</span> <span class="hljs-keyword">is</span> <span class="hljs-keyword">valid</span> <span class="hljs-keyword">or</span> <span class="hljs-keyword">not</span>.<br><br>    This <span class="hljs-keyword">function</span> <span class="hljs-keyword">is</span> useful <span class="hljs-keyword">when</span> checking <span class="hljs-keyword">all</span> the <span class="hljs-keyword">open</span> <span class="hljs-keyword">foreign</span> <span class="hljs-keyword">server</span> connections.<br>    <span class="hljs-keyword">If</span> we <span class="hljs-built_in">found</span> <span class="hljs-keyword">some</span> <span class="hljs-keyword">connection</span> <span class="hljs-keyword">to</span> <span class="hljs-keyword">drop</span>, <span class="hljs-keyword">from</span> the result <span class="hljs-keyword">of</span> <span class="hljs-keyword">function</span>, probably<br>    we can explicitly <span class="hljs-keyword">close</span> them <span class="hljs-keyword">by</span> the <span class="hljs-keyword">function</span> that upcoming <span class="hljs-keyword">commit</span> will <span class="hljs-keyword">add</span>.<br><br>    This <span class="hljs-keyword">commit</span> bumps the <span class="hljs-keyword">version</span> <span class="hljs-keyword">of</span> postgres_fdw <span class="hljs-keyword">to</span> <span class="hljs-number">1.1</span> since it adds<br>    <span class="hljs-built_in">new</span> <span class="hljs-keyword">function</span>.<br><br>    Author: Bharath Rupireddy, tweaked <span class="hljs-keyword">by</span> Fujii Masao<br>    Reviewed-<span class="hljs-keyword">by</span>: Zhijie Hou, Alexey Kondratov, Zhihong Yu, Fujii Masao<br>    Discussion: https://postgr.es/m/<span class="hljs-number">2</span>d5cb0b3-a6e8<span class="hljs-number">-9</span>bbb<span class="hljs-number">-953</span>f<span class="hljs-number">-879</span>f47128faa@oss.nttdata.com<br><br></code></pre></td></tr></table></figure>
<figure class="highlight apache"><table><tr><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">commit</span> ee<span class="hljs-number">79</span>a<span class="hljs-number">548</span>e<span class="hljs-number">746</span>da<span class="hljs-number">9</span>a<span class="hljs-number">99</span>df<span class="hljs-number">0</span>cac<span class="hljs-number">70</span>a<span class="hljs-number">3</span>ddc<span class="hljs-number">095</span>f<span class="hljs-number">2829</span>a<br><span class="hljs-attribute">Author</span>: Fujii Masao &lt;fujii@postgresql.org&gt;<br><span class="hljs-attribute">Date</span>:   Tue Jan <span class="hljs-number">19</span> <span class="hljs-number">00</span>:<span class="hljs-number">56</span>:<span class="hljs-number">10</span> <span class="hljs-number">2021</span> +<span class="hljs-number">0900</span><br><br>    <span class="hljs-attribute">doc</span>: Add note about the server name of postgres_fdw_get_connections() returns.<br><br>    <span class="hljs-attribute">Previously</span> the document didn&#x27;t mention the case where<br>    <span class="hljs-attribute">postgres_fdw_get_connections</span>() returns NULL in server_name column.<br>    <span class="hljs-attribute">Users</span> might be confused about why NULL was returned.<br><br>    <span class="hljs-attribute">This</span> commit adds the note that, in postgres_fdw_get_connections(),<br>    <span class="hljs-attribute">the</span> server name of an invalid connection will be NULL if the server is dropped.<br><br>    <span class="hljs-attribute">Suggested</span>-by: Zhijie Hou<br>    <span class="hljs-attribute">Author</span>: Bharath Rupireddy<br>    <span class="hljs-attribute">Reviewed</span>-by: Zhijie Hou, Fujii Masao<br>    <span class="hljs-attribute">Discussion</span>: https://postgr.es/m/e<span class="hljs-number">7</span>ddd<span class="hljs-number">14</span>e<span class="hljs-number">96444</span>fce<span class="hljs-number">88</span>e<span class="hljs-number">47</span>a<span class="hljs-number">709</span>c<span class="hljs-number">196537</span>@G<span class="hljs-number">08</span>CNEXMBPEKD<span class="hljs-number">05</span>.g<span class="hljs-number">08</span>.fujitsu.local<br></code></pre></td></tr></table></figure>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">commit</span> e3ebcca843a4703938b9f40a4811f43c4b315753<br>Author: Fujii Masao &lt;fujii@postgresql.org&gt;<br><span class="hljs-type">Date</span>:   Mon <span class="hljs-type">Dec</span> <span class="hljs-number">28</span> <span class="hljs-number">19</span>:<span class="hljs-number">56</span>:<span class="hljs-number">13</span> <span class="hljs-number">2020</span> +<span class="hljs-number">0900</span><br><br>    postgres_fdw: Fix <span class="hljs-keyword">connection</span> leak.<br><br>    <span class="hljs-keyword">In</span> postgres_fdw, the cached connections <span class="hljs-keyword">to</span> <span class="hljs-keyword">foreign</span> servers will <span class="hljs-keyword">not</span> be<br>    closed <span class="hljs-keyword">until</span> the <span class="hljs-keyword">local</span> <span class="hljs-keyword">session</span> exits <span class="hljs-keyword">if</span> the <span class="hljs-keyword">user</span> mappings <span class="hljs-keyword">or</span> <span class="hljs-keyword">foreign</span> servers<br>    that those connections depend <span class="hljs-keyword">on</span> are dropped. Those connections can be<br>    leaked.<br><br>    <span class="hljs-keyword">To</span> fix that <span class="hljs-keyword">connection</span> leak issue, <span class="hljs-keyword">after</span> a change <span class="hljs-keyword">to</span> a pg_foreign_server<br>    <span class="hljs-keyword">or</span> pg_user_mapping catalog entry, this <span class="hljs-keyword">commit</span> makes postgres_fdw <span class="hljs-keyword">close</span><br>    the connections depending <span class="hljs-keyword">on</span> that entry immediately <span class="hljs-keyword">if</span> <span class="hljs-keyword">current</span><br>    <span class="hljs-keyword">transaction</span> has <span class="hljs-keyword">not</span> used those connections yet. Otherwise, mark those<br>    connections <span class="hljs-keyword">as</span> invalid <span class="hljs-keyword">and</span> <span class="hljs-keyword">then</span> <span class="hljs-keyword">close</span> them at the <span class="hljs-keyword">end</span> <span class="hljs-keyword">of</span> <span class="hljs-keyword">current</span> <span class="hljs-keyword">transaction</span>,<br>    since they cannot be closed <span class="hljs-keyword">in</span> the midst <span class="hljs-keyword">of</span> the <span class="hljs-keyword">transaction</span> <span class="hljs-keyword">using</span> them.<br>    Closed connections will be remade at the next opportunity <span class="hljs-keyword">if</span> necessary.<br><br>    Back-patch <span class="hljs-keyword">to</span> <span class="hljs-keyword">all</span> supported branches.<br><br>    Author: Bharath Rupireddy<br>    Reviewed-<span class="hljs-keyword">by</span>: Zhihong Yu, Zhijie Hou, Fujii Masao<br>    Discussion: https://postgr.es/m/CALj2ACVNcGH_6qLY<span class="hljs-number">-4</span>_tXz8JLvA+<span class="hljs-number">4</span>yeBThRfxMz7Oxbk1aHcpQ@mail.gmail.com<br><br></code></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>PostgreSQL</category>
      </categories>
      <tags>
        <tag>PostgreSQL</tag>
        <tag>git</tag>
        <tag>commit log</tag>
      </tags>
  </entry>
  <entry>
    <title>获取PostgreSQL hash table value</title>
    <url>/PostgreSQL/get_hash_partition_value/</url>
    <content><![CDATA[<p>简单的修改了postgresql-12.3/src/backend/partitioning/partbounds.c代码， 创建C函数获取PostgreSQL hash 分区表hash value<br><a id="more"></a></p>
<h1 id="表结构"><a href="#表结构" class="headerlink" title="表结构"></a>表结构</h1><figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql">postgres=<span class="hljs-comment"># \d+ userinfo</span><br>                                        Partitioned table &quot;public.userinfo&quot;<br>  Column  |              Type              | Collation | Nullable | Default | Storage  | Stats target | Description<br><span class="hljs-comment">----------+--------------------------------+-----------+----------+---------+----------+--------------+-------------</span><br> userid   | integer                        |           |          |         | plain    |              |<br> username | character varying(64)          |           |          |         | extended |              |<br> ctime    | timestamp(6) without time zone |           |          |         | plain    |              |<br>Partition key: HASH (userid)<br>Indexes:<br>    &quot;idx_userinfo_userid&quot; btree (userid)<br>    &quot;idx_userinfo_username&quot; btree (username)<br>Partitions: userinfo_0 FOR <span class="hljs-keyword">VALUES</span> <span class="hljs-keyword">WITH</span> (modulus <span class="hljs-number">16</span>, <span class="hljs-keyword">remainder</span> <span class="hljs-number">0</span>),<br>            userinfo_1 <span class="hljs-keyword">FOR</span> <span class="hljs-keyword">VALUES</span> <span class="hljs-keyword">WITH</span> (modulus <span class="hljs-number">16</span>, <span class="hljs-keyword">remainder</span> <span class="hljs-number">1</span>),<br>            userinfo_10 <span class="hljs-keyword">FOR</span> <span class="hljs-keyword">VALUES</span> <span class="hljs-keyword">WITH</span> (modulus <span class="hljs-number">16</span>, <span class="hljs-keyword">remainder</span> <span class="hljs-number">10</span>),<br>            userinfo_11 <span class="hljs-keyword">FOR</span> <span class="hljs-keyword">VALUES</span> <span class="hljs-keyword">WITH</span> (modulus <span class="hljs-number">16</span>, <span class="hljs-keyword">remainder</span> <span class="hljs-number">11</span>),<br>            userinfo_12 <span class="hljs-keyword">FOR</span> <span class="hljs-keyword">VALUES</span> <span class="hljs-keyword">WITH</span> (modulus <span class="hljs-number">16</span>, <span class="hljs-keyword">remainder</span> <span class="hljs-number">12</span>),<br>            userinfo_13 <span class="hljs-keyword">FOR</span> <span class="hljs-keyword">VALUES</span> <span class="hljs-keyword">WITH</span> (modulus <span class="hljs-number">16</span>, <span class="hljs-keyword">remainder</span> <span class="hljs-number">13</span>),<br>            userinfo_14 <span class="hljs-keyword">FOR</span> <span class="hljs-keyword">VALUES</span> <span class="hljs-keyword">WITH</span> (modulus <span class="hljs-number">16</span>, <span class="hljs-keyword">remainder</span> <span class="hljs-number">14</span>),<br>            userinfo_15 <span class="hljs-keyword">FOR</span> <span class="hljs-keyword">VALUES</span> <span class="hljs-keyword">WITH</span> (modulus <span class="hljs-number">16</span>, <span class="hljs-keyword">remainder</span> <span class="hljs-number">15</span>),<br>            userinfo_2 <span class="hljs-keyword">FOR</span> <span class="hljs-keyword">VALUES</span> <span class="hljs-keyword">WITH</span> (modulus <span class="hljs-number">16</span>, <span class="hljs-keyword">remainder</span> <span class="hljs-number">2</span>),<br>            userinfo_3 <span class="hljs-keyword">FOR</span> <span class="hljs-keyword">VALUES</span> <span class="hljs-keyword">WITH</span> (modulus <span class="hljs-number">16</span>, <span class="hljs-keyword">remainder</span> <span class="hljs-number">3</span>),<br>            userinfo_4 <span class="hljs-keyword">FOR</span> <span class="hljs-keyword">VALUES</span> <span class="hljs-keyword">WITH</span> (modulus <span class="hljs-number">16</span>, <span class="hljs-keyword">remainder</span> <span class="hljs-number">4</span>),<br>            userinfo_5 <span class="hljs-keyword">FOR</span> <span class="hljs-keyword">VALUES</span> <span class="hljs-keyword">WITH</span> (modulus <span class="hljs-number">16</span>, <span class="hljs-keyword">remainder</span> <span class="hljs-number">5</span>),<br>            userinfo_6 <span class="hljs-keyword">FOR</span> <span class="hljs-keyword">VALUES</span> <span class="hljs-keyword">WITH</span> (modulus <span class="hljs-number">16</span>, <span class="hljs-keyword">remainder</span> <span class="hljs-number">6</span>),<br>            userinfo_7 <span class="hljs-keyword">FOR</span> <span class="hljs-keyword">VALUES</span> <span class="hljs-keyword">WITH</span> (modulus <span class="hljs-number">16</span>, <span class="hljs-keyword">remainder</span> <span class="hljs-number">7</span>),<br>            userinfo_8 <span class="hljs-keyword">FOR</span> <span class="hljs-keyword">VALUES</span> <span class="hljs-keyword">WITH</span> (modulus <span class="hljs-number">16</span>, <span class="hljs-keyword">remainder</span> <span class="hljs-number">8</span>),<br>            userinfo_9 <span class="hljs-keyword">FOR</span> <span class="hljs-keyword">VALUES</span> <span class="hljs-keyword">WITH</span> (modulus <span class="hljs-number">16</span>, <span class="hljs-keyword">remainder</span> <span class="hljs-number">9</span>)<br><br>postgres=<span class="hljs-comment">#</span><br></code></pre></td></tr></table></figure>
<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><p>vim partvalue.c<br><figure class="highlight pgsql"><table><tr><td class="code"><pre><code class="hljs pgsql"><span class="hljs-meta">#include &quot;postgres.h&quot;</span><br><span class="hljs-meta">#include &quot;fmgr.h&quot;</span><br><span class="hljs-meta">#include &quot;funcapi.h&quot;</span><br><span class="hljs-meta">#include &quot;access/relation.h&quot;</span><br><span class="hljs-meta">#include &quot;access/table.h&quot;</span><br><span class="hljs-meta">#include &quot;access/tableam.h&quot;</span><br><span class="hljs-meta">#include &quot;catalog/partition.h&quot;</span><br><span class="hljs-meta">#include &quot;catalog/pg_inherits.h&quot;</span><br><span class="hljs-meta">#include &quot;catalog/pg_type.h&quot;</span><br><span class="hljs-meta">#include &quot;commands/tablecmds.h&quot;</span><br><span class="hljs-meta">#include &quot;executor/executor.h&quot;</span><br><span class="hljs-meta">#include &quot;miscadmin.h&quot;</span><br><span class="hljs-meta">#include &quot;nodes/makefuncs.h&quot;</span><br><span class="hljs-meta">#include &quot;nodes/nodeFuncs.h&quot;</span><br><span class="hljs-meta">#include &quot;parser/parse_coerce.h&quot;</span><br><span class="hljs-meta">#include &quot;partitioning/partbounds.h&quot;</span><br><span class="hljs-meta">#include &quot;partitioning/partdesc.h&quot;</span><br><span class="hljs-meta">#include &quot;partitioning/partprune.h&quot;</span><br><span class="hljs-meta">#include &quot;utils/builtins.h&quot;</span><br><span class="hljs-meta">#include &quot;utils/datum.h&quot;</span><br><span class="hljs-meta">#include &quot;utils/fmgroids.h&quot;</span><br><span class="hljs-meta">#include &quot;utils/hashutils.h&quot;</span><br><span class="hljs-meta">#include &quot;utils/lsyscache.h&quot;</span><br><span class="hljs-meta">#include &quot;utils/partcache.h&quot;</span><br><span class="hljs-meta">#include &quot;utils/rel.h&quot;</span><br><span class="hljs-meta">#include &quot;utils/snapmgr.h&quot;</span><br><span class="hljs-meta">#include &quot;utils/ruleutils.h&quot;</span><br><span class="hljs-meta">#include &quot;utils/syscache.h&quot;</span><br><br><br><br>PG_MODULE_MAGIC;<br><br>PG_FUNCTION_INFO_V1(get_hash_partition_value);<br><br>Datum<br>get_hash_partition_value(PG_FUNCTION_ARGS)<br>&#123;<br>    typedef struct ColumnsHashData<br>    &#123;<br>        <span class="hljs-type">Oid</span>            relid;<br>        <span class="hljs-type">int</span>            nkeys;<br>        <span class="hljs-type">Oid</span>            variadic_type;<br>        int16        variadic_typlen;<br>        <span class="hljs-type">bool</span>        variadic_typbyval;<br>        <span class="hljs-type">char</span>        variadic_typalign;<br>        <span class="hljs-type">Oid</span>            partcollid[PARTITION_MAX_KEYS];<br>        FmgrInfo    partsupfunc[FLEXIBLE_ARRAY_MEMBER];<br>    &#125; ColumnsHashData;<br>    <span class="hljs-type">Oid</span>            parentId;<br>    <span class="hljs-type">int</span>            modulus;<br>    <span class="hljs-type">int</span>            remainder;<br>    Datum        seed = UInt64GetDatum(HASH_PARTITION_SEED);<br>    ColumnsHashData *my_extra;<br>    uint64        rowHash = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-comment">/* Return null if the parent OID, modulus, or remainder is NULL. */</span><br>    <span class="hljs-keyword">if</span> (PG_ARGISNULL(<span class="hljs-number">0</span>) || PG_ARGISNULL(<span class="hljs-number">1</span>) || PG_ARGISNULL(<span class="hljs-number">2</span>))<br>        PG_RETURN_NULL();<br>    parentId = PG_GETARG_OID(<span class="hljs-number">0</span>);<br>    modulus = PG_GETARG_INT32(<span class="hljs-number">1</span>);<br><br>    <span class="hljs-comment">/* Sanity check modulus and remainder. */</span><br>    <span class="hljs-keyword">if</span> (modulus &lt;= <span class="hljs-number">0</span>)<br>        ereport(ERROR,<br>                (errcode(ERRCODE_INVALID_PARAMETER_VALUE),<br>                 errmsg(&quot;modulus for hash partition must be a positive integer&quot;)));<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">     * Cache hash function information.</span><br><span class="hljs-comment">     */</span><br>    my_extra = (ColumnsHashData *) fcinfo-&gt;flinfo-&gt;fn_extra;<br>    <span class="hljs-keyword">if</span> (my_extra == <span class="hljs-keyword">NULL</span> || my_extra-&gt;relid != parentId)<br>    &#123;<br>        Relation    parent;<br>        PartitionKey key;<br>        <span class="hljs-type">int</span>            j;<br><br>        <span class="hljs-comment">/* Open parent relation and fetch partition keyinfo */</span><br>        parent = try_relation_open(parentId, AccessShareLock);<br>        <span class="hljs-keyword">if</span> (parent == <span class="hljs-keyword">NULL</span>)<br>            PG_RETURN_NULL();<br>        key = RelationGetPartitionKey(parent);<br><br>        <span class="hljs-comment">/* Reject parent table that is not hash-partitioned. */</span><br>        <span class="hljs-keyword">if</span> (parent-&gt;rd_rel-&gt;relkind != RELKIND_PARTITIONED_TABLE ||<br>            key-&gt;strategy != PARTITION_STRATEGY_HASH)<br>            ereport(ERROR,<br>                    (errcode(ERRCODE_INVALID_PARAMETER_VALUE),<br>                     errmsg(&quot;\&quot;%s\&quot; is not a hash partitioned table&quot;,<br>                            get_rel_name(parentId))));<br><br>        <span class="hljs-keyword">if</span> (!get_fn_expr_variadic(fcinfo-&gt;flinfo))<br>        &#123;<br>            <span class="hljs-type">int</span>            nargs = PG_NARGS() - <span class="hljs-number">2</span>;<br><br>            <span class="hljs-comment">/* complain if wrong number of column values */</span><br>            <span class="hljs-keyword">if</span> (key-&gt;partnatts != nargs)<br>                ereport(ERROR,<br>                        (errcode(ERRCODE_INVALID_PARAMETER_VALUE),<br>                         errmsg(&quot;number of partitioning columns (%d) does not match number of partition keys provided (%d)&quot;,<br>                                key-&gt;partnatts, nargs)));<br><br>            <span class="hljs-comment">/* allocate space for our cache */</span><br>            fcinfo-&gt;flinfo-&gt;fn_extra =<br>                MemoryContextAllocZero(fcinfo-&gt;flinfo-&gt;fn_mcxt,<br>                                       offsetof(ColumnsHashData, partsupfunc) +<br>                                       sizeof(FmgrInfo) * nargs);<br>            my_extra = (ColumnsHashData *) fcinfo-&gt;flinfo-&gt;fn_extra;<br>            my_extra-&gt;relid = parentId;<br>            my_extra-&gt;nkeys = key-&gt;partnatts;<br>            memcpy(my_extra-&gt;partcollid, key-&gt;partcollation,<br>                   key-&gt;partnatts * sizeof(<span class="hljs-type">Oid</span>));<br><br>            <span class="hljs-comment">/* check argument types and save fmgr_infos */</span><br>            <span class="hljs-keyword">for</span> (j = <span class="hljs-number">0</span>; j &lt; key-&gt;partnatts; ++j)<br>            &#123;<br>                <span class="hljs-type">Oid</span>            argtype = get_fn_expr_argtype(fcinfo-&gt;flinfo, j + <span class="hljs-number">2</span>);<br><br>                <span class="hljs-keyword">if</span> (argtype != key-&gt;parttypid[j] &amp;&amp; !IsBinaryCoercible(argtype, key-&gt;parttypid[j]))<br>                    ereport(ERROR,<br>                            (errcode(ERRCODE_INVALID_PARAMETER_VALUE),<br>                             errmsg(&quot;column %d of the partition key has type \&quot;%s\&quot;, but supplied value is of type \&quot;%s\&quot;&quot;,<br>                                    j + <span class="hljs-number">1</span>, format_type_be(key-&gt;parttypid[j]), format_type_be(argtype))));<br><br>                fmgr_info_copy(&amp;my_extra-&gt;partsupfunc[j],<br>                               &amp;key-&gt;partsupfunc[j],<br>                               fcinfo-&gt;flinfo-&gt;fn_mcxt);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            ArrayType  *variadic_array = PG_GETARG_ARRAYTYPE_P(<span class="hljs-number">2</span>);<br><br>            <span class="hljs-comment">/* allocate space for our cache -- just one FmgrInfo in this case */</span><br>            fcinfo-&gt;flinfo-&gt;fn_extra =<br>                MemoryContextAllocZero(fcinfo-&gt;flinfo-&gt;fn_mcxt,<br>                                       offsetof(ColumnsHashData, partsupfunc) +<br>                                       sizeof(FmgrInfo));<br>            my_extra = (ColumnsHashData *) fcinfo-&gt;flinfo-&gt;fn_extra;<br>            my_extra-&gt;relid = parentId;<br>            my_extra-&gt;nkeys = key-&gt;partnatts;<br>            my_extra-&gt;variadic_type = ARR_ELEMTYPE(variadic_array);<br>            get_typlenbyvalalign(my_extra-&gt;variadic_type,<br>                                 &amp;my_extra-&gt;variadic_typlen,<br>                                 &amp;my_extra-&gt;variadic_typbyval,<br>                                 &amp;my_extra-&gt;variadic_typalign);<br>            my_extra-&gt;partcollid[<span class="hljs-number">0</span>] = key-&gt;partcollation[<span class="hljs-number">0</span>];<br><br>            <span class="hljs-comment">/* check argument types */</span><br>            <span class="hljs-keyword">for</span> (j = <span class="hljs-number">0</span>; j &lt; key-&gt;partnatts; ++j)<br>                <span class="hljs-keyword">if</span> (key-&gt;parttypid[j] != my_extra-&gt;variadic_type)<br>                    ereport(ERROR,<br>                            (errcode(ERRCODE_INVALID_PARAMETER_VALUE),<br>                             errmsg(&quot;column %d of the partition key has type \&quot;%s\&quot;, but supplied value is of type \&quot;%s\&quot;&quot;,<br>                                    j + <span class="hljs-number">1</span>,<br>                                    format_type_be(key-&gt;parttypid[j]),<br>                                    format_type_be(my_extra-&gt;variadic_type))));<br><br>            fmgr_info_copy(&amp;my_extra-&gt;partsupfunc[<span class="hljs-number">0</span>],<br>                           &amp;key-&gt;partsupfunc[<span class="hljs-number">0</span>],<br>                           fcinfo-&gt;flinfo-&gt;fn_mcxt);<br>        &#125;<br><br>        <span class="hljs-comment">/* Hold lock until commit */</span><br>        relation_close(parent, NoLock);<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (!OidIsValid(my_extra-&gt;variadic_type))<br>    &#123;<br>        <span class="hljs-type">int</span>            nkeys = my_extra-&gt;nkeys;<br>        <span class="hljs-type">int</span>            i;<br><br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">         * For a non-variadic call, neither the number of arguments nor their</span><br><span class="hljs-comment">         * types can change across calls, so avoid the expense of rechecking</span><br><span class="hljs-comment">         * here.</span><br><span class="hljs-comment">         */</span><br><br>        <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; nkeys; i++)<br>        &#123;<br>            Datum        hash;<br><br>            <span class="hljs-comment">/* keys start from fourth argument of function. */</span><br>            <span class="hljs-type">int</span>            argno = i + <span class="hljs-number">2</span>;<br><br>            <span class="hljs-keyword">if</span> (PG_ARGISNULL(argno))<br>                <span class="hljs-keyword">continue</span>;<br><br>            hash = FunctionCall2Coll(&amp;my_extra-&gt;partsupfunc[i],<br>                                     my_extra-&gt;partcollid[i],<br>                                     PG_GETARG_DATUM(argno),<br>                                     seed);<br><br>            <span class="hljs-comment">/* Form a single 64-bit hash value */</span><br>            rowHash = hash_combine64(rowHash, DatumGetUInt64(hash));<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        ArrayType  *variadic_array = PG_GETARG_ARRAYTYPE_P(<span class="hljs-number">2</span>);<br>        <span class="hljs-type">int</span>            i;<br>        <span class="hljs-type">int</span>            nelems;<br>        Datum       *datum;<br>        <span class="hljs-type">bool</span>       *<span class="hljs-keyword">isnull</span>;<br><br>        deconstruct_array(variadic_array,<br>                          my_extra-&gt;variadic_type,<br>                          my_extra-&gt;variadic_typlen,<br>                          my_extra-&gt;variadic_typbyval,<br>                          my_extra-&gt;variadic_typalign,<br>                          &amp;datum, &amp;<span class="hljs-keyword">isnull</span>, &amp;nelems);<br><br>        <span class="hljs-comment">/* complain if wrong number of column values */</span><br>        <span class="hljs-keyword">if</span> (nelems != my_extra-&gt;nkeys)<br>            ereport(ERROR,<br>                    (errcode(ERRCODE_INVALID_PARAMETER_VALUE),<br>                     errmsg(&quot;number of partitioning columns (%d) does not match number of partition keys provided (%d)&quot;,<br>                            my_extra-&gt;nkeys, nelems)));<br><br>        <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; nelems; i++)<br>        &#123;<br>            Datum        hash;<br><br>            <span class="hljs-keyword">if</span> (<span class="hljs-keyword">isnull</span>[i])<br>                <span class="hljs-keyword">continue</span>;<br><br>            hash = FunctionCall2Coll(&amp;my_extra-&gt;partsupfunc[<span class="hljs-number">0</span>],<br>                                     my_extra-&gt;partcollid[<span class="hljs-number">0</span>],<br>                                     datum[i],<br>                                     seed);<br><br>            <span class="hljs-comment">/* Form a single 64-bit hash value */</span><br>            rowHash = hash_combine64(rowHash, DatumGetUInt64(hash));<br>        &#125;<br>    &#125;<br><br>    PG_RETURN_UINT64(rowHash % modulus);<br>&#125;<br><br><br></code></pre></td></tr></table></figure></p>
<h1 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h1><figure class="highlight routeros"><table><tr><td class="code"><pre><code class="hljs routeros">gcc -fPIC -c partvalue.c -I /home/postgres/pg12/include<span class="hljs-built_in">/server </span>; cc -shared -o partvalue.so partvalue.o<br></code></pre></td></tr></table></figure>
<h1 id="创建函数"><a href="#创建函数" class="headerlink" title="创建函数"></a>创建函数</h1><figure class="highlight pgsql"><table><tr><td class="code"><pre><code class="hljs pgsql">postgres=# <span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">or replace</span> <span class="hljs-keyword">FUNCTION</span> get_hash_partition_value(<span class="hljs-type">oid</span>, <span class="hljs-type">integer</span>, <span class="hljs-keyword">VARIADIC</span> &quot;any&quot;) <span class="hljs-keyword">RETURNS</span> <span class="hljs-type">bigint</span><br>     <span class="hljs-keyword">AS</span> <span class="hljs-string">&#x27;/home/postgres/partvalue&#x27;</span>, <span class="hljs-string">&#x27;get_hash_partition_value&#x27;</span><br>     <span class="hljs-keyword">LANGUAGE</span> C <span class="hljs-keyword">STRICT</span>;<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">FUNCTION</span><br>postgres=# \df+ get_hash_partition_value<br>                                                                                                           List <span class="hljs-keyword">of</span> <span class="hljs-keyword">functions</span><br> <span class="hljs-keyword">Schema</span> |              <span class="hljs-type">Name</span>              | Result data <span class="hljs-keyword">type</span> |          Argument data <span class="hljs-keyword">types</span>          | <span class="hljs-keyword">Type</span> | Volatility | Parallel |  <span class="hljs-keyword">Owner</span>   | <span class="hljs-keyword">Security</span> | <span class="hljs-keyword">Access</span> <span class="hljs-keyword">privileges</span> | <span class="hljs-keyword">Language</span> |          Source code           | Description<br><span class="hljs-comment">--------+--------------------------------+------------------+---------------------------------------+------+------------+----------+----------+----------+-------------------+----------+--------------------------------+-------------</span><br> <span class="hljs-built_in">public</span> | get_hash_partition_value       | <span class="hljs-type">bigint</span>           | <span class="hljs-type">oid</span>, <span class="hljs-type">integer</span>, <span class="hljs-keyword">VARIADIC</span> &quot;any&quot;          | func | <span class="hljs-keyword">volatile</span>   | unsafe   | postgres | <span class="hljs-keyword">invoker</span>  |                   | c        | get_hash_partition_value |<br>(<span class="hljs-number">1</span> <span class="hljs-keyword">row</span>)<br><br>postgres=#<br><br></code></pre></td></tr></table></figure>
<h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><figure class="highlight angelscript"><table><tr><td class="code"><pre><code class="hljs angelscript">postgres=# insert <span class="hljs-built_in">int</span>o userinfo select id, <span class="hljs-string">&#x27;userinfo_&#x27;</span>|| get_hash_partition_value(<span class="hljs-string">&#x27;18544&#x27;</span>::oid, <span class="hljs-number">16</span>, id),  now() - (id || <span class="hljs-string">&#x27; sec&#x27;</span>)::<span class="hljs-built_in">int</span>erval <span class="hljs-keyword">from</span> generate_series(<span class="hljs-number">1</span>,<span class="hljs-number">50</span>) id;<br>INSERT <span class="hljs-number">0</span> <span class="hljs-number">50</span><br>postgres=# select * <span class="hljs-keyword">from</span> userinfo;<br> userid |  username   |           ctime<br>--------+-------------+----------------------------<br>     <span class="hljs-number">14</span> | userinfo_0  | <span class="hljs-number">2020</span><span class="hljs-number">-09</span><span class="hljs-number">-07</span> <span class="hljs-number">19</span>:<span class="hljs-number">29</span>:<span class="hljs-number">55.519518</span><br>     <span class="hljs-number">26</span> | userinfo_0  | <span class="hljs-number">2020</span><span class="hljs-number">-09</span><span class="hljs-number">-07</span> <span class="hljs-number">19</span>:<span class="hljs-number">29</span>:<span class="hljs-number">43.519518</span><br>     <span class="hljs-number">34</span> | userinfo_0  | <span class="hljs-number">2020</span><span class="hljs-number">-09</span><span class="hljs-number">-07</span> <span class="hljs-number">19</span>:<span class="hljs-number">29</span>:<span class="hljs-number">35.519518</span><br>     <span class="hljs-number">11</span> | userinfo_1  | <span class="hljs-number">2020</span><span class="hljs-number">-09</span><span class="hljs-number">-07</span> <span class="hljs-number">19</span>:<span class="hljs-number">29</span>:<span class="hljs-number">58.519518</span><br>     <span class="hljs-number">19</span> | userinfo_1  | <span class="hljs-number">2020</span><span class="hljs-number">-09</span><span class="hljs-number">-07</span> <span class="hljs-number">19</span>:<span class="hljs-number">29</span>:<span class="hljs-number">50.519518</span><br>     <span class="hljs-number">21</span> | userinfo_1  | <span class="hljs-number">2020</span><span class="hljs-number">-09</span><span class="hljs-number">-07</span> <span class="hljs-number">19</span>:<span class="hljs-number">29</span>:<span class="hljs-number">48.519518</span><br>     <span class="hljs-number">36</span> | userinfo_1  | <span class="hljs-number">2020</span><span class="hljs-number">-09</span><span class="hljs-number">-07</span> <span class="hljs-number">19</span>:<span class="hljs-number">29</span>:<span class="hljs-number">33.519518</span><br>     <span class="hljs-number">42</span> | userinfo_2  | <span class="hljs-number">2020</span><span class="hljs-number">-09</span><span class="hljs-number">-07</span> <span class="hljs-number">19</span>:<span class="hljs-number">29</span>:<span class="hljs-number">27.519518</span><br>      <span class="hljs-number">4</span> | userinfo_3  | <span class="hljs-number">2020</span><span class="hljs-number">-09</span><span class="hljs-number">-07</span> <span class="hljs-number">19</span>:<span class="hljs-number">30</span>:<span class="hljs-number">05.519518</span><br>      <span class="hljs-number">6</span> | userinfo_3  | <span class="hljs-number">2020</span><span class="hljs-number">-09</span><span class="hljs-number">-07</span> <span class="hljs-number">19</span>:<span class="hljs-number">30</span>:<span class="hljs-number">03.519518</span><br>     <span class="hljs-number">24</span> | userinfo_3  | <span class="hljs-number">2020</span><span class="hljs-number">-09</span><span class="hljs-number">-07</span> <span class="hljs-number">19</span>:<span class="hljs-number">29</span>:<span class="hljs-number">45.519518</span><br>     <span class="hljs-number">29</span> | userinfo_3  | <span class="hljs-number">2020</span><span class="hljs-number">-09</span><span class="hljs-number">-07</span> <span class="hljs-number">19</span>:<span class="hljs-number">29</span>:<span class="hljs-number">40.519518</span><br>     <span class="hljs-number">44</span> | userinfo_4  | <span class="hljs-number">2020</span><span class="hljs-number">-09</span><span class="hljs-number">-07</span> <span class="hljs-number">19</span>:<span class="hljs-number">29</span>:<span class="hljs-number">25.519518</span><br>     <span class="hljs-number">50</span> | userinfo_4  | <span class="hljs-number">2020</span><span class="hljs-number">-09</span><span class="hljs-number">-07</span> <span class="hljs-number">19</span>:<span class="hljs-number">29</span>:<span class="hljs-number">19.519518</span><br>      <span class="hljs-number">8</span> | userinfo_5  | <span class="hljs-number">2020</span><span class="hljs-number">-09</span><span class="hljs-number">-07</span> <span class="hljs-number">19</span>:<span class="hljs-number">30</span>:<span class="hljs-number">01.519518</span><br>     <span class="hljs-number">13</span> | userinfo_6  | <span class="hljs-number">2020</span><span class="hljs-number">-09</span><span class="hljs-number">-07</span> <span class="hljs-number">19</span>:<span class="hljs-number">29</span>:<span class="hljs-number">56.519518</span><br>     <span class="hljs-number">23</span> | userinfo_6  | <span class="hljs-number">2020</span><span class="hljs-number">-09</span><span class="hljs-number">-07</span> <span class="hljs-number">19</span>:<span class="hljs-number">29</span>:<span class="hljs-number">46.519518</span><br>     <span class="hljs-number">39</span> | userinfo_6  | <span class="hljs-number">2020</span><span class="hljs-number">-09</span><span class="hljs-number">-07</span> <span class="hljs-number">19</span>:<span class="hljs-number">29</span>:<span class="hljs-number">30.519518</span><br>     <span class="hljs-number">48</span> | userinfo_6  | <span class="hljs-number">2020</span><span class="hljs-number">-09</span><span class="hljs-number">-07</span> <span class="hljs-number">19</span>:<span class="hljs-number">29</span>:<span class="hljs-number">21.519518</span><br>     <span class="hljs-number">49</span> | userinfo_6  | <span class="hljs-number">2020</span><span class="hljs-number">-09</span><span class="hljs-number">-07</span> <span class="hljs-number">19</span>:<span class="hljs-number">29</span>:<span class="hljs-number">20.519518</span><br>      <span class="hljs-number">7</span> | userinfo_7  | <span class="hljs-number">2020</span><span class="hljs-number">-09</span><span class="hljs-number">-07</span> <span class="hljs-number">19</span>:<span class="hljs-number">30</span>:<span class="hljs-number">02.519518</span><br>     <span class="hljs-number">10</span> | userinfo_7  | <span class="hljs-number">2020</span><span class="hljs-number">-09</span><span class="hljs-number">-07</span> <span class="hljs-number">19</span>:<span class="hljs-number">29</span>:<span class="hljs-number">59.519518</span><br>     <span class="hljs-number">22</span> | userinfo_7  | <span class="hljs-number">2020</span><span class="hljs-number">-09</span><span class="hljs-number">-07</span> <span class="hljs-number">19</span>:<span class="hljs-number">29</span>:<span class="hljs-number">47.519518</span><br>      <span class="hljs-number">1</span> | userinfo_8  | <span class="hljs-number">2020</span><span class="hljs-number">-09</span><span class="hljs-number">-07</span> <span class="hljs-number">19</span>:<span class="hljs-number">30</span>:<span class="hljs-number">08.519518</span><br>     <span class="hljs-number">16</span> | userinfo_8  | <span class="hljs-number">2020</span><span class="hljs-number">-09</span><span class="hljs-number">-07</span> <span class="hljs-number">19</span>:<span class="hljs-number">29</span>:<span class="hljs-number">53.519518</span><br>     <span class="hljs-number">28</span> | userinfo_8  | <span class="hljs-number">2020</span><span class="hljs-number">-09</span><span class="hljs-number">-07</span> <span class="hljs-number">19</span>:<span class="hljs-number">29</span>:<span class="hljs-number">41.519518</span><br>     <span class="hljs-number">30</span> | userinfo_8  | <span class="hljs-number">2020</span><span class="hljs-number">-09</span><span class="hljs-number">-07</span> <span class="hljs-number">19</span>:<span class="hljs-number">29</span>:<span class="hljs-number">39.519518</span><br>     <span class="hljs-number">32</span> | userinfo_8  | <span class="hljs-number">2020</span><span class="hljs-number">-09</span><span class="hljs-number">-07</span> <span class="hljs-number">19</span>:<span class="hljs-number">29</span>:<span class="hljs-number">37.519518</span><br>      <span class="hljs-number">3</span> | userinfo_9  | <span class="hljs-number">2020</span><span class="hljs-number">-09</span><span class="hljs-number">-07</span> <span class="hljs-number">19</span>:<span class="hljs-number">30</span>:<span class="hljs-number">06.519518</span><br>     <span class="hljs-number">31</span> | userinfo_9  | <span class="hljs-number">2020</span><span class="hljs-number">-09</span><span class="hljs-number">-07</span> <span class="hljs-number">19</span>:<span class="hljs-number">29</span>:<span class="hljs-number">38.519518</span><br>     <span class="hljs-number">35</span> | userinfo_9  | <span class="hljs-number">2020</span><span class="hljs-number">-09</span><span class="hljs-number">-07</span> <span class="hljs-number">19</span>:<span class="hljs-number">29</span>:<span class="hljs-number">34.519518</span><br>     <span class="hljs-number">37</span> | userinfo_9  | <span class="hljs-number">2020</span><span class="hljs-number">-09</span><span class="hljs-number">-07</span> <span class="hljs-number">19</span>:<span class="hljs-number">29</span>:<span class="hljs-number">32.519518</span><br>     <span class="hljs-number">38</span> | userinfo_9  | <span class="hljs-number">2020</span><span class="hljs-number">-09</span><span class="hljs-number">-07</span> <span class="hljs-number">19</span>:<span class="hljs-number">29</span>:<span class="hljs-number">31.519518</span><br>      <span class="hljs-number">2</span> | userinfo_10 | <span class="hljs-number">2020</span><span class="hljs-number">-09</span><span class="hljs-number">-07</span> <span class="hljs-number">19</span>:<span class="hljs-number">30</span>:<span class="hljs-number">07.519518</span><br>     <span class="hljs-number">47</span> | userinfo_10 | <span class="hljs-number">2020</span><span class="hljs-number">-09</span><span class="hljs-number">-07</span> <span class="hljs-number">19</span>:<span class="hljs-number">29</span>:<span class="hljs-number">22.519518</span><br>     <span class="hljs-number">15</span> | userinfo_11 | <span class="hljs-number">2020</span><span class="hljs-number">-09</span><span class="hljs-number">-07</span> <span class="hljs-number">19</span>:<span class="hljs-number">29</span>:<span class="hljs-number">54.519518</span><br>     <span class="hljs-number">12</span> | userinfo_12 | <span class="hljs-number">2020</span><span class="hljs-number">-09</span><span class="hljs-number">-07</span> <span class="hljs-number">19</span>:<span class="hljs-number">29</span>:<span class="hljs-number">57.519518</span><br>     <span class="hljs-number">17</span> | userinfo_12 | <span class="hljs-number">2020</span><span class="hljs-number">-09</span><span class="hljs-number">-07</span> <span class="hljs-number">19</span>:<span class="hljs-number">29</span>:<span class="hljs-number">52.519518</span><br>     <span class="hljs-number">45</span> | userinfo_12 | <span class="hljs-number">2020</span><span class="hljs-number">-09</span><span class="hljs-number">-07</span> <span class="hljs-number">19</span>:<span class="hljs-number">29</span>:<span class="hljs-number">24.519518</span><br>      <span class="hljs-number">5</span> | userinfo_13 | <span class="hljs-number">2020</span><span class="hljs-number">-09</span><span class="hljs-number">-07</span> <span class="hljs-number">19</span>:<span class="hljs-number">30</span>:<span class="hljs-number">04.519518</span><br>      <span class="hljs-number">9</span> | userinfo_13 | <span class="hljs-number">2020</span><span class="hljs-number">-09</span><span class="hljs-number">-07</span> <span class="hljs-number">19</span>:<span class="hljs-number">30</span>:<span class="hljs-number">00.519518</span><br>     <span class="hljs-number">20</span> | userinfo_13 | <span class="hljs-number">2020</span><span class="hljs-number">-09</span><span class="hljs-number">-07</span> <span class="hljs-number">19</span>:<span class="hljs-number">29</span>:<span class="hljs-number">49.519518</span><br>     <span class="hljs-number">41</span> | userinfo_13 | <span class="hljs-number">2020</span><span class="hljs-number">-09</span><span class="hljs-number">-07</span> <span class="hljs-number">19</span>:<span class="hljs-number">29</span>:<span class="hljs-number">28.519518</span><br>     <span class="hljs-number">46</span> | userinfo_13 | <span class="hljs-number">2020</span><span class="hljs-number">-09</span><span class="hljs-number">-07</span> <span class="hljs-number">19</span>:<span class="hljs-number">29</span>:<span class="hljs-number">23.519518</span><br>     <span class="hljs-number">18</span> | userinfo_14 | <span class="hljs-number">2020</span><span class="hljs-number">-09</span><span class="hljs-number">-07</span> <span class="hljs-number">19</span>:<span class="hljs-number">29</span>:<span class="hljs-number">51.519518</span><br>     <span class="hljs-number">25</span> | userinfo_14 | <span class="hljs-number">2020</span><span class="hljs-number">-09</span><span class="hljs-number">-07</span> <span class="hljs-number">19</span>:<span class="hljs-number">29</span>:<span class="hljs-number">44.519518</span><br>     <span class="hljs-number">27</span> | userinfo_14 | <span class="hljs-number">2020</span><span class="hljs-number">-09</span><span class="hljs-number">-07</span> <span class="hljs-number">19</span>:<span class="hljs-number">29</span>:<span class="hljs-number">42.519518</span><br>     <span class="hljs-number">43</span> | userinfo_14 | <span class="hljs-number">2020</span><span class="hljs-number">-09</span><span class="hljs-number">-07</span> <span class="hljs-number">19</span>:<span class="hljs-number">29</span>:<span class="hljs-number">26.519518</span><br>     <span class="hljs-number">33</span> | userinfo_15 | <span class="hljs-number">2020</span><span class="hljs-number">-09</span><span class="hljs-number">-07</span> <span class="hljs-number">19</span>:<span class="hljs-number">29</span>:<span class="hljs-number">36.519518</span><br>     <span class="hljs-number">40</span> | userinfo_15 | <span class="hljs-number">2020</span><span class="hljs-number">-09</span><span class="hljs-number">-07</span> <span class="hljs-number">19</span>:<span class="hljs-number">29</span>:<span class="hljs-number">29.519518</span><br>(<span class="hljs-number">50</span> rows)<br><br>postgres=# select * <span class="hljs-keyword">from</span> userinfo_0;<br> userid |  username  |           ctime<br>--------+------------+----------------------------<br>     <span class="hljs-number">14</span> | userinfo_0 | <span class="hljs-number">2020</span><span class="hljs-number">-09</span><span class="hljs-number">-07</span> <span class="hljs-number">19</span>:<span class="hljs-number">29</span>:<span class="hljs-number">55.519518</span><br>     <span class="hljs-number">26</span> | userinfo_0 | <span class="hljs-number">2020</span><span class="hljs-number">-09</span><span class="hljs-number">-07</span> <span class="hljs-number">19</span>:<span class="hljs-number">29</span>:<span class="hljs-number">43.519518</span><br>     <span class="hljs-number">34</span> | userinfo_0 | <span class="hljs-number">2020</span><span class="hljs-number">-09</span><span class="hljs-number">-07</span> <span class="hljs-number">19</span>:<span class="hljs-number">29</span>:<span class="hljs-number">35.519518</span><br>(<span class="hljs-number">3</span> rows)<br><br>postgres=# select * <span class="hljs-keyword">from</span> userinfo_1;<br> userid |  username  |           ctime<br>--------+------------+----------------------------<br>     <span class="hljs-number">11</span> | userinfo_1 | <span class="hljs-number">2020</span><span class="hljs-number">-09</span><span class="hljs-number">-07</span> <span class="hljs-number">19</span>:<span class="hljs-number">29</span>:<span class="hljs-number">58.519518</span><br>     <span class="hljs-number">19</span> | userinfo_1 | <span class="hljs-number">2020</span><span class="hljs-number">-09</span><span class="hljs-number">-07</span> <span class="hljs-number">19</span>:<span class="hljs-number">29</span>:<span class="hljs-number">50.519518</span><br>     <span class="hljs-number">21</span> | userinfo_1 | <span class="hljs-number">2020</span><span class="hljs-number">-09</span><span class="hljs-number">-07</span> <span class="hljs-number">19</span>:<span class="hljs-number">29</span>:<span class="hljs-number">48.519518</span><br>     <span class="hljs-number">36</span> | userinfo_1 | <span class="hljs-number">2020</span><span class="hljs-number">-09</span><span class="hljs-number">-07</span> <span class="hljs-number">19</span>:<span class="hljs-number">29</span>:<span class="hljs-number">33.519518</span><br>(<span class="hljs-number">4</span> rows)<br><br>postgres=# select * <span class="hljs-keyword">from</span> userinfo_2;<br> userid |  username  |           ctime<br>--------+------------+----------------------------<br>     <span class="hljs-number">42</span> | userinfo_2 | <span class="hljs-number">2020</span><span class="hljs-number">-09</span><span class="hljs-number">-07</span> <span class="hljs-number">19</span>:<span class="hljs-number">29</span>:<span class="hljs-number">27.519518</span><br>(<span class="hljs-number">1</span> row)<br><br>postgres=# select * <span class="hljs-keyword">from</span> userinfo_3;<br> userid |  username  |           ctime<br>--------+------------+----------------------------<br>      <span class="hljs-number">4</span> | userinfo_3 | <span class="hljs-number">2020</span><span class="hljs-number">-09</span><span class="hljs-number">-07</span> <span class="hljs-number">19</span>:<span class="hljs-number">30</span>:<span class="hljs-number">05.519518</span><br>      <span class="hljs-number">6</span> | userinfo_3 | <span class="hljs-number">2020</span><span class="hljs-number">-09</span><span class="hljs-number">-07</span> <span class="hljs-number">19</span>:<span class="hljs-number">30</span>:<span class="hljs-number">03.519518</span><br>     <span class="hljs-number">24</span> | userinfo_3 | <span class="hljs-number">2020</span><span class="hljs-number">-09</span><span class="hljs-number">-07</span> <span class="hljs-number">19</span>:<span class="hljs-number">29</span>:<span class="hljs-number">45.519518</span><br>     <span class="hljs-number">29</span> | userinfo_3 | <span class="hljs-number">2020</span><span class="hljs-number">-09</span><span class="hljs-number">-07</span> <span class="hljs-number">19</span>:<span class="hljs-number">29</span>:<span class="hljs-number">40.519518</span><br>(<span class="hljs-number">4</span> rows)<br><br></code></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>PostgreSQL</category>
      </categories>
      <tags>
        <tag>PostgreSQL</tag>
        <tag>partition table</tag>
        <tag>hash key</tag>
      </tags>
  </entry>
  <entry>
    <title>PostGIS 操作geometry方法</title>
    <url>/PostgreSQL/gis/Postgis/Postgis%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0/</url>
    <content><![CDATA[<p>记录Postgis常用方法.</p>
<a id="more"></a>
<h1 id="WKT定义几何对象格式："><a href="#WKT定义几何对象格式：" class="headerlink" title="WKT定义几何对象格式："></a>WKT定义几何对象格式：</h1><figure class="highlight angelscript"><table><tr><td class="code"><pre><code class="hljs angelscript">POINT(<span class="hljs-number">0</span> <span class="hljs-number">0</span>) ——点<br>LINESTRING(<span class="hljs-number">0</span> <span class="hljs-number">0</span>,<span class="hljs-number">1</span> <span class="hljs-number">1</span>,<span class="hljs-number">1</span> <span class="hljs-number">2</span>) ——线<br>POLYGON((<span class="hljs-number">0</span> <span class="hljs-number">0</span>,<span class="hljs-number">4</span> <span class="hljs-number">0</span>,<span class="hljs-number">4</span> <span class="hljs-number">4</span>,<span class="hljs-number">0</span> <span class="hljs-number">4</span>,<span class="hljs-number">0</span> <span class="hljs-number">0</span>),(<span class="hljs-number">1</span> <span class="hljs-number">1</span>, <span class="hljs-number">2</span> <span class="hljs-number">1</span>, <span class="hljs-number">2</span> <span class="hljs-number">2</span>, <span class="hljs-number">1</span> <span class="hljs-number">2</span>,<span class="hljs-number">1</span> <span class="hljs-number">1</span>)) ——面<br>MULTIPOINT(<span class="hljs-number">0</span> <span class="hljs-number">0</span>,<span class="hljs-number">1</span> <span class="hljs-number">2</span>) ——多点<br>MULTILINESTRING((<span class="hljs-number">0</span> <span class="hljs-number">0</span>,<span class="hljs-number">1</span> <span class="hljs-number">1</span>,<span class="hljs-number">1</span> <span class="hljs-number">2</span>),(<span class="hljs-number">2</span> <span class="hljs-number">3</span>,<span class="hljs-number">3</span> <span class="hljs-number">2</span>,<span class="hljs-number">5</span> <span class="hljs-number">4</span>)) ——多线<br>MULTIPOLYGON(((<span class="hljs-number">0</span> <span class="hljs-number">0</span>,<span class="hljs-number">4</span> <span class="hljs-number">0</span>,<span class="hljs-number">4</span> <span class="hljs-number">4</span>,<span class="hljs-number">0</span> <span class="hljs-number">4</span>,<span class="hljs-number">0</span> <span class="hljs-number">0</span>),(<span class="hljs-number">1</span> <span class="hljs-number">1</span>,<span class="hljs-number">2</span> <span class="hljs-number">1</span>,<span class="hljs-number">2</span> <span class="hljs-number">2</span>,<span class="hljs-number">1</span> <span class="hljs-number">2</span>,<span class="hljs-number">1</span> <span class="hljs-number">1</span>)), ((<span class="hljs-number">-1</span> <span class="hljs-number">-1</span>,<span class="hljs-number">-1</span> <span class="hljs-number">-2</span>,<span class="hljs-number">-2</span> <span class="hljs-number">-2</span>,<span class="hljs-number">-2</span> <span class="hljs-number">-1</span>,<span class="hljs-number">-1</span> <span class="hljs-number">-1</span>))) ——多面<br>GEOMETRYCOLLECTION(POINT(<span class="hljs-number">2</span> <span class="hljs-number">3</span>),LINESTRING((<span class="hljs-number">2</span> <span class="hljs-number">3</span>,<span class="hljs-number">3</span> <span class="hljs-number">4</span>))) ——几何集合<br></code></pre></td></tr></table></figure>
<h1 id="常用函数："><a href="#常用函数：" class="headerlink" title="常用函数："></a>常用函数：</h1><figure class="highlight reasonml"><table><tr><td class="code"><pre><code class="hljs reasonml">wkt转geometry st<span class="hljs-constructor">_geomfromtext(<span class="hljs-params">wkt</span>,<span class="hljs-params">wkid</span>)</span><br>geometry转wkt st<span class="hljs-constructor">_astext(<span class="hljs-params">geom</span>)</span><br>获取点对象x、y坐标值 st<span class="hljs-constructor">_x(<span class="hljs-params">geom</span>)</span>、st<span class="hljs-constructor">_y(<span class="hljs-params">geom</span>)</span><br>获取线/面对象四至 st<span class="hljs-constructor">_xmin(<span class="hljs-params">geom</span>)</span>、st<span class="hljs-constructor">_ymin(<span class="hljs-params">geom</span>)</span>、st<span class="hljs-constructor">_xmax(<span class="hljs-params">geom</span>)</span>、st<span class="hljs-constructor">_ymax(<span class="hljs-params">geom</span>)</span><br>计算两点之间距离 st<span class="hljs-constructor">_distance(<span class="hljs-params">geom</span>,<span class="hljs-params">geom</span>)</span><span class="hljs-operator"> / </span>st<span class="hljs-constructor">_distance(<span class="hljs-params">wkt</span>,<span class="hljs-params">wkt</span>)</span><br>计算线的长度 st<span class="hljs-constructor">_length(<span class="hljs-params">geom</span>)</span><span class="hljs-operator"> / </span>st<span class="hljs-constructor">_length(<span class="hljs-params">wkt</span>)</span><br>计算面积 st<span class="hljs-constructor">_area(<span class="hljs-params">geom</span>)</span><span class="hljs-operator"> / </span>st<span class="hljs-constructor">_area(<span class="hljs-params">wkt</span>)</span><br>缓冲区计算 st<span class="hljs-constructor">_buffer(<span class="hljs-params">geom</span>,<span class="hljs-params">distance</span>)</span><span class="hljs-operator"> / </span>st<span class="hljs-constructor">_buffer(<span class="hljs-params">wkt</span>,<span class="hljs-params">distance</span>)</span><br><br></code></pre></td></tr></table></figure>
<h1 id="管理函数"><a href="#管理函数" class="headerlink" title="管理函数"></a>管理函数</h1><figure class="highlight reasonml"><table><tr><td class="code"><pre><code class="hljs reasonml">添加几何字段 <span class="hljs-constructor">AddGeometryColumn(, , , , , )</span><br>删除几何字段 <span class="hljs-constructor">DropGeometryColumn(, , )</span><br>检查数据库几何字段并在geometry_columns中归档 <span class="hljs-constructor">Probe_Geometry_Columns()</span><br>给几何对象设置空间参考（在通过一个范围做空间查询时常用） <span class="hljs-constructor">ST_SetSRID(<span class="hljs-params">geometry</span>, <span class="hljs-params">integer</span>)</span><br></code></pre></td></tr></table></figure>
<h1 id="几何对象关系函数"><a href="#几何对象关系函数" class="headerlink" title="几何对象关系函数"></a>几何对象关系函数</h1><figure class="highlight reasonml"><table><tr><td class="code"><pre><code class="hljs reasonml">获取两个几何对象间的距离 <span class="hljs-constructor">ST_Distance(<span class="hljs-params">geometry</span>, <span class="hljs-params">geometry</span>)</span><br>如果两个几何对象间距离在给定值范围内，则返回TRUE <span class="hljs-constructor">ST_DWithin(<span class="hljs-params">geometry</span>, <span class="hljs-params">geometry</span>, <span class="hljs-params">float</span>)</span><br>判断两个几何对象是否相等<br>（比如<span class="hljs-constructor">LINESTRING(0 0, 2 2)</span>和<span class="hljs-constructor">LINESTRING(0 0, 1 1, 2 2)</span>是相同的几何对象） <span class="hljs-constructor">ST_Equals(<span class="hljs-params">geometry</span>, <span class="hljs-params">geometry</span>)</span><br>判断两个几何对象是否分离 <span class="hljs-constructor">ST_Disjoint(<span class="hljs-params">geometry</span>, <span class="hljs-params">geometry</span>)</span><br>判断两个几何对象是否相交 <span class="hljs-constructor">ST_Intersects(<span class="hljs-params">geometry</span>, <span class="hljs-params">geometry</span>)</span><br>判断两个几何对象的边缘是否接触 <span class="hljs-constructor">ST_Touches(<span class="hljs-params">geometry</span>, <span class="hljs-params">geometry</span>)</span><br>判断两个几何对象是否互相穿过 <span class="hljs-constructor">ST_Crosses(<span class="hljs-params">geometry</span>, <span class="hljs-params">geometry</span>)</span><br>判断A是否被B包含 <span class="hljs-constructor">ST_Within(<span class="hljs-params">geometry</span> A, <span class="hljs-params">geometry</span> B)</span><br>判断两个几何对象是否是重叠 <span class="hljs-constructor">ST_Overlaps(<span class="hljs-params">geometry</span>, <span class="hljs-params">geometry</span>)</span><br>判断A是否包含B <span class="hljs-constructor">ST_Contains(<span class="hljs-params">geometry</span> A, <span class="hljs-params">geometry</span> B)</span><br>判断A是否覆盖 B <span class="hljs-constructor">ST_Covers(<span class="hljs-params">geometry</span> A, <span class="hljs-params">geometry</span> B)</span><br>判断A是否被B所覆盖 <span class="hljs-constructor">ST_CoveredBy(<span class="hljs-params">geometry</span> A, <span class="hljs-params">geometry</span> B)</span><br>通过DE-<span class="hljs-number">9</span>IM 矩阵判断两个几何对象的关系是否成立 <span class="hljs-constructor">ST_Relate(<span class="hljs-params">geometry</span>, <span class="hljs-params">geometry</span>, <span class="hljs-params">intersectionPatternMatrix</span>)</span><br>获得两个几何对象的关系（DE-<span class="hljs-number">9</span>IM矩阵） <span class="hljs-constructor">ST_Relate(<span class="hljs-params">geometry</span>, <span class="hljs-params">geometry</span>)</span><br></code></pre></td></tr></table></figure>
<h1 id="几何对象处理函数："><a href="#几何对象处理函数：" class="headerlink" title="几何对象处理函数："></a>几何对象处理函数：</h1><figure class="highlight reasonml"><table><tr><td class="code"><pre><code class="hljs reasonml">获取几何对象的中心 <span class="hljs-constructor">ST_Centroid(<span class="hljs-params">geometry</span>)</span><br>面积量测 <span class="hljs-constructor">ST_Area(<span class="hljs-params">geometry</span>)</span><br>长度量测 <span class="hljs-constructor">ST_Length(<span class="hljs-params">geometry</span>)</span><br>返回曲面上的一个点 <span class="hljs-constructor">ST_PointOnSurface(<span class="hljs-params">geometry</span>)</span><br>获取边界 <span class="hljs-constructor">ST_Boundary(<span class="hljs-params">geometry</span>)</span><br>获取缓冲后的几何对象 <span class="hljs-constructor">ST_Buffer(<span class="hljs-params">geometry</span>, <span class="hljs-params">double</span>, [<span class="hljs-params">integer</span>])</span><br>获取多几何对象的外接对象 <span class="hljs-constructor">ST_ConvexHull(<span class="hljs-params">geometry</span>)</span><br>获取两个几何对象相交的部分 <span class="hljs-constructor">ST_Intersection(<span class="hljs-params">geometry</span>, <span class="hljs-params">geometry</span>)</span><br>将经度小于<span class="hljs-number">0</span>的值加<span class="hljs-number">360</span>使所有经度值在<span class="hljs-number">0</span>-<span class="hljs-number">360</span>间 <span class="hljs-constructor">ST_Shift_Longitude(<span class="hljs-params">geometry</span>)</span><br>获取两个几何对象不相交的部分（A、B可互换） <span class="hljs-constructor">ST_SymDifference(<span class="hljs-params">geometry</span> A, <span class="hljs-params">geometry</span> B)</span><br>从A去除和B相交的部分后返回 <span class="hljs-constructor">ST_Difference(<span class="hljs-params">geometry</span> A, <span class="hljs-params">geometry</span> B)</span><br>返回两个几何对象的合并结果 <span class="hljs-constructor">ST_Union(<span class="hljs-params">geometry</span>, <span class="hljs-params">geometry</span>)</span><br>返回一系列几何对象的合并结果 <span class="hljs-constructor">ST_Union(<span class="hljs-params">geometry</span> <span class="hljs-params">set</span>)</span><br>用较少的内存和较长的时间完成合并操作，结果和ST_Union相同 <span class="hljs-constructor">ST_MemUnion(<span class="hljs-params">geometry</span> <span class="hljs-params">set</span>)</span><br></code></pre></td></tr></table></figure>
<h1 id="几何对象存取函数"><a href="#几何对象存取函数" class="headerlink" title="几何对象存取函数"></a>几何对象存取函数</h1><figure class="highlight reasonml"><table><tr><td class="code"><pre><code class="hljs reasonml">获取几何对象的WKT描述 <span class="hljs-constructor">ST_AsText(<span class="hljs-params">geometry</span>)</span><br>获取几何对象的WKB描述 <span class="hljs-constructor">ST_AsBinary(<span class="hljs-params">geometry</span>)</span><br>获取几何对象的空间参考ID <span class="hljs-constructor">ST_SRID(<span class="hljs-params">geometry</span>)</span><br>获取几何对象的维数 <span class="hljs-constructor">ST_Dimension(<span class="hljs-params">geometry</span>)</span><br>获取几何对象的边界范围 <span class="hljs-constructor">ST_Envelope(<span class="hljs-params">geometry</span>)</span><br>判断几何对象是否为空 <span class="hljs-constructor">ST_IsEmpty(<span class="hljs-params">geometry</span>)</span><br>判断几何对象是否不包含特殊点（比如自相交） <span class="hljs-constructor">ST_IsSimple(<span class="hljs-params">geometry</span>)</span><br>判断几何对象是否闭合 <span class="hljs-constructor">ST_IsClosed(<span class="hljs-params">geometry</span>)</span><br>判断曲线是否闭合并且不包含特殊点 <span class="hljs-constructor">ST_IsRing(<span class="hljs-params">geometry</span>)</span><br>获取多几何对象中的对象个数 <span class="hljs-constructor">ST_NumGeometries(<span class="hljs-params">geometry</span>)</span><br>获取多几何对象中第N个对象 <span class="hljs-constructor">ST_GeometryN(<span class="hljs-params">geometry</span>,<span class="hljs-params">int</span>)</span><br>获取几何对象中的点个数 <span class="hljs-constructor">ST_NumPoints(<span class="hljs-params">geometry</span>)</span><br>获取几何对象的第N个点 <span class="hljs-constructor">ST_PointN(<span class="hljs-params">geometry</span>,<span class="hljs-params">integer</span>)</span><br>获取多边形的外边缘 <span class="hljs-constructor">ST_ExteriorRing(<span class="hljs-params">geometry</span>)</span><br>获取多边形内边界个数 <span class="hljs-constructor">ST_NumInteriorRings(<span class="hljs-params">geometry</span>)</span><br>同上 <span class="hljs-constructor">ST_NumInteriorRing(<span class="hljs-params">geometry</span>)</span><br>获取多边形的第N个内边界 <span class="hljs-constructor">ST_InteriorRingN(<span class="hljs-params">geometry</span>,<span class="hljs-params">integer</span>)</span><br>获取线的终点 <span class="hljs-constructor">ST_EndPoint(<span class="hljs-params">geometry</span>)</span><br>获取线的起始点 <span class="hljs-constructor">ST_StartPoint(<span class="hljs-params">geometry</span>)</span><br>获取几何对象的类型 <span class="hljs-constructor">GeometryType(<span class="hljs-params">geometry</span>)</span><br>类似上，但是不检查M值，即POINTM对象会被判断为point <span class="hljs-constructor">ST_GeometryType(<span class="hljs-params">geometry</span>)</span><br>获取点的X坐标 <span class="hljs-constructor">ST_X(<span class="hljs-params">geometry</span>)</span><br>获取点的Y坐标 <span class="hljs-constructor">ST_Y(<span class="hljs-params">geometry</span>)</span><br>获取点的Z坐标 <span class="hljs-constructor">ST_Z(<span class="hljs-params">geometry</span>)</span><br>获取点的M值 <span class="hljs-constructor">ST_M(<span class="hljs-params">geometry</span>)</span><br></code></pre></td></tr></table></figure>
<h1 id="几何对象构造函数"><a href="#几何对象构造函数" class="headerlink" title="几何对象构造函数"></a>几何对象构造函数</h1><figure class="highlight stylus"><table><tr><td class="code"><pre><code class="hljs stylus">参考语义<br>Text：WKT<br>WKB：WKB<br>Geom:Geometry<br>M:Multi<br>Bd:BuildArea<br>Coll:Collection ST_GeomFromText(text,[])<br><br><span class="hljs-function"><span class="hljs-title">ST_PointFromText</span><span class="hljs-params">(text,[])</span></span><br><span class="hljs-function"><span class="hljs-title">ST_LineFromText</span><span class="hljs-params">(text,[])</span></span><br><span class="hljs-function"><span class="hljs-title">ST_LinestringFromText</span><span class="hljs-params">(text,[])</span></span><br><span class="hljs-function"><span class="hljs-title">ST_PolyFromText</span><span class="hljs-params">(text,[])</span></span><br><span class="hljs-function"><span class="hljs-title">ST_PolygonFromText</span><span class="hljs-params">(text,[])</span></span><br><span class="hljs-function"><span class="hljs-title">ST_MPointFromText</span><span class="hljs-params">(text,[])</span></span><br><span class="hljs-function"><span class="hljs-title">ST_MLineFromText</span><span class="hljs-params">(text,[])</span></span><br><span class="hljs-function"><span class="hljs-title">ST_MPolyFromText</span><span class="hljs-params">(text,[])</span></span><br><span class="hljs-function"><span class="hljs-title">ST_GeomCollFromText</span><span class="hljs-params">(text,[])</span></span><br><span class="hljs-function"><span class="hljs-title">ST_GeomFromWKB</span><span class="hljs-params">(bytea,[])</span></span><br><span class="hljs-function"><span class="hljs-title">ST_GeometryFromWKB</span><span class="hljs-params">(bytea,[])</span></span><br><span class="hljs-function"><span class="hljs-title">ST_PointFromWKB</span><span class="hljs-params">(bytea,[])</span></span><br><span class="hljs-function"><span class="hljs-title">ST_LineFromWKB</span><span class="hljs-params">(bytea,[])</span></span><br><span class="hljs-function"><span class="hljs-title">ST_LinestringFromWKB</span><span class="hljs-params">(bytea,[])</span></span><br><span class="hljs-function"><span class="hljs-title">ST_PolyFromWKB</span><span class="hljs-params">(bytea,[])</span></span><br><span class="hljs-function"><span class="hljs-title">ST_PolygonFromWKB</span><span class="hljs-params">(bytea,[])</span></span><br><span class="hljs-function"><span class="hljs-title">ST_MPointFromWKB</span><span class="hljs-params">(bytea,[])</span></span><br><span class="hljs-function"><span class="hljs-title">ST_MLineFromWKB</span><span class="hljs-params">(bytea,[])</span></span><br><span class="hljs-function"><span class="hljs-title">ST_MPolyFromWKB</span><span class="hljs-params">(bytea,[])</span></span><br><span class="hljs-function"><span class="hljs-title">ST_GeomCollFromWKB</span><span class="hljs-params">(bytea,[])</span></span><br><span class="hljs-function"><span class="hljs-title">ST_BdPolyFromText</span><span class="hljs-params">(text WKT, integer SRID)</span></span><br><span class="hljs-function"><span class="hljs-title">ST_BdMPolyFromText</span><span class="hljs-params">(text WKT, integer SRID)</span></span><br></code></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>PostgreSQL</category>
        <category>gis</category>
        <category>Postgis</category>
      </categories>
      <tags>
        <tag>PostgreSQL</tag>
        <tag>gis</tag>
        <tag>postgis</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux 命令记录</title>
    <url>/Linux/Linux_cmd_summary/</url>
    <content><![CDATA[<p>记录一些工作中遇到的命令.</p>
<a id="more"></a>
<h1 id="适用于PG的一个sysctl-conf配置"><a href="#适用于PG的一个sysctl-conf配置" class="headerlink" title="适用于PG的一个sysctl.conf配置"></a>适用于PG的一个sysctl.conf配置</h1><figure class="highlight angelscript"><table><tr><td class="code"><pre><code class="hljs angelscript">vim /etc/sysctl.conf<br><br>vm.dirty_background_bytes = <span class="hljs-number">0</span><br>vm.dirty_background_ratio = <span class="hljs-number">10</span><br>vm.dirty_bytes = <span class="hljs-number">0</span><br>vm.dirty_expire_centisecs = <span class="hljs-number">3000</span><br>vm.dirty_ratio = <span class="hljs-number">20</span><br>vm.dirty_writeback_centisecs = <span class="hljs-number">500</span><br><br>net.ipv4.tcp_syncookies = <span class="hljs-number">1</span> 表示开启SYN Cookies。当出现SYN等待队列溢出时，启用cookies来处理，可防范少量SYN攻击，默认为<span class="hljs-number">0</span>，表示关闭；<br>net.ipv4.tcp_tw_reuse = <span class="hljs-number">1</span>    表示开启重用。允许将TIME-WAIT sockets重新用于新的TCP连接，默认为<span class="hljs-number">0</span>，表示关闭；<br>net.ipv4.tcp_tw_recycle = <span class="hljs-number">1</span>  表示开启TCP连接中TIME-WAIT sockets的快速回收，默认为<span class="hljs-number">0</span>，表示关闭；<br>net.ipv4.tcp_fin_timeout=<span class="hljs-number">30</span>修改系統默认的 TIMEOUT 时间。<br><br>如果以上配置调优后性能还不理想，可继续修改一下配置：<br><br>vi /etc/sysctl.conf<br>net.ipv4.tcp_keepalive_time = <span class="hljs-number">1200</span><br>#表示当keepalive起用的时候，TCP发送keepalive消息的频度。缺省是<span class="hljs-number">2</span>小时，改为<span class="hljs-number">20</span>分钟。<br>net.ipv4.ip_local_port_range = <span class="hljs-number">1024</span> <span class="hljs-number">65000</span><br>#表示用于向外连接的端口范围。缺省情况下很小：<span class="hljs-number">32768</span>到<span class="hljs-number">61000</span>，改为<span class="hljs-number">1024</span>到<span class="hljs-number">65000</span>。<br>net.ipv4.tcp_max_syn_backlog = <span class="hljs-number">8192</span><br>#表示SYN队列的长度，默认为<span class="hljs-number">1024</span>，加大队列长度为<span class="hljs-number">8192</span>，可以容纳更多等待连接的网络连接数。<br>net.ipv4.tcp_max_tw_buckets = <span class="hljs-number">5000</span><br>#表示系统同时保持TIME_WAIT套接字的最大数量，如果超过这个数字，TIME_WAIT套接字将立刻被清除并打印警告信息。<br>默认为<span class="hljs-number">180000</span>，改为<span class="hljs-number">5000</span>。对于Apache、Nginx等服务器，上几行的参数可以很好地减少TIME_WAIT套接字数量，此项参数可以控制TIME_WAIT套接字的最大数量，避免Squid服务器被大量的TIME_WAIT套接字拖死。<br><br></code></pre></td></tr></table></figure>
<h1 id="python-文件服务器"><a href="#python-文件服务器" class="headerlink" title="python 文件服务器"></a>python 文件服务器</h1><figure class="highlight gcode"><table><tr><td class="code"><pre><code class="hljs gcode">pytho<span class="hljs-symbol">n2</span> -m SimpleHTTPServer <span class="hljs-number">8080</span><br>pytho<span class="hljs-symbol">n3</span> -m http.server<br></code></pre></td></tr></table></figure>
<h1 id="查看链接详情"><a href="#查看链接详情" class="headerlink" title="查看链接详情"></a>查看链接详情</h1><figure class="highlight ruby"><table><tr><td class="code"><pre><code class="hljs ruby">jintao@jintao-ThinkPad-<span class="hljs-symbol">L490:</span>~<span class="hljs-regexp">/personal/code</span><span class="hljs-regexp">/postgresql-master$ netstat -n | awk &#x27;/</span>^tcp/ &#123;++y[$NF]&#125; <span class="hljs-keyword">END</span> &#123;<span class="hljs-keyword">for</span>(w <span class="hljs-keyword">in</span> y) print w, y[w]&#125;<span class="hljs-string">&#x27;</span><br><span class="hljs-string">CLOSE_WAIT 10</span><br><span class="hljs-string">ESTABLISHED 153</span><br><span class="hljs-string">TIME_WAIT 10</span><br><span class="hljs-string"></span><br></code></pre></td></tr></table></figure>
<h1 id="curl-中带有中文时-需要使用—data-urlencode否则会报400"><a href="#curl-中带有中文时-需要使用—data-urlencode否则会报400" class="headerlink" title="curl 中带有中文时, 需要使用—data-urlencode否则会报400"></a>curl 中带有中文时, 需要使用—data-urlencode否则会报400</h1><figure class="highlight armasm"><table><tr><td class="code"><pre><code class="hljs armasm"><span class="hljs-symbol">curl</span> -G <span class="hljs-string">&quot;http://192.168.0.1/api/postgresql/get_platform_info&quot;</span> --<span class="hljs-meta">data</span>-urlencode <span class="hljs-string">&quot;bu=公共部门&quot;</span><br></code></pre></td></tr></table></figure>
<h1 id="查找ip-对应的条数以及主机名"><a href="#查找ip-对应的条数以及主机名" class="headerlink" title="查找ip 对应的条数以及主机名"></a>查找ip 对应的条数以及主机名</h1><figure class="highlight lsl"><table><tr><td class="code"><pre><code class="hljs lsl">########   pgbouncer<br>[postgres@l-pgb1zzzz ~]$ psql -Upostgres -d pgbouncer -Atc <span class="hljs-string">&quot;show clients&quot;</span>|awk -F <span class="hljs-string">&quot;|&quot;</span> &#x27;&#123;print $<span class="hljs-number">5</span>&#125;&#x27;|grep <span class="hljs-string">&quot;^1&quot;</span>|sort|uniq -c|sort -nk <span class="hljs-number">1</span>|awk &#x27;&#123;printf(<span class="hljs-string">&quot;%s %s &quot;</span>, $<span class="hljs-number">1</span>, $<span class="hljs-number">2</span>); cmd=<span class="hljs-string">&quot;host &quot;</span>$<span class="hljs-number">2</span>; system(cmd)&#125;&#x27;|awk &#x27;&#123;printf(<span class="hljs-string">&quot;%5s %15s %s <span class="hljs-subst">\n</span>&quot;</span>, $<span class="hljs-number">1</span>,$<span class="hljs-number">2</span>,$<span class="hljs-number">7</span>)&#125;&#x27;<br>    <span class="hljs-number">1</span> <span class="hljs-number">192.86</span><span class="hljs-number">.238</span><span class="hljs-number">.131</span> host1<br>    <span class="hljs-number">1</span> <span class="hljs-number">192.88</span><span class="hljs-number">.105</span><span class="hljs-number">.131</span> host2<br>    <span class="hljs-number">8</span> <span class="hljs-number">192168.254</span><span class="hljs-number">.191</span> host1<br>[postgres@l-pgb1zzzz ~]$<br><br><br>####### postgresql<br>[postgres@l-grpxxxx ~]$ psql -Atc <span class="hljs-string">&quot;select client_addr from pg_stat_activity where client_addr is not null&quot;</span> | sort|uniq -c| awk &#x27;&#123;printf(<span class="hljs-string">&quot;%s %s &quot;</span>,$<span class="hljs-number">1</span>,$<span class="hljs-number">2</span>);cmd=<span class="hljs-string">&quot;host &quot;</span>$<span class="hljs-number">2</span>; system(cmd)&#125;&#x27;|awk &#x27;&#123;printf(<span class="hljs-string">&quot;%10s %20s %s<span class="hljs-subst">\n</span>&quot;</span>,$<span class="hljs-number">1</span>,$<span class="hljs-number">2</span>,$<span class="hljs-number">7</span>)&#125;&#x27;|sort -k <span class="hljs-number">3</span><br>         <span class="hljs-number">1</span>         <span class="hljs-number">19288.101</span><span class="hljs-number">.77</span> l-callcenter14.h.cn6<br>         <span class="hljs-number">1</span>         <span class="hljs-number">19286.236</span><span class="hljs-number">.29</span> l-host14.xxxx<br>         <span class="hljs-number">1</span>         <span class="hljs-number">19290.4</span><span class="hljs-number">.23</span>   l-host1.yyyy<br>         <span class="hljs-number">1</span>         <span class="hljs-number">19290.15</span><span class="hljs-number">.110</span> l-host7.yyyy<br>         <span class="hljs-number">1</span>         <span class="hljs-number">19290.15</span><span class="hljs-number">.111</span> l-host8.yyyy<br></code></pre></td></tr></table></figure>
<h1 id="PostgreSQL日志变成一行"><a href="#PostgreSQL日志变成一行" class="headerlink" title="PostgreSQL日志变成一行"></a>PostgreSQL日志变成一行</h1><figure class="highlight stata"><table><tr><td class="code"><pre><code class="hljs stata">awk &#x27;&#123;<span class="hljs-keyword">if</span> (<span class="hljs-variable">$0</span> !~  <span class="hljs-string">&quot;^[\t]&quot;</span>) printf(<span class="hljs-string">&quot;\n%s&quot;</span> ,<span class="hljs-variable">$0</span>); <span class="hljs-keyword">else</span> printf <span class="hljs-variable">$0&#125;</span>&#x27; postgresql-Tue.<span class="hljs-keyword">log</span><br>zcat postgresql-2013-02-2*.<span class="hljs-keyword">log</span>.gz | perl -<span class="hljs-keyword">e</span> &#x27;<span class="hljs-keyword">while</span>(&lt;&gt;)&#123; <span class="hljs-keyword">if</span>(<span class="hljs-variable">$_</span> !~ /^\t/ig) &#123; chomp; <span class="hljs-keyword">print</span> <span class="hljs-string">&quot;\n&quot;</span>,<span class="hljs-variable">$_</span>;&#125; <span class="hljs-keyword">else</span> &#123;chomp; <span class="hljs-keyword">print</span>;&#125;&#125;&#x27; |less<br></code></pre></td></tr></table></figure>
<h1 id="磁盘读写测试"><a href="#磁盘读写测试" class="headerlink" title="磁盘读写测试"></a>磁盘读写测试</h1><figure class="highlight angelscript"><table><tr><td class="code"><pre><code class="hljs angelscript">$ sudo hdparm -tT --direct /dev/nvme0n1p2<br><br>/dev/nvme0n1p2:<br> Timing O_DIRECT cached reads:   <span class="hljs-number">2284</span> MB <span class="hljs-keyword">in</span>  <span class="hljs-number">2.00</span> seconds = <span class="hljs-number">1142.33</span> MB/sec<br> Timing O_DIRECT disk reads: <span class="hljs-number">100</span> MB <span class="hljs-keyword">in</span>  <span class="hljs-number">0.08</span> seconds = <span class="hljs-number">1226.93</span> MB/sec<br><br># 顺序同步写入<br>$ time dd <span class="hljs-keyword">if</span>=/dev/zero of=test bs=<span class="hljs-number">8</span>k count=<span class="hljs-number">5120</span> oflag=dsync<br><span class="hljs-number">5120</span>+<span class="hljs-number">0</span> records <span class="hljs-keyword">in</span><br><span class="hljs-number">5120</span>+<span class="hljs-number">0</span> records <span class="hljs-keyword">out</span><br><span class="hljs-number">41943040</span> bytes (<span class="hljs-number">42</span> MB, <span class="hljs-number">40</span> MiB) copied, <span class="hljs-number">4.98705</span> s, <span class="hljs-number">8.4</span> MB/s<br><br>real    <span class="hljs-number">0</span>m4<span class="hljs-number">.993</span>s<br>user    <span class="hljs-number">0</span>m0<span class="hljs-number">.019</span>s<br>sys    <span class="hljs-number">0</span>m0<span class="hljs-number">.872</span>s<br><br># 顺序写入 <br>$ time dd <span class="hljs-keyword">if</span>=/dev/zero of=test bs=<span class="hljs-number">8</span>k count=<span class="hljs-number">1000000</span><br><span class="hljs-number">1000000</span>+<span class="hljs-number">0</span> records <span class="hljs-keyword">in</span><br><span class="hljs-number">1000000</span>+<span class="hljs-number">0</span> records <span class="hljs-keyword">out</span><br><span class="hljs-number">8192000000</span> bytes (<span class="hljs-number">8.2</span> GB, <span class="hljs-number">7.6</span> GiB) copied, <span class="hljs-number">10.7331</span> s, <span class="hljs-number">763</span> MB/s<br><br>real    <span class="hljs-number">0</span>m10<span class="hljs-number">.743</span>s<br>user    <span class="hljs-number">0</span>m0<span class="hljs-number">.189</span>s<br>sys    <span class="hljs-number">0</span>m6<span class="hljs-number">.423</span>s<br><br># 顺序读取<br>$ time dd <span class="hljs-keyword">if</span>=test of=/dev/<span class="hljs-literal">null</span> bs=<span class="hljs-number">8</span>k<br><span class="hljs-number">1000000</span>+<span class="hljs-number">0</span> records <span class="hljs-keyword">in</span><br><span class="hljs-number">1000000</span>+<span class="hljs-number">0</span> records <span class="hljs-keyword">out</span><br><span class="hljs-number">8192000000</span> bytes (<span class="hljs-number">8.2</span> GB, <span class="hljs-number">7.6</span> GiB) copied, <span class="hljs-number">10.7331</span> s, <span class="hljs-number">763</span> MB/s<br><br>real    <span class="hljs-number">0</span>m10<span class="hljs-number">.743</span>s<br>user    <span class="hljs-number">0</span>m0<span class="hljs-number">.189</span>s<br>sys    <span class="hljs-number">0</span>m6<span class="hljs-number">.423</span>s<br></code></pre></td></tr></table></figure>
<h1 id="启用-禁用CPU"><a href="#启用-禁用CPU" class="headerlink" title="启用/禁用CPU"></a>启用/禁用CPU</h1><figure class="highlight angelscript"><table><tr><td class="code"><pre><code class="hljs angelscript">$ sudo chcpu -d <span class="hljs-number">3</span><br>CPU <span class="hljs-number">3</span> disabled<br>$ sudo chcpu -e <span class="hljs-number">3</span><br>CPU <span class="hljs-number">3</span> enabled<br><br></code></pre></td></tr></table></figure>
<h1 id="增加-删除IP"><a href="#增加-删除IP" class="headerlink" title="增加/删除IP"></a>增加/删除IP</h1><figure class="highlight angelscript"><table><tr><td class="code"><pre><code class="hljs angelscript"># ip a a local <span class="hljs-number">192.168</span><span class="hljs-number">.0</span><span class="hljs-number">.25</span>/<span class="hljs-number">32</span> brd + dev bond0 &amp;&amp; arping -q -c <span class="hljs-number">3</span> -U -I  bond0 <span class="hljs-number">192.168</span><span class="hljs-number">.0</span><span class="hljs-number">.25</span><br><br># ip a d local <span class="hljs-number">192.168</span><span class="hljs-number">.0</span><span class="hljs-number">.25</span>/<span class="hljs-number">32</span> brd + dev bond0<br></code></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>command</tag>
      </tags>
  </entry>
  <entry>
    <title>PostgreSQL vacuum</title>
    <url>/PostgreSQL/PostgreSQL_vacuum/</url>
    <content><![CDATA[<p>vacuum processing is a maintenance process that facilitates the persistent operation of PostgreSQL. Its two main tasks are removing dead tuples and the freezing transaction ids, both of which are briefly mentioned in Section 5.10.</p>
<p>To remove dead tuples, vacuum processing provides two modes, i.e. Concurrent VACUUM and Full VACUUM. Concurrent VACUUM, often simply called VACUUM, removes dead tuples for each page of the table file, and other transactions can read the table while this process is running. In contrast, Full VACUUM removes dead tuples and defragments live tuples the whole file, and other transactions cannot access tables while Full VACUUM is running.</p>
<p>Despite the fact that vacuum processing is essential for PostgreSQL, improving its functionality has been slow compared to other functions. For example, until version 8.0, this process had to be executed manually (with the psql utility or using the cron daemon). It was automated in 2005 when the autovacuum daemon was implemented.</p>
<p>Since vacuum processing involves scanning whole tables, it is a costly process. In version 8.4 (2009), the Visibility Map (VM) was introduced to improve the efficiency of removing dead tuples. In version 9.6 (2016), the freeze process was improved by enhancing the VM. </p>
<a id="more"></a>
<h1 id="Concurrent-VACUUM"><a href="#Concurrent-VACUUM" class="headerlink" title="Concurrent VACUUM"></a>Concurrent VACUUM</h1><figure class="highlight pgsql"><table><tr><td class="code"><pre><code class="hljs pgsql">(<span class="hljs-number">1</span>)  <span class="hljs-keyword">FOR</span> <span class="hljs-keyword">each</span> <span class="hljs-keyword">table</span><br>(<span class="hljs-number">2</span>)       Acquire ShareUpdateExclusiveLock <span class="hljs-keyword">lock</span> <span class="hljs-keyword">for</span> the target <span class="hljs-keyword">table</span><br><br>          <span class="hljs-comment">/* The first block */</span><br>(<span class="hljs-number">3</span>)       Scan <span class="hljs-keyword">all</span> pages <span class="hljs-keyword">to</span> <span class="hljs-keyword">get</span> <span class="hljs-keyword">all</span> dead tuples, <span class="hljs-keyword">and</span> <span class="hljs-keyword">freeze</span> <span class="hljs-built_in">old</span> tuples <span class="hljs-keyword">if</span> necessary<br>          PostgreSQL scans a target <span class="hljs-keyword">table</span> <span class="hljs-keyword">to</span> build a list <span class="hljs-keyword">of</span> dead tuples <span class="hljs-keyword">and</span> <span class="hljs-keyword">freeze</span> <span class="hljs-built_in">old</span> tuples <span class="hljs-keyword">if</span> possible. The list <span class="hljs-keyword">is</span> stored <span class="hljs-keyword">in</span> maintenance_work_mem <span class="hljs-keyword">in</span> <span class="hljs-keyword">local</span> memory<br>(<span class="hljs-number">4</span>)       Remove the <span class="hljs-keyword">index</span> tuples that <span class="hljs-type">point</span> <span class="hljs-keyword">to</span> the respective dead tuples <span class="hljs-keyword">if</span> <span class="hljs-keyword">exists</span><br><br>          <span class="hljs-comment">/* The second block */</span><br>(<span class="hljs-number">5</span>)       <span class="hljs-keyword">FOR</span> <span class="hljs-keyword">each</span> page <span class="hljs-keyword">of</span> the <span class="hljs-keyword">table</span><br>(<span class="hljs-number">6</span>)            Remove the dead tuples, <span class="hljs-keyword">and</span> Reallocate the live tuples <span class="hljs-keyword">in</span> the page<br>(<span class="hljs-number">7</span>)            <span class="hljs-keyword">Update</span> FSM <span class="hljs-keyword">and</span> VM<br>           <span class="hljs-keyword">END</span> <span class="hljs-keyword">FOR</span><br><br>          <span class="hljs-comment">/* The third block */</span><br>(<span class="hljs-number">8</span>)       Clean up indexes<br>(<span class="hljs-number">9</span>)       <span class="hljs-keyword">Truncate</span> the last page <span class="hljs-keyword">if</span> possible<br>(<span class="hljs-number">10</span>       <span class="hljs-keyword">Update</span> <span class="hljs-keyword">both</span> the <span class="hljs-keyword">statistics</span> <span class="hljs-keyword">and</span> <span class="hljs-keyword">system</span> catalogs <span class="hljs-keyword">of</span> the target <span class="hljs-keyword">table</span><br>          <span class="hljs-keyword">Release</span> ShareUpdateExclusiveLock <span class="hljs-keyword">lock</span><br>       <span class="hljs-keyword">END</span> <span class="hljs-keyword">FOR</span><br><br>        <span class="hljs-comment">/* Post-processing */</span><br>(<span class="hljs-number">11</span>)  <span class="hljs-keyword">Update</span> <span class="hljs-keyword">statistics</span> <span class="hljs-keyword">and</span> <span class="hljs-keyword">system</span> catalogs<br>(<span class="hljs-number">12</span>)  Remove <span class="hljs-keyword">both</span> unnecessary files <span class="hljs-keyword">and</span> pages <span class="hljs-keyword">of</span> the clog <span class="hljs-keyword">if</span> possible<br><br></code></pre></td></tr></table></figure>
<p>(1) Get each table from the specified tables.<br>(2) Acquire ShareUpdateExclusiveLock lock for the table. This lock allows reading from other transactions.<br>(3) Scan all pages to get all dead tuples, and freeze old tuples if necessary.<br>(4) Remove the index tuples that point to the respective dead tuples if exists.<br>(5) Do the following tasks, step (6) and (7), for each page of the table.<br>(6) Remove the dead tuples and Reallocate the live tuples in the page.<br>(7) Update both the respective FSM and VM of the target table.<br>(8) Clean up the indexes by the index_vacuum_cleanup()@indexam.c function.<br>(9) Truncate the last page if the last one does not have any tuple.<br>(10) Update both the statistics and the system catalogs related to vacuum processing for the target table.<br>(11) Update both the statistics and the system catalogs related to vacuum processing.<br>(12) Remove both unnecessary files and pages of the clog if possible.</p>
<h1 id="Full-VACUUM"><a href="#Full-VACUUM" class="headerlink" title="Full VACUUM"></a>Full VACUUM</h1><figure class="highlight pgsql"><table><tr><td class="code"><pre><code class="hljs pgsql">(<span class="hljs-number">1</span>)  <span class="hljs-keyword">FOR</span> <span class="hljs-keyword">each</span> <span class="hljs-keyword">table</span><br>(<span class="hljs-number">2</span>)       Acquire AccessExclusiveLock <span class="hljs-keyword">lock</span> <span class="hljs-keyword">for</span> the <span class="hljs-keyword">table</span><br>(<span class="hljs-number">3</span>)       <span class="hljs-keyword">Create</span> a <span class="hljs-built_in">new</span> <span class="hljs-keyword">table</span> file<br>(<span class="hljs-number">4</span>)       <span class="hljs-keyword">FOR</span> <span class="hljs-keyword">each</span> live tuple <span class="hljs-keyword">in</span> the <span class="hljs-built_in">old</span> <span class="hljs-keyword">table</span><br>(<span class="hljs-number">5</span>)            <span class="hljs-keyword">Copy</span> the live tuple <span class="hljs-keyword">to</span> the <span class="hljs-built_in">new</span> <span class="hljs-keyword">table</span> file<br>(<span class="hljs-number">6</span>)            <span class="hljs-keyword">Freeze</span> the tuple <span class="hljs-keyword">IF</span> necessary<br>            <span class="hljs-keyword">END</span> <span class="hljs-keyword">FOR</span><br>(<span class="hljs-number">7</span>)        Remove the <span class="hljs-built_in">old</span> <span class="hljs-keyword">table</span> file<br>(<span class="hljs-number">8</span>)        Rebuild <span class="hljs-keyword">all</span> indexes<br>(<span class="hljs-number">9</span>)        <span class="hljs-keyword">Update</span> FSM <span class="hljs-keyword">and</span> VM<br>(<span class="hljs-number">10</span>)      <span class="hljs-keyword">Update</span> <span class="hljs-keyword">statistics</span><br>            <span class="hljs-keyword">Release</span> AccessExclusiveLock <span class="hljs-keyword">lock</span><br>       <span class="hljs-keyword">END</span> <span class="hljs-keyword">FOR</span><br>(<span class="hljs-number">11</span>)  Remove unnecessary clog files <span class="hljs-keyword">and</span> pages <span class="hljs-keyword">if</span> possible<br></code></pre></td></tr></table></figure>
<h2 id="When-should-I-do-VACUUM-FULL"><a href="#When-should-I-do-VACUUM-FULL" class="headerlink" title="When should I do VACUUM FULL?"></a>When should I do VACUUM FULL?</h2><p>There is unfortunately no best practice when you should execute ‘VACUUM FULL’. However, the extension pg_freespacemap may give you good suggestions.</p>
<p>The following query shows the average freespace ratio of the table you want to know.<br><figure class="highlight pgsql"><table><tr><td class="code"><pre><code class="hljs pgsql">testdb=# <span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">EXTENSION</span> pg_freespacemap;<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">EXTENSION</span><br><br>testdb=# <span class="hljs-keyword">SELECT</span> count(*) <span class="hljs-keyword">as</span> &quot;number of pages&quot;,<br>       pg_size_pretty(cast(avg(avail) <span class="hljs-keyword">as</span> <span class="hljs-type">bigint</span>)) <span class="hljs-keyword">as</span> &quot;Av. freespace size&quot;,<br>       round(<span class="hljs-number">100</span> * avg(avail)/<span class="hljs-number">8192</span> ,<span class="hljs-number">2</span>) <span class="hljs-keyword">as</span> &quot;Av. freespace ratio&quot;<br>       <span class="hljs-keyword">FROM</span> pg_freespace(<span class="hljs-string">&#x27;accounts&#x27;</span>);<br> number <span class="hljs-keyword">of</span> pages | Av. freespace size | Av. freespace ratio<br><span class="hljs-comment">-----------------+--------------------+---------------------</span><br>            <span class="hljs-number">1640</span> | <span class="hljs-number">99</span> bytes           |                <span class="hljs-number">1.21</span><br>(<span class="hljs-number">1</span> <span class="hljs-keyword">row</span>)<br></code></pre></td></tr></table></figure></p>
<p>As the result above, You can find that there are few free spaces.</p>
<p>If you delete almost tuples and execute VACUUM command, you can find that almost pages are spaces ones.<br><figure class="highlight pgsql"><table><tr><td class="code"><pre><code class="hljs pgsql">testdb=# <span class="hljs-keyword">DELETE</span> <span class="hljs-keyword">FROM</span> accounts <span class="hljs-keyword">WHERE</span> aid %<span class="hljs-number">10</span> != <span class="hljs-number">0</span> <span class="hljs-keyword">OR</span> aid &lt; <span class="hljs-number">100</span>;<br><span class="hljs-keyword">DELETE</span> <span class="hljs-number">90009</span><br><br>testdb=# <span class="hljs-keyword">VACUUM</span> accounts;<br><span class="hljs-keyword">VACUUM</span><br><br>testdb=# <span class="hljs-keyword">SELECT</span> count(*) <span class="hljs-keyword">as</span> &quot;number of pages&quot;,<br>       pg_size_pretty(cast(avg(avail) <span class="hljs-keyword">as</span> <span class="hljs-type">bigint</span>)) <span class="hljs-keyword">as</span> &quot;Av. freespace size&quot;,<br>       round(<span class="hljs-number">100</span> * avg(avail)/<span class="hljs-number">8192</span> ,<span class="hljs-number">2</span>) <span class="hljs-keyword">as</span> &quot;Av. freespace ratio&quot;<br>       <span class="hljs-keyword">FROM</span> pg_freespace(<span class="hljs-string">&#x27;accounts&#x27;</span>);<br> number <span class="hljs-keyword">of</span> pages | Av. freespace size | Av. freespace ratio<br><span class="hljs-comment">-----------------+--------------------+---------------------</span><br>            <span class="hljs-number">1640</span> | <span class="hljs-number">7124</span> bytes         |               <span class="hljs-number">86.97</span><br>(<span class="hljs-number">1</span> <span class="hljs-keyword">row</span>)<br></code></pre></td></tr></table></figure></p>
<p>The following query inspects the freespace ratio of each page of the specified table.<br><figure class="highlight lsl"><table><tr><td class="code"><pre><code class="hljs lsl">testdb=# SELECT *, round(<span class="hljs-number">100</span> * avail/<span class="hljs-number">8192</span> ,<span class="hljs-number">2</span>) as <span class="hljs-string">&quot;freespace ratio&quot;</span><br>                FROM pg_freespace(&#x27;accounts&#x27;);<br> blkno | avail | freespace ratio<br>-------+-------+-----------------<br>     <span class="hljs-number">0</span> |  <span class="hljs-number">7904</span> |           <span class="hljs-number">96.00</span><br>     <span class="hljs-number">1</span> |  <span class="hljs-number">7520</span> |           <span class="hljs-number">91.00</span><br>     <span class="hljs-number">2</span> |  <span class="hljs-number">7136</span> |           <span class="hljs-number">87.00</span><br>     <span class="hljs-number">3</span> |  <span class="hljs-number">7136</span> |           <span class="hljs-number">87.00</span><br>     <span class="hljs-number">4</span> |  <span class="hljs-number">7136</span> |           <span class="hljs-number">87.00</span><br>     <span class="hljs-number">5</span> |  <span class="hljs-number">7136</span> |           <span class="hljs-number">87.00</span><br>....<br></code></pre></td></tr></table></figure><br>After executing VACUUM FULL, you can find that the table file has been compacted.<br><figure class="highlight pgsql"><table><tr><td class="code"><pre><code class="hljs pgsql">testdb=# <span class="hljs-keyword">VACUUM</span> <span class="hljs-keyword">FULL</span> accounts;<br><span class="hljs-keyword">VACUUM</span><br>testdb=# <span class="hljs-keyword">SELECT</span> count(*) <span class="hljs-keyword">as</span> &quot;number of blocks&quot;,<br>       pg_size_pretty(cast(avg(avail) <span class="hljs-keyword">as</span> <span class="hljs-type">bigint</span>)) <span class="hljs-keyword">as</span> &quot;Av. freespace size&quot;,<br>       round(<span class="hljs-number">100</span> * avg(avail)/<span class="hljs-number">8192</span> ,<span class="hljs-number">2</span>) <span class="hljs-keyword">as</span> &quot;Av. freespace ratio&quot;<br>       <span class="hljs-keyword">FROM</span> pg_freespace(<span class="hljs-string">&#x27;accounts&#x27;</span>);<br> number <span class="hljs-keyword">of</span> pages | Av. freespace size | Av. freespace ratio<br><span class="hljs-comment">-----------------+--------------------+---------------------</span><br>             <span class="hljs-number">164</span> | <span class="hljs-number">0</span> bytes            |                <span class="hljs-number">0.00</span><br>(<span class="hljs-number">1</span> <span class="hljs-keyword">row</span>)<br></code></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>PostgreSQL</category>
      </categories>
      <tags>
        <tag>PostgreSQL</tag>
        <tag>vacuum</tag>
      </tags>
  </entry>
  <entry>
    <title>PostgreSQL后端进程</title>
    <url>/PostgreSQL/PostgreSQL_backend_process/</url>
    <content><![CDATA[<h1 id="整体架构图"><a href="#整体架构图" class="headerlink" title="整体架构图"></a>整体架构图</h1><p><img data-src="/images/A_example_of_the_process_architecture_in_PostgreSQL.png" alt=" An example of the process architecture in PostgreSQL "></p>
<a id="more"></a>
<h1 id="checkpoint"><a href="#checkpoint" class="headerlink" title="checkpoint"></a>checkpoint</h1><h2 id="功能描述"><a href="#功能描述" class="headerlink" title="功能描述"></a>功能描述</h2><p>其保证了数据库的一致性状态，定期执行检查点是很重要的，确保数据变化持久保存到磁盘中并且数据库的状态是一致的。</p>
<h2 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h2><p>checkpoint_timeout<br>系统自动执行checkpoint之间的最大时间间隔。系统默认值是5分钟，这个值可以在压测过程中调大，尽量避免执行checkpoint争抢IO</p>
<p>max_wal_size<br>写满多少个WAL时执行checkpoint，也是同理，这个值可以在压测过程中调大，尽量避免执行checkpoint争抢IO</p>
<p>min_wal_size<br>只要wal日志目录使用空间小于该值，那么旧的wal日志就会循环使用而不是进行删除。这个参数是为了确保足够的wal空间预留给突发情况，比如大的跑批操作。</p>
<p>checkpoint_completion_target<br>分散检查点，默认为0.5，即表示每个checkpoint需要在checkpoints间隔时间的50%内完成，然后立马进行fsync，fsync执行是很快的(为了平滑fsync，以防尖锐的IO请求，PostgreSQL9.6以后加了checkpoint_flush_after、wal_writer_flush_after、bgwriter_flush_after和backend_flush_after这些参数来缓解)看如下一个场景。<br>| 场景                             | 数据量 | 数据写入速度( 1gb/ s )          |<br>| -                                | -      | -                               |<br>| checkpoint_completion_target=0.5 | 100G   | 100/ ( 0.53060 ) 1024 ≈ 114 M/s |<br>| checkpoint_timeout = 30min       | 100G   | 100/ ( 0.8 3060 ) 1024 ≈ 71 M/s |</p>
<p>full_page_writes<br>PostgreSQL服务器在检查点之后对页面的第一次写入时将整个页面写到WAL里面。如果checkpoint发生太频繁，会导致写放大，默认为on，假如调为off，需要确保数据库在压测期间不要崩溃，不然重启后可能发生数据块部分写，导致重启失败。full_page_writes就是为了确保数据页一致性，不发生块折断。而在MySQL中，则是通过double write来预防partial write的。如果你的块设备对齐，并支持原子写(原子写大于或等于一个DATA FILE数据页的大小)，那可以关闭这个参数</p>
<h1 id="background-writer"><a href="#background-writer" class="headerlink" title="background writer"></a>background writer</h1><h2 id="功能描述-1"><a href="#功能描述-1" class="headerlink" title="功能描述"></a>功能描述</h2><p>1、数据库在进行查询处理时若发现要读取的数据不在缓冲区中时要先从磁盘中读入需要的页面，此时如果缓冲区已满，则需要遵从类似于LRU算法先选择部分缓冲区中的页面置换出去。如果被替换的页面没有被修改过，则可以直接丢弃；但如果已经被修改过，则需要先将这些页面写出到磁盘后才能置换，通过使用BgWriter定期写出缓冲区中的部分脏页，为缓冲区腾出空间，就可以降低查询处理被阻塞的可能性；</p>
<p>2、PostgreSQL在定期做检查点时需要把所有脏页写出到磁盘，通过BgWriter预先写出一些脏页，可以减少检查点时要进行的IO动作，使系统的IO更加平稳。通过BgWriter对共享缓冲区写操作的管理，避免了其他服务进程在需要读入新的页面到缓冲区时，不得不先进行写盘的操作。</p>
<h2 id="参数-1"><a href="#参数-1" class="headerlink" title="参数"></a>参数</h2><p>writer_delay<br>background writer每次扫描之间的时间间隔，也就是刷shared buffer脏页的进程调度间隔，尽量高频调度，减少用户进程申请不到内存而需要主动刷脏页的可能(导致RT升高)</p>
<p>bgwriter_lru_maxpages<br>一次最多刷多少脏页</p>
<p>bgwriter_lru_multiplier<br>写出至多bgwriter_lru_multiplier * N个脏页，并且不超过bgwriter_lru_maxpages值的限制。其中N是最近一段时间在两次BgWriter运行期间系统新申请的缓冲区页数。后台写进程根据最近服务进程需要的buffer数量乘上这个比率估算出下次服务进程需要的buffer数量，再使用后台写进程刷脏页面，使缓冲区能使用的干净页面达到这个估计值</p>
<p>bgwriter_flush_after<br>每当bgwriter写入的字节数超过bgwriter_flush_after时，就会强制OS从page cache中写出。这样做将限制page cache中脏数据量，从而减少在检查点末尾发出fsync或操作系统在后台大批量写回数据时出现停顿的可能性</p>
]]></content>
      <categories>
        <category>PostgreSQL</category>
      </categories>
      <tags>
        <tag>PostgreSQL</tag>
        <tag>backend</tag>
        <tag>Architecture</tag>
      </tags>
  </entry>
  <entry>
    <title>PostgreSQL 缓冲区管理</title>
    <url>/PostgreSQL/PostgreSQL_Buffer_Manager/</url>
    <content><![CDATA[<p>缓冲区管理器管理共享内存和持久性存储之间的数据传输，并且可能对DBMS的性能产生重大影响。 PostgreSQL缓冲区管理器非常高效。<br>在本章中，将介绍PostgreSQL缓冲区管理器。第一部分提供了概述，随后的部分描述了以下主题：</p>
<ul>
<li>Buffer manager structure</li>
<li>Buffer manager locks</li>
<li>How the buffer manager works</li>
<li>Ring buffer</li>
<li>Flushing of dirty pages<a id="more"></a>
<img data-src="/images/pg_buffer_manager.png?150x100" alt="Relations between buffer manager, storage, and backend processes."></li>
</ul>
<h1 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h1><p>本节介绍了有助于在后续各节中进行描述的关键概念。</p>
<h2 id="Buffer-Manager-Structure"><a href="#Buffer-Manager-Structure" class="headerlink" title="Buffer Manager Structure"></a>Buffer Manager Structure</h2><p>PostgreSQL缓冲区管理器包含一个缓冲区表，缓冲区描述符和缓冲池，这将在下一节中介绍。缓冲池层存储数据文件页面，例如表和索引，以及自由空间映射和可见性映射。缓冲池是一个数组，即每个插槽存储一个数据文件的一页。缓冲池阵列的索引称为buffer_id。</p>
<h2 id="Buffer-Tag"><a href="#Buffer-Tag" class="headerlink" title="Buffer Tag"></a>Buffer Tag</h2><p>在PostgreSQL中，每一个数据文件的每一个页面分配了一个唯一的标签，即buffer tag。当缓冲区管理器收到请求时，PostgreSQL会使用目标页面的buffer_tag</p>
<p>buffer_tag包含三个值：其页面所属relation的RelFileNode和fork number，以及其页面的块编号。表，空闲空间映射和可见性映射的派生编号分别在0、1和2中定义。</p>
<p>例如，buffer_tag’{（16821，16384，37721），0，7}’ 表示这个页面位于relation中数据页面的第七块页面，relation的OID和派生编号分别为37721和0；在OID为16821的表空间下，其OID为16384的数据库中。<br>类似地，buffer_tag’{（16821，16384，37721），1，3}’ 表示这个页面位于relation中的freespace map页面第三个页面，relation的OID和派生编号分别为37721和1; 在OID为16821的表空间下，其OID为16384的数据库中。</p>
<h2 id="How-a-Backend-Process-Reads-Pages"><a href="#How-a-Backend-Process-Reads-Pages" class="headerlink" title="How a Backend Process Reads Pages"></a>How a Backend Process Reads Pages</h2><p>本小节描述了后端进程如何从缓冲区管理器读取页面<br><img data-src="/images/pg_buffer_manager_2.png" alt="How a backend reads a page from the buffer manager.."></p>
<ul>
<li>读取表或索引页时，后端进程会将包含页面的buffer_tag的请求发送到缓冲区管理器.</li>
<li>缓冲区管理器返回存储请求页面的插槽的buffer_ID。如果请求的页面未存储在缓冲池中，则缓冲管理器将页面从持久性存储加载到缓冲池插槽之一，然后返回buffer_ID的插槽</li>
<li>后端进程访问buffer_ID的插槽（以读取所需的页面</li>
</ul>
<p>当后端进程修改缓冲池中的页面（例如，通过插入元组）时，尚未刷新到存储的修改后的页面称为脏页面。</p>
<h2 id="Page-Replacement-Algorithm"><a href="#Page-Replacement-Algorithm" class="headerlink" title="Page Replacement Algorithm"></a>Page Replacement Algorithm</h2><p>当所有缓冲池插槽均被占用但未存储请求的页面时，缓冲管理器必须在缓冲池中选择一个页面，该页面将由请求的页面替换。通常，在计算机科学领域中，页面选择算法称为页面替换算法，而所选页面称为受害者页面<br>自计算机科学问世以来，一直在进行页面替换算法的研究。因此，先前已经提出了许多替换算法。从8.1版开始，PostgreSQL使用了clock-sweep，因为它比以前版本中使用的LRU算法更简单，更高效。<br>4.4节详细介绍了时钟扫描</p>
<h2 id="Flushing-Dirty-Pages"><a href="#Flushing-Dirty-Pages" class="headerlink" title="Flushing Dirty Pages"></a>Flushing Dirty Pages</h2><p>脏页最终应刷新到存储中；但是，缓冲区管理器需要帮助才能执行此任务。在PostgreSQL中，两个后台进程（checkpointer和background writer）负责此任务。</p>
<p>第6节介绍了checkpointer和background writer</p>
<p><strong>Direct I/O</strong><br>PostgreSQL不支持direct I/O，尽管已经讨论过了。如果您想了解更多详细信息，请参考<a href="https://www.postgresql.org/message-id/529E267F.4050700@agliodbs.com">pgsql-ML</a>和这篇<a href="https://lwn.net/Articles/580542/">文章</a>。</p>
<h1 id="Buffer-Manager-Structure-1"><a href="#Buffer-Manager-Structure-1" class="headerlink" title="Buffer Manager Structure"></a>Buffer Manager Structure</h1><p>PostgreSQL缓冲区管理器包括三层，即缓冲区表(buffer table)，缓冲区描述符(buffer descriptors)和缓冲池(buffer pool)</p>
<p><img data-src="/images/pg_buffer_manager_3.png" alt="Fig. 8.3. Buffer manager&#39;s three-layer structure."></p>
<ul>
<li>缓冲池是一个数组。每个插槽存储一个数据文件页面。阵列插槽的索引称为bufferids </li>
<li><p>缓冲区描述符层是缓冲区描述符的数组。每个描述符与缓冲池插槽一一对应，并在相应的插槽中保存存储页面的元数据。</p>
<hr>
<p> <strong>Note</strong></p>
<p> 为方便起见，采用术语“缓冲区描述符层”，并且仅在本文档中使用。</p>
<hr>
</li>
<li><p>缓冲区表是一个哈希表，用于存储存储页的buffer_tags与保存存储页各自元数据的描述符的buffer_id之间的关系。</p>
</li>
</ul>
<p>这些层将在以下章节中详细介绍</p>
<h2 id="Buffer-Table"><a href="#Buffer-Table" class="headerlink" title="Buffer Table"></a>Buffer Table</h2><p>缓冲区表在逻辑上可以分为三个部分：哈希函数(a hash function)，哈希存储桶插槽(hash bucket slots)和数据条目(data entries) (Fig. 8.4)<br>内置的哈希函数将buffer_tags映射到哈希存储桶插槽。由于哈希桶插槽的数量大于缓冲池插槽的数量，会发生冲突。因此，缓冲区表使用单独的链表链接方法来解决冲突。当数据条目(data entries)映射到相同的存储桶插槽(bucket slot)时，此方法将条目存储在相同的链表中，如图8.4所示。</p>
<p><img data-src="/images/pg_buffer_manager_4.png" alt="Fig. 8.4. Buffer table."></p>
<p>数据条目包含两个值：页面的buffer_tag和保存页面元数据的描述符的buffer_id。例如，数据条目’Tag_A，id = 1’表示具有buffer_id 1的缓冲区描述符存储带有Tag_A标签的页面的元数据。</p>
<p><strong>Hash function</strong><br>哈希函数是calc_bucket()和hash()的复合函数。以下是其作为伪函数的表示。<br><figure class="highlight lisp"><table><tr><td class="code"><pre><code class="hljs lisp">uint32 bucket_slot = calc_bucket(<span class="hljs-name">unsigned</span> hash(<span class="hljs-name">BufferTag</span> buffer_tag), uint32 bucket_size)<br></code></pre></td></tr></table></figure></p>
<hr>
<p>NOTE</p>
<p>基本操作（查找，插入和删除数据条目）在此不作解释。这些是非常常见的操作，将在以下各节中进行说明。</p>
<hr>
<h2 id="Buffer-Descriptor"><a href="#Buffer-Descriptor" class="headerlink" title="Buffer Descriptor"></a>Buffer Descriptor</h2><p>缓冲区描述符的结构在本小节中描述，缓冲区描述符层在下一个小节中</p>
<p>缓冲区描述符将存储的页面的元数据保存在相应的缓冲池插槽中。缓冲区描述符结构由结构BufferDesc定义。虽然此结构有很多字段，但主要显示在以下字段中：</p>
<ul>
<li>tag 将存储页面的buffer_tag保存在相应的缓冲池插槽中（缓冲区标记在第1.2节中定义）</li>
<li>buffer_id 标识描述符（等效于相应缓冲池插槽的buffer_id）</li>
<li>refcount 保存当前正在访问关联的存储页面的PostgreSQL进程数。也称为引脚数(pin count)。 PostgreSQL进程访问存储的页面时，其引用计数必须增加1（refcount ++）。访问该页面后，其引用计数必须减少1（refcount—）。<br>  当refcount为零时，即当前未访问关联的存储页面，则该页面被取消固定(unpinned)；否则将其固定(pinned.)。</li>
<li>usage_count 保存关联的存储页面自加载到相应的缓冲池插槽以来已被访问的次数。注意在页面替换算法(page replacement algorithm)中使用了usage_count (Section 4.4).</li>
<li>context_lock和io_in_progress_lock是轻量级锁，用于控制对关联的存储页面的访问。这些字段在第3.2节中描述。</li>
<li>flags 保存关联的存储页面的几种状态。主要状态如下:<ul>
<li>dirty bit 指示存储的页面是否脏.</li>
<li>valid bit 指示是否可以读取或写入存储的页面（有效）。例如，如果该位有效，则相应的缓冲池插槽将存储一个页面，并且此描述符（有效位）将保存页面元数据；因此，可以读取或写入存储的页面。如果该位无效，则此描述符不包含任何元数据；这意味着无法读取或写入存储的页面，或者缓冲区管理器正在替换存储的页面。</li>
<li>io_in_progress bit 指示缓冲区管理器是否正在从存储中读取/写入关联页面。换句话说，该位指示单个进程是否持有此描述符的</li>
</ul>
</li>
<li>freeNext 指向下一个描述符以生成空闲列表的指针，这将在下一个小节中进行描述。</li>
</ul>
<hr>
<p><strong>NOTE</strong></p>
<p>结构 BufferDesc 定义在 src/include/storage/buf_internals.h.</p>
<hr>
<p>To simplify the following descriptions, three descriptor states are defined:</p>
<p>Empty: When the corresponding buffer pool slot does not store a page (i.e. refcount and usage_count are 0), the state of this descriptor is empty.<br>Pinned: When the corresponding buffer pool slot stores a page and any PostgreSQL processes are accessing the page (i.e. refcount and usage_count are greater than or equal to 1), the state of this buffer descriptor is pinned.<br>Unpinned: When the corresponding buffer pool slot stores a page but no PostgreSQL processes are accessing the page (i.e. usage_count is greater than or equal to 1, but refcount is 0), the state of this buffer descriptor is unpinned.</p>
<p>Each descriptor will have one of the above states. The descriptor state changes relative to particular conditions, which are described in the next subsection.</p>
<p>In the following figures, buffer descriptors’ states are represented by coloured boxes.</p>
<p>(white) Empty<br>(blue) Pinned<br>(aqua blue) Unpinned</p>
<p>In addition, a dirty page is denoted as ‘X’. For example, an unpinned dirty descriptor is represented by  X .</p>
<h2 id="Buffer-Descriptors-Layer"><a href="#Buffer-Descriptors-Layer" class="headerlink" title="Buffer Descriptors Layer"></a>Buffer Descriptors Layer</h2><p>A collection of buffer descriptors forms an array. In this document, the array is referred to as the buffer descriptors layer.</p>
<p>When the PostgreSQL server starts, the state of all buffer descriptors is empty. In PostgreSQL, those descriptors comprise a linked list called freelist (Fig. 8.5).</p>
<p><img data-src="/images/pg_buffer_manager_5.png" alt="Fig. 8.5. Buffer manager initial state."></p>
<hr>
<p><em>*NOTE</em></p>
<p>Please note that the freelist in PostgreSQL is completely different concept from the freelists in Oracle. PostgreSQL’s freelist is only linked list of empty buffer descriptors. In PostgreSQL freespace maps, which are described in Section 5.3.4, act as the same role of the freelists in Oracle. </p>
<hr>
<p>Figure 8.6 shows that how the first page is loaded.</p>
<ul>
<li>Retrieve an empty descriptor from the top of the freelist, and pin it (i.e. increase its refcount and usage_count by 1).</li>
<li>Insert the new entry, which holds the relation between the tag of the first page and the buffer_id of the retrieved descriptor, in the buffer table.</li>
<li>Load the new page from storage to the corresponding buffer pool slot.</li>
<li>Save the metadata of the new page to the retrieved descriptor.</li>
</ul>
<p>The second and subsequent pages are loaded in a similar manner. Additional details are provided in Section 8.4.2.</p>
<p><img data-src="/images/pg_buffer_manager_6.png" alt="Fig. 8.6. Loading the first page."></p>
<p>Descriptors that have been retrieved from the freelist always hold page’s metadata. In other words, non-empty descriptors continue to be used do not return to the freelist. However, related descriptors are added to the freelist again and the descriptor state becomes ‘empty’ when one of the following occurs:</p>
<ul>
<li>Tables or indexes have been dropped.</li>
<li>Databases have been dropped.</li>
<li>Tables or indexes have been cleaned up using the VACUUM FULL command.</li>
</ul>
<hr>
<p><strong>Why empty descriptors comprise the freelist?</strong></p>
<p>The reason why the freelist be made is to get the first descriptor immediately. This is a usual practice for dynamic memory resource allocation. Refer to this description. </p>
<hr>
<p>The buffer descriptors layer contains an unsigned 32-bit integer variable, i.e. nextVictimBuffer. This variable is used in the page replacement algorithm described in Section 8.4.4.</p>
<h2 id="Buffer-Pool"><a href="#Buffer-Pool" class="headerlink" title="Buffer Pool"></a>Buffer Pool</h2><p>The buffer pool is a simple array that stores data file pages, such as tables and indexes. Indices of the buffer pool array are referred to as buffer_ids.</p>
<p>The buffer pool slot size is 8 KB, which is equal to the size of a page. Thus, each slot can store an entire page.</p>
<h1 id="Buffer-Manager-Locks"><a href="#Buffer-Manager-Locks" class="headerlink" title="Buffer Manager Locks"></a>Buffer Manager Locks</h1><p>The buffer manager uses many locks for many different purposes. This section describes the locks necessary for the explanations in the subsequent sections.</p>
<hr>
<p><strong>NOTE</strong></p>
<p>Please note that the locks described in this section are parts of a synchronization mechanism for the buffer manager; they do not relate to any SQL statements and SQL options. </p>
<hr>
<h2 id="Buffer-Table-Locks"><a href="#Buffer-Table-Locks" class="headerlink" title="Buffer Table Locks"></a>Buffer Table Locks</h2><p>BufMappingLock protects the data integrity of the entire buffer table. It is a light-weight lock that can be used in both shared and exclusive modes. When searching an entry in the buffer table, a backend process holds a shared BufMappingLock. When inserting or deleting entries, a backend process holds an exclusive lock.</p>
<p>The BufMappingLock is split into partitions to reduce the contention in the buffer table (the default is 128 partitions). Each BufMappingLock partition guards the portion of the corresponding hash bucket slots.</p>
<p>Figure 8.7 shows a typical example of the effect of splitting BufMappingLock. Two backend processes can simultaneously hold respective BufMappingLock partitions in exclusive mode in order to insert new data entries. If the BufMappingLock is a single system-wide lock, both processes should wait for the processing of another process, depending on which started processing.</p>
<p><img data-src="/images/pg_buffer_manager_7.png" alt="Two processes simultaneously acquire the respective partitions of BufMappingLock in exclusive mode to insert new data entries."></p>
<p>The buffer table requires many other locks. For example, the buffer table internally uses a spin lock to delete an entry. However, descriptions of these other locks are omitted because they are not required in this document.</p>
<hr>
<p><strong>NOTE</strong></p>
<p>The BufMappingLock had been split into 16 separate locks by default until version 9.4.</p>
<hr>
<h2 id="Locks-for-Each-Buffer-Descriptor"><a href="#Locks-for-Each-Buffer-Descriptor" class="headerlink" title="Locks for Each Buffer Descriptor"></a>Locks for Each Buffer Descriptor</h2><p>Each buffer descriptor uses two light-weight locks, content_lock and io_in_progress_lock, to control access to the stored page in the corresponding buffer pool slot. When the values of own fields are checked or changed, a spinlock is used. </p>
<h3 id="content-lock"><a href="#content-lock" class="headerlink" title="content_lock"></a>content_lock</h3><p>The content_lock is a typical lock that enforces access limits. It can be used in shared and exclusive modes.</p>
<p>When reading a page, a backend process acquires a shared content_lock of the buffer descriptor that stores the page.</p>
<p>However, an exclusive content_lock is acquired when doing one of the following:</p>
<ul>
<li>Inserting rows (i.e. tuples) into the stored page or changing the t_xmin/t_xmax fields of tuples within the stored page (t_xmin and t_xmax are described in Section 5.2; simply, when deleting or updating rows, these fields of the associated tuples are changed).</li>
<li>Removing tuples physically or compacting free space on the stored page (performed by vacuum processing and HOT, which are described in Chapters 6 and 7, respectively).</li>
<li>Freezing tuples within the stored page (freezing is described in Section 5.10.1 and Section 6.3).</li>
</ul>
<p>The official <a href="https://github.com/postgres/postgres/blob/master/src/backend/storage/buffer/README">README</a> file shows more details.</p>
<h3 id="io-in-progress-lock"><a href="#io-in-progress-lock" class="headerlink" title="io_in_progress_lock"></a>io_in_progress_lock</h3><p>The io_in_progress lock is used to wait for I/O on a buffer to complete. When a PostgreSQL process loads/writes page data from/to storage, the process holds an exclusive io_in_progress lock of the corresponding descriptor while accessing the storage.</p>
<h3 id="spinlock"><a href="#spinlock" class="headerlink" title="spinlock"></a>spinlock</h3><p>When the flags or other fields (e.g. refcount and usage_count) are checked or changed, a spinlock is used. Two specific examples of spinlock usage are given below:</p>
<ul>
<li>The following shows how to pin the buffer descriptor:<ul>
<li>Acquire a spinlock of the buffer descriptor.</li>
<li>Increase the values of its refcount and usage_count by 1.</li>
<li>Release the spinlock.<figure class="highlight mipsasm"><table><tr><td class="code"><pre><code class="hljs mipsasm">LockBufHdr(<span class="hljs-keyword">bufferdesc); </span>   <span class="hljs-comment">/* Acquire a spinlock */</span><br><span class="hljs-keyword">bufferdesc-&gt;refcont++;</span><br><span class="hljs-keyword">bufferdesc-&gt;usage_count++;</span><br><span class="hljs-keyword">UnlockBufHdr(bufferdesc); </span><span class="hljs-comment">/* Release the spinlock */</span><br></code></pre></td></tr></table></figure></li>
</ul>
</li>
<li>The following shows how to set the dirty bit to ‘1’: <ul>
<li>Acquire a spinlock of the buffer descriptor. </li>
<li>Set the dirty bit to ‘1’ using a bitwise operation.</li>
<li>Release the spinlock.<figure class="highlight angelscript"><table><tr><td class="code"><pre><code class="hljs angelscript">#define BM_DIRTY             (<span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">0</span>)    <span class="hljs-comment">/* data needs writing */</span><br>#define BM_VALID             (<span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">1</span>)    <span class="hljs-comment">/* data is valid */</span><br>#define BM_TAG_VALID         (<span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">2</span>)    <span class="hljs-comment">/* tag is assigned */</span><br>#define BM_IO_IN_PROGRESS    (<span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">3</span>)    <span class="hljs-comment">/* read or write in progress */</span><br>#define BM_JUST_DIRTIED      (<span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">5</span>)    <span class="hljs-comment">/* dirtied since write started */</span><br><br>LockBufHdr(bufferdesc);<br>bufferdesc-&gt;flags |= BM_DIRTY;<br>UnlockBufHdr(bufferdesc);<br></code></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<p>Changing other bits is performed in the same manner. </p>
<hr>
<p><strong>NOTE</strong></p>
<p>In version 9.6, the spinlocks of buffer manager will be replaced to atomic operations. See this result of <a href="https://commitfest.postgresql.org/9/408/">commitfest</a>. If you want to know the details, refer to this <a href="https://www.postgresql.org/message-id/flat/2400449.GjM57CE0Yg@dinodell#2400449.GjM57CE0Yg@dinodell">discussion</a>. </p>
<hr>
<h1 id="How-the-Buffer-Manager-Works"><a href="#How-the-Buffer-Manager-Works" class="headerlink" title="How the Buffer Manager Works"></a>How the Buffer Manager Works</h1><p>This section describes how the buffer manager works. When a backend process wants to access a desired page, it calls the ReadBufferExtended function.</p>
<p>The behavior of the ReadBufferExtended function depends on three logical cases. Each case is described in the following subsections. In addition, the PostgreSQL clock sweep page replacement algorithm is described in the final subsection.</p>
<h2 id="Accessing-a-Page-Stored-in-the-Buffer-Pool"><a href="#Accessing-a-Page-Stored-in-the-Buffer-Pool" class="headerlink" title="Accessing a Page Stored in the Buffer Pool"></a>Accessing a Page Stored in the Buffer Pool</h2><p>First, the simplest case is described, i.e. the desired page is already stored in the buffer pool. In this case, the buffer manager performs the following steps:</p>
<ul>
<li>Create the buffer_tag of the desired page (in this example, the buffer_tag is ‘Tag_C’) and compute the hash bucket slot, which contains the associated entry of the created buffer_tag, using the hash function.</li>
<li>Acquire the BufMappingLock partition that covers the obtained hash bucket slot in shared mode (this lock will be released in step (5)).</li>
<li>Look up the entry whose tag is ‘Tag_C’ and obtain the buffer_id from the entry. In this example, the buffer_id is 2.</li>
<li>Pin the buffer descriptor for buffer_id 2, i.e. the refcount and usage_count of the descriptor are increased by 1 ( Section 8.3.2 describes pinning).</li>
<li>Release the BufMappingLock.</li>
<li>Access the buffer pool slot with buffer_id 2.</li>
</ul>
<p><img data-src="/images/pg_buffer_manager_8.png" alt="Fig. 8.8. Accessing a page stored in the buffer pool."></p>
<p>Then, when reading rows from the page in the buffer pool slot, the PostgreSQL process acquires the shared content_lock of the corresponding buffer descriptor. Thus, buffer pool slots can be read by multiple processes simultaneously.</p>
<p>When inserting (and updating or deleting) rows to the page, a Postgres process acquires the exclusive content_lock of the corresponding buffer descriptor (note that the dirty bit of the page must be set to ‘1’).</p>
<p>After accessing the pages, the refcount values of the corresponding buffer descriptors are decreased by 1.</p>
<h2 id="Loading-a-Page-from-Storage-to-Empty-Slot"><a href="#Loading-a-Page-from-Storage-to-Empty-Slot" class="headerlink" title="Loading a Page from Storage to Empty Slot"></a>Loading a Page from Storage to Empty Slot</h2><p>In this second case, assume that the desired page is not in the buffer pool and the freelist has free elements (empty descriptors). In this case, the buffer manager performs the following steps:</p>
<ul>
<li>Look up the buffer table (we assume it is not found).</li>
<li>Create the buffer_tag of the desired page (in this example, the buffer_tag is ‘Tag_E’) and compute the hash bucket slot.</li>
<li>Acquire the BufMappingLock partition in shared mode.<ul>
<li>Look up the buffer table (not found according to the assumption).</li>
<li>Release the BufMappingLock.</li>
</ul>
</li>
<li>Obtain the empty buffer descriptor from the freelist, and pin it. In this example, the buffer_id of the obtained descriptor is 4.</li>
<li>Acquire the BufMappingLock partition in exclusive mode (this lock will be released in step (6)).</li>
<li>Create a new data entry that comprises the buffer_tag ‘Tag_E’ and buffer_id 4; insert the created entry to the buffer table.</li>
<li>Load the desired page data from storage to the buffer pool slot with buffer_id 4 as follows:</li>
<li>Acquire the exclusive io_in_progress_lock of the corresponding descriptor.<ul>
<li>Set the io_in_progress bit of the corresponding descriptor to ‘1 to prevent access by other processes.</li>
<li>Load the desired page data from storage to the buffer pool slot.</li>
<li>Change the states of the corresponding descriptor; the io_in_progress bit is set to ‘0’, and the valid bit is set to ‘1’.</li>
<li>Release the io_in_progress_lock.</li>
</ul>
</li>
<li>Release the BufMappingLock.</li>
<li>Access the buffer pool slot with buffer_id 4.</li>
</ul>
<p><img data-src="/images/pg_buffer_manager_9.png" alt="Fig. 8.9. Loading a page from storage to an empty slot."></p>
<h2 id="Loading-a-Page-from-Storage-to-a-Victim-Buffer-Pool-Slot"><a href="#Loading-a-Page-from-Storage-to-a-Victim-Buffer-Pool-Slot" class="headerlink" title="Loading a Page from Storage to a Victim Buffer Pool Slot"></a>Loading a Page from Storage to a Victim Buffer Pool Slot</h2><p>In this case, assume that all buffer pool slots are occupied by pages but the desired page is not stored. The buffer manager performs the following steps:</p>
<ul>
<li>Create the buffer_tag of the desired page and look up the buffer table. In this example, we assume that the buffer_tag is ‘Tag_M’ (the desired page is not found).</li>
<li>Select a victim buffer pool slot using the clock-sweep algorithm, obtain the old entry, which contains the buffer_id of the victim pool slot, from the buffer table and pin the victim pool slot in the buffer descriptors layer. In this example, the buffer_id of the victim slot is 5 and the old entry is ‘Tag_F, id=5’. The clock sweep is described in the next subsection.</li>
<li>Flush (write and fsync) the victim page data if it is dirty; otherwise proceed to step (4).<br> The dirty page must be written to storage before overwriting with new data. Flushing a dirty page is performed as follows:<ul>
<li>Acquire the shared content_lock and the exclusive io_in_progress lock of the descriptor with buffer_id 5 (released in step 6).</li>
<li>Change the states of the corresponding descriptor; the io_in_progress bit is set to ‘1’ and the just_dirtied bit is set to ‘0’.</li>
<li>Depending on the situation, the XLogFlush() function is invoked to write WAL data on the WAL buffer to the current WAL segment file (details are omitted; WAL and the XLogFlush function are described in Chapter 9).</li>
<li>Flush the victim page data to storage.</li>
<li>Change the states of the corresponding descriptor; the io_in_progress bit is set to ‘0’ and the valid bit is set to ‘1’.</li>
<li>Release the io_in_progress and content_lock locks.</li>
</ul>
</li>
<li>Acquire the old BufMappingLock partition that covers the slot that contains the old entry, in exclusive mode.</li>
<li>Acquire the new BufMappingLock partition and insert the new entry to the buffer table:<ul>
<li>Create the new entry comprised of the new buffer_tag ‘Tag_M’ and the victim’s buffer_id.</li>
<li>Acquire the new BufMappingLock partition that covers the slot containing the new entry in exclusive mode.</li>
<li>Insert the new entry to the buffer table.</li>
</ul>
</li>
<li>Delete the old entry from the buffer table, and release the old BufMappingLock partition.</li>
<li>Load the desired page data from the storage to the victim buffer slot. Then, update the flags of the descriptor with buffer_id 5; the dirty bit is set to ‘0 and initialize other bits.</li>
<li>Release the new BufMappingLock partition.</li>
<li>Access the buffer pool slot with buffer_id 5.</li>
</ul>
<p><img data-src="/images/pg_buffer_manager_10.png" alt="Fig. 8.10. Loading a page from storage to a victim buffer pool slot."></p>
<h2 id="Page-Replacement-Algorithm-Clock-Sweep"><a href="#Page-Replacement-Algorithm-Clock-Sweep" class="headerlink" title="Page Replacement Algorithm: Clock Sweep"></a>Page Replacement Algorithm: Clock Sweep</h2><p>The rest of this section describes the clock-sweep algorithm. This algorithm is a variant of NFU (Not Frequently Used) with low overhead; it selects less frequently used pages efficiently.</p>
<p>Imagine buffer descriptors as a circular list (Fig. 8.12). The nextVictimBuffer, an unsigned 32-bit integer, is always pointing to one of the buffer descriptors and rotates clockwise. The pseudocode and description of the algorithm are follows: </p>
<hr>
<p><strong>Pseudocode: clock-sweep</strong></p>
<h2 id=""><a href="#" class="headerlink" title=""></a><figure class="highlight vhdl"><table><tr><td class="code"><pre><code class="hljs vhdl">     <span class="hljs-keyword">WHILE</span> <span class="hljs-literal">true</span><br>(<span class="hljs-number">1</span>)     Obtain the candidate <span class="hljs-keyword">buffer</span> descriptor pointed by the nextVictimBuffer<br>(<span class="hljs-number">2</span>)     <span class="hljs-keyword">IF</span> the candidate descriptor <span class="hljs-keyword">is</span> unpinned <span class="hljs-keyword">THEN</span><br>(<span class="hljs-number">3</span>)           <span class="hljs-keyword">IF</span> the candidate descriptor<span class="hljs-symbol">&#x27;s</span> usage_count == <span class="hljs-number">0</span> <span class="hljs-keyword">THEN</span><br>                BREAK <span class="hljs-keyword">WHILE</span> <span class="hljs-keyword">LOOP</span>  <span class="hljs-comment">/* the corresponding slot of this descriptor is victim slot. */</span><br>           <span class="hljs-keyword">ELSE</span><br>            Decrease the candidate descriptpor<span class="hljs-symbol">&#x27;s</span> usage_count by <span class="hljs-number">1</span><br>               <span class="hljs-keyword">END</span> <span class="hljs-keyword">IF</span><br>         <span class="hljs-keyword">END</span> <span class="hljs-keyword">IF</span><br>(<span class="hljs-number">4</span>)     Advance nextVictimBuffer <span class="hljs-keyword">to</span> the <span class="hljs-keyword">next</span> one<br>      <span class="hljs-keyword">END</span> <span class="hljs-keyword">WHILE</span> <br>(<span class="hljs-number">5</span>) <span class="hljs-keyword">RETURN</span> buffer_id <span class="hljs-keyword">of</span> the victim<br></code></pre></td></tr></table></figure></h2><p>A specific example is shown in Fig. 8.12. The buffer descriptors are shown as blue or cyan boxes, and the numbers in the boxes show the usage_count of each descriptor. </p>
<h1 id="Ring-Buffer"><a href="#Ring-Buffer" class="headerlink" title="Ring Buffer"></a>Ring Buffer</h1><p>When reading or writing a huge table, PostgreSQL uses a ring buffer rather than the buffer pool. The ring buffer is a small and temporary buffer area. When any condition listed below is met, a ring buffer is allocated to shared memory:</p>
<ul>
<li>Bulk-reading<br>When a relation whose size exceeds one-quarter of the buffer pool size (shared_buffers/4) is scanned. In this case, the ring buffer size is 256 KB.</li>
<li>Bulk-writing<br>When the SQL commands listed below are executed. In this case, the ring buffer size is 16 MB.<ul>
<li>COPY FROM command.</li>
<li>CREATE TABLE AS command.</li>
<li>CREATE MATERIALIZED VIEW or REFRESH MATERIALIZED VIEW command.</li>
<li>ALTER TABLE command.</li>
</ul>
</li>
<li>Vacuum-processing<br>When an autovacuum performs a vacuum processing. In this case, the ring buffer size is 256 KB.</li>
</ul>
<p>The allocated ring buffer is released immediately after use.</p>
<p>The benefit of the ring buffer is obvious. If a backend process reads a huge table without using a ring buffer, all stored pages in the buffer pool are removed (kicked out); therefore, the cache hit ratio decreases. The ring buffer avoids this issue. </p>
<hr>
<p><strong>Why the default ring buffer size for bulk-reading and vacuum processing is 256 KB?</strong></p>
<p>Why 256 KB? The answer is explained in the <a href="https://github.com/postgres/postgres/blob/master/src/backend/storage/buffer/README">README</a> located under the buffer manager’s source directory.<br>  For sequential scans, a 256 KB ring is used. That’s small enough to fit in L2 cache, which makes transferring pages from OS cache to shared buffer cache efficient. Even less would often be enough, but the ring must be big enough to accommodate all pages in the scan that are pinned concurrently. (snip) </p>
<hr>
<h1 id="Flushing-Dirty-Pages-1"><a href="#Flushing-Dirty-Pages-1" class="headerlink" title="Flushing Dirty Pages"></a>Flushing Dirty Pages</h1><p>In addition to replacing victim pages, the checkpointer and background writer processes flush dirty pages to storage. Both processes have the same function (flushing dirty pages); however, they have different roles and behaviours.</p>
<p>The checkpointer process writes a checkpoint record to the WAL segment file and flushes dirty pages whenever checkpointing starts. Section 9.7 describes checkpointing and when it begins.</p>
<p>The role of the background writer is to reduce the influence of the intensive writing of checkpointing. The background writer continues to flush dirty pages little by little with minimal impact on database activity. By default, the background writer wakes every 200 msec (defined by bgwriter_delay) and flushes bgwriter_lru_maxpages (the default is 100 pages) at maximum. </p>
<hr>
<p><strong>为什么要从background writer分离出checkpointer?</strong></p>
<p>在9.1或更早版本中，background writer定期执行checkpoint处理。在版本9.2中，checkpointer进程已与background writer进程分离。在<a href="https://www.postgresql.org/message-id/CA%2BU5nMLv2ah-HNHaQ%3D2rxhp_hDJ9jcf-LL2kW3sE4msfnUw9gA%40mail.gmail.com">“Separating bgwriter and checkpointer”</a> 提案中描述了原因。</p>
<h2 id="-1"><a href="#-1" class="headerlink" title=""></a><figure class="highlight applescript"><table><tr><td class="code"><pre><code class="hljs applescript">Currently(<span class="hljs-keyword">in</span> <span class="hljs-number">2011</span>) <span class="hljs-keyword">the</span> bgwriter process performs both background writing, checkpointing <span class="hljs-keyword">and</span> <span class="hljs-keyword">some</span> other duties. This means <span class="hljs-keyword">that</span> we can&#x27;t perform <span class="hljs-keyword">the</span> final checkpoint fsync <span class="hljs-keyword">without</span> stopping background writing, so there <span class="hljs-keyword">is</span> a negative performance effect <span class="hljs-keyword">from</span> doing both things <span class="hljs-keyword">in</span> one process.<br>Additionally, our aim <span class="hljs-keyword">in</span> <span class="hljs-number">9.2</span> <span class="hljs-keyword">is</span> <span class="hljs-keyword">to</span> replace polling loops <span class="hljs-keyword">with</span> latches <span class="hljs-keyword">for</span> power reduction. The complexity <span class="hljs-keyword">of</span> <span class="hljs-keyword">the</span> bgwriter loops <span class="hljs-keyword">is</span> high <span class="hljs-keyword">and</span> <span class="hljs-keyword">it</span> seems unlikely <span class="hljs-keyword">to</span> come up <span class="hljs-keyword">with</span> a clean approach using latches.<br></code></pre></td></tr></table></figure></h2>]]></content>
      <categories>
        <category>PostgreSQL</category>
      </categories>
      <tags>
        <tag>PostgreSQL</tag>
        <tag>buffer</tag>
      </tags>
  </entry>
  <entry>
    <title>pg_hint_plan</title>
    <url>/PostgreSQL/pg_hint_plan/</url>
    <content><![CDATA[<h1 id="名字"><a href="#名字" class="headerlink" title="名字"></a>名字</h1><p>pg_hint_plan – 在注释中使用特殊格式的 hint 语句来控制查询计划.</p>
<h1 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h1><p>PostgresQL 使用查询规划器计算开销，查询规划器是基于数据统计的而不是静态的规则。对于一个 SQL 语句查询规划器估计每一种可能执行方法的开销，然后使用开销最低的执行方法。查询规划器使用它认为最好的执行计划，而并非真正最优的，因为它不考虑一些数据的属性，例如，列之间的关系。</p>
<p>pg_hint_plan 使用所谓的 “hint” 来调整执行计划，它可以在 SQL 注释中使用特殊的格式来简单的描述。</p>
<a id="more"></a>
<h1 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h1><h2 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h2><p>pg_hint 在 SQL 注释的特殊格式中读取 hint 语句。特殊格式以 “/+” 开头以 “/“ 结尾。hint 语句由名字和跟在后面的括号中的参数组成，参数以空格分隔。为了可读性每一个 hint 语句使用换行来分隔。</p>
<p>在下面的例子中，哈希 join 被作为 join 的方法，使用顺数扫描作为扫描的方法。</p>
<figure class="highlight jboss-cli"><table><tr><td class="code"><pre><code class="hljs jboss-cli">postgres=<span class="hljs-comment"># /*+</span><br>postgres*<span class="hljs-comment">#    HashJoin(a b)</span><br>postgres*<span class="hljs-comment">#    SeqScan(a)</span><br>postgres*<span class="hljs-comment">#  */</span><br>postgres-<span class="hljs-comment"># EXPLAIN SELECT *</span><br>postgres-<span class="hljs-comment">#    FROM pgbench_branches b</span><br>postgres-<span class="hljs-comment">#    JOIN pgbench_accounts a ON b.bid = a.bid</span><br>postgres-<span class="hljs-comment">#   ORDER BY a.aid;</span><br>                                      QUERY PLAN<br><span class="hljs-params">---------------------------------------------------------------------------------------</span><br> Sort  <span class="hljs-params">(<span class="hljs-attr">cost</span>=31465.84..31715.84 <span class="hljs-attr">rows</span>=100000 <span class="hljs-attr">width</span>=197)</span><br>   Sort Key: a.aid<br>   -&gt;  Hash Join  <span class="hljs-params">(<span class="hljs-attr">cost</span>=1.02..4016.02 <span class="hljs-attr">rows</span>=100000 <span class="hljs-attr">width</span>=197)</span><br>         Hash Cond: <span class="hljs-params">(a.<span class="hljs-attr">bid</span> = b.bid)</span><br>         -&gt;  Seq Scan on pgbench_accounts a  <span class="hljs-params">(<span class="hljs-attr">cost</span>=0.00..2640.00 <span class="hljs-attr">rows</span>=100000 <span class="hljs-attr">width</span>=97)</span><br>         -&gt;  Hash  <span class="hljs-params">(<span class="hljs-attr">cost</span>=1.01..1.01 <span class="hljs-attr">rows</span>=1 <span class="hljs-attr">width</span>=100)</span><br>               -&gt;  Seq Scan on pgbench_branches b  <span class="hljs-params">(<span class="hljs-attr">cost</span>=0.00..1.01 <span class="hljs-attr">rows</span>=1 <span class="hljs-attr">width</span>=100)</span><br><span class="hljs-params">(7 rows)</span><br><br>postgres=<span class="hljs-comment">#</span><br></code></pre></td></tr></table></figure>
<h2 id="hints-的类型"><a href="#hints-的类型" class="headerlink" title="hints 的类型"></a>hints 的类型</h2><p>hint 语句通过他们影响的实体而分为四种类型。扫描方法，join 方法，join 顺序，纠正行数和 GUC 设置。对于每一种类型的hint语句有一个 hint 语句列表<a href="http://pghintplan.sourceforge.jp/hint_list.html">http://pghintplan.sourceforge.jp/hint_list.html</a></p>
<h2 id="hint-的扫描方法"><a href="#hint-的扫描方法" class="headerlink" title="hint 的扫描方法"></a>hint 的扫描方法</h2><p>hint 的扫描方法通过在表上指定一个参数来选择一种扫描方式。pg_hint 可以通过表的别名来识别一个表。他们可以是 ‘SeqScan’，‘IndexScan’ 等等。</p>
<p>hint 扫描在普通表，继承表，UNLOGGED 表，临时表，系统表是有效的。它不能应用在外部表，表函数，命令的值（VALUES command results），CTEs，视图和子查询中。</p>
<h2 id="Hints-的-join-方法"><a href="#Hints-的-join-方法" class="headerlink" title="Hints 的 join 方法"></a>Hints 的 join 方法</h2><p>使用表名作为参数的 jion 方法名来指定 Hints 的 join 方法</p>
<p>在参数列表中可以使用普通表，继承表，UNLOGGED 表，临时表，外部表，系统表，表函数，命令的值（VALUES command results），CTEs 作为参数。但是视图和子查询不可以。</p>
<h2 id="Hint-的-join-顺序"><a href="#Hint-的-join-顺序" class="headerlink" title="Hint 的 join 顺序"></a>Hint 的 join 顺序</h2><p>可以使用 “Leading” 来指定 join 的顺序。join 的顺序将按照参数列表的给出顺序来执行。</p>
<h2 id="Hint-纠正行数"><a href="#Hint-纠正行数" class="headerlink" title="Hint 纠正行数"></a>Hint 纠正行数</h2><p>由于查询规划器的能力限制，它可能错误的估计一些条件下的结果集的数量。这种类型的 hint 将会纠正这种情况。</p>
<h2 id="GUC-参数的临时设置"><a href="#GUC-参数的临时设置" class="headerlink" title="GUC 参数的临时设置"></a>GUC 参数的临时设置</h2><p>在查询规划时设置 hint 来改变 GUC 的参数。在 Query Planning 指定 GUC 的参数可以在查询规划时得到预期的效果，除非其他的 hint 和查询规划器配置的参数冲突了。相同的 GUC 参数在 hint 中最后一个配置的将会生效。对于pg_hint_plan 可以通过 hint 来设置 GUC 参数，但是它不一定会按照预期的工作。详细内容可以看限制章节。</p>
<h1 id="pg-hint-plan-的-GUC-参数"><a href="#pg-hint-plan-的-GUC-参数" class="headerlink" title="pg_hint_plan 的 GUC 参数"></a>pg_hint_plan 的 GUC 参数</h1><p>下面的 GUC 参数会影响 pg_hint_plan 的行为.</p>
<div class="table-container">
<table>
<thead>
<tr>
<th>Parameter name</th>
<th>description</th>
<th>Default</th>
</tr>
</thead>
<tbody>
<tr>
<td>pg_hint_plan.enable_hint</td>
<td>Enbles or disables the function of pg_hint_plan.</td>
<td>on</td>
</tr>
<tr>
<td>pg_hint_plan.debug_print</td>
<td>Enables and select the verbosity of the debug output of pg_hint_plan. off, on, detailed and verbose are valid.</td>
<td>off</td>
</tr>
<tr>
<td>pg_hint_plan.message_level</td>
<td>Specifies the message level of debug prints. error, warning, notice, info, log, debug are valid and fatal and panic are inhibited.</td>
<td>info</td>
</tr>
</tbody>
</table>
</div>
<p>对于这些 GUC 参数 PostgreSQL 9.1 需要定义一个变量类. 详细内容见 custom_variable_classes.</p>
<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>这部分描述了安装的步骤。</p>
<h2 id="编译二进制模块"><a href="#编译二进制模块" class="headerlink" title="编译二进制模块"></a>编译二进制模块</h2><p>在源码的根目录执行 “make”，然后使用合适的角色执行 “make install”。在这个过程中对于 PostgresQL 应该将环境变量设置为合适的值。<br><figure class="highlight pgsql"><table><tr><td class="code"><pre><code class="hljs pgsql">$ tar xzvf pg_hint_plan<span class="hljs-number">-1.</span>x.x.tar.gz<br>$ cd pg_hint_plan<span class="hljs-number">-1.</span>x.x<br>$ make<br>$ su<br>$ make install<br></code></pre></td></tr></table></figure></p>
<h2 id="加载-pg-hint-plan"><a href="#加载-pg-hint-plan" class="headerlink" title="加载 pg_hint_plan"></a>加载 pg_hint_plan</h2><p>pg_hint_plan 不需要使用 CREATE EXTENSION.只要使用 LOAD 命令将它激活，当然你也可以全局的加载它通过在 postgresql.conf 中设置 shared_preload_libraries。你也可以使用 ALTER USER SET/ALTER DATABASE SET 在指定的会话中自动的加载它。</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><code class="hljs routeros"><span class="hljs-attribute">postgres</span>=# LOAD <span class="hljs-string">&#x27;pg_hint_plan&#x27;</span>;<br>LOAD<br><span class="hljs-attribute">postgres</span>=#<br></code></pre></td></tr></table></figure>
<p>如果你计划 hint 表，你需要设置 pg_hint_plan.enable_hint_tables 值为 on。</p>
<h2 id="卸载"><a href="#卸载" class="headerlink" title="卸载"></a>卸载</h2><p>如果你使用源码安装了 pg_hint_plan，你可以在源码的根目录使用 “make uninstall” 来卸载安装的文件。</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><code class="hljs pgsql">$ cd pg_hint_plan<span class="hljs-number">-1.</span>x.x<br>$ su<br># make uninstall<br></code></pre></td></tr></table></figure>
<h1 id="Hint-描述"><a href="#Hint-描述" class="headerlink" title="Hint 描述"></a>Hint 描述</h1><p>这部分描述了怎么写各种类型的 hints。</p>
<h2 id="扫描方法-hints"><a href="#扫描方法-hints" class="headerlink" title="扫描方法 hints"></a>扫描方法 hints</h2><p>扫描 hints 使用一个参数去指定目标对象。使用索引作为参数最好使用索引名。目标对象如果有别名参数应该指定为别名。在下面的例子中 table1 使用顺序扫描，table2 使用主键索引扫描。</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">postgres</span>=# /*+<br><span class="hljs-attribute">postgres</span>*#     SeqScan(t<span class="hljs-number">1</span>)<br><span class="hljs-attribute">postgres</span>*#     IndexScan(t<span class="hljs-number">2</span> t<span class="hljs-number">2</span>_pkey)<br><span class="hljs-attribute">postgres</span>*#  */<br><span class="hljs-attribute">postgres</span>-# SELECT * FROM table<span class="hljs-number">1</span> t<span class="hljs-number">1</span> JOIN table table<span class="hljs-number">2</span> t<span class="hljs-number">2</span> <span class="hljs-literal">ON</span> (t<span class="hljs-number">1</span>.key = t<span class="hljs-number">2</span>.key);<br></code></pre></td></tr></table></figure>
<h2 id="Join-hints"><a href="#Join-hints" class="headerlink" title="Join hints"></a>Join hints</h2><p>join hints 使用两个或多个组成 join 的对象作为参数。如果指定了三个对象，hint 将会 join 两个对象后再 join 他们中的一个。在下面的例子中，首先使用嵌套循环 join talbe1 和 table2，然后使用合并 join 前面的结果和 table3.<br><figure class="highlight apache"><table><tr><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">postgres</span>=# /*+<br><span class="hljs-attribute">postgres</span>*#     NestLoop(t<span class="hljs-number">1</span> t<span class="hljs-number">2</span>)<br><span class="hljs-attribute">postgres</span>*#     MergeJoin(t<span class="hljs-number">1</span> t<span class="hljs-number">2</span> t<span class="hljs-number">3</span>)<br><span class="hljs-attribute">postgres</span>*#     Leading(t<span class="hljs-number">1</span> t<span class="hljs-number">2</span> t<span class="hljs-number">3</span>)<br><span class="hljs-attribute">postgres</span>*#  */<br><span class="hljs-attribute">postgres</span>-# SELECT * FROM table<span class="hljs-number">1</span> t<span class="hljs-number">1</span><br><span class="hljs-attribute">postgres</span>-#     JOIN table table<span class="hljs-number">2</span> t<span class="hljs-number">2</span> <span class="hljs-literal">ON</span> (t<span class="hljs-number">1</span>.key = t<span class="hljs-number">2</span>.key)<br><span class="hljs-attribute">postgres</span>-#     JOIN table table<span class="hljs-number">3</span> t<span class="hljs-number">3</span> <span class="hljs-literal">ON</span> (t<span class="hljs-number">2</span>.key = t<span class="hljs-number">3</span>.key);<br><br></code></pre></td></tr></table></figure></p>
<h2 id="join-顺序"><a href="#join-顺序" class="headerlink" title="join 顺序"></a>join 顺序</h2><p>尽管先 join table2 和 table3 然后 join table1 这种情况可能出现，但是 NestLoop hint 将不会生效。”Leading” hint 在这种情况下可以强制改变 join 顺序。在上面的例子中 Leading hint 改变 join 顺序为 table1,2,3 然后这两种 join 方法都会生效。</p>
<p>上面 Leading hint 的形式改变了 join 的顺序，但是查询规划器的 join 顺序是自左至右的。如果你想改变 join 的方向，第二种方法是有效的。</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">postgres</span>=# /*+ Leading((t<span class="hljs-number">1</span> (t<span class="hljs-number">2</span> t<span class="hljs-number">3</span>))) */ SELECT...<br></code></pre></td></tr></table></figure>
<p>每对括号包括两个元素，可以是对象也可以是嵌套的括号。括号中的第一个元素是驱动者或外部表，第二个是被驱动或者内部。</p>
<h2 id="hints-纠正结果集数量"><a href="#hints-纠正结果集数量" class="headerlink" title="hints 纠正结果集数量"></a>hints 纠正结果集数量</h2><p>如果查询规划器错误的估计了在一些条件下join返回的结果集数量。这个 hint 可以通过几种方法来纠正这个值，包括绝对值，加减和乘法。参数是组成 join 的对象和操作。下面的例子通过4个例子给出了纠正 a join b 返回的值数量的用法。</p>
<figure class="highlight makefile"><table><tr><td class="code"><pre><code class="hljs makefile">postgres=<span class="hljs-comment"># /*+ Rows(a b #10) */ SELECT... ; Sets rows of join result to 10</span><br>postgres=<span class="hljs-comment"># /*+ Rows(a b +10) */ SELECT... ; Increments row number by 10</span><br>postgres=<span class="hljs-comment"># /*+ Rows(a b -10) */ SELECT... ; Subtracts 10 from the row number.</span><br>postgres=<span class="hljs-comment"># /*+ Rows(a b *10) */ SELECT... ; Makes the number 10 times larger.</span><br></code></pre></td></tr></table></figure>
<h2 id="GUC-临时设置"><a href="#GUC-临时设置" class="headerlink" title="GUC 临时设置"></a>GUC 临时设置</h2><p>在目标语句设置查询规划器使用的 GUC 参数，下面的列子，在该查询中设置查询规划器使用 random_page_cost 的值为 2.0</p>
<figure class="highlight n1ql"><table><tr><td class="code"><pre><code class="hljs n1ql">postgres=# <span class="hljs-comment">/*+</span><br><span class="hljs-comment">postgres*#     Set(random_page_cost 2.0)</span><br><span class="hljs-comment">postgres*#  */</span><br>postgres-# <span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> table1 t1 <span class="hljs-keyword">WHERE</span> <span class="hljs-keyword">key</span> = <span class="hljs-string">&#x27;value&#x27;</span>;<br>...<br><br></code></pre></td></tr></table></figure>
<h1 id="Hint-语法"><a href="#Hint-语法" class="headerlink" title="Hint 语法"></a>Hint 语法</h1><h2 id="Hint-注释位置"><a href="#Hint-注释位置" class="headerlink" title="Hint 注释位置"></a>Hint 注释位置</h2><p>pg_hint_plan 在第一个注释块读取 hint，在这个注释块中只允许有字母，数字，空格，下划线，逗号，和括号。在下面的例子中 HashJoin(a b) and SeqScan(a) 被认为是 hint 而 IndexScan(a) and MergeJoin(a b) 不是 hint.</p>
<figure class="highlight jboss-cli"><table><tr><td class="code"><pre><code class="hljs jboss-cli">postgres=<span class="hljs-comment"># /*+</span><br>postgres*<span class="hljs-comment">#    HashJoin(a b)</span><br>postgres*<span class="hljs-comment">#    SeqScan(a)</span><br>postgres*<span class="hljs-comment">#  */</span><br>postgres-<span class="hljs-comment"># /*+ IndexScan(a) */</span><br>postgres-<span class="hljs-comment"># EXPLAIN SELECT /*+ MergeJoin(a b) */ *</span><br>postgres-<span class="hljs-comment">#    FROM pgbench_branches b</span><br>postgres-<span class="hljs-comment">#    JOIN pgbench_accounts a ON b.bid = a.bid</span><br>postgres-<span class="hljs-comment">#   ORDER BY a.aid;</span><br>                                      QUERY PLAN<br><span class="hljs-params">---------------------------------------------------------------------------------------</span><br> Sort  <span class="hljs-params">(<span class="hljs-attr">cost</span>=31465.84..31715.84 <span class="hljs-attr">rows</span>=100000 <span class="hljs-attr">width</span>=197)</span><br>   Sort Key: a.aid<br>   -&gt;  Hash Join  <span class="hljs-params">(<span class="hljs-attr">cost</span>=1.02..4016.02 <span class="hljs-attr">rows</span>=100000 <span class="hljs-attr">width</span>=197)</span><br>         Hash Cond: <span class="hljs-params">(a.<span class="hljs-attr">bid</span> = b.bid)</span><br>         -&gt;  Seq Scan on pgbench_accounts a  <span class="hljs-params">(<span class="hljs-attr">cost</span>=0.00..2640.00 <span class="hljs-attr">rows</span>=100000 <span class="hljs-attr">width</span>=97)</span><br>         -&gt;  Hash  <span class="hljs-params">(<span class="hljs-attr">cost</span>=1.01..1.01 <span class="hljs-attr">rows</span>=1 <span class="hljs-attr">width</span>=100)</span><br>               -&gt;  Seq Scan on pgbench_branches b  <span class="hljs-params">(<span class="hljs-attr">cost</span>=0.00..1.01 <span class="hljs-attr">rows</span>=1 <span class="hljs-attr">width</span>=100)</span><br><span class="hljs-params">(7 rows)</span><br><br>postgres=<span class="hljs-comment">#</span><br></code></pre></td></tr></table></figure>
<p>在对象名字中转义特殊的字符</p>
<p>作为 hint 参数的对象如果包括括号，双引号和空格应该使用双引号。和 PostgresQL 的转义规则相同。</p>
<p>使用相同名字表之间的区分</p>
<p>同一对象使用重复的名字出现多次和在不同表空间中使用相同名字的对象可以通过使用别名来区别，并且在 hint 语句中使用这些别名。下面的例子第一个 SQL 语句因为在查询语句中使用一个表名两次而导致了错误，而第二个语句可以正常工作因为 t1 每次出现使用了不同的别名并且在 HashJoin hint 中使用了别名。</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><code class="hljs angelscript">postgres=# <span class="hljs-comment">/*+ HashJoin(t1 t1)*/</span><br>postgres-# EXPLAIN SELECT * FROM s1.t1<br>postgres-# JOIN <span class="hljs-keyword">public</span>.t1 ON (s1.t1.id=<span class="hljs-keyword">public</span>.t1.id);<br>INFO:  hint syntax error at <span class="hljs-keyword">or</span> near <span class="hljs-string">&quot;HashJoin(t1 t1)&quot;</span><br>DETAIL:  Relation name <span class="hljs-string">&quot;t1&quot;</span> <span class="hljs-keyword">is</span> ambiguous.<br>                            QUERY PLAN<br>------------------------------------------------------------------<br> Merge Join  (cost=<span class="hljs-number">337.49</span>.<span class="hljs-number">.781</span><span class="hljs-number">.49</span> rows=<span class="hljs-number">28800</span> width=<span class="hljs-number">8</span>)<br>   Merge Cond: (s1.t1.id = <span class="hljs-keyword">public</span>.t1.id)<br>   -&gt;  Sort  (cost=<span class="hljs-number">168.75</span>.<span class="hljs-number">.174</span><span class="hljs-number">.75</span> rows=<span class="hljs-number">2400</span> width=<span class="hljs-number">4</span>)<br>         Sort Key: s1.t1.id<br>         -&gt;  Seq Scan on t1  (cost=<span class="hljs-number">0.00</span>.<span class="hljs-number">.34</span><span class="hljs-number">.00</span> rows=<span class="hljs-number">2400</span> width=<span class="hljs-number">4</span>)<br>   -&gt;  Sort  (cost=<span class="hljs-number">168.75</span>.<span class="hljs-number">.174</span><span class="hljs-number">.75</span> rows=<span class="hljs-number">2400</span> width=<span class="hljs-number">4</span>)<br>         Sort Key: <span class="hljs-keyword">public</span>.t1.id<br>         -&gt;  Seq Scan on t1  (cost=<span class="hljs-number">0.00</span>.<span class="hljs-number">.34</span><span class="hljs-number">.00</span> rows=<span class="hljs-number">2400</span> width=<span class="hljs-number">4</span>)<br>(<span class="hljs-number">8</span> 行)<br><br>postgres=# <span class="hljs-comment">/*+ HashJoin(pt st) */</span><br>postgres-# EXPLAIN SELECT * FROM s1.t1 st<br>postgres-# JOIN <span class="hljs-keyword">public</span>.t1 pt ON (st.id=pt.id);<br>                             QUERY PLAN<br>---------------------------------------------------------------------<br> Hash Join  (cost=<span class="hljs-number">64.00</span>.<span class="hljs-number">.1112</span><span class="hljs-number">.00</span> rows=<span class="hljs-number">28800</span> width=<span class="hljs-number">8</span>)<br>   Hash Cond: (st.id = pt.id)<br>   -&gt;  Seq Scan on t1 st  (cost=<span class="hljs-number">0.00</span>.<span class="hljs-number">.34</span><span class="hljs-number">.00</span> rows=<span class="hljs-number">2400</span> width=<span class="hljs-number">4</span>)<br>   -&gt;  Hash  (cost=<span class="hljs-number">34.00</span>.<span class="hljs-number">.34</span><span class="hljs-number">.00</span> rows=<span class="hljs-number">2400</span> width=<span class="hljs-number">4</span>)<br>         -&gt;  Seq Scan on t1 pt  (cost=<span class="hljs-number">0.00</span>.<span class="hljs-number">.34</span><span class="hljs-number">.00</span> rows=<span class="hljs-number">2400</span> width=<span class="hljs-number">4</span>)<br>(<span class="hljs-number">5</span> 行)<br><br>postgres=#<br><br></code></pre></td></tr></table></figure>
<h1 id="限制"><a href="#限制" class="headerlink" title="限制"></a>限制</h1><h2 id="在-from-子句中多种值的限制"><a href="#在-from-子句中多种值的限制" class="headerlink" title="在 from 子句中多种值的限制"></a>在 from 子句中多种值的限制</h2><p>无论是语法中给定别名还是在 explain 中显示的描述，所有在 from 子句中出现的值都具有相同的名字 “VALUES”。所以如果他们在目标查询中出现两次及以上将不能使用 hints。</p>
<h2 id="在继承表上的使用"><a href="#在继承表上的使用" class="headerlink" title="在继承表上的使用"></a>在继承表上的使用</h2><p>继承表不能单独的使用 hint。他们和他们父表共享相同的 hint。</p>
<h2 id="通过设置-hint-来设置-pg-hint-plan-参数"><a href="#通过设置-hint-来设置-pg-hint-plan-参数" class="headerlink" title="通过设置 hint 来设置 pg_hint_plan 参数"></a>通过设置 hint 来设置 pg_hint_plan 参数</h2><p>pg_hint_plan 参数改变了它原来的行为所以一些参数不能按照期待的执行。</p>
<pre><code>hint 改变了 enalbe_hint,enable_hint_tables 被忽略了，但是他们在 debug 日志中记录为 “used hints”。
设置 debug_print 和 message_level 工作在目标查询的中间处理。
</code></pre><h1 id="hint-在目标语句中使用方法"><a href="#hint-在目标语句中使用方法" class="headerlink" title="hint 在目标语句中使用方法"></a>hint 在目标语句中使用方法</h1><h2 id="hint-在查询语句中隐含实体的使用"><a href="#hint-在查询语句中隐含实体的使用" class="headerlink" title="hint 在查询语句中隐含实体的使用"></a>hint 在查询语句中隐含实体的使用</h2><p>Hint 对于任何带有目的名字的对象都是有效的，即使他们没有出现在查询语句中，例如在视图里的对象。这样如果你想使用不同于第一个视图的 hint 你可以在不同的视图对同一对象使用不用的别名。</p>
<p>在下面的例子中，在第一个查询中出现的两个表中使用了相同的名字 t1,所以 hint SeqScan(t1) 将会在两次扫描中生效。另一方面第二个语句中在这两个出现的表中使用了不同的名字 t3 所以 hint 只影响这一个扫描。</p>
<p>这个机制也可以应用在两个重写的查询语句中。</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><code class="hljs pgsql">postgres=# <span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">VIEW</span> view1 <span class="hljs-keyword">AS</span> <span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> table1 t1;<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span><br>postgres=# <span class="hljs-comment">/*+ SeqScan(t1) */</span><br>postgres=# <span class="hljs-keyword">EXPLAIN</span> <span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> table1 t1 <span class="hljs-keyword">JOIN</span> view1 t2 <span class="hljs-keyword">ON</span> (t1.key = t2.key) <span class="hljs-keyword">WHERE</span> t2.key = <span class="hljs-number">1</span>;<br>                           QUERY PLAN<br><span class="hljs-comment">-----------------------------------------------------------------</span><br> Nested <span class="hljs-keyword">Loop</span>  (<span class="hljs-keyword">cost</span>=<span class="hljs-number">0.00</span>.<span class="hljs-number">.358</span><span class="hljs-number">.01</span> <span class="hljs-keyword">rows</span>=<span class="hljs-number">1</span> width=<span class="hljs-number">16</span>)<br>   -&gt;  Seq Scan <span class="hljs-keyword">on</span> table1 t1  (<span class="hljs-keyword">cost</span>=<span class="hljs-number">0.00</span>.<span class="hljs-number">.179</span><span class="hljs-number">.00</span> <span class="hljs-keyword">rows</span>=<span class="hljs-number">1</span> width=<span class="hljs-number">8</span>)<br>         <span class="hljs-keyword">Filter</span>: (key = <span class="hljs-number">1</span>)<br>   -&gt;  Seq Scan <span class="hljs-keyword">on</span> table1 t1  (<span class="hljs-keyword">cost</span>=<span class="hljs-number">0.00</span>.<span class="hljs-number">.179</span><span class="hljs-number">.00</span> <span class="hljs-keyword">rows</span>=<span class="hljs-number">1</span> width=<span class="hljs-number">8</span>)<br>         <span class="hljs-keyword">Filter</span>: (key = <span class="hljs-number">1</span>)<br>(<span class="hljs-number">5</span> <span class="hljs-keyword">rows</span>)<br><br>postgres=# <span class="hljs-comment">/*+ SeqScan(t3) */</span><br>postgres=# <span class="hljs-keyword">EXPLAIN</span> <span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> table1 t3 <span class="hljs-keyword">JOIN</span> view1 t2 <span class="hljs-keyword">ON</span> (t1.key = t2.key) <span class="hljs-keyword">WHERE</span> t2.key = <span class="hljs-number">1</span>;<br>                                   QUERY PLAN<br><span class="hljs-comment">--------------------------------------------------------------------------------</span><br> Nested <span class="hljs-keyword">Loop</span>  (<span class="hljs-keyword">cost</span>=<span class="hljs-number">0.00</span>.<span class="hljs-number">.187</span><span class="hljs-number">.29</span> <span class="hljs-keyword">rows</span>=<span class="hljs-number">1</span> width=<span class="hljs-number">16</span>)<br>   -&gt;  Seq Scan <span class="hljs-keyword">on</span> table1 t3  (<span class="hljs-keyword">cost</span>=<span class="hljs-number">0.00</span>.<span class="hljs-number">.179</span><span class="hljs-number">.00</span> <span class="hljs-keyword">rows</span>=<span class="hljs-number">1</span> width=<span class="hljs-number">8</span>)<br>         <span class="hljs-keyword">Filter</span>: (key = <span class="hljs-number">1</span>)<br>   -&gt;  <span class="hljs-keyword">Index</span> Scan <span class="hljs-keyword">using</span> foo_pkey <span class="hljs-keyword">on</span> table1 t1  (<span class="hljs-keyword">cost</span>=<span class="hljs-number">0.00</span>.<span class="hljs-number">.8</span><span class="hljs-number">.28</span> <span class="hljs-keyword">rows</span>=<span class="hljs-number">1</span> width=<span class="hljs-number">8</span>)<br>         <span class="hljs-keyword">Index</span> Cond: (key = <span class="hljs-number">1</span>)<br>(<span class="hljs-number">5</span> <span class="hljs-keyword">rows</span>)<br></code></pre></td></tr></table></figure>
<h2 id="Hint-在继承中的使用"><a href="#Hint-在继承中的使用" class="headerlink" title="Hint 在继承中的使用"></a>Hint 在继承中的使用</h2><p>hint 作用在父表将自动影响它的所有孩子。子表不能自己指定自己的 hint。</p>
<h2 id="hint-在多条语句中的作用范围"><a href="#hint-在多条语句中的作用范围" class="headerlink" title="hint 在多条语句中的作用范围"></a>hint 在多条语句中的作用范围</h2><p>一个多语句描述只能有一个 hint 注释并且这个注释会作用在这个多语句的所有单条语句上。注意在一个交互的 psql 的看似多语句实际上是一系列单条语句，所以 hint 只作用在跟在它后面的一条语句。相反每一个单条语句有他们自己的 hint 注释。</p>
<h2 id="在一些上下文中的子查询"><a href="#在一些上下文中的子查询" class="headerlink" title="在一些上下文中的子查询"></a>在一些上下文中的子查询</h2><p>在下面的上下文中子查询也可以使用 hint。</p>
<p>IN (SELECT … {LIMIT | OFFSET …} …)<br>= ANY (SELECT … {LIMIT | OFFSET …} …)<br>= SOME (SELECT … {LIMIT | OFFSET …} …)</p>
<p>对于这些语法，当计划 jion 子查询结果时，查询规划器内部分配子查询的名字为 “ANY subquery”，所以 join hint 使用隐含的名字作用在这些 join 中。</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><code class="hljs angelscript">postgres=# <span class="hljs-comment">/*+HashJoin(a1 ANY_subquery)*/</span><br>postgres=# EXPLAIN SELECT *<br>postgres=#    FROM pgbench_accounts a1<br>postgres=#   WHERE aid IN (SELECT bid FROM pgbench_accounts a2 LIMIT <span class="hljs-number">10</span>);<br>                                         QUERY PLAN<br><br>---------------------------------------------------------------------------------------------<br> Hash Semi Join  (cost=<span class="hljs-number">0.49</span>.<span class="hljs-number">.2903</span><span class="hljs-number">.00</span> rows=<span class="hljs-number">1</span> width=<span class="hljs-number">97</span>)<br>   Hash Cond: (a1.aid = a2.bid)<br>   -&gt;  Seq Scan on pgbench_accounts a1  (cost=<span class="hljs-number">0.00</span>.<span class="hljs-number">.2640</span><span class="hljs-number">.00</span> rows=<span class="hljs-number">100000</span> width=<span class="hljs-number">97</span>)<br>   -&gt;  Hash  (cost=<span class="hljs-number">0.36</span>.<span class="hljs-number">.0</span><span class="hljs-number">.36</span> rows=<span class="hljs-number">10</span> width=<span class="hljs-number">4</span>)<br>         -&gt;  Limit  (cost=<span class="hljs-number">0.00</span>.<span class="hljs-number">.0</span><span class="hljs-number">.26</span> rows=<span class="hljs-number">10</span> width=<span class="hljs-number">4</span>)<br>               -&gt;  Seq Scan on pgbench_accounts a2  (cost=<span class="hljs-number">0.00</span>.<span class="hljs-number">.2640</span><span class="hljs-number">.00</span> rows=<span class="hljs-number">100000</span> width=<span class="hljs-number">4</span>)<br>(<span class="hljs-number">6</span> rows)<br></code></pre></td></tr></table></figure>
<h2 id="使用-IndexOnlyScan-hint-PostgreSQL-9-2及之后的版本"><a href="#使用-IndexOnlyScan-hint-PostgreSQL-9-2及之后的版本" class="headerlink" title="使用 IndexOnlyScan hint (PostgreSQL 9.2及之后的版本)"></a>使用 IndexOnlyScan hint (PostgreSQL 9.2及之后的版本)</h2><p>如果你在一个表上使用 IndexOnlyScan hint 你应该明确的指定一个能执行仅扫描的索引，而其他的索引不能执行仅扫描。否则 pg_hint_plan 可能会选择他们.</p>
<h2 id="NoIndexScan-hint-的预防要点-PostgreSQL-9-2-及以后版本"><a href="#NoIndexScan-hint-的预防要点-PostgreSQL-9-2-及以后版本" class="headerlink" title="NoIndexScan hint 的预防要点 (PostgreSQL 9.2 及以后版本)"></a>NoIndexScan hint 的预防要点 (PostgreSQL 9.2 及以后版本)</h2><p>NoIndexScan hint 涉及到 NoIndexOnlyScan.</p>
<h1 id="hints-的错误处理"><a href="#hints-的错误处理" class="headerlink" title="hints 的错误处理"></a>hints 的错误处理</h1><p>在大多数情况下 pg_hint_plan 停止解析任何错误并且使用 hints 已经解析的内容。下面是一些典型的错误。</p>
<h2 id="语法错误"><a href="#语法错误" class="headerlink" title="语法错误"></a>语法错误</h2><p>任何语法错误或者错误的 hint 名字被记录为语法错误。如果 pg_hint_plan.debug_print 被设置为 on 这些错误将会记录在服务器的日志中，并使用 pg_hint_plan.message_level 中指定的信息级别。</p>
<h2 id="错误规格"><a href="#错误规格" class="headerlink" title="错误规格"></a>错误规格</h2><p>对象的错误规格将会导致被 hints 忽略。这种错误竟会和语法错误一样在日志中被记录为 “not used hints”。</p>
<h2 id="冗余或冲突的-hints"><a href="#冗余或冲突的-hints" class="headerlink" title="冗余或冲突的 hints"></a>冗余或冲突的 hints</h2><p>当冗余 hints 或者互相冲突的 hint 出现时最后一个 hint 将会生效。这种错误将会和语法错误一样在日志中被记录为 “duplication hints”。</p>
<h2 id="嵌套注释"><a href="#嵌套注释" class="headerlink" title="嵌套注释"></a>嵌套注释</h2><p>在 hint 的注释内不能嵌套另一个注释。如果 pg_hint_plan 发现这种情况，不同于其它错误的处理方法，它停止解析并且放弃已经解析的所有 hint。这种错误和其他错误以一样的方式记录。</p>
<h1 id="函数限制"><a href="#函数限制" class="headerlink" title="函数限制"></a>函数限制</h1><h2 id="GUC-参数对查询规划器的影响"><a href="#GUC-参数对查询规划器的影响" class="headerlink" title="GUC 参数对查询规划器的影响"></a>GUC 参数对查询规划器的影响</h2><p>对于 FROM 子句的数量超过了 from_collapse_limit 的情况，查询规划器不会考虑 join 的顺序。在这种情况下 pg_hint_plan 不会影响 join 的顺序。</p>
<h2 id="pg-hint-plan-本质上无效的情况"><a href="#pg-hint-plan-本质上无效的情况" class="headerlink" title="pg_hint_plan 本质上无效的情况"></a>pg_hint_plan 本质上无效的情况</h2><p>因为 pg_hint_plan 性质，它对查询规划器作用范围之外的情况是无效的，包括下面的情况：</p>
<ul>
<li>使用嵌套循环的 FULL OUTER JOIN</li>
<li>没有使用索引资格的列去使用索引</li>
<li>不带 ctid 条件的查询做 TID 扫描</li>
</ul>
<h2 id="在-ECPG-程序中的查询"><a href="#在-ECPG-程序中的查询" class="headerlink" title="在 ECPG 程序中的查询"></a>在 ECPG 程序中的查询</h2><p>在嵌入式 SQL 语句中 ECPG 删除了查询语句中的注释所以 hints 不能传给这些查询语句。唯一的方法是通过命令传 给定的未修改的字符串。在这种情况下需要考虑 hint 表。</p>
<h2 id="查询指纹的影响"><a href="#查询指纹的影响" class="headerlink" title="查询指纹的影响"></a>查询指纹的影响</h2><p>相同的查询使用不同的注释在 PostgresQL 9.2及以后会产生相同的指纹，但是他们在9.1及以前会产生不同的指纹，带有不同 hint 的相同的查询在这个版本被作为单独查询。</p>
<h1 id="英文版"><a href="#英文版" class="headerlink" title="英文版"></a>英文版</h1><p><a href="http://pghintplan.sourceforge.jp/pg_hint_plan.html">http://pghintplan.sourceforge.jp/pg_hint_plan.html</a></p>
]]></content>
      <categories>
        <category>PostgreSQL</category>
      </categories>
      <tags>
        <tag>PostgreSQL</tag>
        <tag>pg_hint_plan</tag>
      </tags>
  </entry>
  <entry>
    <title>PostgreSQL的两种统计信息</title>
    <url>/PostgreSQL/The_two_kinds_of_stats_in_PostgreSQL/</url>
    <content><![CDATA[<p>时不时地，有人对重置PostgreSQL中的统计信息, 以及重置统计信息对执行计划和数据库其他部分的影响感到困惑。也许文档对此描述的会更清晰一些，但是对于那些以前从未在PostgreSQL中处理过统计信息的人来说无疑是令人困惑的。但这不仅是关于新手的问题-我在9.3中为该区域编写了一个补丁，而且我有时也会感到困惑。对于大多数用户而言，最令人惊讶的事实是“统计信息”实际上可能意味着两件事, 描述数据分布的统计信息，以及监视统计信息，跟踪有关数据库系统本身操作的计数器。每种都有不同的用途，存储方式也不同，丢失数据时的影响也大不相同。因此，让我们看看这两种统计数据的目的是什么，常见的问题是什么，当数据由于某种原因丢失时会发生什么。<br><a id="more"></a></p>
<h1 id="数据分布统计信息"><a href="#数据分布统计信息" class="headerlink" title="数据分布统计信息"></a>数据分布统计信息</h1><p>第一种统计信息跟踪数据的分布-不同值的数量，列中最常见的值，数据的直方图等。<br>这是规划查询时使用的信息, 用来解决以下问题:</p>
<pre><code>- 有多少行符合条件？ （选择性估计）
- 联接产生多少行？ （选择性估计）
- 聚合需要多少内存？
</code></pre><p>本质上，这些统计信息，决定了planner/optimizer使用了那一种最好的方式去执行。这种统计信息是由ANALYZE（或autovacuum）收集的，并存储在“常规”表中，并像常规数据一样受事务日志保护。检查pg_statistic系统目录，或者查看pg_stats，它是pg_statistic之上的视图，使统计信息更易于阅读。很多情况下会引发统计信息不准确，导致选择了较差的计划和糟糕的查询性能。发生这种情况的原因有多种（错误的统计信息，复杂的条件，相关的列…）</p>
<p>据我所知，没有命令/函数可以重置此类统计信息，因为完全没有必要，不觉得可以通过删除此类统计信息来解决该任何问题。当然尝试使用简单的DELETE从目录中删除数据（但我从未尝试过）。</p>
<h1 id="监控统计信息"><a href="#监控统计信息" class="headerlink" title="监控统计信息"></a>监控统计信息</h1><p>另一种统计信息是被statistics collector进程收集的，文档中的第一段<br><figure class="highlight applescript"><table><tr><td class="code"><pre><code class="hljs applescript">    PostgreSQL&#x27;s statistics collector <span class="hljs-keyword">is</span> a subsystem <span class="hljs-keyword">that</span> supports collection <span class="hljs-keyword">and</span> reporting <span class="hljs-keyword">of</span> information <span class="hljs-keyword">about</span> server activity. <br>Presently, <span class="hljs-keyword">the</span> collector can <span class="hljs-built_in">count</span> accesses <span class="hljs-keyword">to</span> tables <span class="hljs-keyword">and</span> indexes <span class="hljs-keyword">in</span> both disk-block <span class="hljs-keyword">and</span> individual-row terms. It also tracks <span class="hljs-keyword">the</span> <br>total <span class="hljs-built_in">number</span> <span class="hljs-keyword">of</span> rows <span class="hljs-keyword">in</span> each table, <span class="hljs-keyword">and</span> information <span class="hljs-keyword">about</span> vacuum <span class="hljs-keyword">and</span> analyze actions <span class="hljs-keyword">for</span> each table. It can also <span class="hljs-built_in">count</span> calls <span class="hljs-keyword">to</span> <br>user-defined functions <span class="hljs-keyword">and</span> <span class="hljs-keyword">the</span> total <span class="hljs-built_in">time</span> spent <span class="hljs-keyword">in</span> each one.<br></code></pre></td></tr></table></figure></p>
<p>因此，当您需要了解特定表的访问频率，是顺序读取表还是使用索引访问表等时，这就是统计信息收集器收集的统计信息。如果要查看此类统计信息，则有很多系统视图：</p>
<figure class="highlight python-repl"><table><tr><td class="code"><pre><code class="hljs python-repl">pg_stat_activity<br>pg_stat_archiver<br>pg_stat_bgwriter<br>pg_stat_database<br>pg_stat_all_tables<br>pg_stat_sys_tables<br><span class="hljs-meta">...</span><br>pg_statio_all_tables<br>pg_statio_sys_tables<br>pg_statio_user_tables<br>pg_statio_all_indexes<br>pg_statio_sys_indexes<br><span class="hljs-meta">...</span><br></code></pre></td></tr></table></figure>
<p>命名方案很明显（以pg_stat_或pg_statio_开头），其名称很不言而喻。例如，当您需要有关当前用户拥有的表的信息时，您可以转到pg_stat_user_tables或pg_statio_user_tables，这取决于您是否需要简单的统计信息（seq扫描，索引扫描的数量…）还是与IO相关的统计信息（数量读取的块数，点击率等）。对于与复制和数据库系统其他部分有关的其他对象（索引，函数等）和统计信息，也是如此。</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><h2 id="数据分布统计信息-1"><a href="#数据分布统计信息-1" class="headerlink" title="数据分布统计信息"></a>数据分布统计信息</h2><ul>
<li>描述数据分布的统计数据，由ANALYZE / autovacuum收集</li>
<li>planner/optimizer在规划查询时使用</li>
<li>存储在数据库中，受WAL保护的常规表</li>
<li>没有官方方法可以重置此类统计信息</li>
<li>这些问题通常会导致选择错误的查询计划</li>
</ul>
<h2 id="监控统计信息-1"><a href="#监控统计信息-1" class="headerlink" title="监控统计信息"></a>监控统计信息</h2><ul>
<li>统计信息跟踪数据库系统本身的运行情况</li>
<li>用于监视目的和autovacuum（以识别需要维护的对象)</li>
<li>存储在数据库外部，二进制文件（pgstat.stat）或每个数据库文件的集合中（从9.3开始）</li>
<li>这就是使用pg_stat_reset()重置的统计信息</li>
<li>最常见的问题是pgstat.stat文件变大时（由于跟踪许多数据库对象), I/O负载较高</li>
<li>重置统计信息不是解决方案-不会解决问题，并且会对autovacuum产生负面影响</li>
<li>9.3之前的解决方案：将pgstat.stat文件移动到tmpfs文件系统，考虑升级到9.3</li>
</ul>
]]></content>
      <categories>
        <category>PostgreSQL</category>
      </categories>
      <tags>
        <tag>PostgreSQL</tag>
        <tag>stat</tag>
      </tags>
  </entry>
  <entry>
    <title>PostgreSQL Postgis 源码安装</title>
    <url>/PostgreSQL/unbutu_PostgreSQL_postgis_install/</url>
    <content><![CDATA[<p>为PostgreSQL 12.3 安装Postgis 2.5.4</p>
<h1 id="postgis-源码下载"><a href="#postgis-源码下载" class="headerlink" title="postgis 源码下载"></a>postgis 源码下载</h1><p>巨慢, 耐心等待吧<br><figure class="highlight angelscript"><table><tr><td class="code"><pre><code class="hljs angelscript"><span class="hljs-symbol">postgres@</span>jintao-ThinkPad-L490:~/download$ wget https:<span class="hljs-comment">//download.osgeo.org/postgis/source/postgis-2.5.4.tar.gz</span><br>-<span class="hljs-number">-2020</span><span class="hljs-number">-08</span><span class="hljs-number">-11</span> <span class="hljs-number">14</span>:<span class="hljs-number">57</span>:<span class="hljs-number">46</span>--  https:<span class="hljs-comment">//download.osgeo.org/postgis/source/postgis-2.5.4.tar.gz</span><br>Resolving download.osgeo.org (download.osgeo.org)... <span class="hljs-number">140.211</span><span class="hljs-number">.15</span><span class="hljs-number">.30</span><br>Connecting to download.osgeo.org (download.osgeo.org)|<span class="hljs-number">140.211</span><span class="hljs-number">.15</span><span class="hljs-number">.30</span>|:<span class="hljs-number">443.</span>.. connected.<br>HTTP request sent, awaiting response... <span class="hljs-number">200</span> OK<br>Length: <span class="hljs-number">16041872</span> (<span class="hljs-number">15</span>M) [application/octet-stream]<br>Saving to: ‘postgis<span class="hljs-number">-2.5</span><span class="hljs-number">.4</span>.tar.gz’<br><br>postgis<span class="hljs-number">-2.5</span><span class="hljs-number">.4</span>.tar.gz       <span class="hljs-number">6</span>%[======&gt;                                                    ]   <span class="hljs-number">1016</span>K  <span class="hljs-number">5.72</span>KB/s    eta <span class="hljs-number">43</span>m <span class="hljs-number">7</span>s<br></code></pre></td></tr></table></figure><br><a href="https://git.osgeo.org/gitea/postgis/postgis/branches/">其他版本下载地址</a><br><a id="more"></a></p>
<h1 id="依赖下载-amp-amp-编译-amp-amp-安装"><a href="#依赖下载-amp-amp-编译-amp-amp-安装" class="headerlink" title="依赖下载 &amp;&amp; 编译 &amp;&amp; 安装"></a>依赖下载 &amp;&amp; 编译 &amp;&amp; 安装</h1><p>安装postgis2.5.4需要对应的包及其版本详见<a href="https://postgis.net/docs/manual-2.5/postgis_installation.html#install_requirements">install_requirements</a></p>
<h2 id="zlib1g-dev和libxml2"><a href="#zlib1g-dev和libxml2" class="headerlink" title="zlib1g-dev和libxml2"></a>zlib1g-dev和libxml2</h2><figure class="highlight q"><table><tr><td class="code"><pre><code class="hljs q">sudo apt-<span class="hljs-built_in">get</span> install zlib1g-<span class="hljs-built_in">dev</span><br>sudo apt-<span class="hljs-built_in">get</span> install libxml2-<span class="hljs-built_in">dev</span><br></code></pre></td></tr></table></figure>
<h2 id="geos"><a href="#geos" class="headerlink" title="geos"></a>geos</h2><p>编译时间很长<br><figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">wget http:<span class="hljs-regexp">//</span>download.osgeo.org<span class="hljs-regexp">/geos/g</span>eos-<span class="hljs-number">3.7</span>.<span class="hljs-number">2</span>.tar.bz2<br>tar -jxvf geos-<span class="hljs-number">3.7</span>.<span class="hljs-number">2</span>.tar.bz2<br>cd geos-<span class="hljs-number">3.7</span>.<span class="hljs-number">2</span><br>.<span class="hljs-regexp">/configure prefix=/</span>home<span class="hljs-regexp">/postgres/</span>pg12/geos<br>make -j10<br>make install<br></code></pre></td></tr></table></figure></p>
<h2 id="proj"><a href="#proj" class="headerlink" title="proj"></a>proj</h2><figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">wget  http:<span class="hljs-regexp">//</span>download.osgeo.org<span class="hljs-regexp">/proj/</span>proj-<span class="hljs-number">4.9</span>.<span class="hljs-number">2</span>.tar.gz<br>tar -zxvf proj-<span class="hljs-number">4.9</span>.<span class="hljs-number">2</span>.tar.gz<br>cd proj-<span class="hljs-number">4.9</span>.<span class="hljs-number">2</span>/<br>.<span class="hljs-regexp">/configure prefix=/</span>home<span class="hljs-regexp">/postgres/</span>pg12/proj<br>make -j10<br>make install<br></code></pre></td></tr></table></figure>
<h2 id="gdal"><a href="#gdal" class="headerlink" title="gdal"></a>gdal</h2><p>编译时间很长<br><figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">wget http:<span class="hljs-regexp">//</span>download.osgeo.org<span class="hljs-regexp">/gdal/</span><span class="hljs-number">2.2</span>.<span class="hljs-number">3</span>/gdal-<span class="hljs-number">2.2</span>.<span class="hljs-number">3</span>.tar.gz<br>tar -zxvf gdal-<span class="hljs-number">2.2</span>.<span class="hljs-number">3</span>.tar.gz<br>cd gdal-<span class="hljs-number">2.2</span>.<span class="hljs-number">3</span><br>.<span class="hljs-regexp">/configure prefix=/</span>home<span class="hljs-regexp">/postgres/</span>pg12/gdal<br>make -j10<br>make install<br></code></pre></td></tr></table></figure></p>
<h2 id="json-c"><a href="#json-c" class="headerlink" title="json-c"></a>json-c</h2><figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">wget  https:<span class="hljs-regexp">//</span>s3.amazonaws.com<span class="hljs-regexp">/json-c_releases/</span>releases/json-c-<span class="hljs-number">0.15</span>.tar.gz<br>mkdir build<br>cd build<br>..<span class="hljs-regexp">/cmake-configure --prefix=/</span>home<span class="hljs-regexp">/postgres/</span>pg12/jsonc<br>make -j10<br>make install<br></code></pre></td></tr></table></figure>
<h2 id="protobuf-c"><a href="#protobuf-c" class="headerlink" title="protobuf-c"></a>protobuf-c</h2><p>不是必须, 需要使用ST_AsMVT则需要。<br><figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">wget https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/protocolbuffers/</span>protobuf<span class="hljs-regexp">/releases/</span>download<span class="hljs-regexp">/v3.12.4/</span>protobuf-all-<span class="hljs-number">3.12</span>.<span class="hljs-number">4</span>.tar.gz<br>tar -zxvf protobuf-all-<span class="hljs-number">3.12</span>.<span class="hljs-number">4</span>.tar.gz<br>cd protobuf-all-<span class="hljs-number">3.12</span>.<span class="hljs-number">4</span><br>./configure<br>sudo make -j10<br>sudo make install<br>wget https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/protobuf-c/</span>protobuf-c<span class="hljs-regexp">/archive/</span>v1.<span class="hljs-number">3.3</span>.tar.gz<br>tar -zxvf v1.<span class="hljs-number">3.3</span>.tar.gz<br>sudo vim <span class="hljs-regexp">/etc/</span>ld.so.conf<br><span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/protobuf-3.11.4/</span>lib<br><span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/protobuf-c-1.3.2/</span>lib<br>export LD_LIBRARY_PATH=<span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/lib/</span>:<span class="hljs-variable">$LD_LIBRARY_PATH</span><br>cd protobuf-c-<span class="hljs-number">1.3</span>.<span class="hljs-number">3</span><br>.<span class="hljs-regexp">/configure --prefix=/</span>home<span class="hljs-regexp">/postgres/</span>pg12/protobuf<br>make -j10<br>make install<br></code></pre></td></tr></table></figure></p>
<h1 id="更新动态库"><a href="#更新动态库" class="headerlink" title="更新动态库"></a>更新动态库</h1><p>sudo vim /etc/ld.so.conf 追加以下内容</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">/home/</span>postgres<span class="hljs-regexp">/pg12/</span>lib/<br><span class="hljs-regexp">/home/</span>postgres<span class="hljs-regexp">/pg12/</span>jsonc<span class="hljs-regexp">/lib/</span><br><span class="hljs-regexp">/home/</span>postgres<span class="hljs-regexp">/pg12/g</span>eos<span class="hljs-regexp">/lib/</span><br><span class="hljs-regexp">/home/</span>postgres<span class="hljs-regexp">/pg12/</span>proj<span class="hljs-regexp">/lib/</span><br><span class="hljs-regexp">/home/</span>postgres<span class="hljs-regexp">/pg12/g</span>dal<span class="hljs-regexp">/lib/</span><br><span class="hljs-regexp">/home/</span>postgres<span class="hljs-regexp">/pg12/</span>protobuf<span class="hljs-regexp">/lib/</span><br></code></pre></td></tr></table></figure>
<h1 id="Postgis下载-amp-amp-编译-amp-amp-安装"><a href="#Postgis下载-amp-amp-编译-amp-amp-安装" class="headerlink" title="Postgis下载 &amp;&amp; 编译 &amp;&amp; 安装"></a>Postgis下载 &amp;&amp; 编译 &amp;&amp; 安装</h1><figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">wget [http:<span class="hljs-regexp">//</span>download.osgeo.org<span class="hljs-regexp">/postgis/</span>source/postgis-<span class="hljs-number">2.5</span>.<span class="hljs-number">4</span>.tar.gz<br>tar -zxvf postgis-<span class="hljs-number">2.5</span>.<span class="hljs-number">4</span>.tar.gz<br>cd postgis-<span class="hljs-number">2.5</span>.<span class="hljs-number">4</span><br>.<span class="hljs-regexp">/configure --with-pgconfig=/</span>home<span class="hljs-regexp">/postgres/</span>pg12<span class="hljs-regexp">/bin/</span>pg_config --with-xml2config=<span class="hljs-regexp">/usr/</span>bin<span class="hljs-regexp">/xml2-config --with-geosconfig=/</span>home<span class="hljs-regexp">/postgres/</span>pg12<span class="hljs-regexp">/geos/</span>bin<span class="hljs-regexp">/geos-config --with-gdalconfig=/</span>home<span class="hljs-regexp">/postgres/</span>pg12<span class="hljs-regexp">/gdal/</span>bin<span class="hljs-regexp">/gdal-config --with-projdir=/</span>home<span class="hljs-regexp">/postgres/</span>pg12<span class="hljs-regexp">/proj  --with-jsondir=/</span>home<span class="hljs-regexp">/postgres/</span>pg12<span class="hljs-regexp">/jsonc --with-protobufdir=/</span>home<span class="hljs-regexp">/postgres/</span>pg12/protobuf --with-gui --with-topology --with-raster<br>make -j10 <br>make install <br></code></pre></td></tr></table></figure>
<h1 id="创建extension"><a href="#创建extension" class="headerlink" title="创建extension"></a>创建extension</h1><figure class="highlight routeros"><table><tr><td class="code"><pre><code class="hljs routeros">postgres@jintao-ThinkPad-L490:~/download/postgis-2.5.4$ psql<br>psql (12.3)<br>Type <span class="hljs-string">&quot;help&quot;</span> <span class="hljs-keyword">for</span> help.<br><br><span class="hljs-attribute">postgres</span>=# create extension postgis;<br>CREATE EXTENSION<br><span class="hljs-attribute">postgres</span>=# create extension postgis_t;<br>postgis_tiger_geocoder  postgis_topology<br><span class="hljs-attribute">postgres</span>=# create extension postgis_tiger_geocoder;<br>ERROR:  required extension <span class="hljs-string">&quot;fuzzystrmatch&quot;</span> is <span class="hljs-keyword">not</span> installed<br>HINT:  Use CREATE EXTENSION <span class="hljs-built_in">..</span>. CASCADE <span class="hljs-keyword">to</span> install required extensions too.<br><span class="hljs-attribute">postgres</span>=# create extension postgis_tiger_geocoder cascade;<br>NOTICE:  installing required extension <span class="hljs-string">&quot;fuzzystrmatch&quot;</span><br>CREATE EXTENSION<br><span class="hljs-attribute">postgres</span>=# create extension postgis_topology;<br>postgis_topology<br><span class="hljs-attribute">postgres</span>=# create extension postgis_topology;<br>CREATE EXTENSION<br><span class="hljs-attribute">postgres</span>=# \dx<br>                                            List of installed extensions<br>          Name          | Version |   Schema   |                             Description<br>------------------------+---------+------------+---------------------------------------------------------------------<br> fuzzystrmatch          | 1.1     | public     | determine similarities <span class="hljs-keyword">and</span> distance between strings<br> plpgsql                | 1.0     | pg_catalog | PL/pgSQL procedural language<br> postgis                | 2.5.4   | public     | PostGIS geometry, geography, <span class="hljs-keyword">and</span> raster spatial types <span class="hljs-keyword">and</span> functions<br> postgis_tiger_geocoder | 2.5.4   | tiger      | PostGIS tiger geocoder <span class="hljs-keyword">and</span> reverse geocoder<br> postgis_topology       | 2.5.4   | topology   | PostGIS topology spatial types <span class="hljs-keyword">and</span> functions<br>(5 rows)<br><br><span class="hljs-attribute">postgres</span>=# select postgis_full_version();<br>                                                                                                   postgis_full_version<br><br>-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------<br>-------<br> <span class="hljs-attribute">POSTGIS</span>=<span class="hljs-string">&quot;2.5.4&quot;</span> [EXTENSION] <span class="hljs-attribute">PGSQL</span>=<span class="hljs-string">&quot;120&quot;</span> <span class="hljs-attribute">GEOS</span>=<span class="hljs-string">&quot;3.7.2-CAPI-1.11.2 b55d2125&quot;</span> <span class="hljs-attribute">PROJ</span>=<span class="hljs-string">&quot;Rel. 4.9.2, 08 September 2015&quot;</span> <span class="hljs-attribute">GDAL</span>=<span class="hljs-string">&quot;GDAL 2.2.3, released 2017/11/20&quot;</span> <span class="hljs-attribute">LIBXML</span>=<span class="hljs-string">&quot;2.9.10&quot;</span> <span class="hljs-attribute">LIBJSON</span>=<span class="hljs-string">&quot;0.15&quot;</span> <span class="hljs-attribute">LIBPROTOBUF</span>=<span class="hljs-string">&quot;1.3.3&quot;</span> TOPOLOGY<br>RASTER<br>(1 row)<br><br><span class="hljs-attribute">postgres</span>=#<br><span class="hljs-attribute">postgres</span>=# select st_geographyfromtext(<span class="hljs-string">&#x27;SRID=4326;POINT(121 23)&#x27;</span>);<br>                st_geographyfromtext<br>----------------------------------------------------<br> 0101000020E61000000000000000405E400000000000003740<br>(1 row)<br><br><span class="hljs-attribute">postgres</span>=#<br></code></pre></td></tr></table></figure>
<p><strong>Note:</strong><br>最新的CREATE EXTENSION 详见 <a href="http://postgis.net/install/">http://postgis.net/install/</a></p>
]]></content>
      <categories>
        <category>PostgreSQL</category>
      </categories>
      <tags>
        <tag>PostgreSQL</tag>
        <tag>gis</tag>
        <tag>postgis</tag>
        <tag>postgres</tag>
        <tag>pg</tag>
        <tag>postgresql</tag>
        <tag>geo</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux ubuntu postgresql 源码搭建主从</title>
    <url>/PostgreSQL/PostgreSQL_install_from_source/</url>
    <content><![CDATA[<h1 id="搭建主节点PostgreSQL实例"><a href="#搭建主节点PostgreSQL实例" class="headerlink" title="搭建主节点PostgreSQL实例"></a>搭建主节点PostgreSQL实例</h1><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><p><a href="https://www.postgresql.org/ftp/source/v12.3/">官网下载地址</a></p>
<figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">sudo groupadd postgres<br>sudo useradd -a -G postgres postgres<br>su - postgres<br>wget https:<span class="hljs-regexp">//</span>ftp.postgresql.org<span class="hljs-regexp">/pub/</span>source<span class="hljs-regexp">/v12.3/</span>postgresql-<span class="hljs-number">12.3</span>.tar.gz<br></code></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="解压-amp-amp-编译-amp-amp-安装"><a href="#解压-amp-amp-编译-amp-amp-安装" class="headerlink" title="解压 &amp;&amp; 编译 &amp;&amp; 安装"></a>解压 &amp;&amp; 编译 &amp;&amp; 安装</h2><p>需要带哪些编译选项看个人需求<br><figure class="highlight flix"><table><tr><td class="code"><pre><code class="hljs flix">tar -zxvf postgresql<span class="hljs-number">-12.3</span>.tar.gz<br>cd postgresql<span class="hljs-number">-12.3</span><br>./configure CFLAGS=-O0 -g<span class="hljs-string">&#x27; &#x27;</span>--prefix=/home/postgres/pg12<span class="hljs-string">&#x27; &#x27;</span>--<span class="hljs-keyword">with</span>-perl<span class="hljs-string">&#x27; &#x27;</span>--<span class="hljs-keyword">with</span>-libxml<span class="hljs-string">&#x27; &#x27;</span>--<span class="hljs-keyword">with</span>-libxslt<span class="hljs-string">&#x27; &#x27;</span>--<span class="hljs-keyword">with</span>-ossp-uuid<span class="hljs-string">&#x27; &#x27;</span>--<span class="hljs-keyword">with</span>-blocksize=<span class="hljs-number">32</span><span class="hljs-string">&#x27; &#x27;</span>--<span class="hljs-keyword">with</span>-segsize=<span class="hljs-number">2</span><span class="hljs-string">&#x27; &#x27;</span>--<span class="hljs-keyword">with</span>-wal-blocksize=<span class="hljs-number">64</span><span class="hljs-string">&#x27; &#x27;</span>--<span class="hljs-keyword">with</span>-llvm&#x27; --<span class="hljs-keyword">with</span>-python<br>make -j10 world       # 带插件一起编译<br>make install-world    # 带插件一起安装<br></code></pre></td></tr></table></figure><br>make install-world 出现”PostgreSQL, contrib, and documentation installation complete.”时， 即为成功</p>
<h2 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h2><p>vim ~/.bashrc 追加如下内容<br><figure class="highlight routeros"><table><tr><td class="code"><pre><code class="hljs routeros"><span class="hljs-builtin-name">export</span> <span class="hljs-attribute">PGHOME</span>=/home/postgres/pg12<br><span class="hljs-builtin-name">export</span> <span class="hljs-attribute">PGDATA</span>=/home/postgres/pg120_data<br><span class="hljs-builtin-name">export</span> <span class="hljs-attribute">PGUSER</span>=postgres<br><span class="hljs-builtin-name">export</span> <span class="hljs-attribute">PGPORT</span>=5432<br><span class="hljs-builtin-name">export</span> <span class="hljs-attribute">PGDATABASE</span>=postgres<br><span class="hljs-builtin-name">export</span> <span class="hljs-attribute">LD_LIBRARY_PATH</span>=/home/postgres/pg12/lib:$LD_LIBRARY_PATH<br><span class="hljs-builtin-name">export</span> <span class="hljs-attribute">PATH</span>=/home/postgres/pg12/bin:$PATH<br></code></pre></td></tr></table></figure><br>重新打开窗口，或者执行 . ~/.bashrc 使之生效</p>
<h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><figure class="highlight routeros"><table><tr><td class="code"><pre><code class="hljs routeros">postgres@pgserver1:~/postgresql-12.3$ initdb<br>The files belonging <span class="hljs-keyword">to</span> this database<span class="hljs-built_in"> system </span>will be owned by<span class="hljs-built_in"> user </span><span class="hljs-string">&quot;postgres&quot;</span>.<br>This<span class="hljs-built_in"> user </span>must also own the<span class="hljs-built_in"> server </span>process.<br><br>The database cluster will be initialized with locales<br>  COLLATE:  en_US.UTF-8<br>  CTYPE:    en_US.UTF-8<br>  MESSAGES: en_US.UTF-8<br>  MONETARY: zh_CN.UTF-8<br>  NUMERIC:  zh_CN.UTF-8<br>  TIME:     zh_CN.UTF-8<br>The<span class="hljs-built_in"> default </span>database encoding has accordingly been <span class="hljs-builtin-name">set</span> <span class="hljs-keyword">to</span> <span class="hljs-string">&quot;UTF8&quot;</span>.<br>The<span class="hljs-built_in"> default </span>text search configuration will be <span class="hljs-builtin-name">set</span> <span class="hljs-keyword">to</span> <span class="hljs-string">&quot;english&quot;</span>.<br><br>Data<span class="hljs-built_in"> page </span>checksums are disabled.<br><br>creating directory /home/postgres/pg120_data <span class="hljs-built_in">..</span>. ok<br>creating subdirectories <span class="hljs-built_in">..</span>. ok<br>selecting dynamic shared memory implementation <span class="hljs-built_in">..</span>. posix<br>selecting<span class="hljs-built_in"> default </span>max_connections <span class="hljs-built_in">..</span>. 100<br>selecting<span class="hljs-built_in"> default </span>shared_buffers <span class="hljs-built_in">..</span>. 128MB<br>selecting<span class="hljs-built_in"> default </span>time zone <span class="hljs-built_in">..</span>. Asia/Shanghai<br>creating configuration files <span class="hljs-built_in">..</span>. ok<br>running bootstrap<span class="hljs-built_in"> script </span><span class="hljs-built_in">..</span>. ok<br>performing post-bootstrap initialization <span class="hljs-built_in">..</span>. ok<br>syncing data <span class="hljs-keyword">to</span> disk <span class="hljs-built_in">..</span>. ok<br><br>initdb: warning: enabling <span class="hljs-string">&quot;trust&quot;</span> authentication <span class="hljs-keyword">for</span> local connections<br>You can change this by editing pg_hba.conf <span class="hljs-keyword">or</span> using the option -A, <span class="hljs-keyword">or</span><br>--auth-local <span class="hljs-keyword">and</span> --auth-host, the next time you <span class="hljs-builtin-name">run</span> initdb.<br><br>Success. You can now start the database<span class="hljs-built_in"> server </span>using:<br><br>    pg_ctl -D /home/postgres/pg120_data -l logfile start<br><br></code></pre></td></tr></table></figure>
<h2 id="修改参数-记录数据库日志"><a href="#修改参数-记录数据库日志" class="headerlink" title="修改参数, 记录数据库日志"></a>修改参数, 记录数据库日志</h2><figure class="highlight ini"><table><tr><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">wal_level</span> = replica             <span class="hljs-comment"># minimal, replica, or logical</span><br>                                <span class="hljs-comment"># (change requires restart)</span><br><br><span class="hljs-attr">listen_addresses</span> = <span class="hljs-string">&#x27;*&#x27;</span>          <span class="hljs-comment"># what IP address(es) to listen on;</span><br>                                        <span class="hljs-comment"># comma-separated list of addresses;</span><br>                                        <span class="hljs-comment"># defaults to &#x27;localhost&#x27;; use &#x27;*&#x27; for all</span><br>                                        <span class="hljs-comment"># (change requires restart)</span><br><span class="hljs-attr">port</span> = <span class="hljs-number">5432</span>                             <span class="hljs-comment"># (change requires restart)</span><br><br><span class="hljs-attr">logging_collector</span> = <span class="hljs-literal">on</span>          <span class="hljs-comment"># Enable capturing of stderr and csvlog</span><br>                                        <span class="hljs-comment"># into log files. Required to be on for</span><br>                                        <span class="hljs-comment"># csvlogs.</span><br>                                        <span class="hljs-comment"># (change requires restart)</span><br><br><span class="hljs-comment"># These are only used if logging_collector is on:</span><br><span class="hljs-attr">log_directory</span> = <span class="hljs-string">&#x27;log&#x27;</span>                   <span class="hljs-comment"># directory where log files are written,</span><br>                                        <span class="hljs-comment"># can be absolute or relative to PGDATA</span><br><span class="hljs-attr">log_filename</span> = <span class="hljs-string">&#x27;postgresql-%a.log&#x27;</span>      <span class="hljs-comment"># log file name pattern,</span><br>                                        <span class="hljs-comment"># can include strftime() escapes</span><br><span class="hljs-comment">#log_file_mode = 0600                   # creation mode for log files,</span><br>                                        <span class="hljs-comment"># begin with 0 to use octal notation</span><br><span class="hljs-attr">log_truncate_on_rotation</span> = <span class="hljs-literal">on</span>           <span class="hljs-comment"># If on, an existing log file with the</span><br>                                        <span class="hljs-comment"># same name as the new log file will be</span><br>                                        <span class="hljs-comment"># truncated rather than appended to.</span><br>                                        <span class="hljs-comment"># But such truncation only occurs on</span><br>                                        <span class="hljs-comment"># time-driven rotation, not on restarts</span><br>                                        <span class="hljs-comment"># or size-driven rotation.  Default is</span><br>                                        <span class="hljs-comment"># off, meaning append to existing files</span><br></code></pre></td></tr></table></figure>
<h2 id="启动数据库"><a href="#启动数据库" class="headerlink" title="启动数据库"></a>启动数据库</h2><figure class="highlight routeros"><table><tr><td class="code"><pre><code class="hljs routeros">postgres@pgserver1:~/postgresql-12.3$ pg_ctl start<br>waiting <span class="hljs-keyword">for</span><span class="hljs-built_in"> server </span><span class="hljs-keyword">to</span> start<span class="hljs-built_in">..</span><span class="hljs-built_in">..</span>2020-08-11 14:39:44.004 CST [3608866] LOG:  starting PostgreSQL 12.3 on x86_64-pc-linux-gnu, compiled by gcc (Ubuntu 9.3.0-10ubuntu2) 9.3.0, 64-bit<br>2020-08-11 14:39:44.004 CST [3608866] LOG:  listening on IPv4<span class="hljs-built_in"> address </span><span class="hljs-string">&quot;0.0.0.0&quot;</span>,<span class="hljs-built_in"> port </span>5432<br>2020-08-11 14:39:44.004 CST [3608866] LOG:  listening on<span class="hljs-built_in"> IPv6 address </span><span class="hljs-string">&quot;::&quot;</span>,<span class="hljs-built_in"> port </span>5432<br>2020-08-11 14:39:44.006 CST [3608866] LOG:  listening on Unix socket <span class="hljs-string">&quot;/tmp/.s.PGSQL.5432&quot;</span><br>2020-08-11 14:39:44.012 CST [3608866] LOG:  redirecting log output <span class="hljs-keyword">to</span><span class="hljs-built_in"> logging </span>collector process<br>2020-08-11 14:39:44.012 CST [3608866] HINT:  Future log output will appear <span class="hljs-keyword">in</span> directory <span class="hljs-string">&quot;log&quot;</span>.<br> done<br>server started<br></code></pre></td></tr></table></figure>
<h2 id="主节点创建流复制用户"><a href="#主节点创建流复制用户" class="headerlink" title="主节点创建流复制用户"></a>主节点创建流复制用户</h2><figure class="highlight routeros"><table><tr><td class="code"><pre><code class="hljs routeros">postgres@pgserver1:~/postgresql-12.3$ psql<br>psql (12.3)<br>Type <span class="hljs-string">&quot;help&quot;</span> <span class="hljs-keyword">for</span> help.<br><br><span class="hljs-attribute">postgres</span>=# \! uuidgen<br>7089bae5-c467-492a-a402-aaba388e6826<br><span class="hljs-attribute">postgres</span>=# create<span class="hljs-built_in"> user </span>replicator Replication password <span class="hljs-string">&#x27;7089bae5-c467-492a-a402-aaba388e6826&#x27;</span>;<br>CREATE ROLE<br><span class="hljs-attribute">postgres</span>=#<br></code></pre></td></tr></table></figure>
<h2 id="增加用户replicator-ACL"><a href="#增加用户replicator-ACL" class="headerlink" title="增加用户replicator ACL"></a>增加用户replicator ACL</h2><p>主库 vim $PGDATA/pg_hba.conf 新增, x.x.x.x为从节点IP<br><figure class="highlight gml"><table><tr><td class="code"><pre><code class="hljs gml">host    replication     replicator      <span class="hljs-symbol">x</span>.<span class="hljs-symbol">x</span>.<span class="hljs-symbol">x</span>.<span class="hljs-symbol">x</span>/<span class="hljs-number">32</span>            trust<br></code></pre></td></tr></table></figure></p>
<p>使之生效<br><figure class="highlight pgsql"><table><tr><td class="code"><pre><code class="hljs pgsql">postgres@pgserver1:~$ psql <br>psql (<span class="hljs-number">12.3</span>)<br><span class="hljs-keyword">Type</span> &quot;help&quot; <span class="hljs-keyword">for</span> help.<br><br>postgres=# <span class="hljs-keyword">select</span> pg_reload_conf();<br> pg_reload_conf <br><span class="hljs-comment">----------------</span><br> t<br>(<span class="hljs-number">1</span> <span class="hljs-keyword">row</span>)<br></code></pre></td></tr></table></figure></p>
<h1 id="搭建从节点PostgreSQL实例"><a href="#搭建从节点PostgreSQL实例" class="headerlink" title="搭建从节点PostgreSQL实例"></a>搭建从节点PostgreSQL实例</h1><h2 id="下载-1"><a href="#下载-1" class="headerlink" title="下载"></a>下载</h2><p><strong> 步骤同1.1 </strong></p>
<h2 id="解压-amp-amp-编译-amp-amp-安装-1"><a href="#解压-amp-amp-编译-amp-amp-安装-1" class="headerlink" title="解压 &amp;&amp; 编译 &amp;&amp; 安装"></a>解压 &amp;&amp; 编译 &amp;&amp; 安装</h2><p><strong> 步骤同1.2 </strong></p>
<h2 id="配置环境变量-1"><a href="#配置环境变量-1" class="headerlink" title="配置环境变量"></a>配置环境变量</h2><p><strong> 步骤同1.3 </strong></p>
<h2 id="使用pg-basebackup生成从库数据目录"><a href="#使用pg-basebackup生成从库数据目录" class="headerlink" title="使用pg_basebackup生成从库数据目录"></a>使用pg_basebackup生成从库数据目录</h2><figure class="highlight pgsql"><table><tr><td class="code"><pre><code class="hljs pgsql">postgres@pgserver2:~$ pg_basebackup -D /home/postgres/pg120_data -R -X stream -c fast -P -h pgserver1 -p <span class="hljs-number">5432</span> -Ureplicator<br><span class="hljs-number">65984</span>/<span class="hljs-number">65984</span> kB (<span class="hljs-number">100</span>%), <span class="hljs-number">1</span>/<span class="hljs-number">1</span> <span class="hljs-keyword">tablespace</span><br></code></pre></td></tr></table></figure>
<h2 id="启动从库"><a href="#启动从库" class="headerlink" title="启动从库"></a>启动从库</h2><figure class="highlight routeros"><table><tr><td class="code"><pre><code class="hljs routeros">postgres@pgserver2:~$ pg_ctl -D /home/postgres/pg120_data start<br>waiting <span class="hljs-keyword">for</span><span class="hljs-built_in"> server </span><span class="hljs-keyword">to</span> start<span class="hljs-built_in">..</span><span class="hljs-built_in">..</span>2020-08-14 15:12:31.552 CST [817489] LOG:  starting PostgreSQL 12.3 on x86_64-pc-linux-gnu, compiled by gcc (Ubuntu 9.3.0-10ubuntu2) 9.3.0, 64-bit<br>2020-08-14 15:12:31.552 CST [817489] LOG:  listening on IPv4<span class="hljs-built_in"> address </span><span class="hljs-string">&quot;x.x.x.x&quot;</span>,<span class="hljs-built_in"> port </span>5432<br>2020-08-14 15:12:31.555 CST [817489] LOG:  listening on Unix socket <span class="hljs-string">&quot;/tmp/.s.PGSQL.5432&quot;</span><br>2020-08-14 15:12:31.566 CST [817489] LOG:  redirecting log output <span class="hljs-keyword">to</span><span class="hljs-built_in"> logging </span>collector process<br>2020-08-14 15:12:31.566 CST [817489] HINT:  Future log output will appear <span class="hljs-keyword">in</span> directory <span class="hljs-string">&quot;log&quot;</span>.<br> done<br>server started<br></code></pre></td></tr></table></figure>
<h2 id="主节点确认流复制"><a href="#主节点确认流复制" class="headerlink" title="主节点确认流复制"></a>主节点确认流复制</h2><figure class="highlight gherkin"><table><tr><td class="code"><pre><code class="hljs gherkin">postgres<span class="hljs-meta">@pgserver1:~$</span> psql <br>psql (12.3)<br>Type <span class="hljs-string">&quot;help&quot;</span> for help.<br>postgres=<span class="hljs-comment"># select * from pg_stat_replication ;</span><br>  pid   |<span class="hljs-string"> usesysid </span>|<span class="hljs-string"> usename  </span>|<span class="hljs-string"> application_name </span>|<span class="hljs-string"> client_addr </span>|<span class="hljs-string"> client_hostname </span>|<span class="hljs-string"> client_port </span>|<span class="hljs-string">         backend_start         </span>|<span class="hljs-string"> backend_xmin </span>|<span class="hljs-string">   state   </span>|<span class="hljs-string"> sent_lsn  </span>|<span class="hljs-string"> write_lsn </span>|<span class="hljs-string"> flush_lsn </span>|<span class="hljs-string"> replay_lsn </span>|<span class="hljs-string">   writ</span><br><span class="hljs-string">e_lag    </span>|<span class="hljs-string">    flush_lag    </span>|<span class="hljs-string">   replay_lag    </span>|<span class="hljs-string"> sync_priority </span>|<span class="hljs-string"> sync_state </span>|<span class="hljs-string">          reply_time           </span><br><span class="hljs-string">--------+----------+----------+------------------+-------------+-----------------+-------------+-------------------------------+--------------+-----------+-----------+-----------+-----------+------------+-------</span><br><span class="hljs-string">---------+-----------------+-----------------+---------------+------------+-------------------------------</span><br><span class="hljs-string"> 817497 </span>|<span class="hljs-string">       10 </span>|<span class="hljs-string"> replicator </span>|<span class="hljs-string"> walreceiver      </span>|<span class="hljs-string"> x.x.x.x   </span>|<span class="hljs-string">                 </span>|<span class="hljs-string">       50850 </span>|<span class="hljs-string"> 2020-08-14 15:12:31.612261+08 </span>|<span class="hljs-string">              </span>|<span class="hljs-string"> streaming </span>|<span class="hljs-string"> 0/4000B60 </span>|<span class="hljs-string"> 0/4000B60 </span>|<span class="hljs-string"> 0/4000B60 </span>|<span class="hljs-string"> 0/4000B60  </span>|<span class="hljs-string"> 00:00:</span><br><span class="hljs-string">00.02204 </span>|<span class="hljs-string"> 00:00:00.022362 </span>|<span class="hljs-string"> 00:00:00.022769 </span>|<span class="hljs-string">             0 </span>|<span class="hljs-string"> async      </span>|<span class="hljs-string"> 2020-08-14 15:12:31.636213+08</span><br><span class="hljs-string">(1 row)</span><br><br><span class="hljs-string">postgres=# </span><br></code></pre></td></tr></table></figure>
<h2 id="从节点确认流复制"><a href="#从节点确认流复制" class="headerlink" title="从节点确认流复制"></a>从节点确认流复制</h2><figure class="highlight routeros"><table><tr><td class="code"><pre><code class="hljs routeros">postgres@pgserver2:~$ psql<br>psql (12.3)<br>Type <span class="hljs-string">&quot;help&quot;</span> <span class="hljs-keyword">for</span> help.<br><br><span class="hljs-attribute">postgres</span>=# select * <span class="hljs-keyword">from</span> pg_stat_wal_receiver ;<br>  pid   |  status   | receive_start_lsn | receive_start_tli | received_lsn | received_tli |      last_msg_send_time       |     last_msg_receipt_time     | latest_end_lsn |        latest_end_time        | slot_n<br>ame | sender_host | sender_port |                                                                                                             conninfo                                                             <br>                                                <br>--------+-----------+-------------------+-------------------+--------------+--------------+-------------------------------+-------------------------------+----------------+-------------------------------+-------<br>----+-------------+-------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------<br>------------------------------------------------<br> 817496 | streaming | 0/4000000         |                 1 | 0/4000B60    |            1 | 2020-08-14 15:15:01.924922+08 | 2020-08-14 15:15:01.924989+08 | 0/4000B60      | 2020-08-14 15:12:31.613519+08 |       <br>    | x.x.x.x   |        5432 | <span class="hljs-attribute">user</span>=replicator <span class="hljs-attribute">passfile</span>=/home/postgres/.pgpass <span class="hljs-attribute">dbname</span>=replication <span class="hljs-attribute">host</span>=x.x.x.x <span class="hljs-attribute">port</span>=5432 <span class="hljs-attribute">fallback_application_name</span>=walreceiver <span class="hljs-attribute">sslmode</span>=disable <span class="hljs-attribute">sslcompression</span>=0 <span class="hljs-attribute">gssencmode</span>=disab<br>le <span class="hljs-attribute">krbsrvname</span>=replicator <span class="hljs-attribute">target_session_attrs</span>=any<br>(1 row)<br><br><span class="hljs-attribute">postgres</span>=# <br></code></pre></td></tr></table></figure>
<h1 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h1><p>主从搭建so easy.</p>
<h1 id="其他安装方式"><a href="#其他安装方式" class="headerlink" title="其他安装方式"></a>其他安装方式</h1><figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">https:<span class="hljs-regexp">//</span>computingforgeeks.com<span class="hljs-regexp">/how-to-install-postgresql-12-on-centos-7/</span><br></code></pre></td></tr></table></figure>
<h1 id="FAQ"><a href="#FAQ" class="headerlink" title="FAQ"></a>FAQ</h1><p><a href="https://postgres.fun/20131118144309.html">PostgreSQL：编译安装常见问题</a><br><a href="https://postgres.fun/20100731115100.html">RedHat Enterprise 5上安装 Postgresql</a></p>
]]></content>
      <categories>
        <category>PostgreSQL</category>
      </categories>
      <tags>
        <tag>PostgreSQL</tag>
        <tag>postgres</tag>
        <tag>pg</tag>
        <tag>install</tag>
        <tag>source</tag>
        <tag>postgresql</tag>
      </tags>
  </entry>
  <entry>
    <title>有用的连接</title>
    <url>/%E4%B8%AA%E4%BA%BA%E8%AE%B0%E5%BD%95/%E6%9C%89%E7%94%A8%E7%9A%84%E8%BF%9E%E6%8E%A5/</url>
    <content><![CDATA[<h2 id="网页版流程图制作"><a href="#网页版流程图制作" class="headerlink" title="网页版流程图制作"></a>网页版流程图制作</h2><p>手机登录<br><figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">https:<span class="hljs-regexp">//</span>www.processon.com<br></code></pre></td></tr></table></figure></p>
<h2 id="PG文章"><a href="#PG文章" class="headerlink" title="PG文章"></a>PG文章</h2><figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">http:<span class="hljs-regexp">//</span>jiagoushi.pro<span class="hljs-regexp">/book/</span>export<span class="hljs-regexp">/html/</span><span class="hljs-number">554</span><br><br></code></pre></td></tr></table></figure>
<h2 id="Query-Processing"><a href="#Query-Processing" class="headerlink" title="Query Processing"></a>Query Processing</h2><figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">https:<span class="hljs-regexp">//</span>www.interdb.jp<span class="hljs-regexp">/pg/</span>pgsql03.html<br></code></pre></td></tr></table></figure>
<h2 id="进程和内存结构"><a href="#进程和内存结构" class="headerlink" title="进程和内存结构"></a>进程和内存结构</h2><figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">https:<span class="hljs-regexp">//</span>blog.csdn.net<span class="hljs-regexp">/dazuiba008/</span>article<span class="hljs-regexp">/details/</span><span class="hljs-number">80389220</span><br>https:<span class="hljs-regexp">//</span>www.interdb.jp<span class="hljs-regexp">/pg/</span>pgsql02.html<br>https:<span class="hljs-regexp">//</span>www.interdb.jp<span class="hljs-regexp">/pg/</span>pgsql01.html<br></code></pre></td></tr></table></figure>
<h2 id="VM"><a href="#VM" class="headerlink" title="VM"></a>VM</h2><figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">https:<span class="hljs-regexp">//</span>www.postgresql.org<span class="hljs-regexp">/docs/</span><span class="hljs-number">13</span>/storage-vm.html<br></code></pre></td></tr></table></figure>
<h2 id="gis教程"><a href="#gis教程" class="headerlink" title="gis教程"></a>gis教程</h2><figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">https:<span class="hljs-regexp">//</span>www.zhihu.com<span class="hljs-regexp">/column/</span>c_1253365661696491520<br></code></pre></td></tr></table></figure>
<h2 id="刑法准则"><a href="#刑法准则" class="headerlink" title="刑法准则"></a>刑法准则</h2><figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">http:<span class="hljs-regexp">//</span>www.npc.gov.cn<span class="hljs-regexp">/wxzl/</span>wxzl<span class="hljs-regexp">/2000-12/</span><span class="hljs-number">17</span>/content_4680.htm<br></code></pre></td></tr></table></figure>
<h2 id="各种数据库SQL标准实现对比"><a href="#各种数据库SQL标准实现对比" class="headerlink" title="各种数据库SQL标准实现对比"></a>各种数据库SQL标准实现对比</h2><figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">https:<span class="hljs-regexp">//</span>www.sql-workbench.eu/dbms_comparison.html<br></code></pre></td></tr></table></figure>
<h2 id="PostgreSQL-RPMS"><a href="#PostgreSQL-RPMS" class="headerlink" title="PostgreSQL RPMS"></a>PostgreSQL RPMS</h2><figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/cybertec-postgresql/</span><br></code></pre></td></tr></table></figure>
<h2 id="PostgreSQL-MVCC"><a href="#PostgreSQL-MVCC" class="headerlink" title="PostgreSQL MVCC"></a>PostgreSQL MVCC</h2><figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">http:<span class="hljs-regexp">//</span>www.interdb.jp<span class="hljs-regexp">/pg/</span>pgsql05.html<br></code></pre></td></tr></table></figure>
<h2 id="生成随即背景图片"><a href="#生成随即背景图片" class="headerlink" title="生成随即背景图片"></a>生成随即背景图片</h2><figure class="highlight vim"><table><tr><td class="code"><pre><code class="hljs vim">http<span class="hljs-variable">s:</span>//<span class="hljs-keyword">source</span>.unsplash.<span class="hljs-keyword">com</span>/<br></code></pre></td></tr></table></figure>
<h2 id="SQL格式化"><a href="#SQL格式化" class="headerlink" title="SQL格式化"></a>SQL格式化</h2><figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">http:<span class="hljs-regexp">//</span>sqlformat.darold.net/<br></code></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="PG11中文手册"><a href="#PG11中文手册" class="headerlink" title="PG11中文手册"></a>PG11中文手册</h2><figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">https:<span class="hljs-regexp">//</span>www.docs4dev.com<span class="hljs-regexp">/docs/</span>zh<span class="hljs-regexp">/postgre-sql/</span><span class="hljs-number">11.2</span><span class="hljs-regexp">/reference/</span>release-<span class="hljs-number">11</span>-<span class="hljs-number">2</span>.html<br></code></pre></td></tr></table></figure>
<h2 id="JSON格式化"><a href="#JSON格式化" class="headerlink" title="JSON格式化"></a>JSON格式化</h2><figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">https:<span class="hljs-regexp">//</span>www.json.cn/<br></code></pre></td></tr></table></figure>
<h2 id="PostgreSQL特性矩阵"><a href="#PostgreSQL特性矩阵" class="headerlink" title="PostgreSQL特性矩阵"></a>PostgreSQL特性矩阵</h2><figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">https:<span class="hljs-regexp">//</span>www.postgresql.org<span class="hljs-regexp">/about/</span>featurematrix/<br></code></pre></td></tr></table></figure>
<h2 id="Converting-from-other-Databases-to-PostgreSQL"><a href="#Converting-from-other-Databases-to-PostgreSQL" class="headerlink" title="Converting from other Databases to PostgreSQL"></a>Converting from other Databases to PostgreSQL</h2><figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">https:<span class="hljs-regexp">//</span>wiki.postgresql.org<span class="hljs-regexp">/wiki/</span>Converting_from_other_Databases_to_PostgreSQL<span class="hljs-comment">#Utilities.2C_tools.2C_scripts_etc</span><br></code></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>个人记录</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>python</tag>
        <tag>personal</tag>
      </tags>
  </entry>
  <entry>
    <title>Python小技巧</title>
    <url>/python/Python%E5%B0%8F%E6%8A%80%E5%B7%A7/</url>
    <content><![CDATA[<p>记录一些工作中用到的python小技巧.</p>
<a id="more"></a>
<h1 id="获取ipv4地址"><a href="#获取ipv4地址" class="headerlink" title="获取ipv4地址"></a>获取ipv4地址</h1><figure class="highlight kotlin"><table><tr><td class="code"><pre><code class="hljs kotlin">def ipv4_interface():<br>    ipv4_addresses = []<br>    nets = psutil.net_if_addrs()<br>    <span class="hljs-keyword">for</span> adapter <span class="hljs-keyword">in</span> nets:<br>        <span class="hljs-keyword">if</span> adapter == <span class="hljs-string">&#x27;lo&#x27;</span>:<br>            <span class="hljs-keyword">continue</span><br><br>        <span class="hljs-keyword">for</span> snic <span class="hljs-keyword">in</span> nets[adapter]:<br>            <span class="hljs-keyword">if</span> snic.family.name != <span class="hljs-string">&#x27;AF_INET&#x27;</span>:<br>                <span class="hljs-keyword">continue</span><br>            ipv4_addresses.append(snic.address)<br><br>    <span class="hljs-keyword">return</span> ipv4_addresses<br></code></pre></td></tr></table></figure>
<h1 id="list中dict按某一列排序"><a href="#list中dict按某一列排序" class="headerlink" title="list中dict按某一列排序"></a>list中dict按某一列排序</h1><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs Python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> operator <span class="hljs-keyword">import</span> itemgetter<br>&gt;&gt;&gt;<br><span class="hljs-meta">&gt;&gt;&gt; </span>sorted(result, key=itemgetter(<span class="hljs-string">&#x27;b&#x27;</span>), reverse=<span class="hljs-literal">True</span>)<br>[&#123;<span class="hljs-string">&#x27;c&#x27;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;a&#x27;</span>: <span class="hljs-number">2</span>, <span class="hljs-string">&#x27;b&#x27;</span>: <span class="hljs-number">5</span>&#125;, &#123;<span class="hljs-string">&#x27;c&#x27;</span>: <span class="hljs-number">5</span>, <span class="hljs-string">&#x27;a&#x27;</span>: <span class="hljs-number">3</span>, <span class="hljs-string">&#x27;b&#x27;</span>: <span class="hljs-number">4</span>&#125;, &#123;<span class="hljs-string">&#x27;c&#x27;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;a&#x27;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;b&#x27;</span>: <span class="hljs-number">1</span>&#125;, &#123;<span class="hljs-string">&#x27;c&#x27;</span>: <span class="hljs-number">5</span>, <span class="hljs-string">&#x27;a&#x27;</span>: <span class="hljs-number">9</span>, <span class="hljs-string">&#x27;b&#x27;</span>: <span class="hljs-number">0</span>&#125;]<br><span class="hljs-meta">&gt;&gt;&gt; </span>sorted(result, key=itemgetter(<span class="hljs-string">&#x27;b&#x27;</span>))<br>[&#123;<span class="hljs-string">&#x27;c&#x27;</span>: <span class="hljs-number">5</span>, <span class="hljs-string">&#x27;a&#x27;</span>: <span class="hljs-number">9</span>, <span class="hljs-string">&#x27;b&#x27;</span>: <span class="hljs-number">0</span>&#125;, &#123;<span class="hljs-string">&#x27;c&#x27;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;a&#x27;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;b&#x27;</span>: <span class="hljs-number">1</span>&#125;, &#123;<span class="hljs-string">&#x27;c&#x27;</span>: <span class="hljs-number">5</span>, <span class="hljs-string">&#x27;a&#x27;</span>: <span class="hljs-number">3</span>, <span class="hljs-string">&#x27;b&#x27;</span>: <span class="hljs-number">4</span>&#125;, &#123;<span class="hljs-string">&#x27;c&#x27;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;a&#x27;</span>: <span class="hljs-number">2</span>, <span class="hljs-string">&#x27;b&#x27;</span>: <span class="hljs-number">5</span>&#125;]<br><span class="hljs-meta">&gt;&gt;&gt; </span>sorted(result, key=itemgetter(<span class="hljs-string">&#x27;b&#x27;</span>))<br>[&#123;<span class="hljs-string">&#x27;c&#x27;</span>: <span class="hljs-number">5</span>, <span class="hljs-string">&#x27;a&#x27;</span>: <span class="hljs-number">9</span>, <span class="hljs-string">&#x27;b&#x27;</span>: <span class="hljs-number">0</span>&#125;, &#123;<span class="hljs-string">&#x27;c&#x27;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;a&#x27;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;b&#x27;</span>: <span class="hljs-number">1</span>&#125;, &#123;<span class="hljs-string">&#x27;c&#x27;</span>: <span class="hljs-number">5</span>, <span class="hljs-string">&#x27;a&#x27;</span>: <span class="hljs-number">3</span>, <span class="hljs-string">&#x27;b&#x27;</span>: <span class="hljs-number">4</span>&#125;, &#123;<span class="hljs-string">&#x27;c&#x27;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;a&#x27;</span>: <span class="hljs-number">2</span>, <span class="hljs-string">&#x27;b&#x27;</span>: <span class="hljs-number">5</span>&#125;]<br>&gt;&gt;&gt;<br></code></pre></td></tr></table></figure>
<h1 id="两个list生成dict"><a href="#两个list生成dict" class="headerlink" title="两个list生成dict"></a>两个list生成dict</h1><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs Python"><span class="hljs-meta">&gt;&gt;&gt; </span>list1=[<span class="hljs-string">&quot;a&quot;</span>,<span class="hljs-string">&quot;b&quot;</span>,<span class="hljs-string">&quot;c&quot;</span>,<span class="hljs-string">&quot;d&quot;</span>]<br><span class="hljs-meta">&gt;&gt;&gt; </span>list2=[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>]<br>&gt;&gt;&gt;<br><span class="hljs-meta">&gt;&gt;&gt; </span>dict(zip(list1, list2))<br>&#123;<span class="hljs-string">&#x27;c&#x27;</span>: <span class="hljs-number">3</span>, <span class="hljs-string">&#x27;d&#x27;</span>: <span class="hljs-number">4</span>, <span class="hljs-string">&#x27;a&#x27;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;b&#x27;</span>: <span class="hljs-number">2</span>&#125;<br>&gt;&gt;&gt;<br><span class="hljs-meta">&gt;&gt;&gt; </span>dict(zip(list2, list1))<br>&#123;<span class="hljs-number">1</span>: <span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-number">2</span>: <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-number">3</span>: <span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-number">4</span>: <span class="hljs-string">&#x27;d&#x27;</span>&#125;<br>&gt;&gt;&gt;<br><span class="hljs-meta">&gt;&gt;&gt; </span>list1=[<span class="hljs-string">&quot;a&quot;</span>,<span class="hljs-string">&quot;b&quot;</span>,<span class="hljs-string">&quot;c&quot;</span>,<span class="hljs-string">&quot;d&quot;</span>]<br><span class="hljs-meta">&gt;&gt;&gt; </span>list2=[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>]<br>&gt;&gt;&gt;<br><span class="hljs-meta">&gt;&gt;&gt; </span>dict(zip(list2, list1))<br>&#123;<span class="hljs-number">1</span>: <span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-number">2</span>: <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-number">3</span>: <span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-number">4</span>: <span class="hljs-string">&#x27;d&#x27;</span>&#125;<br>&gt;&gt;&gt;<br><span class="hljs-meta">&gt;&gt;&gt; </span>dict(zip(list1, list2))<br>&#123;<span class="hljs-string">&#x27;c&#x27;</span>: <span class="hljs-number">3</span>, <span class="hljs-string">&#x27;d&#x27;</span>: <span class="hljs-number">4</span>, <span class="hljs-string">&#x27;a&#x27;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;b&#x27;</span>: <span class="hljs-number">2</span>&#125;<br>&gt;&gt;&gt;<br><br></code></pre></td></tr></table></figure>
<h1 id="List去重"><a href="#List去重" class="headerlink" title="List去重"></a>List去重</h1><h2 id="方法1"><a href="#方法1" class="headerlink" title="方法1"></a>方法1</h2><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs Python"><span class="hljs-meta">&gt;&gt;&gt; </span>list1 = [<span class="hljs-number">2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">1</span>]<br><span class="hljs-meta">&gt;&gt;&gt; </span>list(set(list1))<br></code></pre></td></tr></table></figure>
<h2 id="方法2"><a href="#方法2" class="headerlink" title="方法2"></a>方法2</h2><figure class="highlight angelscript"><table><tr><td class="code"><pre><code class="hljs angelscript">&gt;&gt;&gt; list1 = [<span class="hljs-number">2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">1</span>]<br>&gt;&gt;&gt; &#123;&#125;.fromkeys(list1).keys()<br>dict_keys([<span class="hljs-number">2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>])<br></code></pre></td></tr></table></figure>
<h2 id="方法3"><a href="#方法3" class="headerlink" title="方法3"></a>方法3</h2><figure class="highlight lsl"><table><tr><td class="code"><pre><code class="hljs lsl">&gt;&gt;&gt; list1 = [<span class="hljs-number">2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">1</span>]<br>&gt;&gt;&gt; &#123;&#125;.fromkeys(list1).keys()<br>dict_keys([<span class="hljs-number">2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>])<br>&gt;&gt;&gt; sorted(set(list1), <span class="hljs-type">key</span>=list1.index)<br>[<span class="hljs-number">2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>]<br>&gt;&gt;&gt; sorted(set(list1))<br>[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>]<br></code></pre></td></tr></table></figure>
<h1 id="List删除重复项"><a href="#List删除重复项" class="headerlink" title="List删除重复项"></a>List删除重复项</h1><figure class="highlight yaml"><table><tr><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">&gt;&gt;&gt;</span> <span class="hljs-comment"># 方法一:</span><br><span class="hljs-string">&gt;&gt;&gt;</span> <span class="hljs-string">list1</span> <span class="hljs-string">=</span> [<span class="hljs-number">2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">1</span>]<br><span class="hljs-string">&gt;&gt;&gt;</span> [<span class="hljs-string">item</span> <span class="hljs-string">for</span> <span class="hljs-string">item</span> <span class="hljs-string">in</span> <span class="hljs-string">list1</span> <span class="hljs-string">if</span> <span class="hljs-string">list1.count(item)</span> <span class="hljs-string">==</span> <span class="hljs-number">1</span>]<br>[<span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>]<br><span class="hljs-string">&gt;&gt;&gt;</span> <span class="hljs-comment"># 方法二:</span><br><span class="hljs-string">&gt;&gt;&gt;</span> <span class="hljs-string">list1</span> <span class="hljs-string">=</span> [<span class="hljs-number">2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">1</span>]<br><span class="hljs-string">&gt;&gt;&gt;</span> <span class="hljs-string">list(filter(lambda</span> <span class="hljs-string">x:list1.count(x)</span> <span class="hljs-string">==</span> <span class="hljs-number">1</span><span class="hljs-string">,</span> <span class="hljs-string">list1))</span><br>[<span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>]<br></code></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>PostgreSQL Database Administration</title>
    <url>/PostgreSQL/Administration/PostgreSQL_Database_Administration/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容">
  <script id="hbeData" type="hbeData" data-hmacdigest="cd81aa0814e923a697ed67186dbf4384fa32d58a872898a01458ad49edf6a32d">3ad36fbe015888230eaeae44ec72551dac756ed2e7c19c00cabb19997192043a97c2902aeff89eff3260a2a6e7a3fa24af082c8b7bbffd34c0ca5adc8115ffff0abd4034c55d3e5f299dc3c584598c68bdc0ee367977f2137cdb0e533d4a7bc4949eeafce812663f87fa1b7229b573ec2fae555af5c336e17bc109a3ec947a76bde02166017f73fdbd5e3a5c005540d272677925c57cbf6c06b5559ac4d5d9cf82f17ca500107ee001b3799745d0512f47cf33c8f6606e7d106234228011b07e5d3e48704a8b878d2ffc286f201a7f7a4917cae8c59f0fe51f6e58617a391d7c17f6df5f772c26601973342ac5d32cd6cc615aec1f0d9cfb73c34422f2e9dc3d4057b543ec07f96de6469551029c28dbfa986d7b5de539dc5c69430ce4c80097531892b3995afe58e61f21778bc36ecdb11cbeaf4fec5f7a0374507cb301542ab14d7b034aedd5e9d4304d13655aeecc6deb99881e257c431a5a411c597ffdcd54ae972ddaffbf19dd461e2c65135b783c675cf313149f5644dda56d0ac10dfdfb203572e63e8bf48034fccba181d067b432bc9fe838b9ed52b92d1ccb9ac521d44e69396aeeaa7d779ed7f0a3b9619ac1f6510f01d18bf025186bed9c9258795b6747f31f7e4100d4f8a8a77d4f34e40c7504b77e69e8696948cc2e08d0924fbaab2f62a9835532a5b86a8aae66a9842030fce1fd1d5e74046ad88d62124eddfbe4e36f3f664c2f924611702e999fa7704b7b827b6c46cfe180a05a7778875a82a47640663210633d9268255b79950748a40f6bf23b60a1620695e201dde7b60273454410287096f773bce734b4f4978f6101b645d293677f97fe8a70cdda6e13082d3be90911b5b4b287177a9c09f7e19c156ae1f44477ea745da251ba8896d0894153dff1fac187ee33da7d7c1d10eeba44a716972b83dff7b0c2948fdb0804b0c2b23d4239f64bfb3536b7424ce7926b7e909e08663fa92be7c4fc0b287d3ea33193c388d9dfd25f669bf44c5d4f8ea39ed260d1e2217b8437fa04104cbdc4e7acf86984d613c03f96df3fb652643d84d02bb506dfc764ae6e14e630eb3e61701f4d75865858b506ded9b052b62580947749c41c55ddad9955525c2956227f192dbfef38361341869aebeddd65ecb402a83382a9162f4d432cc63f679d4470c6e1c172b659b324297459154ce401177b46c966aa49dd806ca5eb29d374496531275123c3d2c5a433e91980d3deb0a3f8ba766642323f1a082ca5afa8dd50c5395f14e134cb6ee329670d6d48d74098b8c43d93cbc81247eb822cd2b9cd1de098b163f068e2710662e3525c657fec54650f92f8b382e97489382c49cb769eb3e3990c0590461f5b1cdc980e32976f03b05a5e29ccd9d06de3aa8d5bc1ac59085af347cc03bb6e9b9838e3ea592a09f9821618e013fe895999581e70ee5368aa51e146b789b14407171e75241156377cd92eaf420be3aa945dc37709b8f5a8bd5104319c7e7fd97eec3e1c77ea9832bc5d9c9adb282b36475c88d7b2d82e3758bef66975629fb9523efac9e3f673de3a94599e80d2cfcc4994223c74a6abb98f8c3a547ff8c46545f848ccd678f81d5775626c12b0d23a9f964d94e42800023d61d8217f953ff13138ec0d48f6df268d04fc48a21f581aa36edc84e1291403f79c1e1ea27c0e8a06c056acf6e86266cccdb83d240f37b57aa592f56fd452e0b6e116a3c41ddc902a4eddcf4abed12c7d804b9f66a0cd68f6d147508590585b272a05cfc25451a5e4b2cefd4f7c867d1c1e5c9fd0e1565d8e5591672733b954ee47e9e67885a1e7f0b64fdf5e4e916ad7689e7e0ca90212e93147578d4a22a56d12d79bf3a6f9b4f63bac719290c4c2399d53691a6c654bde2f46d9c4e1042fba3aca07122f013ea1e76d4883c1592a947783442695d303dbd33ad36927c5b295624efb68b5c0b945b1d2412f0328eb782e3373f6bdc61c71df446feb3a60f926dfe4acc7a3e151212ced159c18593649785e4a06c1c1553c5ae9c3f2c11fb8f9dbe127a9eb15d19739fde015b3e83c65f5d15a600072e36bf6d06fb6208e223e2464449710ea61ad03f7c532411b515a46bc572598eef05386f538a1ac7d1e6d83565165dfb2a173253b136add2f32d83ba42043f97dd2af6e5406c5f5f8aa342ab95cb1bdf2707e2b81d522e442abfe3daadaed5633cb2aac8528d53e8ab765a87cc5882704e6e838b8b15ec87ca6d742fbae6a3d78871314393194d64625b8105a6f30b2e27e68cff80fa179a1845a50ff1079b796b52ab461b58a22bf74f6d12fbf30f4c62a45a0253c8b6e63eb77105bfe3f21814ee3039e017e6844467dcded8bb83a8c0cef68f5c20d8b5eb27f2348829be5e58d26ce808e707253bc03621dee5aa5c45ce8e148a99b2fffcc28205a15c26d8e5ced36a17efff800362cb68a68b73a06b361f3309474606820072cb3179d6ae33951be1e8a87dfcf599145e8712482cd4513c2b224c2b56a85b272df7bd7f6fd6b53168cf709ffb7790f799709bb45971036df92e6af4baad6876b4108c38a0263944b2e929f6fbe4d9f42a133e8e6fa68c3c45c189c49676e07e3b722f634f77c7e0d227d6374efbb51be1499b5f46e8ef9e060e5aa09c697c5bb8f181c8a78e68abc563724c4c0f3aa3ca5a296b9049b64b4380e156d3dd1259ee3b2d74f40c17bb98c77a7364db81725b4a9d54918fa5177f2fe69ddec0ab7964cfff92bb0d56b4576abfac4ebd1e82f2934b95c9be2cce0b63b5f82ebf18c814ef768a35554da8d80b78cf48f4eaf296fe30a203f081d62b219e1efbaa8c926a2b516709e8678484688176c6d9723f225d9a83738d5b5eb9e1ca40d0f38c9b6b1eee9f139cfcffcc6bc3f55a5fa47e5afe28f1adf759d81d394899b78cdc98da245ebfd430da02f4deed45d0b49d9167a8de391986092e23b3ad460c476177b4b9d05a0e1f1c5ced66dddfda229ad418bde5a41f1232f61702c266fe56105e853ac1d0a83849390f0c11dcb60158e985d0362853b666730c99df07d7646457ef61640af92f32b88d20c838bd3e892df2bee4031296e1be3dc55d2ff2c934d765e953098e44863511506a2d7d3e7872ace481ac4107313222d5f4be1099ce2beffb8b0503b923969415d48b18afd5837e511390c19ab5c0a7717b6668f11428808aa6bf69c59e6084912f67374302773b0bb6f872951c35e1ab157a73a51db57b915b74f79c29e5b28bf5751e1affbed44c66f5a3a0782f5a731ec2c87bb10756694393a2ab380c0148e050b17cf2530784e8c61b898bdcf4cdc6f5e7a4e2d96ed02884361e4830ea983ec8e8985bebfca467f3d557f487b666962dbea77227b038ec3a2d2d0ac51e18876c29e8e1953d79151d9210137fc6f98a9eac82aa28f6064cf9b961d38f72f8f1243be655d19d036eeecb9e01cf6a10806ddee8f7c915f7a55c66c0c672ad942e1c61379e61eb5a65064c1155982559bc49e831614dc81aa850e7bc48ecd4bd44a81c3103057b69c78b331e4dc055788dfe591930c55bdc0da241900090d86e6e2ac5ec53ac8dc2f69bbfaa588f814b321b92f60fbad2a99db18bcad89a9587eebe743dd02166f12b10718c0d89fb74d7f4974bbf65601d1be02d8faf6fba9cd5908b5362b37dbbf87ce047f1b80fcaa7db70e2a34c560c7adba1cc94296fb0b86c6c7f31bbd1070fc866d16f79ed74109b6e6f21d403e7ce7871fbd6875e30efcc738f5e89917d0b46a8a71b55768f5c670100f33f4138f1bd52ee1fd62526f20fb83c6c54770a8fb4eaa57d2d14e1fc6e84c9054a095935fecb653b28cc46750416c9bf5b018c787f3700f8d5734ad16265c5402d9817bdb7df575ed3a7169d56913fec9f6ce591982dd773756a24b074373fdd0446c8fafdd668876feb03a9c569dc608a1d14c53ce88ab5dcb5387dbebd3eb6c81bfe143c0ea4b6e4d8c6de7869850f6f76a45c180443d120b62f3bc7a5e4965cbcc9f8d9f2f01e4b49cfc067ff31a96236079a4df96cb51fd7843e67d66bd4f9fac960e3456693abe68068168e98f2b228d9de74790c338bf1694f744cace628c52da3562fa59a9bb93bc7a437f49cdb9ae9dd92884679b593f08a7698e82a674484ebcd29a8147bc562695b6146be3b410e7cc234ea5925eb94c7823b1a73c35e554787b66ad0e8a7867d06e426b5ef5378f9d8a40c14ad1b5b33ca8e6ece2455ceb6a22de17de52db01f12a89a991c0dbbab7aaa87f1f9efa2df29b2d5eb473633f08ec76891dede7f9a1520dfbb9fb39c7ed0e025676757ba781c08b06501b6093ac21f528231be5b6e9f7ba83cc52e78ffa7bbc59086a1e5d420cc75135f22fd37b97f7af2481a8cc4b2f58df3bfc3da61e8c8b867d0ab09b898db3b4ad271825a3e8be7b4c6b46e35380542b1d825fda787ee3273ad94cd84282ec9f8520daec0d3295c70965eb96564e8ed2844815941f2e3e9925af32755af33c056fdc48d17f735f4369c5a118032f6f11ec8c95636cd6c4a0e9e9da3862400c5ebcef22c6e12db7a8864c51c25d365c5128b70964f5bafc3660db12c2ad06ad01887d7ac5c4042cc3ebf6f7984addd80ce4e0b8394f83ef5bf1ddc1ac778e6f9a77bc537e4c1bfe9621a768642ae638532664eb0dd9dd3abbecc9e45dbd16678bc500d6376e00b046a7996e4539cdd520bac446dce689071a14a5fe21e2d40739b296ad9fdae0bfe60557d99852983ba5cf048a5faddeb7f91a78156afe9a38448dbb74d348b402431079807240ca51af6c15952bd5cd213a75bc647f6c348a9bc3c044fdf99f27e67c731c3c20774ba2a186d9764eec588af1cb749d897c937b4a5363cdeff840620f369688eb0d239b695fb5b0110c6c5bcfb23a3254879fd2d27e6efb8220efd14ab7f9520b11d414da6e7cac424f37c8e2f42da4e391236e233ccf01ce4a438d70ee37aebc6d81b184dfb7fafa3c766e86b9df04773d23de0aa466df9d0a789fd65bdd25021b69c13310a4ab2da0d299836ec4832c99de6569c8f82936e99988b871b32424c1dd460fb778e4de138b72408693a72a7e68b0cb18025da38ce1e20c1b81e15cdd38fb0e3f88b52194adae8e0fe36244c88b69a4bcc4f3ddb77ade6bef612a72f453d6487d513b7804e308320be5ddc6a73516696a287e0e248351e2ad582d496c38bbc53797090f2c9939f23de048f0ceaae3d08e01ec9c7223a7ad6829340ffbb3842428511569f593cf08c6e01d099bea0e788a1fe48f41aed05025d7f08db587a2458ef61f55462f4ffa7e3b4e9313560ef6d2dd717390d0c96283ada51ac485f05579373025fa5da46e5f67f0a2f4a0ba2607d0b58d28fe96877119d144a820c21c4305630477e73062243e31b4b9e39ef0a23627949ea9f9f5e2667e184a4f97ca79eb55ae904ac0475905a7e215bba8cc5187a09b9354b1fad967cbb55db036f94e8dd67b01f2c2ca220150b996e8c8bbedd2f90456ba290572b580e630ca085955110db766f2970a287a73bc8942192b5e1b042a6f06f4bda92f6d0fb50ed7f82c192da18acbe5c15eeab102058f90ad99eda68bc4f010cbd4c9526289fd4819da5b52ded8cc10bf318a691fa8352c608977766fb00ebb612b4e4e8ba386b78db69d04a1440172a10d3f039e8a5a207ab727a18b6e33667bc422414eeb2626e85321554292b36e51bff1f0a6efc33a83b101c6cfa9d6595bab721daafa691187c984ceee14bcc8ba5914a6581aa9a29996fbf98f1f667b9670023f4eea1bd5d77d05d7a1e986018ad63b4dc0ff8d301e7af2452542ed220872b9ef4627b280098dfa709c6df3aba85a8dc6498ba2b155c4eb0d1ababc625adbf150bc4b4ca33d4cf74dda35d8d871ce07ce8e7b3d8689e21ce209939a6748431bf695546ec08f6bf32876ba6f9598dbabcb23532edbf59e019d759b4be00df55dc8ddfac887f9768f84b4800d0cd39c06bb6338474fbcd6b4870ad5b4afc5499b68ae2226ba12d1171011714346ca24233239f61e6f119fddabb87a4f033bb1cf1a0207578d3db20edc4175766f569c0a028c10c8e0f5a9f0c63cf4064439888aa0da6f6e8917122bd8abfe5f0c3d18cb54a21d2cb171d74fd87843001639b67b89d226f6da103a96af1aafadf359ceb8d52ad50862e4f42bd85721ac3ae97fa734f911f89d5734b4b8022189f42db034084711e0eede4d12fd3e0f92c48fd313f101ec2be6c2facc9264680c1cd83ca881153e3020fc670be19174c615d662f1eb86d48b4a7c3ad1073159c2743c1ad8ff6223f376f5ea8b11f4e71c50a2e024671fb160394139b121200e4c0fb4f9410af90231757346e4c13fdc41c30f6c9933bea227e56dc106416a1237d27ab95697845bbcd5df16a6a9a8c8aadae55906e11cf4a16b7ab8433b4ef8a775cfbbcd74765975562ce567a7f8bf52cce7fffeace13eec6343d17baaabe1198b9713dba01e5f04c67f3d84102963b3316b794d47805d7fce3d711ed457e9d81cecddf619030bc0df29ca4ff16defd079b93a9e87cfd874bb1ebbb7a7a9d501b13a2f6ca1bf2ff0c0917902b50f1e5bd3be2dc694914bece156f8ad17783d97553335c20751b3640ad14a731a6eb558a947ebb2a5e66915e94df311663e49c57ef933721d23d5e5e8f013306c586748e7c49200828eebf6cd37323bc63f300e72bce7450dbf2b23bfb6479f9fc5983916cbf051a91a48393510879ef6ab0d25c4dc2eb75fccb58d61d507ab0cfcfcd4e1ced978861552661e23bdcff7babebbb5ebea10178c49916ac51e457bcf4d8bf25fdb439683d39cb2dea0814a59119b138dbeeb7da515ebdce43bc4de62c3943b385f5d1a455ea662f91c9a6e5ac033fb273a2726baed26d7d4748423dd744021d06d4f6f027c74cef8810db513084faaee4d61c8149cc933ac9e49344fcc9b1c3eec408d3654309c51fda2c1cf363d8da60c45e87b19de71e7a157cacbe229221746ead68343484b910011f41a08c68ed48ff20c5d401b18e6467d8e1c4d1d9e7fd13a4655b3afe1f84a7ec2c6e4a08c79a47987795d141cef11f917539aadb62a97e3d3c388eb43efffba4e84d8591b073c7732e666942fe8e05862d9715f0e0504b7c0ef83bc747f24acedb448dab380975bf48808a421ad6911f2d4daf6e498a903b7767ac3f062ea2a8d8b7a2b05a697dee072effe4469fb49e22c7ccaa9d0f8a7bada08325d69d353b395e37de20ea6946b4c5c428b3da831a2a8047935f62508480fa5d993c663681f11cad961455bcfc370b15529c380a1cea3712fba1f7d3a4ecda0ff7f5d24bea212c422cb1ab2e199d9250f716421288aec65c83990e556faba19533f7324912b053620b85f5a6583cceb444de8a3a89b3ff91e07e94f77c410a5653e0ad12b2752ff54559d88de88dc3ac4c6618bcf0831ea55fff782fb1c0d976c615e6808d74d111791a03aaa8110e641e4e4105f771b5257a3a26b95a93d5f84be02f847c150ac224f31e557bd036f5601897535c04e7199f6095c41ef3b0956f0e6b1b198c09469639e692fe3789336d215b13c55b4c70bd2f6ba3bcd593050af8bb93891295ca2f83291001880843d638eae68d799e8c8ea20afc8b02c21da05de85a0c7c9d2c7d783c99aa5cf3fde4007c529d3759182b1a6498339c8ce47cbd0d45ccd1aeaa2904bca635da109872d2cf93e09e2e2210fe030a0ad8e9a1c82ae6a626f8327e313c3bf2a44e2d8de35f5ead60b40832c51ff3f193dcd133de91c1794b87176fafefe2792c4949e9ae81e22120b13acf074d6f8942bfc51b33fabca11c4f14f523b1c33988414c8ab8d0d14d1bb8587eedb9f25239d010c1c29fe6cec8f8fb4b31ac85984de859e54bce316b29ea94bb6774d0e4e1f9bc88a2b8b4f99d1e545089da135959b2d4b09aba03408927cce2b49088f0b84df2abdcea7bc04b5a43a59e361134d7e62cdff776091902298ba5d89b0fad1c70244d7ee2845797b4762ead4cea87b6a4fc73e3f3fffcd13a85d2f427bc4fe71061656738a9aac85a34f77987df6d0c67858fa6edea49ebd5e58d9ce13f91d3d7260f93ba7179774a641cd92e84ecf49f264ec0a17559ac32017450f8844490444f6d957fbb6a3adc8df52a1fd5411d8fdf786fd8cac01d15b827964d2b8d55da3c36ba6dd3f7a06ae70478162db0d3feac25f211f14f5e0d4460da001e2f5a1bac0509a30c2068719d3817fe709cb5fc0e9556671d455c62f659fb35fc8b935bb423432bca7dd496abd0fa25ae004c0e52235362c1f47e318a9c789314f1313764ff7a45ec3f5c3a2001e6283127727cc9e87768b0a683502081f71806005dce580f36b402b852c8d000c8f4385c80239257d3a5a7d91720154b92c767ab39046381df555ea2a615d4fcf3d0513927096af75014ad0a2bda4c4ba7b3b3d8cfce146695a195e709f0433f93e1a15e4c6218a7f7d9e55c5a6e867f727982b5f58f32f5db005a911797ab36cbd632f2274df8b613cd786b5db96c2ba05b512db45dc824bb82ed8d0daba609ee7ff46e670e96f55f6a8cf7b235faa974c9c1939aa3955091746d00fe4ed0d941ffa3d2b3fe0c115ec5a94c8df599b24c70ce26cf840335c1cd58a4e6faa13eaa8b4f29756c1206ab5b2bd0b6fd1211ce5bbe911397bb716332f76e2c4b34a69f57953b4ffd869ce2022cdbddff494ae59b954168f93e38ef53fa4d49b584a2c2f273a43082745300b4e1e96430b09941c89298e9b7ab325ab58a242d000fbe3b8840b847f1865fb6ffedc3ad4abc786cc492f2e116647501584d54938925b6fa515deb35453186ae52014b48bb8b19bf8c5f85c3b0e73276b9653e41688cbf3906d6b4b0dfdb5914df5ad2a314ef0a35522d7d027f5413b71814f71a00cff9a40755e38e216cace1f707a8dc8bb2aa3dd273ae67328df8c1f889ebf805c34bbf2e3a2f830ade731ed0346dd749f7225719b33f7054db07a7fd0b61ea73078da2cd075a6fe244acdbb0d765840e79c4ea1741fbdbf2f010668cb51d3904990c7562d5620a584762859d81c0c6b1d91f676420427d5c82afd34ec0dd826e4b986e7e6c760f72d2d7a36b8473de2ef07f70c89e1d71e567fa70de5cbbcd959e103ca110c802f602a2d2d4c331b616118d6dc996e28cc04bf1abdcf95b9148e77857bb971ab47563863f180cb1e0c548f85f2d486226529eca22df357a8565a2f1e78a95f32f0560f27591cdd62f935f1f15c2a8d506c08ffe8413ceae301e1da0ac3dc360bab89147943f592f52fd161ce4555d3c63cc2f43aec4a107357b1484f6895623df120404fc9c4184ef4e884df49e7e06b4010379e47edd39c95ac8387fa355ae01cc1d0c37e9b4c528443d069ab4b23171974590bd1d6495f6578cd517f40151b8e40b3a60e7c573411a17837ee0bfc2e2d73c4cdd3b616477591bfd31d89e63e6e433a925897fcf7af58a74f221470d5c9dec7909aaf5955af94a43df8d714136ec61886c1510b3786208acf3320bfb175d82282bde1da5150e5f41ac137d8fd0e9759f6f4867836bd1ebd685e5279f53b99bdb65188567cea722825fbad2f99173242c73e693326c25b5b579bc0364508acecde0eb0c5b3e5c734a05c747760e495ac22e245e91f8c3801baacd2df1bdcf838929995f502123e73857ba9064288e7ffe05ab2709ae7d603e3d23a70ae0cd66e788d905aab196390078d2850abf21cc4017e09077cd94402e4ade9c5f012907c2a8a5f60e281294e3ae60a560b96572d7151d3dbf56467742a1136798ac0af1cd06400134077834e5424c2c57a2c679254257b98eab4a4a136e0c0950311f1037bd31d072097689dbd97ad3bdb9accb9f2c75ed3c5cddc869328c921e227967488a76de4efadd396b846bdd4eb399629760203f33ae1a9592b93301b6d9888a908d248745137b55ee8cb69c2c51f055e1cbb8da9ee9ac98b686894f786127a0fd06a1f42cbfdd3f52f0c652466e610533710f0081f5b2b3c1ec454cbe531eb934bcda74a7d6c2a76c95c91739a5d81a8e9d5642d11712334883ba7cc8a7d2a63facfed65fd2ded365d0712ee419c710983652399842ea2835e1eff485e463c25fc310a508a7adce3d2f0af693e42aedb6a9bc2332fac39f330c936fcf0532f8d6acbc0fda556d7d8b6aaef460dcf5dce9b254c2dcc78841f9b5575eae72e06a0df41caa7c4ad8902df8404ec02b23f8cdaeaca66fb98997a57cee1f88216f74aa484d3438cbab223e2fe6029026b7086f590abb822ab69e0dc9a4e526beb1451b6451e0ab793ee7abbac0e44892873d775b73132068b7d93aeec84f69c1468cb6b6ad1ab412581baf30581464c49b21a227b8b82e95c9f9c55ae63884a49e7af812a9e172c7bdad7c8c2167a86a023c23cb2279cf692ebe77add493d5ffc86727b40b63932769004a036b7e12540c9bf6c2a06e598d915b6492f2b612c4b7afb332ad8512285fce45a5bfd881250374793d66cc7a5d88c861cee24a7b6a14a289a9871f9a461776fac3c7b61df7298ac150d3c60802789acd425f12aecca8c93940662dad64c46d17a47ef99b07cf657435b23b92c951ccfcc0596b6feffa1922acab90ef6bde144664924fdc6aecfc583ac0e280b5f402ce4c2ad53864cec0a81fd8f09e5e94bf29d41ad1faed9d89ab24d5fd6b8e04c62cfd1086e7b5172bb7c1117660caa840d520e4fdb486d8c22b99e09de29b6e794dac1eba77e92c634b87eb5444a9ef154294ddea61eebe6aaef77b2b1832dd661468232effae3ede5f40adc25775d759f266e4cda4d2b40b9f97d408878b88466466749bb7a29bf946480fc0ee25274a9689a342054d37a77df05f5e9f17a58621b58fc78727a67e684287a0415e48a36fdef0d1d995f340a119804327f03ad8b1d3b1c1d926547eec5e867dcb0ea36c1e4750e683be671709c5fc2e290685bb7deaa4b55a98f5a30e1a901827c23ed48d813934c42d8c60087fbfc9a65dfb197948ab35e1176ca7501fd2d049525ca54011c243f456954a8ef973ce08e07ce8f49b9aa99dea54536987b9e1809efe36a076d4b465d34b0cc34a91e595e52711037cd2a74f55eb1b55652a19d80a33aa4a2cd6910214e7368773b38bc4c53537e90e2dc8eecb0fe3b6e8d24c74047caf494c3010d82ca1f735c790a94ebcdcee0c52a51a405f9bac022662724f24a288a2c43c1d88c75cb8ed2ef0d345788c60ddd578c4ac962c38be33aa9e8fea0107ec09925c4a3d35b5528765bd8f6c6e7109a04638145f1e82295b9b8d4f1cae36432d94d7cbc5b94d925eee1ed35ba864d4a4cf3520280f1a2ff740c3f1101f871601058d00e846d7862cbb9038b49f583d03ec05f708b2da8905b1ec3a704362780e6333d838f770ef47daf02852164f5443cada41a47e540b39ae01e920eaccc7e602a7d786c04f469cd2987cb565b2c9cbdf709dd3d27744d26ec272ed3247d2b939b5787f84dd30a66b2166f7238f14053fcfbd0316658764d2bf37a38d4427ccd245c471eca348c9d83e84f470dfdd1623398d96fba967a9f02a2b87f32ed9e8183f2fee0473962256d2eea645a53314bd6c1252c1d3acd2bc2fbb93299144d6e9304e20d4776fc620ccbb8807762f284d79c28075f7a7968106df8d1a2f4c8b4ed432c55f5c78c9a34182e05b816cbcbf5ff24dd361646818abd0d87fabc77dfae0b732bfa9ef5f0656e482732a2171cba666c1362133680e81e8bf116e33e7cfeee256419b386c967aff2ba40083b51dd24092f9ea1019b4e28b98bcae8871ed60aba604b37c72e994084bf2ca2f9247485b49b7e0b4ade29aca8faf6d2b3a5d4dabfa40ed21b059c44fe8e0fdd3441e999c570adf277588a2d88377bd7fb973816fe9ad7b1b12d4eb23cdc2a3a6b1f570dc2f09c51069f29c33e2c68d9f77d95951464b6c915184db170d0d07fb8521c08907f18546f61e711e186e3abf29fadadb811b033a0b977408081549e2c71b23dbc5ab52bb03d5978d8a704bee52c6651e16b30a7f545fa9d1a9e759b8d235440531c1a0976ab4b8fbbabc33695dec06d3778646e2a5688112b3594ad58267e222589b325961ad1a5198aa3e8d5dcbb4856fba32676753e9ac0b0f674221f280fbee37e0ab4c248f9965ff7767792dc5ecec59cb9880186e0806de3966e916f5e00545aae84be7aa177d9aad517a6584a424ad1141f6040f2aede2a2ef4afe4befc020fb7fe5d2f852586f9a91a603789d22e0968fbf3b028e010628e3da42a299052b8345ea3073d7bb94057b700d56d3f84521d7e4104c2a727cd879e4850d0dd273e9a5ecbd76958cd8a2f31dacd598df29ac71d6f48a235cefdfbb3949d57cc5aa38b169670da9dd49636e7d69472b1a1629f537cff520a03c3ffa4bbbf5ca17ef149b9b7810c750e0c8a4a54f1db989dd1ac17a188fc903471ea4eb20a7cd201fb2e8b9860afcd81fb46281b3485cbdf130438f4d69034ef1c9f20b95d7d9f79218b18c1d728387f172f5038ee50333e715509679b2ad5b370a0dbfd6a81f4ac59cbc23c1c2665d0b6b8164462f63ef7f103446098ad049f641e5b1d274d66cd5dc0c47a298ed84943f674b321bcd67d77901d237e98070b94cfe91cf0d872b23048356c857a756fb1ed1c33830927057184bbc2b2c40df96af81ba1efa41e4fcd2eb6ac8a26500fd9cc5e7a47542484a8cab4eb547bf96713dabb367240266959fe50dbfc29f2ee5d725c1a2f27189b9992e8a60385ff7ce35f34c7b273fdcf2d279e35ad5bfe6c8cc383720ffd6c3b8ec6236dd8f213c996dfb020737fea6596c2f076fc7ada28d1e51ce5b779ba321659a84e62199279ba8ed8040abc0c5318875eab4f19ab6eec594dab8e1d13ee3fd96fea57a08c7e18f16fbeba12914f72c23a6798bb571197cd11166cacafca8a3d009a8b4936d8765ac35eb8000f0fcb4885b306430cfca5d8b281519e2afe6a2422ccd70437d7efdf792b74ff0fdc1c810862f61410e0fcbfa18b1c5bae4f5330bfc1994d1a29f705aeee5a94275b36c8f1f912e4f90680b4e505c92240ed4d20002dd3dcffe9673a0f43704320df7a16aaea5887666d1f6227aa47ad6fcbe26240b5797132caa0c105261684040178eec64ee828a22daa648c48a4b677d731bcf440b4bd94c9078d059b8e8945bc4e8fb2d156a3e516393ea9ab29945bd76d69a87f351c47f8cf60c7ebf1068ac138be773e871337ad6bffb99585d7f0d204e2fa01ea8b63303c74128cb0b7e1026a11e51aa04f4321bb30aecb7fe95e5db569d8e05c429839c404faf43932145a7e9e424f38012b7a29de8d19987d87643df00d4ae7264f8b0a723a2fbc8c4df2811be4bbfd99b7631e99c0d3e00698ecb26c9366f029ca7411fe1daca37f691160c73477eaaf9d8fde639d95a4f39b225d4b1fabf970958984c4dfaa72370505eb1b67fa02870416e9b5c6d690a0a8ebdb110f305b43a3eb0d033ca5247bd829d5b4d3e1985429e3ab55111631f19c884c6b944557e47cca7cea1f0ca44517169bb313c8cf3fde3585bf461a311853ce2f4396515d37abd0e0df14397cce2287ac28cff541a603b2f5d344bd91933a9cdb0e9f9ab6a09224a3b9ece6a84bf7e8e658a265e5d5b05ec49b4c0ac5a815d9474ac560aa2c7ee603c91c1890b2fb82b3ed1e07615db6abdab028f56bd6fbc7eae6f21c44621b5317ddc3099973786aa05ecb127f0c09f95546f32e8de88304fc589c36ec3e152f90795e072876e0a911c59f7c8c5056acc0cf0560c58835550aa8c4526123de9df58d15a928ff5a6dba28aec90950b83e510ebc8134c70821d958768f24b003ca0aaf20f357e83ddfc62a875290dd9b7dfa14bd1a25d177f2469bf82e6d2418363539bf9a8ab25b04bf557cbb882447e98817823b7b5a8b0080a55678abcbfe864bcc4eabf68ae31f99c83d93f702cce0514ee2b98d1312b88fa6a0d8daf86fbcb369dc6025a5f0b6c3e01e6a8e28faa0e4b4b77ed4c233f8338253fec5ce709844868c75e27e664c58f5709700b355f3573b376e50c3a823e5eb5b11ce70dca27c6c8a3d0539e1e5e871b4fcf8d0fad43a30843127d576987a4caeb4440ceafd0f3bdcaf175c6a4f0dcc39e9c665b84ecdccbef5d9f115596a46da00fcfbb8c31a0f598216556d78fac88ac0d7b4731d4d722c31d27b56d86e3bf5993d382b76fb1273555b00cec9ad55e39119f39b416045430a92207cbbe6f35db8457e57e87699ef52947ab83c5ec2e86d3ec7dd71ce595eb879ea4c1b2385f066066a46217bc7e755f7fcff56d9a833ecd9db08eeda33dcc9ac92bfe6bd82f21b4e7cb72c32beaf773044ec2c2b1f2852eef67d85417c10abf686d5ef0ac0d1144e32ce268ccf90830ef04d309380fe161a2ea9dd336f9752d196ad688847886a3983de273f1bc35f42ab3c330a24764f5f0ba20ce06f08e0143963154201d69c9c1d6e8fce24a0235238a7849585e738919682d24f6da9369c97db5c246e69681a1ca121d2ea24e406a54356936113ed0f03858f90c1181635ab25a313774c875f42de2bd9d8fb1c3aadd42f4b0b5e78e0865a88bfcd6cb0e5942823541eac8584ec1c8f2348820a5e13a02f7516f3fd957848e6948cf5b4b09de810ffabc1e42a7f70ba95f780df86f0ef6729209009e3aceb3e8223f5f1be6177ec25f7514e9ade72aea7628e54eec2596839c46d6481affa441b04e448b49ad85913de37380dcef3f964448801c2bf227d02504226110063e7b299d0d78d15ed89d807e18acc35744358bdeca1c76f2340ed468a36bd74b887efde42c14a9150291056e578b6fecb8a9642ab7dfb18f4e602dd767c9fa425015293175d95b8fec947f3542d33c2863df841137b6c7e1247b7cb0db8881833f9ff5a30e9e1469d3712a39b0aed7c6da89c6e18824dfcefc1e54b89794d0580647efb2db87dc78d437a386328ee26d464ad81f6ee922f9f58b8095cce0ae4cce63f934750189e1a3271e04cebcc0e78b6d2745577f79474b76f9c15a976d72e21195b85af4c0ba12f8972803706d63b4db96c85f2074c1f0483728f489772ca4ae6181da34123266340585f6b1bec39b637cccafb8be63e3987c1c777f955b9c71fad33d476cf567b8d846aea64412cacc50b0e44e14b335816908226acd37db575610aa10ea656cfb24edaf874d3c0e0fd36bc7e4bdddb07942e51e426909ed8aa08134b9bae18c7ba48df7edd3991653686eecb38c7c2a470bcacd957e98422f6ce7f0308fa4f8ff0a2b2512b40c1ff69a1f33ae58a20871be8506325c6b7b7506135848dbedbb3a6c4465779caa11900d05fa0431a0859eb06c5d89fb37c847862bdd45c6bf028ea6b299e76630122563dc7c5e2e5efb931da3ce96eba681fce032b91cdf4b584a28b7d11f34da176003eb64f4b842357b6e42fea9360c720b49397f3f732aca68da5acec785837ddf58c52909af538cba415e803139f36967a5082215b46f4005e79e2bbfb8911bc6c1467b9dc1cd2f17e79d20093388ea48e3ea60c7031d0f71c1469895dc57e0969146c8bb5e0ab7d08e866c7da148d3cde15113a614269ef633706d2cc7b0ff5297d1bcf37a721aeb8f296697c3d7e4b0477d85288a0b8e6c7529f03eaa058654fbd48759d35095bbd201b1fa33a53f3a48a005fb8b3fbdc3a85f97f2e83ac1ab211c34a5412c6bb3c4383c30c2ef376463410d4f70c55a2a09d9ad88b005df32dc4793146147ac4700860d93f2248d53eb803f2a5db21d4689e87af57eddab904a2d2b264f76f1e4b0af70a08447aaa69acd99a9fa3af88a4f25f350fee71ae5c82a1edcd1073362b8d64806ff05ba07d48f4eb4c7b1656ca326aa9eccb350586cf1deb0056aff56cb3e5efc1ea6318e31db5c55e2620a0bdc48d58b5cde0987d575b31b1a220e9bff26a5cd13d801a58f8ec59543e668033a318c66ae2d36d599cc7fcfd400b49c561054b79f2e3dc208056caf01806d5db067d83a53c9ed5bc0febe9d55ae652be408225eda7c2e08e4e201a1aa7668ac88133d056011f5d0ab7c86407933e264cba90657b5533d87ccb1b337bcfc97158a60941406ca26110f7b6c99f7f3630d2db58e2b747ac68551204e904e02cc6b82664adf723a3318c99ba83cc0e60edd0c63bce6ec3d4bd83de16b2893ac286cf78ab566e57d655ee0a5b33b29acba3f7151e572b778879b03992f862a646623045a5259731dfcc7e79baa1dbbf7da86f6348a4bb6964f5ab02293da2b79663a4e8e1464f47a1a924e403af10d13f8417ef327f6c7eca2fbc9a1d36c9201c926f21f55c142c031ae7f40892b97c665b1e83d74a84147758bd121241d38cdd13a7c4af00d0a43980957042a5fef9164c6bf7160eb845c0142c39bf1e21cc8155da31093d1acf5337d14db9c3f0872aa0d263a0fe21c6dd92164ab38258d656df7e1f1809a2a23967160b569e593c6cb8d9dcdc9cb1e6a7bec663fe3e9c34cd6dba54b9fd7debdc8fb0b916ef0b87bd115360f9a1a30e9b4d501f1399c681d9f829e6efd8ac96dda9f43ae0935aaceb78646aad89251c3d003de4b1f8746cf593fe329fb12aa69fe7befb599b7acc5ad8dabe35872b085d1822418dddc8b237fb14f1fd336b51f60b20e0c59c55206b569199cd09e894f1c61b01db0dbbbc65d84564e4e73bac1d5c9de4d3da388dc61f7fa60a065cff3f96d8e54cbfa2a12ca6d0dbedcb8f3aa7958e93386f779bdfb1be5cd662b02beca1e8e8b3c9925f07e8efbb8ce05bcc4087e07dba9ee12948a8b654defd165e278032b796f2b25c6f53a0b9b8df3bbee1a34c24cecfab5961c45f507b59f8a6fac4ccd75d67d5853b9cd17b5c995e9e4ab0e46864e669a1978214c14fe9ef29f01d6560a8cfe679740df0cb74283c82c0b6b678cfce338fa10cd75b7a0a3205079aeca4449a3105f2710fb333fa2d57d0828343c741f7b2a64b9cfa89ba00bada0581253badc1ff388cb7caf9d808acc18b2ac704b6ef015b5e9fb00f4cab71eb8af9424d39ac2572b37a74fc95d4a293c0085c878c7a574785326d413eb6bf9d24fd964ffbf42d148daff2b199328730936255ab50e42e30fbfbe238a726700fc60d93107b7383f35e62fb2c14dcf69af42f96e6ee64f7c083d75a7b2dd94c886c9343bd0fb71b33158b1396f55f39d26bb30ea2cc84a41d2e69d3f1a72d532e34ac6cdc4b4d9f974ce7b97c4bb9fa1501d2525754050965c1c0693c011515c9a0daa65120a4af147b267679fb3e8d9058eac76295621314fb0432143bff5eb7cc6e0642868ce081adcc2538d0aabe348dbca59fd617b846c189013328e14245109a339c84014fadd4d431723fc116e78d507eda3c598605914abb5e5e6fa35636fd345585dc079bfe8dbb4f9cc64e970e1aa5134ca197071d7642bfd3cd9fb2d8e728a37888ce56f1b2aa00a842e0a8386980459ba93731567b943ce0ff325a82f545a016c1164e8722ad4405d088c9a020cb1029cd36b6bcb968f89f52ba117e2668dce606cbc6c686652821f718ef7c578f89dfaee731938ed420539e5ee9cc067ae4f8e7aaa7be0e7c088ed9088e97e24a9d88ef67a22459eebdc5cf57e9bac53e11078b9d3c25fa4420b2d4b08ccd483a4b303c42c57ab7a04507baf287d51dbe8e6704be10b2be11144bf2aba57984c6bda690524975780a39d22d19a2977570b2ff0104c56ef19c5f9b70b5fd9bafd604914cbaebc85e0510a1243d9274f06b8686c7fedd75e2e0e60820c8d789108f38266ca317cf57a0170f6614585459b5edbeb7f0c361b84bcb8dd75ff01a584224f33254a6ebaa5a880839410fb712e0defef11d96f88a843c6ec64de9f6d10ad6e410154f4981fd322d5e18514df4a081e9794e5fc0cc5a21babbb87a8d2393c202d2dd7d48951aa3b0e5cc5b7e861ff0ce86f176484394e12ea8aae66b5170862a7624937041ded5c4d37f41f8f5cb47b9a99ad05b97df41224cc4186b0358aa487013a7657d5ac03b66d0a7a08ad4bd333ddf526407d00dd6b31582c085049ded79ea31fbef13785799ba3d8c4dd09c2db5afe3e119ceaa766565b14837844c8b0ed99fac58c6089418cef5ddf2945dfd3df10b14fd9d7577c8492596c458856b1ba39421b0b2b92469a23e7c52463e7513f88b4e5099e74f5048582ee6a020ed459cf0473a99d02e65910ec672eeca02d8d0b9b62be151ec283c71328642903ff0b65c084544ba337ec2181ccc5911c20799a39a401b79049f9b702151839a0dba7ee602d50930fb220fa0d2005e5a2905952e89472f0afd3bfb8b6a4b730db8fe04e64a33006f655bcbd60927614929dda62f9744217e9ec2945328b3444dec2b10b7c8c902479e26aa204b80e434d7251e81413548f31388e1b954c53725a3f56bf8c23eedcfd0c4178b89408b7544ded9123b16defb111c6de984a8e14e9652c71467e932116573fa14e180cf2ad721cf305f5732737a13f644a6831f0d5aaf0d073fb05acf134df030c36c2f1f52249bd1750cff3cd4020966b0f45672e836a2125bc856fd2ad9506fdbababdded26cd6d72baf6cea0c6764aabe930f6bdea625c433c2a9079d175e9ec1f0352ae5fd2ad4c8b9e4ba5cfe8e8ca207993cbed28bd2b23148f5fe144fd518430f6c819d5927b887ecb94fa1829bb0c0c52cdf7fd94799389ba7ba7bab1ba0b56a0b219033dc022b00d61c3e63cc4160c2f5f784dc753b9ff74e9c427a56fc9e8a1dde6070813933db1534dfc1bdfa89e001bcc9912a111f8d84cb9d01a15549c9ae7dd0e01c9b82e50d89b50df0eba3f3595ffa581336cc524834cc90bdc2fd57a526cf06e0e44eb64efbb986d7d3640e2705d1174235a6a524bf02b680f9f0bf5d5ae631483712bfa69ddb8eea209d5dba93862a879d21dd766a1ea8d7a53d5ccc6107fe150e2103296ea47340d68b23944550831284b4bd299641115f0e23acf84aa576bbae9bb17ec8ef979fd4ddff749ad562c7854373534303cc232a380610b86f4fa488678cc6fb466591196cdea4be29654e04398be1490abbd36fa7a6e704df56c11ca969df4a75b3d13722a2ff684f129311082b61b30eb102d75c6b2f432e7637a8d8e05fbf1bbd09255f9907faa6666970468a3370a589aef400cabaababfda89c8a2c11056e82e2f0f6258c9bd1fb1e336ce40467882be15b149d6bdf73847c43dbffda89fc59588b65a54a9bc1c960c5510dd9c2f032fc4c847e709cc638211b113a2255c0c0cb24a74305e19265bcde01092aae9b7f832d908269c18bbcfee228409f868c5006b9a46417df6b565a848ef18e68f0bac8234cc7c1ba05a2a10b3ff402979fc7007175c95fa97821ae6acda880238a63f2426afd86783f5e6e81a46e56df87b535147173b3d0e404e92be42571a62105723a3f0877de775d7d77dd1121eef4a614fdffe0f43be278a8af87c713e926242b3f4aa729bd6e175288558b215254dc373d065ad48acb5fd3fc2b934386a54ec3dcd8fca5bd47b86590c980ed2b98ae24f34954bf6dcb589ad6f20f79f6d21375cecfc522aece80df764d30905734353b48d356ceed92ba681bc420a990e250b60d499886fbc1dbb0efa9ccebd8ca5e4fb6c28bc492f9bc47ed325d2cb811941fe3f256311f634bcb1f9efee1d36bf909815fc0f434d83ffeb0e28f313414d588001a2cc0a0fc4fbddeedc3d21db68d7456c531361f2a5cac8c6b5fb25f29856fa1d7b4922d5adeb44178215ce2a67f88057778f0c0e4b859c5b3e310cec90b2e5a0a12cb2605406f816913d469e0904b7d20efe21772b3c29776967a02c7a7d41a4650efcc7c4f86a7236295445125dd8b64f243ba136c6be9999af14cc11f4e4aacfabf998370f3ae1dc6ab2c0690977e5bf9e05149546013adee1908267636a08d0f875a6f9edc9a37baafd100f330a83ff199f69070adfb9699e496d6c54f5b4592d849db10c7513ffd242fd8dba93f97538f15fd0ff19371ff65253f80282ca269eacb4b1e0af3da7023f5fa2c4eb7372b8a806110764e7ab65021347be5f89314f6beecd3785346371781067200cccfac793768ccee06c579317460a3717ac46afb18e78bc44f11803acf2bc811bcf7bb08834b7c63656d084284ae2892feb0c51045ee582b4cfce15df1fd612e118a29181e52ec514273640bd07be213755eccc74c1e08855bb925067dd3b80404c447f1d0a1171c1be24b7e7579dadfe3809cc771144de284b3953a248338515ff4a93a38668c3fb57f19767458d3b987722164851256b6172c34612bc3e42a4430cd031fef45d2162423303eefac015f15344092e8eb54e114d15d74ebc084fef7fd981021b66d1f090548e9a44b24bc9f843b0180258f36b7771c71b9e7fa884a102c720d7dbe2a06e36abf2c3fd86688a822eeb041a490d272592dd2260d0bf794f903611fae84c2b65aac566c9856c8e9c866498eea25b5ad05b82e24f2e19318ce1c2f2bd52ba32b93b87ad8a12474d4e42d7982d7815d9ab23d2088c44ad3d0998f42516d48b7ae29fb36b23438cd15f77a66c5e0163dbb1d253621f5fa10d75115552ed809e47d6f997becbf853651600ad40fbdd878e4a39654c960efbaeac32e00d9062cae059b919b865380526bd98d9f1b82eabb738924ae7e007e79f36d3ac8e3e316e807aaeed031786232b7511454e3f7fb0325f6a0912bc0f83bbc3d703bd6e2d93a4feafda74a05831711d5b43b0e1826e1ff419b41134198058d298f124cd7b0e943ff3bcc8aed7e488c7c0b97be69e132e742ada349ed8a3dd2c417630f37079d5588ba92c85fdb89df2ef0fd0bdb4faeddf918be8f4ef6755710806e160b5366c4f4aa982b254ae3aed6bfb5c1f4dc8bf6958f0b64a9efff46e567d9db0d6be53b165af4d60b349fc840a206373ae30e551ee36effe57b82c1d631dace8c142833eafce9d4e70c786aa9af26b22620d83ec180aed0486decc329420f7056c39318e56166196d1f2d81a8b1195dca26c28659331822e2e04694a9e1f0df90887dc16102098443db524d6b3f2ed57effda629c9f82d665a97d62c3f7a40aceda80e37eafe09f2cf028c0255ee8c4d0ef5cacc10e0292dbee3a5663758da719f625a78d3d41e1bc72d5787043cdff3bf6c2d306ec27276ea68c5ca2287e9609561e40006458a3cff1dc0086036fa2d4f063aea27166b368349fa39c9852f4b8f7b3dcfe94900751059e7ace8a0f4c4eb34b3ccf64f005727b4767e3879ca956e04d12a2db3171214d1584c15580c5589405d1aa42b1a54cc22eb023c1d690eb04782e1db8b6cba9bddcfea06dbfad6554d893719aafc07c0fbdf970476ac222d18b405363b99eba9e6a2084bc28493bf3a729c965f25048e70241e6bb54d3cd81c8739fd634c688da4dc5abe46d60c46e475c9b6985cd9b2bb5d4a1699b4199c35c9a876570c458c94f3e9063144c732ecddea56dc5e2c9d18e91fbd900e29121f4a193fe11bdb59608ce5d49d6db86512368c3306d435f638709a1dd33a5431068e388811b045c52857afb89866cde134dabe2e8707cc0bc932af416fced6f674a3f8042819409a285bc706f44d7ae7aafb9690fdbe2d9f2f358a5f2c2bee816f842cf20db6679de7de074db2578beb723786bd24204f03198d19730f763e76b6b194007fa15a5bf7407f731461380ceb5bc4dac164254aeddb72b0d7ac83b38f8b0147283e68068e80f8d32a70f8aa94fa8a5955bd88cf8ecd762b561aaef27d2b4bdf2aef5d282b7df0d4df873dc29ffcd14fe1424cb9ae987e85b2458e8ae8c593a62bc52ff3b5936db6f98d823d7ea7e8b8b444f8d3e51c0c29ac923753740549b03ad517eff6f63205b1e13c5ce3dcea0d7625820dd65ec3c3248a3e01382b98ac7cdba9631ed59ffb9dca3cdc7e9e87ca9926b8dbdfbd7219ccea6e199f673b06dee79b4a334c7968d2afc19deab99b438d559783bbd3d170d0413697fc41ad62a2910a35aa8821b25277fcfa05ca0abe723d1d533734065ce1eb0e1d5650938766962768f532717d65e40974f83fafbc60b1e1eb0220409318ebee3243b17ea0eb2ca9d85d096e459138c7d352815354f3c02337b7a8a7b378994ce50c2000b1a596fb97c1c414b9ca2ccdf9616cb16bfd4b8d44817bb232fcbcf8d448a2a8d078b01b9b317fba41b4f57be8fc77ddce82efc29a6a92a79257340a724d3a57cb239868ed6c251b9a3fb35a460f6c147100a23c4ba706224d69e09fe16e19366cb410a5e370739d7ee28766933ecabd22cf417f923835ccdd919892e13ad15e77cbda6282b5f2352ef62d3bfa3b8d5f7b25eca9ccfe1d973c06f91b2e4f8a7d6e39c212e3f327b773645340fa31dfe2f67513b89d061b768fd6b8795b02c98d24bd7d37548f73add10d144891c84304ece5cf83c97a3c20b13d5b16159af7aa11f9a81eec24a99359355a3e5babb4152e8fef3cb30ab0a0120234088b08c472ca1858f9b6789f726b6b00d65f7808ea5fe5b5b487d91e78a4d9851972c1caadf9c5cb205102f1476bb4a1f7ea3470d002958b55c6aad41f48a6e05a2740b760623fe669d8ac1bb4b4fd3020a021c90ec5eb7b21819c19d6e34637f3fc3c3a50ee40d3771eef3d077bda758985f253d833fa18f5879ef5182758688debbb6b7bf7ef3fdf3c2b38290dfc5e7bfada24147a3adc0783e03dcd86818ac0a3941779b00f6fdb9fb1f442134867fe3569e90734e458e818196388365d4af9c79616c86d29ececc5cb9eabc6f95c3f3b8785769b3ac3660e30c25865b765ed2fab3797c920000be0bcd1ed317fdb8f9c13dc649cab51d1a2d7b05bb27145eab750d0abdefa746e19d35f087ab127560731fb8968dd5ae43435d075e5d8f40e107ff837b91c032444f42c7f2d17410dc195d965a8ab4b6b106db25cc7021ab59dbd108f84a99950334aea34d56a715f5d392c3f804fb39145f957f664a98cbfa273005653c55e696818e793e48f2b188dd45d6b5c155b7a379b043b2d52a51376c67bb56157b62db5d5d08d7efe3e4f7895b99da24d10419ea36bd6e102e75e525a7655853058fef64a89a2a386508aec4f335c40981757f68d00665bea64474f2f7dd6e894169b59f072895a43b6148a8d6091ac0abf1cfb023fc4542ca2c9d552a3d8648b6866ca38fd85d9fbd6b20bc132a021c0bcbde3c5c8dc3d1306b835d81103dfcd3e280cb4d55253ac7405eac7212601a2813e404c7bb3ede856c201d290eb19a97adfcc9c283f0a2c97032bd3d16775a35f7e6e72dcbb96b9c9eab36f5e2c852600b8259ffa9263680cc90c214159ed71e07aabd9865cdc59f6c7addc41c4c54814a3d0f36dec9c97e6f804136b6f1901eeb34b1a8138d57855a3c543d0d8985a37a1c1bdbc6febf1b670eac8a5ed846df4ed55d08c6e826ae8865bed8125edb187e79383ce9c895cce1ef62261f440d62cd4d1da44805f7d4ef0f461a5b7a7862a821cfcb0bc6bbcb2480efebdf6fa2daf78067e9fb2b49d0eb90ff058ecdbc8e312b13ff0672033697fefd505c73ef22c52f3fccfa393719a65d43bacfb024683235af76b3c7d995845467a6edcf544ff0811aaf574c36130c90b46a8f4968624e1d7a7640dc6127f4a2c61dd328d19bb13baa55905d4522491ccb05cc2d71b9ea13b30f38c98917e869909eaee0415ee7d1198d091ca346868a00867ba18936b2cc291c6afa6028345c4b781316de64975ce8e5be3a491d28bf10feb01b9bd0c3c2197c793ca219573ac2406532a46eeceb5295b66d68e3e6d4e8629c7d7b8108228faf1572875dd938823f8936d9857f9bfff8e428f46e3ced61fffd557e218b887c1b8327aee44dc010a94e736ccd579df150da717cda6c7e1318f656ff66b4938c0400fdaaaea9c94d66cdeb91057e46ef1c14b55260e433ecc8e9e45307733f582cfa2662d3d6764d2601c56058ee5c5554d02a91fea37c65fba7f5e70d7546fc9926dd20e70b8f6ec01d45ff8f2f43e809619e56d8b8731f8a2684afac199d35556d6888fcacf3816171c66ef50d287ad607d39c47583537b81d3f45c7c14e167b48389fcfca2bf765d55c044ea30314ce693fc94eba059352607a5eff95c3a6554638395785ceff0a947ea2ae70ccc03a6fa71488c5a6ed7e0dd8f9d8180008e18a5707b82763f527a5d88720fd12f7d86db837048ba48bde516b942d497b3d0d6d51a611419f26d6586d2b8d707d96bc8ebf28a2b75726c075c797e88585a3bd6560cfbb2e8a72129a7f8d06399c077716fd470ebb151d525c7c4e61620ff8c8175394a64423385e4b050db4577a6c67825009a5c2ac4f4ee313676fbf0544cf70a5461c955122531a362cc7c5d47dd4ea73f6268e2afdd52e9df469a9c5401c8e9ec787f10d4de01b172ef30e7522e4fdb9fbd52b0686c7fccad18cb49a785d4f989679c143e598a47512a625f30adeb76c9bf48eac713ce601057a95c13433e2323f58d9b5a9eb0399a909e032a08e3c0cb78fc6f3e11a34e208c5ed9e10ee208df2e76c176d91e6a9300e042c459b493e9c07acc7da2395ec4ef77bb9d9f09f4251cbff8afe0b91b7f59bbd44fe2b97faae95fb8ba7405500e873b5f6b56910f998c312a10bfdd0a8fcdaf5712a69cb3501d4399fa0e7844cdb6b97bf42edcf6f501340f1e218adca68f8d75ebe992195d5cdaf0fb44ab2dc72d1940f1eea3ff7ed1d7311c20705392712458aeb33aef30988130cde32f1040a7a49120cdc62637f99025d4edaa423ea4e33da0f3efe9441f0e25fee0dd65b749fe279f63cc31a6fe6c7df14d012228f959e114c526854f8980baca81b21b36496cf9c4e1bc4b83f7c49c13525fcbd8b007a7234f1bde03061532b5c1b1b782ddc8d204a7cd5c284d4160d332e520bd8c69ca0d4ec1651ab2940f3b4d7c8308a9d2c700724af525d2f7184ef6d226b10de54d57bd6f790d2bff7eeb4d39e6128d06290145c746c813284ebbdb0082394eb620658c1987dc040a59b6da29fa253482715b3125662d66d6e3c794a6f93e5b0bee645d958a646f6193b7aabba86bb49b26696069a15c5a4b9454f9e4cd7f9bd07379babce5e650a2112cd52b0bc76249b6c4f2b1f3b65e42900fe235d90acf9b6a7d869ea4d43082eaf5ea48004fbc87a56e904e342b47b2d1d552d3e01dbf0d5d1729525985b05c5d57a6bc9c8f124667d3e0a92a3ddbbe1df5265028832f71479143c138025ef1529e3801f47daaeb6c25f457011ba849b386173a940fd08082f81ae7c1b82b63ec8ad3ffa90e27610976e1f6091c9fef77a54b2d306f02e0403978d64f5620238883c063325f2efaced92f0b27e1e9706020e4f528906bfd3fc6dc75251f206f5875bfe64718367ebc3831b582099abbf50c8daa15b564210352e5c38294f2d7046df4287df322f6d03b1d373c10fe4b8e94907f8702af854e77f027f1c20e6210a4d534a3ffc1152b9a649336969eb2c1c893a016337c54f65b17673e8ea4b78e4efb5c2294407876c25c1db543883f60dee0b365b2716240ca092f2541b2b41a2b9550c89fd57c8047b2aaa0418b818b910eab6ccc8177f7e97e8ae84561da4b79891e79ae502993dbac527e80d9c6bc596b275081af302b1d2d40f189f8d78652061d5e226e5b85ed5d4f13647f40f6de376e932dd0897360fdd5ce31cfd2968c6fcb045ba9676f1579a1e380903123847898117974a08bbde3a4e7a679b394cde1fd433b2794f8f78cc78b8c93dfa502c95954e09f0f9591a4b0d55fc20e3ea3088600b3ea757c96f81a70e28e4b8c233d8f9bc0ab7afa3502c405d362db2896bbb20233b207cafde9034529ecd77d8050ec42c31c1e5f5cd77f03635adcc218f6513d202d0d8d354834690daa6a10291a6eae188c8375830c827650dbd2435e44aa44de150d4239ce91fcd708ee11f7099855f3eafa8b53903d206b994ceb9a1789e6f2deba8f0112df50577712a98eeea02596e17aab10abfa294dccedc7adf9de2545e6f2b9d17696eee73b8f041f86d96d45702bc99be78973d46c76f95854fd1994152d7ec2f08316cfbf0e5f9c40f64ea27cd7adab34b58f256a97f71c5e7be1d69844080a58c0a657d59607d75432d56abe3e9e57cc83f5a2fa027d45dd16781678deeb464c7f5881a69c78eb9de86e0a772cf9019888ea069e023de3c2a3e6b7bf4dd470dcf933ba050b6129ed7e0eb19f4cc282972387402bf25294271b1dcfc949db5e54a9947141d12a3245917a3a3b00d9714dff788e5bb5a89783e3cbfc8bda9ca21e1f07ad0fc45ed2606457ebc592f62077c3a273c852b29680b38840184569ec318a59727a7deae86b80fdb3fa2f82186c14d126f4bc9de3557c91d44127fa19ce7e08948973b705b9461ba086f1c6f55d39a13c91dfa27fe8a66e778c11f7a7343da69df3cc2c1a7b2605f6e43c595efe501a866a1539f0ad63356ff866bebaf990a283417641fd0370f60a169c233eebd912e732bd4dcce265f607594fb46216682261ac77e9fa855bfc7e8fa4f15c0eb5f647e990d227b4fab5e5cd21721ca180452a89eb25673335f24e33826755c02d25a9b653becdc33aa59c40651836dfae535ff7c061e97243bb9ddc61286507a03ab16099f8c94c6c8a139bb2551cf31b81628a41a69e978c9cb244b90369f57fa74b7b31b5737d9aac5a9bb4ddb8583db72ac85dc68b2d1fe38416287fe055d5549ceb195e7d7db7da4355704d5f8461de3329873722d94f5cd2caaba5d8dfc4d097313a294537ce6a56c06170a38714dc455992fbacc826d2d0231d3dce21506474a47ce0ddc136c76031cf1b6789614a8c67afba0b5e842a8e6aec7f382f74682875cd31a3620cb11b33503c6d2b815559821cc095eaadc0db347fa99caf812c8abac45ef32dc61dbcef3c0d1c0d244c1def889dcaa34d123c115c083d2b69df51994731d9934ee832df4a1c56db7824851f29c147f89a57ad9378e0dbb5e747d9353c8635fce707044f8504b7876736323f3a57edda16052ce7cf9bc517bcc1bce16b29856ec7dacdeb141f61596c1c46c47afc31989f00653bd5631d7a9bdc47e3648cb9acd7b32a0dd35364d156810912f4b121489924d3bfd3ffe0fdae8f1fe4531b94614c819741a983c7ce87eeb4098985db32d56b54a500f1473d6d92f905287f70664c4505bb1b0b60a38f319159322e6addb73cf484204356ce183679db9f60dc123b30e84ddab86e4edfe072d9bec533cc8ca92b362189be59eb65f518bb335edffd6047643121148de7d4830bc6e384a59b3f1e996b29ffe6d99495010f30b9930f574833660bb946a6d41838c7360079e3a70e16d45796875732db7986808723bbd5727fce8dbf4f62ed2e282ea792f673f9b6640e6bb1f23af00c60bb55990e85238c18a8a4617ced689145b6ad904e079ff9a344f7ba22a3b3425f63862b3d8fdeba6b8b39bbd237d1d376026734944fd1e442439996607fb15d52a8f9b69df5005339054fa9c44cc16cf16c9a884a6dc4d49696f62cc2d11e2feb913d668fb4f24af975a2cd6cb3603a6341ea17c5fb3710777b42efacebeba33bf355bb2429220f04ece454d64f7ca9dcefa331ac547973ad895f8b9fe8ff1acdc956ddf924220657e6c1b3d8ec0324949f355dcc7c64b23b8b033c4f9624b9da20a5a9e57f75963ef06b8cb6a029ea138fc3c955d5fffb603b6a9e07720c796cb2a2c6eb94efb300df3d0be0ceb9b294097c67c9d329ec6e23e70abfdce364299b97976f7429f28876cbfb08f68241eb7323791b9388a4cc9c43b92fafc3659b1693a0c6604c9602f37e309344e8cc40e74145059d8b078afdfccb42d3be8c8db87dced19e1cc56c2f9daad529a05d4a512e670fef72b2df862e9598d77d4b69f037a72c02a9118d3271177a5f5cc3f7e8d7609eac5e25a783ac69156716b8304de9230b617bf770c23b15deda56d14d0b5e44201288d52582989da0a8cafb14a2bec97a1ee648dde2b5099d718bc1e67194da713ef628d1858bdd64ff52d6f3793bf86f7c479d68e5831b2ff94125916358b77200fb7254185f00b95c13d3d09a2ec4d73517a6036b48ac99683657f2cad096d695fb1e0450e5bda52a239ed32311ee1441feb11f0b9ea1c4579104b1ae8f2a3515daf9ec9c68f03e2ca820cb502b8f4017bcb1d0b4ceaef1996ffb2c797884df822903722ea90ff3df612577c41445565c20eccb00559d35a29c0b406924b49a12423e1db79876295cd4731c8374fa63bb82a21007f8913f73f5e045f90f89ac89e2a42f4c9f40f9d83d982fd9eca9203b2111b9110082f84d837f962dd41867b63a6ffc630a9f7d0a5f98d83f4fcb39efb261430491b565ef46886fa5feea2c11b9fa9882d2d9f3ca1e658c84261458fe527a802290996346f5f6f0cf524639235ab1a52ee28cade8d69eb0bfbfcf34324b88eb1ff92a870223501d004cc6cce0612a6f55480432cc6ed1173a9278493a4d3b7e12559ddc59674b53e09305e1a0e64aa6512c2be5b1ec3e63c516d4d20d35d57197d64513ce6ae7e65566e86ba8f8f2d1dfebf15c34c927a1b9bac3a67ab4d2847fdd447cfc9fb73a44ebde0d1a35e987af8e73cb779dfcc6bd8829dda48cf2e67d7f312861572b069d40962fca8f274cc4d41c36e527950aca495705fab9731d21f0b9d5f7e021512e5031b0d2a8c32a30ea269267484365efa867a10fc2548744624dbc37b9a20ada6306bf8388fe72ece603ae29ccf65587f4938343a00a19b819a8773673d3283023c2a4b8a2d7df144c795a99d3c5d53289c17b0144c675f86bc80b6f2d6012b5f717d1bf8c3a22a2508ba5c6ddf0deb72501a82619bc5c06b88f983c45b79627ceb0efc3378a01da37e3c19f31315756542e9c1c99cc45435301f16206f816f85d6670c479353392c03c51bfabcd1c2d15f97b30c4b5acb8671a6f39fb49a44568dab777b94953729d34e6224c3ef661100896e9484ce8cc888c2be7153fa1223c945e757985ca387d45215d9a11b7217b70c0308f24a0c8c27c5be479fee00d2133e2672e16aa19014b2fe469a2abb4296ef33f90617ea944746add1d8a70d3d7fc1c7871a02ac0686d11c6f3c1b149b497b3c452f63a266f52b9c3771d4664c8afe9d50e10490467e8d9516f128f09444170080ce76e0e175659d89c5419d95d913225b80e961c4e8b8bc97dd4d011c748ed474b08b5250475900ac59aeb4a868f0040b3ce455cda116e525bb79a1c21099221f3085c7934186d352a34a699d4bfc8304e2f12e1cc16ccbd5839a0ef083ea57d93aa56a6e0d6fce1d997b6697470d3389f8d223c8b35ea28e6d7b976009b6e331d726d4718acf6da7e95f82fed725594dc7b9a262661cc14337a252f762eee1c025ab9ae0349232d8667e0c57c8193fa490c770fc05835ec4a1d9ead811d9ed952fb17fbddc41aeeee231a91bc282e83a658c2d56ebeaf1b6afbaecd2529b670ba9e55bd899a1f8ee33704ca5497903d932fc545158565509b101261c73849ee4b255792b0b560d77064ebb1e2863fe49f3b922583486ca6155000d4975d3c27a3b4ac39d9ecd9ab1b3d970c15a9c86779b5d2a3680110e23745612470423a7db8b71178798bb1ead550fd229502ff0028e0f081b99d968a77386eb64af74fa3193818930222e67d112def1ce7beb33c2e1713acd9c6132a8f7304775484bb0ebf9ee6787d101f78d19a1360c4df1f23d9d73396b163479059b8fca956d34023fdfd0263c36624bf9e6b0327bbeeeffeccd4ccfd1d0a841589e1b35a025d75c2d8c2d28177b6bcd7372d1377bdcbbe6cb2196b133dcfaab3fad2cd7bf03a96694039c5fc2ef5cbd17bcedbd97a40c83613bab823e676ae09bead320cde42a409134d1b316078728c63ed8e72c8c0403ecf192c748e461c2d7a4f86f96c1397e3b62aacecf8deda1a877948b976572e06fac2d3760d75925ecd7fbed0b5145fcc4eac0d857bfa029e1578cb6be73fda33656d31fc7811a9fd94801c342a5c4d6627e9abd7212cddfd98156838582436e112cd0e5b1fff3da7c4fdeef33102ddb978f9490aa592304af2ec72d3391dcd781605993e4f0fb9e347282ed79d55f1af3fcea149807e804069b432c14e739ea45b8187e95edd942217d16a04a4d22a495927a08a8261b55ed3f0b0d8b3ecf7234488f8e762a1ed23958fe600c5062f3a9bab4838f85fa7ee4b1e5a0456d3cccfca8955898a795e0e6c73d0d87fbf30b807e4267a7d98e868d6cb8ad43cad383f6f9337a97f3a0491b44ef969f3e34b16f9e7dd54e0ee9da7e0a5c5a0a353d67a9b1d55942c7e75d7bb445c9de6075691bdd40f7c9b74070ee6e21a8503139f7b31bfdbc56f0dc0797e0090e23ba35b7fd14f5939170e326d40ebda3fecc996e5bb290276877c91112eef98a339b63cec7e9faf3d85759e7637efdc9971acf955c326f403d0b190d403364fb852e4834883296d5fcfeb54f4d3adbc6b836793f37d8e372046c71f0449aa4e25743e8f1de00a33966c9c72e84b83bfda83cb7befc8837e53fe99833eede32d5c6d8a160b841ffa5cdb15b123b03cdc89af9e8d3dd2659689522476c981ca28ccc1de165752215cf3fc3a880dfaa930971612f6c94721ebce5c86708329797b120ab4bffe409d11082ebf92ae8ee9448b6c8a308ed37a2f63321d7213d2660690ff88c5f057b2bfffd0c7ef109d03442465bfcf826d0cab156515f1d08ed1c0a1636041bac3e6afb224e091635e31afcb5fa239ed9679367dcea19c0f0a499ab0522620bda208ab8e122413716cd4448d9812402ebdb3730a46d621c14f9fd534d52d9b1a12e3d2287db55fb34d2a652de7aa79c6d408cf2a9c55b5da226de701a5d746019232b06c5ff13c19029438b401e3656d2aea471057e2d7e94942a689d32375d146e95084f5f4e6152bc77b0fd4b50921bd29aa63a6bec80e4975f626e4bb2cd5231d9edfc139b39e35b1053b26981f464e91558226d741349eee9ed797d7377b59de505049b060f685a79c8050ea6776ace6cb3589ee993396bb718002c75c2d5d8a3118176cf3ff254f6e015486e159c0e9f446b33bb6683d2dfd93c35ee3253de3d49dd0960668dc8bd0fe7f41091b800740799056dfa63668048184135374b3c061a49d963cbe704b280c7da6ab65e1eaadd41d6c4d2680f0c466b5c0ad83537ef01d16b24c849bc6bb20eda98f0fe2afb1dd3547730a422ff48e4f837ccc440089544652c14273123b55a664ed7e509edf2209c18c4a992c77fbf4a6937ced5cbacd920b439c41f64a0b91b243a2b197660ed5565f39905188e9912e77011b5d1a7dd684d1164b05a0bcfee566695a3e30f40f976aa88f0f462a103db98bcc4f21d6f9b6aee94fe1e9271afec5e0c7e12f1989f414b616ded128b2e1c4e202876ba7265ff1a3ff5666c63f8be58c8744c786932f61ac716f4bcd780950f8ca75ab5d4428e2007052811d2435a19afe4b87be2d74b1ef22e30c18e7b1ace89994489b3d6704cfc5940ce04659541b46a442d95beb984df47ac291bb1a1cd1b13a634cba69a15c6e907d159bce63641d4d7862be146841c1c0df99127d97eaaab461fcb9aa3cb8cf11a8f734b43772473f5830da26e3f845150aba1e88d7adc2f0e734bf406fc632c3a716ec6c8c735cd076c54411bf6f2f131bf7a818e6e692c29a2bf94aba5270e818e784e9d7a8ec51f62dbe466b3d2a3dc0b4dc9f194c883961b5961fc6a3a4b1ada65200765150dab1fe1758294d3b174f01fef13a039009dd20ed8ef3b8c96b029b2133ef1ff967884f561e289a4395cfdc87ff606df11f4b48d02d45a83171b246ed2e19e63e95cedd8174c09e6511b17ec2858cb59013a36b2ff46aae0f4249aea0a782183032320d7cd22441cf2da2543d535a9db30fe1c34ef2139f5d2ee3686eeac8f51238d08266aaad1b8d0e170b9dd5351895a224321fd41985137e42c09d1492bf04f5b0767437e029ba11bdc8c0c030c340f1ba0a1c53c66fb7b421a9dbc882d9a685348c12072ac3107a7371f49c99319765d92cf4a610bb7b166de1acb7d7fac9a8e5207504817744f1cea1ad7da5bf3f1fc5e1be21ccf016921f36dd2c47ffba9c28b9d51a8f3b3acd94c3d462aa40969ab9d1eeaef8bff52f3de3c1fe83d77d528446de8d32cc757304d23fd22c48742249846dc984cfa882d86551f0152d8f92cb83479b2b91aba3bf334b931e484b7395b18f39660acea67f0961176e4f5ced236b6eabc60a58f0030041e7ca57165b1a717308fff86c9fdec77aedba23bfcd517e795985325f9c5a3a8bc99da3a5d6ab7532256614464c3a3ee0281e3319e0001dc28e4e12b3628bc0ac66d15d6d717bfbe09b09826f9fa47bbd449a95a1ca24604fcaadf6d3aec927440eda4e401d680a56af3723079234da4dc90c14195d8694e1116b2df70bc9bd5a7390ff208d1193fd22a35c9110c9d32acbdcd638f8af38bbe1d56ad3728b4348df2f91f25b7e05d249e988cb248eda5680a2a3f45bf523caca998b7141a8f011b9b8a7ce0df90d7da8cdee995c6923be9de4bfcc506527006411eb9cc7ef6e17f34b8f0ff0a91f2a9aa9a3939e19d508218ae008cc2fea56c614d656561b1eeafbc3a41500dc3500267f427b2562448b51396300b83eea4c07cfbabb6f46739c77ab3ea2fee0f2a7dab7a660f04f96bb19fcb96597c172a6fe16c898df3726698943c121d41d2e045a3278a48f18e1b9a372678baebf0350b0dfe4b01829ce9ab6f404131c7515b0ec11e01b7551c75e6be7a6c8ceee7694b04e310fae7bb2f6a3a4bf8e8490890f427a7a4b9558b45be5db421fc171e4d318b76bcad1637abc7d420abddd5e666b32874d61d3ab326267ef7bc896cbd0403678e8d32817bd9e351c7f7eca93d4dcfd9f8816444e6f7d381c3efc5f99ba0662e6ee20e00aa3735316ef7aae543e0eeca57c6dad2eb5bc3e578da8e42295a746b9cdd2653a699b84139e5bafa42a09720c78175059c32368e583d4b1eb8a07de9510693d0e3fe8692d73fd3b068ac5711f505c004502373829bd57b28a6f65d4f0a0de387d4fcf25f16f9bd7d04ec3ee74cff7a2b3ee86eddff33ac551d7c336d20446ed303f4389a9a1b96326500dcea8ca01346872c5fbf82d97f3baf7824ef09264852f5c9781af5f91cd73e40997b5c2f00fc217e1394e6ec058f6dd94877c492d4179248f6d1fe379f060ac991c8d0ce4bb7cdf6f47de15809c69e818e4f777210ad634b6177d67d87d376272ac9fdbd0c443041750fae9ebf22bea40912b1163dc4ad1a15c75a1d932657d2b15d89e7a65d6f075551a37bdc49dce5bcb8981db74f7e9cc34fcfa8db8dd58e59a9c153dda4b68bfca565703df30e74853e27787e70202fe2796d6ee5a24d9d0e8735eb72aec7fd019e5a7428797e360ee51453b9d8bfb57becc5d1c20ecc649939702bdee38ccf1901311d1a23c67de43527c2bece4ad7a7721b3c96083386549fe3272825d84da5c3e155ad22cc7f32b50b3565aedab24b52e0fda066056a0312e865514b073de51a047055609d779dfa5eaf5c839cf8512409bd915c30dc617f6e575896e86d5ecac508928bff70a3b5e2fd3a94e50e4f4a5f597f5fd34e4f14e87794643186ffe00573f26aef1369e1b971d62d694214f659fea47465af61a9b307067b4603cf7361acf602073897d02a13e8dd2a317be35cae7c22444f431b344060caac1b13d3958f541c5435a7aa86f920a07e2aba7f918ebc360a24d1679fd7dd03b72aaa684953b2ec85d2a4481c09f4fd8d9243366a562371e4211ae7cfed0ac12e659284f733273fc86083a11a3330c05f753c8454cb470be7371972691100e0989eac3fed2935a0310517be5dee8d4e4869361fd247637a97dad85b56bbf56d13343d38c66b8a3cadbdd3212c17b3806993f02bae7d7458bda70b797191df277031d2fc5a546ac97bc14a3f4ef8f0f21d3fe9395aedf234c8a605c389474a4a8c5c88321ab2c1a756f48988250e125e1dfcb2c1447909aa3740e435d3d987e52994e03cfa724554ea537c03101c4d0f58637c743ea94eca854cad88d5b0780a946e116c10b75ef7fd43c7f18b93b7d0301eac92704c7a3d370e6530964e5d5f9cef0d56e6dda49f34e0b412c4b453f77938a80ac8bfb97d2abc2840ac43932cfb6661b624599f9d6f202cb23cb67ec28d3a94111878a4c21c664441e84cc100868716a4f9271e2b59f7ed772e1ee02ded1d0a79bfd94457b28cb27b223f280bc2a471fedbed640b0e152800e2c6665c45a23d11783de3a8eb23dfc773bcb25f712f0d31a235a99c3722b44fc43a3fac744f488d91f05f78abde41e399934985bd30ae48f9c644b546eee40e60a81e98482d04e7fee02ea789362ead58ac6d0bd499811718095ff515ece3285b412308ac4611bf6c48b799f4f983219f7d6b4d19d4aa0d6cd1616d3379e3578c02d7fe9dee3b1af1597ef375a9e2022fc061008f13cdc6de8ac295ab3e263be9a83c81be63e39ee8307a3bb5b92bed8908af15048add861f11ad0b2e817641ac542aacd304f8c00da8883a57086ee06ed6af33a395d81bdba3f4259a4b6e1a22aa0f6c007b8f93914ec9e4c0a7b48243d857a93717733180d8e46ab242541291455e6b19b5c7524a39ad9855cfaf7bb1089a8234e6d35b399e6509196f455fcf7dc027d20a1f7254f1ee198e0d0dc439a634e98d07868cbf4d8399104f6557ff6579836c0941100ee14df1857e95777b6606c046da76f6c64a3504c48896bf30b0d8bc78d73f2018cb8dcc00100e6f7ed11270d112dac38b02de6c1305b6ff4ea9f7c6c6ee11dbffa48102e45b3b30c52a9dc4534a2f05cd5c5055dc9cbf003c33783395e4057c06859cfa54d005903ad21fe7cf035bebe745237348a0e3e63177a61723a0ed0c1c7806114a7daca99e676cb61252f80f566fa55944d4c5c518f150a7773840d9e5b58ea8fb54d764829dc263e95388800982929c4c97227090f41c23bf3950c5fcc5fcab17827d5192986cfb9f13320fc22b6b28a3e78f4ed2d18880d6ace80f6958a1e7d6390a8bc29639eba4218059cfeafa85f5c0086078af6a2869c93ba27ab3e74081853989b4644a3b38f581fba7f3ddfe79b85338709f70ec01a1adcc464e34d272fd17c79a3b4de1c117a04bd9a57d6c1c77922b8401836bf3674129ec710a6a031da6423dfc911bca6e8f2690a581e11ce2fdcaf4c5fad47783e6dcc10499151b5bf21fe14a5ca938ca729732b611c74bc7ecad1291fa71aa962d1ca6f7fde051820c5c527f7f355bfe22e40f87e7dfb0230a061b0cab958304d5d8af7f332a22c08c5419d8928b5cc9daf62914311694f00deba634284d8027983dfde6d11fe7a2e435240672bae227b825a80a4e88ae3f8fbf4da7dd0e2f6136d5b06d5210769d1f658f5736014261636d03e27502c58982cba506d21e822b2c7a0f0eefdc3e6810cb964a8f6c0c09ec64c0ff1b5a6e07b10e371f39473260a03ea3ee2f730e040b198b59fb6dbd50f499a32c1e9ed9f405d500215e60e9b023afb3fd74bbd6159167cd449d3e90c52ae5d86b2deafed2515120c8b75e9fcfaa8ddb0070ab1fa8f48b0ef533f0d571116ae8143c6c8e251510deef9635137ba599b635e9acfd2c89c476709c7eaddb8850ad71fed804f9c663ef81f7b75f3a67abacc75ba042148e4b03a0839b3d2fb7e2d457fc75d7823a07be7b2362eed09f3b7d1020907ac7efb4e38a2a2e18adc0dda086c1dfbd25f2cbe10cb95fdea9e9093b1071e45cab0ff97268cd6e3593a991ad638a89260a30fe2d10f2a6c881c1e8f21c4ca9518c040fac3e8322db33114c7d6057180384d77654eb30b4e6cab0f0cc87a43d48df0d0ae8fa8c850dd1967e1bac7ee2bd946d4abe2f384ec7bedfd6626eec55a544972bbda72d4c6f517b5a8d18456fe9db50ced1213b6eea9324a2e93a59a2e16f5972bb60417eb0718168a8a2fd9fd589e9dc1fcd46dc3f1ba033405a645b8f2a11ed77cca271a0807a9e8f791d72fe912ebccf9494ab611b0df16cbeeb69e46841c5305c8d484d3a9b88f8a29cd87022131ad8279db1fb7cc1dde73d4050ac1f7b1c31fbe9a224e89164d737aa70966cc2b0dda9723d69c84d57ffe8fdf825ee9f7ab375b6f663e53de36bd47b85e7126d18acca4350613653302e30caee2bf4145c095fc1d25e9037d0c308eb4e70adeffe326525b48eca0e3586b6829dee7507a3e8ddfa4e61dc54b4d0899d8895f3acd4e003dcc453688c220597ebc4838599eeb6df50a536ad442b27c52a4e183a6da1cdf757ac5dd829812df940b4bc830cfeb6659c847f02c32a125234b592a462f2f435d2b6c881c3145d3ea0336f1cd566630ff5e02e2cd5b12de4333994f3692b783bbffcc65556b2e24124832728da1b51f61f2443fa8af1560cddffda085fa68c312fd22378f2196a2dc6e0120507b846a6f8487af9fa0bff20c13be58a00c9f8204dc20bb08059c973615a7ee1dca4366544202cceee5c5af86f8ea66e456b2482041df268db5c9767a35674e7823861b97bc0e43a0c188597f4414ba4dd35774ce64de8ddcfd19a3f05b53a1aec271e23123ceb86a7913a15fb7789acaa4dc7f2f9f15f1f579aed886314efcd92631fb305036cf62f1b7b48cf1a316eb98f305687127f6288a8c3b5f2ef38bb4af665b4c31aabd1a1410845ab30e965146ba805eca44e15e8ee1097ea32990bb823e6a113a99a5f9bc1ab07a409d8ae861fe1cf187d287691fc6bcff112752c806b78252359ab4cc7c40b331c04af976888517741771f08ae3a517affd509b125965346db411efeb1a6e0e7cae5d0cdaa32c21055d2353accf6c0f9077bccf155c29071ec5c22cc29902ee8b5617bfbb405724b5500b92d621007621cd02780e8a22ecd972655e8b37d8c2b059cb35e7f1286ceb995f86a41eebd9451160d1183ff04112d56e352654f2e85bf8e1558bff8d045c8c5becd57dba17882c83ba5419fbe6d2bdd83c9651f01f29378125c17e518a9ee97d9ec5ec096b3b9820e75ac0e06038301ff3bb7ca09b148f6a6907bc38921fb69029f7ee48f65c630c27ad70cc32da875e6c4198ab0fc8459812ff0c0969e5b13a4c6e63cca99ee7af2ee42f9608053d6f79a290d7ed610088c1f9e151b75967d155be98007ec581c055330ce5c3f18f760c4bbe89c3a4b996931d0d232d88b401c0223af3476aa6d320b6ab76ee51ed38bd66b947d53e635787afe63d471280bd17ec4bb68ceddbefd743fcf93b5888157d1a41e5e6468e0ca08296f9a4d1e42c06b4fb483317e5647ed69aef2e888e25dc01716c0d97e9c5d24d80c109fa7e7f457285b033c7eb19273e1a664e8f42675e9795e9ba9b63e34b0c57312d47169ed5c2acedc1d82da22471f16c8025aaab3eea9e51a87e14ee2de51affe73ea725d7c42ad1fb743c4bb6968889bee406a14dae65bc2d9ebef81eec288dbc2494effa8ea6bb854f658335217dcae4b1d415b70a6336f484aa9564d20218e987bcdf53c1c58a2e4d1418e6c0cf6492b4fc0f23663b2758f688a116afc7375700d4921d67447193d9c73e92e814e57f27c00bbb2e2b84e73ac39364ed9254488e0d1a5497e06ce4cb86215548804d669913f9bb89ea5524b6a03279092d1deb01ff72ae3365ec6bf8d0be4d188b46be7a6364d5916d04affe749faeba5a84e2cf0f72b93100a08f7f002930dae61695b93c25383d60d92bd5990426f0800ea228a955834575821e67f684a7cceb55baee733d96149ab6a0970b2206e707bc89caeae745f307c9a54602ff8d577c8a24b3f6e576b6292ef7a5ef9abdb3c8b4a323ebfd77610ce6c57c3adff80de5f81a95138e86efe5a82cda2cfd3f7bfa05904a64d50bdecfa32d23ac3f8c5303fa7c88a6e4f5e3e4bdb0ed692f0638e3822b4c4742f497dd8555c8488b7e1a7885d2fb22c18a4ab5e6692ba62a2c8c4f299058a2b0d0e828ca4cd866e26e6a085b02f673e04979f1c472c23445bf6be9ae2ada241c5cc825e589e6fa25da93173db47a6bdb9a3184e2e517bbfa3c691ff28673700d22f87a241f84f4cd1f9a27e690f19bf8891235840ed11dd91cd0dddc6929c11db8b6e37c7b16e4e3e693e8bbd0927e6e8723d89d8014f6b488a0849dec5bba62561acd1401f4ac195441c368e11c0e286225cd5d20e84058801183bbf20f23606fa79b75c73217f30a7b7cbf7e2a97c5707361d592ed4ae69e4f71c6a6a1d3ba7fd65e85d86a1bee222ce2026394d0c28fc396bdf34fecdc41618be99e4f97fe560f5972bb9bfc1f49bf1dc287eb80b4ec2b80832efc30ce809dedfb6115b61a679a278c543de508f7e16f1f202968a8e6b4fd65d3ed58c97cd50a0bfbadeb6554c910bf6977b7e4474bd3b04eb1175a6e38cd3bd2ede43b1b76bde926aa4dc7c43c41dd3e4f7a4c0d53e0e4de921e1a4930c63539ff3244f128a28a06245dcb157955d5f2038afe983e8f53415e5ef3fff010bc7694b239579ae9af9588f95a63803e46e485b9eec4fde959c81f4c162b00ade4923d27c41c095adb8cced5983aa3a3230cc7925bade8ce5f3cf92375269c421ee55ef26beb17c698414fa34e6f386829dedb4527f876dd7b574bebd1bed083ae2f14117d67b23733cf74fe8062855af9cc76a6fbd39528ed0757ccc00d2281f94f4cebf46bbc2833de54fb6ff09b6c464e4c447763e768a404fd4c762b9841640a1dd82e6a0d0b215d017f0ceecf02d536ac860e3be57cdbbee317ba45e6900ef5718e00270a8a52d3c7f9fd8a277a899e8a0a3aae6038402d495991546c3d93c52f341b8af47c2e1692881ab01483e05e3fd8bd8af1eea2601f2fc129e230af8a64d8861b2c0c1e052ca41dbf3659e13434c303e6041010b1b7006fdc2eb29f22038097b7a2abe77ca907fbc8e4007efde75b1eb47c623756545f1d6d467d0528cf5c7ffb1fa1e8c9d1dfceea804dfde1ddaf19b40c304680dde41f0df86c8ba8aab6fb693642d35e2943255196d17930fc1794919af4455e8ec2c5dea8ab9efcc74b5e365a5568a435ace9782ec6e6a107bb6cf9246fe98c5fc4935613d0d7da1ba4b033601b41d7710c973733259df371d68c33f82d1ec7d719a543adc85d4726cfb3476d194ab390e213bfa703147bd31429fb28569324a6db608ce32970c7abe06a291f2a87e7145a551d14e0a417fb7add4fca01646b7f0dce788853a55b9443ab9c389d669bb978e228377707333b8c02085bcaece78392a435b7339e755066c3c192967157639d4d7646ce21f6f1a82e10c222017593ddb435c379057bd75c8e55786040c1903e5a156bfdc90f6fda8102766519510ba0928da06f5f14bbd0d140a0e408d4ba0e8fd6699603861e83b03cde7f530f91e40686dd57d47ecf67f9917f21a6dc345a165c4f80ed5e2ed65a6c3d1508901932f9ee0aee6a8cec584e69915bf4d8c8d7cd73cc015a8bea8bb5696b80f53ab5e0a90057a6af3739c1f350fd715a871b98caebf54eef75eb0019c4bb57351c0bb5ac03d6ea0ed78e7d6fb5de2aff3248b868aefb39d31bd95e60852c0d965e74571dd6d572423fa8d8a29ba86617b2b8001186faf903d0e923117b2df42b899e78c1675f58013bf30731503cfca4b99ce1d38d3491601eecd1915b4297a3fd91095235b03be29cb0d18af14ff10a4d76f6d6a660e1e204d34228e441facf68d4e93042fc17e69a021207724bb22b7d6c08435de188e78dd426656623bfc56b58ea5cccfef5c85a4e643fee46faf8978f408646f22d9df85e7266be59d15cf0408beda5b21ecd341faa1ca528c53a29b21d67629c18d32075ea0e0b73cdf746c43f91ed841e1ec0f8997c928b85bb4a9fc4258812afd5b237531e2f6eb2beba4f3c5b9febfc834b952005775754954109814981e51801209c26ea4998eb732c18c038e6b9d9ca538696a59370edd0c8599badc7747399495d2fa67c0c3975fb540dd3a96efc00608b7564861bd7d782c69ef40539411065250da0b4b9d91289985fd32025640b7b115500adceff8dde4c1ed13ce3fa6aeac4141c9fdb2598babe389c69319872bf0650dc6ba02f3fb8ed6b62d6f9a89b4c0bed261448847fcb1be5c1fc9c7cd85687f819805160a7d2a8ae3e833e6dec4e1f8c9cc4f5204700489229ba6444f270a76737c13b9032942c5aecc6a4ffb996be9167fc8b0d3349d0d5d6f947f3ef1d5f0efec96282d529cda799f9937df2177fd6ee7c3b743926399dd45779baed70b917cd8d364013709bb9ed30cf743315ef0fe307c0f75279da0f84b5db96210e22de7f9b448915f1d1814457e16ccfc5ef13cd11ef50698fb3b57ee351ca0b31c2781ba46cea261519d1a6fe66bda09bdcea1a8c55a0faf94ae522b985f0eed5d43b308c7b744d68299e64cb77879b34c2f17a9a82bda7c1fe9cb200426422695fda5d48396b36711e70436ff78b353d30238627f4f65da3550446c6128bc9ece35fcfe6ad7b4f2b489ea73d749afd366491ba0945747a882ba38ba4dfb14ff8367e188c3de1c516078ea25d2d20dfb846ae527c6f70babfc6c9cd1c181fc78826e22cc5a3ff1dd9e4bee53a4731c7e3c658ee1f719e7b9b088aeb843d34bf33c124c683f7ce30c3e37dc5b57d4ee8fb31327ccd9a450020fb1d5d5faf267194cab9151a2a3291851ba712b1882766d7919df1bd82234ba16e0ea4c2ea51d823bfaf484a41044b909ab84175301cf613e032b92be997e18141410f8c307cf00f86eee4c7d021982c7ae4e58dcee2f03f74234b46eac723f36c1bee1cfed2d4c51726f20fb579d23f892290713639a02fbd160e40fb20f52c3efdbcdd74caf99600cbaabd262c0bbdcb92192ac3ae76485192813f232a052b6397bdf98a54e8805892d0398fcde2b601bb69603cd745dd4412f7846b92b67869b7a11806cb8597b6f7897b035d7d39ef0a6d3374b4c8aa457cb7d3331819b7b507321f25626abe969a72efaac180f3a6fdc15c0e5ceea938923c12c4f3e4c99f2df7da9858311f9b5977afc2493ef072a5953d024911953bdcb8d72786ca69651b33f92d3154b1eed5faeb8ca01b77bc3b0389fe2e33d7581879051e84448fb8aa223d2303fb3294422454d4c23aa298555a50ea80a543c9090206bcb3750b72655e703e85b8f7f6409499d78133793c1fb7662fdff22b1639a65a19308611edaa2d22dc0bb47524dea892d9c07dc59c4a06dd2f5cd22e15402a60a61cb1f34c430d40a3dd392ea966c9e97f9e970e1d9186a1f127db3c0f67e8df85f6a603bf3e099c77f6d15d99dc912474dd8f6abde981272d24ca3cc6045928d7f8c71286758f908d2d713d88a0e449e2de01cafd261cd8932aeb28c91a4a13b3f398409f8ba3f168f8dbcdf25c47e6bb56b6f1f5a82e5e7a28f5dc267ffc336b74879f0bad1c64a45101ef353503a44303a3152dde6e92b63f989e51cd7bc5f7040186716a7efdc5e99ba504d539bdce900600207e9f6acb1eaf730509ec95ef6611dab116591ae0bf24a3a5d24aaf012010227c23d95bacaa053ba26e9928355047d792f62a4f3e76c97820a69104cba7988af16da02b2109c9edc8897c5ac15418c3b2ef5a7ac9445e1428c2daf45c4204bd6665599fba91f906a0f3624e72bec58bf980a04115e90c5b84d2e6b69588a6390f0be7265ef2894e2a469f9af39eac9e344d004eb50c026a51f50e7da619bbbe2b5a09abf8772791a2f52e5bb3016d461cb2956e242913d1d9ff4d76f7b5486d6672e53c0c838041662aeb9e2a1259e5ffc74ca3e0ced9a84f6350a7ed8478c72c2f9a0250f6ceceb1f598523f26cbdeb079ac81a5332e68e7019a03d8c33aebdead30d172db7582ec91e084b2da8999eb45325722755a1f9dba1a871494f380a44a58eaae50b96309a1b955cb694223d3eaa8a6ac316206e91d7075b1434128120374bb1a3467a26105410783d003bbaebd83cfc6622275a864e213e6ea92463420e96285958c884d8783ba075d2ce9872de2fea8c9b68ccdcd65e1f1cd705a4eebd0b19a3ff88dd682df76de91679946738fb145e448721c84810dbc33210a86f92c99080884012d4a65ea15637ab7e6cf71c92e7096298461b055cfc0cf1efa4e64e0630f52ff97c00d1f963d446c06aa92f70512ee6e4ca6754bc9c96f0304bee95c6dcf3bca2ac56aef34e0051d7e0354cced6fd2ff887fdd6e10c04134d4aa800065ce8564cc25d42662f9d67e3e6be90d0f2417cb3aada9d4124220784dea8bcbb966cdf601ee9d6761a58ff9a72fa7010412671bc4b9153f06af986c908acf1b9fa4076aa6456a72a9fc0b94c51608b2806d83d94e718d445a7c2233de6b537acc53b8b24efb1e79d41dc9235c0614b14400443d25a3894f13b4efb7d35f3961df1104902ab3748fb953bc88ac73995df2e0360b3978f77263f76ba3d8bcbef62e02172c6b44a186a164e4faa2a564a246980c4c3b849e1912d77b47185c4ce49e40d16428158e530a4a02ce587b89eec2284a11c5ff2d01fa1e24c5485d54e0c9d40a6bcd729df88b19187eabfbfc29932a3a4661739c4f647cdb0816e027eb2052d5a0761f5f14f29ed15cd8c09fbbf39e2feebeb5fcf863269c5062d053e0e7033591548610877da0302dcff5602dd917cdf45ebfa26d22da4fdc5efa1f08a572f7b7e8cfa783a37dbe05e48512753369d7972b8f423d116ef9dce435d5bf4719b511c7900ff2fe6fe9c7c30b280b7fe11895bfaf9d1dfd722af45a99ee204f838d70e98081c5611df6b53f17d101947f1feebc31a7a10ce3afd4e5359046f3bacb72896fbd7cc3caa3222ac550b504a286e576db036ad0953e88898e2c37dc30533fa7c1405f1ce160b7b5ca13d7fd243d30f3d5b9b6d9917711dce367d19e9b1d0c2300eb92435019a39eb90d5b6a8109fa0523bee05230bf7de8beb1b0abb94693c5fb2c67815f99ef879096416858f8c10ccf2e83663950da906d1ec5171e61ff9a2830302577637c4960c54519b572a30a3f176370d9f31be5e2173cf4f0042130b7ac43b797fe60a42d4a1746bcc7eeca6b116d317215acc88e3a2f44381032d40cfc786461f93e7eb2a21b37134424e0df47ca21462dd0e50f90de3974c2cf97e27c45c06402a8739783f9a4e0876b1c298c1a01fe87098e6e9c3111de03ee38f71f09bae15e5f19996850439047516f35d82d04b9a95df2c22ea8c78adb4d740189c091ead38488080ed57ca8f63e4f61f22f85a5f406ad769b22e148116ac7b789e6ff8f3afeb4ad0c6006903b0dbbc6286bc2c61d2c1527af54f2a0161632761654d4f9dea47db9820317e847936af23e49a023a3c4ee93fc84756ff8b452f2ee71a2c054e04368b25d5627bfdacec9e6091ad5b19cc77de6b757119316521ce94d40bf4edcef27f073c81f73332771f38a01cce09ef203f1fe60ddee5f94c5bfc285414270bd0af53e4baa482a0058fa4aa6d72c0418faa71735839fad0edf85649143ce25e46e8343e09a23a54e77a51d2234445600528d7f68c20b35f8efa5d5c2eafb77532b361dc3e72aeb8e142d336eddc9af5e439111f4ffdd0c8408058bbb4ae17a47164b6310a794c428b0fab9aa529039773a417f8341cea7f917b16d824e9b782f0fe9ac109090da89d61109933485609a903e1983e321c72383f07d221679dd9771da4cd08daab6f841610a74d848ebae8fb138b4a9b3b2e1caa217f2460effa8b3af42a4fc61c52d9d1e004eed22ca30e8a265a3cbb0e7b41578bacc862a811261c2f1c75479f94cc768e3200b03344d114244bcecfd053cbd9d803d572d7af679b7df2aceae9acd3ac7c3e8f096e2d8edb3da48eea62b12edbfb69b09a9eba0a4b36182e258794a672ff296d28b9e2d2be40240fbf4fbcd536e9fdb491fb34905539ffd6d0f3a163114af3f9c2112119b59bcebd258c84859f853567ab8a0810f8c9975036e392343903984a859cf104f8d561c7562ac47c5ab024d8bb30718f5bfc02d078a13275b3c2c34edc693c3ac7ed2367e1ebf154c7f9f8089e97f071a55988d2ce4480905f5976157866e8f649a05b52fe20c8f77df0ff6e2ab53334bf4f5a2223c935d585bb9f4f8ef62256c99b918bec7f02cfb6ed4c4aa1365376fccca313418c16a1250dcd530cb997d249bae23383d8ab55f023b3299d98c2dad049d9094d161d332c761b232bf7627cbae19523d2c402085f6f0806bf99837cbaf3afd6c8b46b1911a0274f92458bb33bb8efabb2aa237f5e1e5b744135138b18e64311df8f1ee2e4ab60560f115f02b6ae791f3b0cd887e4b8577c99b4420d2c1cb9395639906ec147460eac37efff91b01a2a3752e0bce72b41b60be793a5d47ac3e140d784fd6f410cc21af2942d16d6b7b9d0286bbbfec2a72822cb945ff7bca4327b2661483b0f04b355766222655b01ca4f02cbaa0fc81f0bd7210737bf81758ab9bb3392cd2ed330e5c45d9bc9e3bd5bbb4a0449460ae109842f95a612ff8e7a237f714969f0c9d17cb1d1e2308baed8cb41be768c4731332a441ec3707c12588a787429938b29a06af94e0c61c47d52a995d24b8971caa06d4e26a63655e869a23f6a03940e1f5f1eef087f96a34d0ae39bfef4a20b7d668f2439fed89be70ae28fed3f78c21f2e9a9bd9203786446273a022f7c3a2f5499250d777df9aed8c1d9b858fa97426ca06888a44f051a3f7d0f93c2c96c4ca8c4817694514d71d4b25aa07d974d8e523d7ab667d004d2e334f11e6e12deb8f1347e299d1da53928b0fb6ef85bc2ba08ba337b99604eeef8ee6a07d388bad53f511a86442b1bf6a432b93c6211c57cc60c910cb3c6f3501bf7a8c547d190440a32aabcf7cd37a10413b2cea7933eed49f9d5c6af46d7c86275dba46ea1a9329fa3bd46f418ced773ad28818f07f2973a11acc266b1b5ec527c702543648b31153e30cf221ce3b9b11b3ca636fea8e15e2c75f377dc845856f466599f8f632e118ad39a28b6e74db8d2322f50727bb9d0ff7c2385b020bbca654d6b64888cc6e470cbeb0231af3d0a31123c81e6d65d57a80cdcb932cbcdf06e334f0cfbb2a2587be213c0fef8216e752b4c4451d23ece128b8d150a34aa8ab5cf0690f5eb4a16761aa6d087fe6b786ce0f13017e0f96e1b2bbdb013ddccc87e41dbb1a01e39d35d25e3a9b0f27dfc199035165404ee0ac20afa607783818a1baf8d77f6d912d56a91cdfb113d1d550c18a4d1fe6ed07c7c05701d256d84a2de32cb44dc49898aa1e5cb61a89b5045de42659235226191e76dd2117153635d586d5c7dedbffca21d80e77d5c3cd965387df56fb987ddcc278bc056018cdee5ea17eb37baacc46ffc2bab9e7f95bd8b1395239faade1a2c901cee580fa2dc3980977baaa3aa687231ac2228414b4e06b38eb74aa0fdc5bcf2878125edb147b9cfcc04b06c671acbc7469d635099dcfd6edfd2b9b302d9f16553266ed3c451cb2e689ed0ec675c47872addc2d445bde044578aeba6ba3949c7db1ef08430b610816deb809c25ce0f737851230fc6aafbb7d620c55440e112abb399b25b5539b1d6cc455f2fb6316933008ea4e2db65a17cf2442a121b6abe399ad4c3b23afd97c52b5632d4632f614dd80ec5c827a0b1ca134d31dc4d70121a064f5007fa8a35c9709efe008010a38d01a742cdb385907c85d590414b446e7ac0b0c35a45a2ccb07a589a89642e6674b74fcc6bde7eaa9c2cf792014ce3fe417908b1ba670cefba7ba36e3f7b33090e5fac8a90c53652832c431e1ea91a6a65da71f18c6b052718deb8bf0eceafe29f576d36e456650bd52922d408ba21fd40aa9a3fb68503aa1157b857c0fb3fb242e19de1924d56fa23244cde5909d9ba17fc201aa3d1ed21a31ea17518e8e636a5f27c66ff025201f76596823ed0eb920735e0deb373a0723822176bdf61c1fcefa05af0b2fd84aaf858ff8437e5f40c3fc1540ea63b93999dd94bc1a110b3ba2cd230d5d492dca3eb7fa0296fb1179288268cc5db85bee6af4d8a1715248d2e16f692e2e8e6a045929dbf761e50d93536dda6b9a57921cec95338214160bb02df38b0375fe1df2e1611633b91b96eb661e55ee31292f2bdd279ded83b3b793907774879d4ff98588999782667b4f2dbcd8cf942a5cfe01fb465c9d9d598a21919e9f0815cdfbb46a4125c2d5c1fb92a2a91d5863ca7563e2d618cc3b200091f0ed4216baaa2738586cd9486ac23835d2191e7d2064c29a2d035ad5165942a70122e6c5f2ae205ba084f42916f9a4b806561169d636b7f2112a5ec430237fe4cdbd2449898318c2d751f76ebf9adeff031630e2398ce148288424c0b14296dcb9750cf0294977645164ecb0b3eac812e16b8ae46b28e0ca06b65fc2ebf584d640844180a7f9e80299d515d0c0f96a73e21dafe68cfb9bf3228f062a4bd502635b8dda5d709fb25d1d4b5e502e9fa233fa0e619c5bb35d14bcabbb277504be6533a6c73e2f34c0939f6d693f3284ea65e257f34fb1232b9ec70c0264f52510e9cb69492e0ac4b3995b9ac255fe1617b3d68702b7c6513be494a54ef3dc2a290bc07bc9e317ee884bc25cb0b4286ba2679d3dd7edf2a68d135a190987582bac977cc6d7819a4b840a72f345c9d7b55aa5bab139d688ef4999545c15ad31dc5a644bfd44a2c69861b3939637d7812490e633f9d5b06ca6cfcdf5fbd84ad9eea2e4f82e00349515d3da99d2a3f2da6e99c04c4a5369302eb4b5ce4355e3f6345c09f6a673ef70173ceefd3c3e4ced1f8ac0eb48b1cf7ab4df3dabf8471fec4e5ebef12cab2c63e7fa6748feb0e6048ef7544708a58cca24658eb58bec8c775de38631fa9b1c40be15326a8ddab4ada6c34a463237b534418065e33373288840a96d2720afda55faa62634a9381448dfc138ba50c5bcc6c5909d5cf4003e0f697eb1918bf90dd4c9d0e065f210caa49db8a753a0d849472a923a05f1b05685c8b128a6c2c7bb5dceb37984911f68dc9832785523414363f969f3897a607a92bef367b495a4fdab81b3f048e5b1a0ab46fd10db853c2fb2aa8a94c31e80ca83965fa7bd715dd8a9830472e12aef8fccd22978097e17fcc150b1da49bcb20d9b8699742d850862a694849dfea48d9a931eaa3fb36f6b973334af580c4d59076bdd82540fbce401285d90e807a642efd01180dc0e6b2b9aa56730a8084c9576556ec8a1568490a8e08478bc2c5f4d468223bed866626df6892803aefbf13e58e9b4bca63a13f51151ac4e84c03e3c18f64981f394c1070bb00fbd8c4c5f82e2b93ba27f6c179a69fb8d320d7ab930b3bac56f2541b4fbc13968fbb348662b64640adc4e3c782500fcc058423e340a965625458609480d94376f541927834a4d9b57321b27f961cac6e58321784f706ca557d9e700e87d292db1a24a2701f2ce40eff96c7ee8ff82f966ceae0f3063f873fde892ac8c67036ca4327bba72d5dc22f843db6eed8ceee3a368a9e50f16229254d41cbe61c7095d5caec7dd5445d11554c3393e686c26958227ff8bd4f99349e322486c6d383e45f53e418f11939e623fe873b9a846318b794c0c9db76584c3bc9434e1864a6cad0fe7f6930b1470842ce9fb0cf29e83798683d9a013283e242aaf3809a5c95a9a216cb7617767af0741c3a065b80d0f24ed64235eafd302719f0d31bcec65099f4276c4a8f083b8d06444c403daaeefde32664ac5e7672e0b764bfd10ac61b4b7aed75a75922060aa81ff47f0b405e193e787325d735f039e5a291c22202403c9155932fb2baeae8347a021b1f37dd4ed64945d9a5877352133fb5175a7be41309230c6c291334668e29e24f59a8fee5557940767936087b017a10547c7948f048079ea041513803e55cc3e3a6b31d6a16c296512ccecfa8fd33effc1bc6c7884a5bf90c0c822a6b7f6433f23571d6a7413d8eacd75ea1dac956b8f7765d2ccf5bd0a3d1ee26c299113da5d8b212120920fb3d6895d9c600b79fdb75ad9874f2975f83e70835a5cca73c7419416276d1ecce3ef14a55685d4a7558e246d0dd45bf0dd326d601e3ee5950daa2f4e692ecac08178a340fc7b335feda82578145eb48d1073322e996ca0e14fe6f904f301a62f16aeb25a2a2e557b8c5f0d9abf031d2f65f4726db02707767c10dd5af07da836bc78c059ba9882d03e2fe224901fe0c72e9da3f9146729c98f5d20e4d72d3d07fad2f8212f4f9c9dcc50a78dd50da332f5c5c81f3e3470ec6cd4f9e1f04261d83b8dd0eae94c7ae2fb52b87e73c3ba95950007fc62f4b25a813223a1fe5d2f7e7cae2f37acf341c4e1bf0999f48d165d305b8f6870417c88a4170a772672f26a669d6dcccc0f5a396e2aa880299eebff3b1b1474df61935ec61b88315e47c209d4597ba41e9b74d0d1a7e7f287002787b22bd89ef23a26a279656864df2a3a75bce79a7d496ac80a1520d8bba15d46334e3671fcbcaa10b598ade1ac75614296a74e269b691e2637bf9ae5a2118ebedc388ae64b21f57b4c57a8a9bd80b62e993252f7cbedd1d8dc59dd9766fcd992d574be3e02819358592fbfd1f5ae8fd582e06eb2584f698eb06982f03b676f82038196a1a4d5b64aa53f618f20afdcdfae55e1af0ee97c3119142773969f86896448a594f704f77c6d55611032730243ad1abc3120af5608dee2132fb3d0a2e90705da51c303d9275c43f872d2d17d825b2eb8ad66f42a04a0fbc681b31e5f424a72935f42a14db58b2838859f18daeb224c0bb79278052d86197419ec2c9b3db9659117206b4a26726cf77d63abbb685a0814832dc53a89af547b7fb4e5c48a7975fe0760f7a02490031fbcf9b776b847d1b71c17afb54d7e416645f4c42efe07f3714b5726d9884d0230dcfbb2f79fdfad216773a98414328950c55324f7abc1c371c954f5d4d4d88fbb8c3dc6e2d4b7d1e8998458efdb15a85d945a7636a57b6d9e83899f618d915cd42ae3848750a8d6c3cd57c563c9ab82f9e8722f6efc78318fc1a0ae0e79c4eb679da37d0f86872122b385a21fb92c1c5db934b607a97f8feae759a5804d1d3e0c66b86b19ef1d185055972f65c7d88baabff715861b2db79926dc1f66afe7a304712614c71e9ddab14b1e4bf116a5affd3a0cd6e1a5a78628dd122508a86116037b8d44a033a23a47942f67805d473ae8bce5336b862c17791c8ca377bd06b6ef35119943007a22df640508b5b64eb5eddccae3b31824a050ef65f3427b83c7225dbdfa5844783ed74fa1eec65834c7e6f26d97eac63286977972b6b1365f05c64a97e97dfadfffb937ede985cb9a9c7eb4a30dbabc89eb7b90dae7e30984a6b58d2ce20b6abb993e8068aaaab16a91e498aeb2a72b0a9163b9482378b8ce9a1b75da5221abb6eac9d6723fe3ee41cbddb1958b1c8e32918b015035243d7428bf9e6d54b9679dd341b23b59e4b7165e3647a8e21258f64a1a98c6c759bbbbd62179f4151d10fcc05c16b84fe63d727a976d694b5ea4a7394fe9e442a850f9dc170d11996e1d013c36a11ff9904a44bf4c74e8d82badf7097fa4c1f5fdc5296a244dbe28ab218401fe638b7ae2797f7789e73d09c670394dbd81ff0578b11368449a56f03093610ddbc039e8032b4473f1f853df88ffea0b916a11200e8b7f7809b4525acd04a2396d0993214b92f98dc933b4f7727b8cc081774f7aa0336f497fd2e4cf1f8d63fcba66f049515df96419cac1099c4e827715798651b6d8a023aa1fd083443241f3e7178f944bd6131e940b69ba6080706e7aec97cf8e924352748485d54c10dc7ee90cd5fba8bbfefae5af88bc907908bd63ef7b0d99befefd72ea1bb173bdd0247087cb6f576feb69b8194ad73e2ef76fb9fd9830b56df43553b5fbd2f8eaaea0b60270cf80850398813ebbb404f4e045a303996321eb810712977036037ea2e591506f5a6382df28dd2fb452762f436fb9443abb0aef14a9d5553767975703137d2db72eb97299d43ac218bea412dbd30d5ce481608adbaa402bd80162e2c9e283d3167abaa06983e9dbe1500c06cfec731584d3888a8ddc748e2220f607f7b13d8f36c99427753edf8368e20e9a43483665e29dd13eccbe8bc89f8620efaa10109817b860c248083e8c2104632b186f3529171b197da2ddff4ab985ed5aa0c33cd58bc50c404355694c44ca45812a648858021af7115b182655f7cc5806e6edf65dfa719af7fa7b2e77a2d63c7924c657147cc90b196296660453607c0886add042bc5648f614bb924f86d6d84e3e6d27b4b0802b2ebcba8343a23ff116c723829c960547bf03ff19720474fc4394809fc70f1e9bfacd108d4f4069db61297ef1cd0438ba03911930d65224311b7bc743a3ef2e8d022e7ffaa11bb1fae6a8745799df6b98fb5b24f2bb13a30761376164c3a9479900757782acaeabe88a9eee91f7a92bce9475a85227a3b129cb6ea9292fb076993a80bf34cbac65d88350637b6479f97301217ee20b42e6d17becdfaf97d6131114021b0cac3274cb0d31e6e8f09028ed630361144a0eba8f58f3873282ce43e72bda10301c74fd4d7512f087e441a7df7c4bcdc8c32a974ce638143c8d6a45d18e820c0538a6fc44faccbc4465926b731f9a49f08ffdbcf01b9514e727c9617780024091ec6bc83a8c27b8e6453e369527ea225dede56c886ab84304b7f836dab8e2cb9ad3814dd47e6bc568c06240e37d786e528ea2eab7355a805102ca7576093ff27564a9ec8be94887174f812f71e350b48ea302d37353504b175063437f111c401ad88492cc0ea8b1c17e1f9af510dfc839bd3cbe0c3c6f84ae9700faad6ca69e8a225200c86225c0470adf87a7a62feecfa1b139108938041256dbc3dcad32f0119b09a8ff4af32f2d2ec8f8392187cf7584569238d4113ff466316357efb910fede21006a134066192edfc75b7d203e9c57d93cc74ae2a7b0f2c1ad5a8b62fea859ab219824a05eb03e3a0b271ad7f65a0c8b4aecc99a5a44ed3bbcf27c015e0a962fea587aae5c26377117c55bdd34ad7cb642825c49f436e95879700c6ff0d43210f6a5ce6ea7c59a91f2e322cec2c5b6f0d0d004eb6d4b7d88628a7dbdee9debd18a370fd549f9f7855689dd0bb4a2e2a5a055d5438e221306eedda7441e580b567b698d0017eadc2532529e2c7a4aef3775f245773867b1c3d74d27f1a0fe2993b1aa86941b7d5cba71aa7abe4c373d71da4495b27179d2733b7c5573a4609d95cf4a2d1533dd0026f345e05adbe25c499cabf5b3102aefec5a37258c825df5077221db805d72bf2e738cdc7fe0f7b29be79b6ddffd0e1b621a063626370573a592ac23edd8367a032156a708343c609523d70129076615b8b6261bd5f6e0ef5a7a85467f25e77888ea060db854555b198441a2e0c9b2a7d879cf190afc5a20d3e35d58295856aa1ba006a8a1b0b001477bc3efea3ec242a7f84d05d44018a9136db834399dc83888a1e5d30fbe6bc559b3b21b3ad5690f1a6152a1bbbf439006455c170a70acb25f5ef975e63bfe427efb5f12054db1647e8b6a6b486c99fdd6e136cd23887271352202d6a2e9b20565ce61e3054e6e7ea2c678109b6a07bc9a4d3eb21f52ecf359739b1360d65c8b2a547134e694ceca7a83941429fed6f785c04d06b383f7858d0c8e5dd788bc84a5cef318f92179cb6fabd86cf0407f9f1e43c146d63f1321d03593905825bc32ff69a38c5e26ba92efe9290a63907c7979eb9d6a834178f9b0eefc5ebe3c69f86f9c7b85f6e47064a4166dfab5091fc6bbb2fedfe3c8a3e5f30d89d4579c01418ec6a8f0f170dc996f943416f4de2a121711ed7b302eae35283331837326d8af5300999c1969fdd75b9154e5f5799f0107cbf47865f19b70a1c17c3ec4bd0e288066918100867d1a12be9c18d023e70502c13bff4746f823adaf7d84a9e979b3d5a5aa1d69fe31da67dcca4604718f753d3ae8628f41fd5a4c5eee04b8d65ca78e73c73ca5eb3164503a5526b6bb1336f0d7c7cd859f8f9237e50e5d54753992321ded52872671c34b4cb2fd62cabe6866400a9f55ec0ffc9c3895921ea5018d708470afc1f8da56ed2b0feb813c9b5cbb2375c5621fe20553bba12acf2d942de4dd04c38e9071a6ca63e27e2f49ee3df18659181baf65609b1325eaaef05bdf69491ffcae1415eaafec0200a5628eda8293d7dcc0e4d686459e7b1274b0dbfcef55b22211faf9fcb1a575af2eccfe7daedc81794d43b1d2929fcb8ad291a4644578ca46a10b1543a169a37848e5be61751f5ced18c3f67d3c9a54ecf9f54d4518f86061194befd8e4322b4fef84a9ba6dd4f531f4f3863e3951020c903e6d816830103f15cc6a26861b371af161c1d5153b57dc9bfcd133ceda26aec78c50a84c78981632d7fd7331f8a44dec66f5631ff1f92bf3f610e18cdbc01c0dd6a2e5da679996788ef4fab68f71e9b169fdfb1cf5e057f2465d3492a5bac118ed86eabf704e9adc4de6fe8160caad9d5b4f51a45f9ce6ae9f483d03c15228082c6c2c19d81b678a9f2f7319298f7bab859eb58f05aa87bdb6f71e965c04d4f879f30730ba78d83e1a1129793bf0c9be73a707d59d92a819d5e5845d22681ead57ac040ba502bc2b9d7002804cbea7aed4f6be5c1a58a3023664d1b548650d2d8efe0e5de177f35f9a1307bacc70b720def84713cf3bf284ad9e574f38b4f952229ed0792f032b6c81f39388ce59f949efd8d26592e94540fa1321a0d6e7220bef9b9123b132c929323e4da3e96da2bcab60376fbb5bd02fd5e41820847546c042726053e5832f511952ea9827cfb30466c28f41888638891037cce679745da62f7eea8a22508cd8d26ab25a54054e3e7a4de570625233b4ac67a19d4682386dd3bbbfe5357ce805732d2dc59d635ccc1a7f7fe9a6d7370955cde5805d91bf10854864ef104bd2fde8390cd38a124076e85b0feebce143f28ae1847d0e8069bc956a22ceb47e299bc437c777f5fac78f225d2787079c4bcb7f3bb63990ed95a1ba0837b8b314b206a1154dc7ac0b4efc462c2e6a6a54b8b31e8761b1cb694c502432f26050a75d3f46256a3fab307b13b88d07298b4b3f47f83b9a5ccf69e71cff7ee9ac1d330703e4d60b86c64f0bce704253151c6f6fea833a44ee80c22ead42b9aa971f214bdceb0fdf4cfa47234642545bf50b686901ab453fcf9ea7d51fe4b191108358f2683f4f16cf8cc55e3a2c81e5a2dfaa2c1031861f1a33b9ca4fae6ca2ca103fdc21ccea972e7dd9f9f6537efb388df519816ae04edf6abdce0d295b9eb4e7e90c45054128f0b068d56feea4557d0dc6346772728d61ea0d84a9c3ef186fea601aec885f5139178c006287379f0a0de4c5b1f2e3682820e0c3ab1563c80ded9f04973ee75e4f43ed4d77c70ccbe3ef460a573acb3ec9f9c6fb005cc5a98e3e7cf9f64e0b4462b3fc5c45517d38faa151700a55d3e067ad7e8f615ef963d20fd942d99d564e908c777c44fb85b35e986cde90dc8b460e6e65d04d2d26546e5df97f87f206ca22dc5289c8ecd55216c869dacb3e68e043238db589803ffb9f81788f5b9be8e9eea51aa4b231ced26ba0d12525606b95ea5d6228f9c55664eb62890104cc3b462561b4cd5b9aa9f2253eac61aedbad9f6c941fad3298f9e20c04002c10b02bea3df2c7ee2d93a7d1a2b9a1135cb17821067f220324b9364ae601091fac7f9dd2e29c77fcf682b7d7b10d78e2d26518ca3746f3a830bb8e661ee56bf6137f990e08548ca4a12cdb8dc0bc0b0d73996bf14e989d0a6ec2a149743b34ec83c65d7c779bde6aecac0ba67bacaf5a6c63d6dd1f99024cfa988d241577caeb09efcf2aedcecf1a5666dd76f8645af5b7da3c937102c3b5331d52afa3624a54cc7ad250a2f3acce2dce1a70c70abff6465dc26d27635962cf01a69e6a7844867b66f3eb2cfb4ef2e7de8b53cc0ca62dc41dc5d8b4251764d85dd4f682f46f98bfec52d8ae05286f1bba5612ff7ed48dc8ff5d29516392a97494ee3c988f53dd3052eb4de4608f3caa717c82c34dab302080f78708d47dd0da5d2d8ff9c106b32f2f604f2b69e7d89f50507d9708750f001a290bc88c00d15f2e2db26719d1d4c04860112d23822aa1f8dcd772f41bab604e33a2ae164b8d959813d1681fd2ee9df938e84a37b121f4e782e6b16885ce174cb04728865e0b923a9b836faffcacf145fe1307bfa704cecb9a2afc3107cdc1d02880fbc8168a6f4803469df33c1105192ac5a7b19a90a02faa06284ca68851fd32587d266403dd9bd4956ee5ac716304336bf0d8bbdb11113b3518a84e87bcfe730341b69f1157a8e5ed00f607953a5fd4d5ec2c94437a19550bf1ab6e8233b19725db4ee64d72eeed25d7b49267e41c62cc97227653aae2b646d964e97372e08f02b417b09cbf0b9246a39afaf57736d945fcfde5f6c8fca01f7604edf39036ef0bb14282d233cfcea5cb065bf25438b9c0204f3c63bfc0f49fbd82fc12e6746fea013495f7a0d4bb6a0543d5f2fe97b9dcfb824a1a87293f84fa9ed9a734aad396f45a835b5a5f4af1c7d208d87a036261d751a55e82033ce39c768d79d3682e8160317d6c34df440d5fa0064cb407b6d2a36ff4576ba8d3254a70879ee33788182833959e0e72b167075c75bb776113ceda1a83d58f93d529dfc674538dde211ec6f7b125c4ba4a7efd2fe06a076beaac847fcc982704b53cd7c3bcbead37c68484767ac853c1f0edd9255aa34b3f9d63af6c0a2ec6903c8cb7fbd0604f468cad2a0190328c8ef2ed1acb051e7b1b464837d3665e389a195ce90e30ea6d5d479356182bac81142c0c1f585c42829775f447b3aab825796e51cc3241a3586289ed3df65fbf413180b852344e4691765c84f67d7855ea016874431332b83128067ddf74151d767fa0169ddb376f33c2b9a8a62d6823ced72f54e6551d4131f6607f4d457d70c018c9ef0da187897ff24f985c6295d6ba53cf2cf6c5eaa688cf947adfa8e7a0e20b8d2f214276c4d064b08b067cd7bc61bbd57ce2c777c8a8acc0fad7b41e781f9750639a29fcf1983a31627e66097296f53abf40eab22bfdf3d8ff7de0d63e3d8e19d47ba9aba0456598799f30671acc1e360e890777a2d81b1380547517473150f6d9f5c24ba1ee68a1753ef605f70b575e18e1f4660bb1eb62abc5270796c88c23f98eb35a539004a8383616b95b5f4941e575f8815075adf1a44942e8b62671b4281ed559cf804ed51699eb9105105cbe7bcce446d3f864dc34a16a5647d54288b6060d37cde7751e4aa0e3161d7adc5fb90977b60183b1ffb67e4c2976bba6f9d23f643cbbe7bc566dc72b49617535354840cb8645e6dbb7398ba419e6bd06d84832613ba423f6b0e767f9a924154271e3a96aafd6fd03b0064bc15290cb481d6ea37b298202fef831afe698716397c1a420bfbb77fd0a2f7433f742efca96fa066dce21cb02a5c9a199e823891f72b0de754030b9538e9e074b3848ba2301ec6b242f969766476c7884f54d53d20ff9469ef0ead2a4325c617e2716c06d6c0029a35b2a8f26d3f3a24b734fc238dc1e80599844b0512d7dde41382940500cdf1eb87a9c742f5554140d709a765cb30a934631b109acb67b73c5aa535247d99110766d004ed5c3657ff670e7f638b262bdf920c891f623e84063a6eabef1177d5ec44449762c18b77fe94cb538470fac25dded674a3ababbf8dbd81e18c4765150fdedd0b4e8a4cef8e982d3480871e1c705ba3f015eb3765369e37c92ae49b1b6c2c029c7275fb6228522389e88249c0b2a019d199de5c7f0ac891d94966086f2e2e71224b8ad3a150b1d300173a3a8cbfda54bf997c59c1b5ef8019c827623321adeb0e11f82540701420a8e544a602af9e7fc8492bdff93bbe5f090bb2a7b10666bd798b94edaedcb62f72bfdf74954b8a876548b6d21b9cdb9e236598af9b4ff905676c0a433b35966924e1b294bd31c9665ab1bce803134f2920260984fae3cc87dd99c018b40cf4c6530565e600dceff21ec28bd4d05afbd3c3fab51c98273c985c71e72f57891a67172f91af874cebba37977b93653e26b887230bfc63ead2e4b410b4f04915c1f4a2414a695c1d9c4b1effb9afcb3ed3c970363ba973a7e8f3c2c78577f200442d4a6c9a684640afbe125bc3ff056d45b55e3716b6e7e233ef89815d6dc51714aeecfc7c3d70a9cdf258564a737c97209b5fe7e85da5ec2a6c257bc0c2f7a26b22e24283a70ef6af3df405c59e7c15d98ae0a3de7a2b3a90d82d95c532804f6e5e2c1d51d78a0ca234aa23bdf3862dd365a6bd3c94d07458f12eb7155ef97128c3cd0252277fa540959f0f9e5fb974374f53f8ffcad8297d11759ad8f18cb42356b43566575529ce031f16dd8fa3dca1968cec1340d5a5d0c3512e4db20950a733999d1b5aaec911fdfc57991a2c47407b4da089caa062628c84d8dda0c40352aa1bfe3cf73254689cd58437cb4a216e95f5439b522217e446d94d8d277a72fe99f208d2faf80c49fc7b2609f2972656cb2332fce8e0abfd0a5235b6dceaf896b40bc1c61ea4e8e6e3cf8386ff6f7fd93c1a36b8d56bedb1ede2c0d5fb06ea688855f6c19600f7db53d93b9c4386ac1bc9f080204ab0217df6cd87ada17648d5bf6ca844f7bbe77cae67de2cdd65f6d207386f1882a26e10ce0f539bb2840dca5ec5e76d34b3925c4122336fdddc089c3d5aab713039392d1c0c41c93f184cd101376e18419f95d4deea70d4192c1e03082f4de8a5f1a132b3fb7a3556f83663bdd725213cd5335d6ea479ff65cf9b1e7ffd10ed57ed9c36110d8d27b326df32ab27dbebeee4c06f16bd5e89487b96fb4527a40068f065e6aced0c784e9d47e32625de433e7e2d6023dbf33e7ed4012ba8214f6115b920eb8cba2b9925fb680e8f7612a6fe558f3484c3ac7b782d4495c36378fafeac9a70a7b970c88524328dc492af07c4523d88514359140a17bd778710265ed7d56e0d152cfba2338995f58f5baf385ae2d07de2e4c923c66feb620f5ba8a2caa98e298ec8c10e53be5f2cee357e48d2d8a01314121751cd583cbfb60de4bb59e97bbd74d854b0db6d1b4296247cd63a251ee226d5b6376d06a1fb5715e7d8bd8f28750daa7ffafb714bc515dec9d22576e78a349e544a6ab641616d23b0aaf4b739eaf0dfbd1321279bf02ba56217dabf580387b44d5bdb092636fcd3511e65c01a1b883dd8e803ae8a892b1d1298b83b6d0da9b55e3327693470daa7deb4c75b718e92a6f3707f7fb0616ed094c48635bf27dd2d16c11eac7da6c8f5d8c980fb82e573df6564fc4d1f9695248397d8ef1995873730010542e16167fc1268d50afefa6a5e6f3463c52ecddc040eabb7a0bf3372429b9e0f4ef41dc2fe16bfb3ac1f20d63cbcb732ecab9b4954a4b593f41b3dd8473036e1476b7a9edd7e0e3eba745b37f2afe03e155b4424550f2dca6e934954e977760fef71b8ff0a44c644e2f7215ec83ca4ffa54f3f7689830b25f36d188ae84ac6f05bcb40684cceeaeea94965b6343a64f9aea49c529a000a9b1fec001b3582773e91daa55560ad9da555aefb2c78f563d9aee4eb85d9136fa8a33e1d767efca49e36b77de197047f9cfcb3e437c0a22a37f4cb4681bead88136c4b1ad6f3cfa36e8e47006620f0457b16ea7134d6eeca582974bf81b035bd41862210d00aca2cb7c0d99f4a749c10d4f8291df2b91c43403b3829e825d78bfe843a31bd54b2de2fa25ced61b756a6344263bf5096ef78a4ddbcdf61e1b9bb0cfca00c276e008b691b59e0d4060a92e43df2ca9d7a9f7ad14355c0917d6507f8e8a88909ccbf4bcc19ded75c1a9f259fd35b337d28aac9b658d0c376242d1927d6c2f960255e91cbb6f3bdf099f33e1a7df38313843a7ef02904c7d0e2e4484c383714bda755319aa4ca555b09d3279dfd0d236c6b5b0281859e1ea7e3d72280257b91ccb70efaa4a1a2c77485a3735e857e2ca64f6fb7bc2fd8a25829ab54c1c4ce3e9c41fd5af5096dc2f8dfb8987d86e3c1d1cea516131f6174dcef2c67a7f4880a9c0b75c2b6750090d1a0b6c218bf1449d694ea01d8d7a075d19b2d118f2572961e4ee64e43848595af0e1a1d3de7e7077d554b4916aa06570caccf135d4bd87c7772440e5c4772dc318a7705115cc09ff47fc2d086fa211110cc1c60aea8c02ce06b2e182c77a413cdf56d54c0af2c1c34255b21c647c287109dbc444b908ffff5203dfa7f93303c5859b122b5b83adba7ca3fc7d613920153c71d667572aa6a145aee5b46a58176b93476c72db9838432beb80cc89d672e52eaf0adb29d92c5dd198e98b5d7748cbd4f71836598331aa920828bc683c349b2e3cb8ec72ae185f672ac83a7c12c751e06144a596e194309bd1767ff56fd5c41605eb3c3f141a7a7472f1c0d81cff17d1b51c54a39909cd1fb7729a5a536fa04dd66d4fbd2f5ab2014d223f206178ee700a8124ecbef2879f8253b3d8f630acc821466eb90a6345b928269943b1b0bee559199d0ab41077376d18a167d5de21a84b76a08702d8568e991536def073c8f5ed6db1f5ebb12e77e8f4f1df5a98c80c95185020950510997d959f52c3b6fdd65914d35dd7c959bf632e77ad96fccb95ce2d8e4cead4df050fc276dc1dd0782953b40a5e79df2021085ef51b1417aa7bc34e4e45f8c4c4b8a359b777cd62de34baab44ae7a92af88664a1819019e475684d4fd0904f18384da103bb1b4c4e1c9fdac178f160091842ab30a0ce1ea9a8ee11dce5d587c0bab8b441beb272731470061f33532a1daf2610e9386e1e5ac235d71d6e8146cc5d7fa3c8d6757a7c42e69f5fa02a972cc6f6516746397e8d1d2749676dc2cf578327ba9c19a8793ce73badbf831fad699eba57e995b27a5488d647a41b366a28a1856f9fb21ddd8ef4b24dab45c36514e6178a7d71c32faf3f7e4b5d694388a8ac87f536ad61761b7a593c0653b04b4d033c93472e0de74b8763ccca422c4f272181bb4647738cc67d345180aae2111fddbef208545c8f4c34d6de5d82d560e76d567a5e7c536d4a1a9a4721c8f238b2f57c248237ada22590c28ce37775ff6776341e6b81088368932e07a928dbbedbf02d8e2941d4be0b3738c8a88862b792e2fe69181682d76f41ea54e5884b1159f74b7050b287b91a462b35b28eaa0fa1d6e651c48f1ce03833be880c3b258e7a1be9e57533e3810f626b77863d6d945ebd7663c72b63e214b53c13ad02958378a50d90c67f79f5c481ab382ed1c29716392bae242fd27ebfedccd56817f028afb1755589eacb022bcc6d451fe0cff1248af2972de77d8f08e7e9f67410251e718e1282a3447820e4fe81a18cc3a67c1330c259c0872960ae84b34b7818d72054233522afe488fc78f39d48c1dcdd1eaaf4fe699b44b4f82c23d5e97f2713d81722b0c906dc2868a6dc87cd1852ab3cd1b00279a11eab2988e0fc10dde2fa2cbdde4feccda7bee21c14a7517b47899727ecfbbd6205d0fc59c85280fab9d30a2ee3731ae0415466c2bd579df4be31cdb700bf8c5b62fbddce6d84cf70fd44fa361da2db64756410ebc662a54d2717ceb030f2b672a4020b8f6a8d1b4139f9f806b67aa5919769bb9b87921044beea8f7ea284a7d53fed5ffd364221cc99918a7ace4e6f464b4dc223872c5c98d44c87ed77c5e5f72f1ea1a3d49f8060f15fe9f31c8cc876989371f0356f6ea3078c67d052c6779471c56a039461fef86217f20dd18351443af34c8a8e70d54ecaa33c8f0e3473f8f2a2107f00e649e4f28e01ace0810f3acb53dca5457d9cb0845b83989b8aca716702517180fe08c09246fedabc94558431d6c20d96f2bfe3ec450b9e7c4a7fcad92b3ec9fd2589d5570d1cc4a2b5efaa7a1c53ef618ba43087677140483c8f0e5c91f5e5500e9e58e8e73d68ae53a1c001f2618815150d5b6f5ab21afd57133bb07db59e81d4463a04aaa264ffd3cca0ea5d0a9f4e35d8a48ad15340f20678c787b758ab6d9419b51f49be616af38a0613f658a12dd2e12664456301df7b07f80693a496d7d48fff4ca65b642b6dfc43f38be86d8eb97e13329fc550d8d2e576648961a38dd72124fc36664f9f3d95be4fd01926d7c7990defaded93903294e9a5bf83ecc3ed9835a3a819f4ef4cc0c09b7a7fe06c8a1f9a42127d9e0f5c573aca31a00d7a7acc03db436dc0948bfdd87f3895834f70d8e7877bb5676148d3afec6eea93ae4d90aceddaa4dc2814b6458359d618985ab8cb184cbebdbf31480aae1e2ac49c5916f798b924c02e78bd0909c786d596313bfd790d2ec1fcefd93e55b7fd144e5695bbd7493c766ab80ef5bad22a381f361158c5ad9ecdf3f062bd2d09c651cec71d7885473725216996e408fee979f4fca2342f0481e3285da765ecdbe668cf81654cdb4084e7db2f71e5dc709e6d4bd952910a3ca22fd0ef5783356d94e3aeb549d29ab3b1e865386217ad77bc1c7bf50ff0b97f9edaf913a5a4ad3b1ecef0f0ff93ff3ad37c93085a541de21d4ee01d82ed03c3e252af1447cc4ba62856e2192fd7983615dca46ddf50e4d37f637e20fbf8e53f57499560468638b7111e79a91316632ccbf083b1f89c87b4cc757d2d9d902193e544781672331b9028dd49e24f141db331699f198cf4fbeefb44416c1e57c6f1c1cc4be86235045dde4502415d4846c6620149ce11a8a4efee061e50d42ee7bc4d20d7ea4ae4d6cd08306241da80b86bf29bcd6cb129d320f4223fdcf8f9956f6e54b28df671342313a559aa4b0cd03719e915386f3b1351b259211a29d3101c57a06942b8fef62f91530b87d24534c5c210df3c8930313d8b045185cf0f8e7fd59b507e9a1ceeda68c32959e758745fa13bbcc3039dca6ab2320866b168c8810c388d58d54c0a176be233b32026a6035b2573af9e88aba0191159a29f8a31acd981550bb22937ab67dc4b81201cd5de2a12f887e3fe404afdd5c9c187e750d01012734386fb2ae5727ae9feaff6ca46e2b171e03338a1d6eef80964cef0c26c4b14ad2b026728692504bdda74999513b81dc42ce0ab12a57aa9f0d9b0933a86828fd8239767b6e2df265b48d9784beb250f5976f24452e6bb541c7fb06d798fdff0767b886eb3ad9f2747f7010fab1cfd41321342dd3db3b5b040ec41a45f7e4d03be0bac67d1db68b5a59c1f7a0dd6e01481c78ab2811aa9838187674188046a0c563f662adee970fe6acab82508068dc0ca4db77d6964e6d86e5c15d601ff43c27dc20856a552eda9378ed8cdfacd6db94abb8abbeeed7ce9baf243dfb24230b1e77b017104ee6cfc085467fbaa301ff2577f77116e8841bc24b68eb1291066070cf71cdab01e4d939ed9cfd31ef2e1afa78e10b59f7716fc35a6c7bc0669d6bf90976a36ca4f3061266076bd10d422bdce18840c2dece6ceb9d6d4b5295d1f43f454ca544d5e3e6377fd28ac91eaa99ecfce8956a04f07b5007c0b937726a473dcc81bb64104e8f6ac8bdf63009ca669501bf52b0e6a4f8976e487475cce266859d3896129e699452c8b7b17344425c8475e16abee60f6eda14e532e90a81a0c86b9837513dbf8ea24f6f9e9d1a0d941b9a6d5c0f3901e3a74bc80309b10e8e12f89ed9175095327d2d06e0a89b4ec453ec3b9bb49a68e0631e129d89a611044478da6d9a23a50fd86087ced2ee4c8be417f4cf7e7dc9ae1baf6e2418bfa208efd30145ae0590f4948432e7252a0f5b3cd55dc7b36303aa02666abbb9270c4237c37e04479a70f241f21a5fdbdd84ee71199c654245856b219d6f6d8eca2447ed6b07aaec47a15735e838c95a539f09b6bf793e4bcce9d28393566c20cc3b686f0ee965343ef9e5c730bac1d5ac4b1be0b3419e24c01585096a6a85d5b43777e00493217ed292b60935542569c329ae6475749002140be23861e74f1c3c98272197a368b923704d9ceb4062c47de2a09e89b95c4fc046f5f93e718d416a02e9f17260a776247c6d74cd78231b368c090e3c83e71935c8f3e0618f1f69a7cc9430ac523ce88b36a144d3c68fe951fe86ace407e40977abf4cf2d81120407fef2a314cde9c309445f11c7b860145826f6a7af08a417e2febe3a25a83926370f25f567cf7e108e55a39bee35ef8a4db8aa338d2b14d4917da3f5136d0150a64b6ba78c4d7bea4906324f06088c972cd27b160dbb62a627fc7650baf4bcfb038b9ea83280cd8197c95bc8a41e33e56f452ece84aaff858630f296ff3b525242c86e4155210137962cb4452ce3d93b86cf02feeb3a43714927253ef181e81dab21fd3902d1c500fe26a074cc642224b6006bf4e52816380773815a1cb0adc643aef90f0d18698ff740d5685c242990bd4585908cf5427b329a022be7042e5678768b6d06a33effb1540b76146f17998b0078b08c12a3b955b0321c73804310ada856186c8df5fe4ab1b3a78070950eaa960a47bcfa2d3a5452b255e36b68876135d316e43949367e786ea87ba1e0cc4e69c8ff44b956b09c1365d9f4d22f552e238e598a7297a1c4cb40d8a0e4ad82c213533a3e35d4ac75623da2abb6dba96cc3fb4b20bf1a7c0bc45bb85da19b36f58275dd772523de1ccb1bf07749c877a439042c366149c784eb47f3ed32706a3d11836004d631d03236708e02a2b6cb416d83c75927af118e4c90de98938f72300bd49ba22de5763e26b796438de3bdd2854e189b8e24e7a4dc22c89762a62ce4a52fc7c6b74e666805122481825e8b3eafaaa05195b20253106ac668405723e20b408213a0fcc74bdb2471f46878cf5baa25ad12ed36bb8ee48fb03a8ecbbec456e91e2858c3a26211847055c656a6630f28dd6bcad1cff03cbb69af305652f5be2740ed0d31a4328c3ab52709b9c8988f964476b5ec1ea0af96d1b6f1911b02ca0d4e790b7a110d7bae96adb8c73f6f4ad64b6e23a919b296e544e45584b24576e8b4e6b069d9364f2fb67b4ab63ea0071d14671a18213eb1b1fc9e167bd298e50159462c482f8881295b8e89f82187031becced510a5c69900fccbdfdbbb90e83a6cc27271ce0fa754974d5a45a79db87329572e4cb06b557ba954500997998008410dc55fe22add36ff6754d21e4ada86e5251513fea6f61a28d399ec98d625d21c72b33d78a58e03f8428502963db6b05a2552be61db8e20ceeaa6f24d3259aa03014e10b3e52d1c176c2fd1557879dcd29f7a9f5813cc9ee1de20688dd7029afeb622b1a68dae460ba02c3dd621399643246b7f2cd691aff2ac13dd0ad47d43c327498a9c1342f10eee981a39eabbc80a43111c283d8523468faf31da4614a077e79b16281b8c7161553b54e1005685b61b413f8c3cd8e21e75257501155723a5619f5bcbf35865308329fe8726271d5ad037d9b5eb0f90fea71347e2b13527d3840ee9e1cb9a6b760aa1d0da019dc5db9c6fe8da8d28814d545e3fc0811a915037d0d86c3170c45467e018e3ca237036ab02fc0ebbd01926fefb3cf4b2adcf31080f34883a81140f2fab849d86783c3a3327127b366e0ea1c8fd267a767ad8a415712533832df8066a0b8e5f3a63e26b47d1ac0016b3110ea2605d0266e5fba3d5ba45cda45573eb20b1d7c20df5787eabcbda4187dbfbb6b5b0f1699f24f6c128f9fa345fbd3da94f9a0f324262d41f5b3afcc5725e80a5fd3f04f7c3d5e2a0b01c5019855fe12444567f20f5ebd179a82128eedccf6029f02dea15cf13529c0a85a02f74c1b0820fe436d9c2eb31915c28aecbcb34f771f696f60925fc3cca67eadf44aec86692be1cb725e584aaf1c67043566b26df4193827ca1569a8d3911163c29a1538b611e004ed77c9d09e4af000dbb9bc61a9ed976409651198520afe5b382eec10d9b9a6f6d1a225df2fb1edf625b2df491758337a56a9ec729e83a0c38e0bc66b737c563c445248a1cf316fcf9f6d94bbffa2d9ec050ec488635118074cbb2bdf0741c75abe3578275973a887ccdace4eb6ccf32d3c03d35f97495ce285781b8119d97c95fff4dcd18f4c5451827356d1cbaf609c73d297ddaabd3c756ecef68f06ed47c9ffdeb69eaa82381ce0dcc44c8411b76758b2e32f21df38b01bfb8db7eaccb20bb8ecd4d0f8ead3b38a2104fb33c3208e6338018b440cc47110ba8b58af651004d403192998b3f6ca6ade7dec4ced89530a6b6545917a72334dd5cbf8f9f92f8f45c8012b0f720d6c990bad6f6e7a8f31047b801aa98d8bbd635fafb169e94c845e2ad4d3640a87088e02f54be5a64472a5180172cffbda9add12815e593034302116009cac3fe8f0d95ec4c462fb77c62d146cfc904bb0af3e56a7ff48e606a9d4dec12f864bfbfd45abb5a1ec1b7857782464555c0a41c9f59897ebaae6c96d31edbf4c79ca659cab7752a8bdaf3b5bd21d1e681bff943ffd09c7d4131b1ceaee6e1003cb2f41c6aaa035d96bea37aa4e9f2138fcadae962bf7b5e9dd2d9673cec6b168ad729d08d5c0e6bfdee3a9f497d88ff63033c146d72b785f6ae691bf69d66afa869288c3e8663e8ab3f702eeb4dc900161f33b893b74cfba099189af71514b21f09bcf4a52437ce8788f6b398ef39547a9486618df90e364f1552c83b7232f591b70748208fde2876a66759b6ba461251df59db95e5b4b88ef07e7d251946eb50becb8db7b87d09fe3c2ef628fc346a1ef88d6b8d7406ed7d1cc4d0b7686bdc1d3b1633879cc2c00d90140e58a41bb2fba600349d20889ae8b4a420b878925b1ff8d5c6f0389e46b91485cf3631aadc88113ce0ba6edbcea689d515777f3f449dd7ee6dec4fce2494ef8cd6f6b3a7b1ce064fd64a4092a49f2d31709a27993d87d1cd0c391ef20b7d213a894ffd1f06361601ad1782885b1f9ff8df45400d2b82575c2e159e0634f67efe274d619bac475b02258195711bc47955eb80880bd1ad04165cdf812c6120a6e96688e1167431779c0b5db2fe2a027c3b64e965d6fbfa2e338fd15a1995bdaf56562de3ff29137800923b0d06fdcc71eb24b4f2cdeceda27ba6eef300541ac91ef2104056002a69e2221a79f767c4f81563562655d35508e57e51a194983a4eb07b2b1769a26f96a40cf1ca7dcb67a0d91052a32d6cf72c700b28ca303f2560af8d490850b24dd1e04f1dd7a1a05a092c63c33411e81f2f580fb9dd5f52a47005a3d018691493d23a5ffb196ba1d20a32a375b564f0c370b123d4b0bfa02a06e3afe875d8bd1a1e7de8a23c31d0272cf601272d10e514544a406a999c8fb2fd57fea22df28c6e20e33138dfae7750bff56a00b9efe98c398902085bb2930db07ee6292f6c5039808fe51eaa7e40dab9c085679ea96478579fc48ebf8d015f3ec4ff5c8a576776d76ac3531fe95bb5e9a8c732aceabc77b3d8433ff262fe4f160680a6a9c2c967018e329488779812432c5e385b1a38a346f9c3d06e22340fec5114be3ba76125b7589a74cd235ced84f0b8d8ab84b41bd30dcdb20bc840ffc8928371d27d3a424eae216e76a44a4fbf29afc93245612dbc8ea28b8491a08d803d88ed88daaca549b869f8d5c4ef222b59be90fd80f6680f59a26bf206c22030c010e0609f5da5281a44c97eaeb948e3860aab02d461e28d57eaadaebb9d03fc97cc571ae197cfe4a5cb5ab0d62f4eb7c5cbdd40b9fa438cb64e011fc120db5e22aee8a15ed7304466fdc71e6f864c010958d5f0f97565a90437da62b6ef4bda9f632f9cc63c4143a97eaca63a7d7d247b60c7132d49c4417f187aa2aca58c8bdaa4d6e6f37b4db07f71b5dbddf75ecda82e878c35fa3956497429b8a5fb01c94403747d7e302675ed25b6def0be946e283b3f694009cb1d5b1f733254764322d2e887611268bdd233b7ca5ebeb400165a08c7dac7975905d46f4b1d11a9daf5010b07ef627613eb900ee72e77dd12ebdbaea4b00bd7a3fd018c9d9e492570cdbe76d893f5bfd6887a635c8c3c3d893ccb4e43d8e052b3d96245780fa0c5663f03fcbe6affa15efb2e1fb5ee392b25dda1d515b69b8998760b3fa316c68f7222f75f65b1262a401cc14f95870e2c1f92a68af51a3454bc75e36981e3c3ba716a37708ffe7e7fdf9a36674e954e8b557e86d405a7f8ad8b1bbfd0c74b81235d8add9e985aed734124140abc67c0da80c62f003c6e9026d50a34b18bf0df6c9052724c09a84e2102e179457320635448565c0d012f02fd09153e8d6eefda15f34e54345f2d075c15e3211c720340637fddec1c5cfca83cd50109074369ef129882934331dd834b207fa19f0d5c72be1cdb4ef96ec7b77f382f8f0b728fb4d905d9e08e5e39a84b7a7e6f22cd8b394c1c1dc79b09896e78fc7927cedc63a43edf5f80ccee0fb25b0dc6bdc3b57a6061d8ee88e91c96082e2cc80dacde7cc8d0b7631cd3b24bc2f8f1652e2ccc2f06e146ca3b9ea6bc3ccbe5b70fc1fbaf18b7fc5252f0d8b952ea3d72fa8a976414ea5a5b13e6646a34ed1fd5208f2a813e66cd99fbfca0afe20342945eb933066863af937feb8a7bb9a6a1389778629a89c04214eeb82392c8c99be85c2df0d95394b5a142dae4fd10ca248dcb22518c9bdf51a3688babd2bdb0143a05115034913d0cbf6fc345494bb392d52bd05c0398c66ac29e9f4aa82af471d6f2064aa4aea62ce14592dca10eed4d4805ee5f9aa1a2c8ec5bf9ada3aea5583666beabcfec7e6857ebdaf31d81f816fdd29167575156747784c43a72dab6efdaa0cef07d269ff19469bc36fab18b071b2340be927ab5e1315bf9f962203af973b4350ee80ba1de5533c56f4db5a306e678b5a8e83020143157beb54d7cc033997015a2687975b4ec057f0f328bcf0c6bec69d9dce72066695a14afdd18491655823308135ca4b686fcf372dc6dcd0decd861bc21e1890c2ac5bfcd9f26d73fc57ee8186271be9f7e01fb7cf353856651a38e4ca5a55c9b5267c777ba761884d5565ca5ba5fed1e217f6eb2750b2247a823662c4ccf80460484cb93a4d37420b73c90009fabd8ac86203f8e00131d0fd7760ab730135aa107e8562d33a603bbee87f55adfc8c34f59b252c9efd4dbe0889c12a5ae215212da844aef4f90422220d77fbba91b53cad53f5a2f1c8c6282a36ac18908b2c8db085669e9f365e59aed6c801805c9301aa742f0cde63872159d16fb19815daea8e0cea1bef3e139670600479b020be5fc74000902106d42b60e456aab19987950cba3ed5afe98fdd030e5352da7eb21d3753b968ec114593cb180b0de9e1b72be4354b2d9d60bd51263fab83c0ee2310b5305663e72660c012b5853ef68909b2f83ce00dc5dee6fd13853a103cb52379a0d768a8607c98cf9bd44959d9fa17a5e27a93b6a229e48c9479251fd49a6916e731e5c6f4ad53f3be1e88a6d855557a4445919e0dc9545f9c142f11ff9b5b8bd5feea7a482f0dc6f14810f19d917919a18d966a696e0815e10ce61c418a9de468c6d3aca7b17ddfd8bbbf0b9579c45221768a0d546c6f4d5f3e815ddc585075b7963ce61eda0a0268e6d9c242b7520b53e6c123f2b8add133365d5d98e26b60459bac03afe8befc5cf1c63d31c7fa2e2d89aed22da5e1f4443aac008a64974ec11a5ccffef135bb5544f48c8d42b6010814ebf2ac7d1be998dbe67a9e7f5b1c6540f1389a79cdcf39b3c11dbe3947cfc6c11ecacf769b0931c0dd398540223c91db3dfa1ca4e2d81c5bac5fbd99e22806fcfc33ad3cf7eab3f89a159e5d6e94239670d71712be8a5f31fc4fb2a47f2f413d6f5a2a2e62ed9efdf11d1027acf3549d0dde3dfb21a83a08197d304f438bed9b5d4706b41c01ce243cd8a878e070ce5a621e55180b184905a0920e3692855301543983faf4d2ffa0684247b68ef16f579f75ba1e990f883ba0f018185aa7179ecb1ef182c87026f6763911220e6e23b7447f9d96b501aa94e98b578d4c930513a9ab2d8305631afcefc46bc14d079dd7b1c403fd4c133630f0368302a1de165141883ff5b1b01f6e5ca2536e2ed0c633b0a67e271366335a8cff4fcffea1c586e2a0bb2b4b9ff99cc68a6c058fe22f9829b9f012e3bbefbc782d7e8f886e9a83ce6b91dad5b80150d59ecd0591bd2492e7185c030da9cbb471b35b526c4d0618126f0e068945721324cbc19a39db494ef1ebb6590c8b2925a5f4e3d382a193990315dec0e1aae28d6613e92d295177343aae66e19399da73218a62719d7e10dc1736f0424842e5d46a5260a3c09769d671efdf9f60ee698b5ad49dd39130aa6ed7439334e3ba47f5ab5ed3dbada8dcc716c6e44d9109c07e9678dcd23fadbf03df99cbe904efacccb8615db18d14fc4450c85ecd55e5e6b7001f7ac8365c5f36c5a866a8af0551e379e4669b711fa92a59e2abf78ca9c9fbbbd5edb097ca1c01986f142c966c51ae213a04a5572148dfe4efc4055cf0fea29fe9c7a80e40753c738cad456934bab9c3fbbccce4031a785e1225780ecee2e6bce9afe36f2a11f8aa5541c1d3ff99bd91534cc9a8d4852042fcf3d343eff1cb7eb992e7e5ff19820ffa057b0b013212468b4bfc6cf6a2f8aed389391c353ea1694f6078ed4907b33d62d94fa16845ef8a1d7772e0cca96000d1dd4e7313fc71e5d731e2156b49a59dec03ac5545d3a10ba10f5ccec66b7984f09dd499ead961c59d6cc0e3b0393baab4c6607ebaaeac719532ae95e0298f0361626597b1aa3b2fcbd1b3f2e6aa379e6c5038aaae6bbf4eded450f4ec2e87c73372c8c0bd5f15c552a1ece6b0e0b08bf3c773bccb9c0e558e472f54dd91a32d84c5f93599c0e212c612f3d4fd0803771a34765393581528b5450ea842c948136dda8a1cc169eb463aa8a1d30552bb8b440a7f8ff6ce54f4e7b3708dccc6bcde8f0aec0f28140befab8156623b3a333cf28c102b93777ec9da305e0da253784125e38ddbc4fd01c800cb881842653309bd7c8dcd68a26d74f0425ca56ee1834a076f0011f109c11d402b79a7839ce24cb0500274b297bc3886609eac630b779086f29da7b9b53626c4f470fff0cb4d9b88caa0847d2dc499fa6647c33ad165a21c605e58dd1a88a268e6361d0d6568e0649bb1d4b36c78429bf4bf4b6e31f1691eb3b0f1536a11390219255543f805f923cb5c28640aa33f4d9a8df51ce53cc105e5560f1e244cb0c9fbd2f46e9d9190e59f4e23185cbe2a371d9efe879ded538c15b0903929d481b9712f672cc37c30fa1b029b6be8a9ba591b9ddf65a13e8bd17a8a81172862110f096a43372f90fe3dc82a3da4bee1b1bf57bad0e5ccdc7c859880b169217864202c30cafa10764e5216ce05e7b6a90c440e5a447cdd39ae3716bb9174d3ff5777cf7e100f0adce4975c59c99e0e6f3ce115953a4bc418fbf1c41bf1096e2bffc26a36e7d935376895ec8fc8a354f584521968a16e91e654441616883e18b3a5ca1b570265a708bb09b4c3b2c9d56251748b15b7a91843b8391cff05ac4d624d91fa9fbf1ed249a2172538765e9aab627424038be1f8042b77a392dec442faebfcc80a102919bc6f706b662d4b8b3eb71a2d7c04acf5d17d67bbfc29945467e87e443e7512f1a96e404af45a56853323633e97faf7b1dec9cf6b9aeb0778af1c4d1a9f8af1f218668a0cc40d41a8c9145aebc03f0feda8ab333f9034a0a494d452a836e13c96545f0a0b29d2d5d2042821f35b6f73dc6aedaf95f69a123e52bc9dc57cfd9f534377bf6615a08092836c43f9cd313612ea1f70a23bda7bab73be65e2fa394982c37bd9f435ed4d4adde0ae87b47205df824a31bda4512e8065561ed67fd3d82cd15df22911afaabc202d350e49485ea5763bfa07166f1c556fe04eabee7b02716e8b574e6ee575ba8379a9b1b386bc044bf4aa09e602e2aee79d225a1412a99f8ae3d9018aaf34f0f3b30bae2f6772dba291b7c31eea516da28afb0e1c9e0dbbee801fcfd62a37365f32eae23bb1992b488870cb66dfd0df915876510b08eed81998b5ce6f46bef45034934da984b6a363e2be6ff05227487e51c3802b73b8cf544519b39ced43441f08373d935f2ebe00220325dc78200705cabe2e5e92e48c86318bc6513b97d3289ddcc566f518f875bd37d1eade57b8fdab3035802cd4e307134f5f315d13e917984b8b941a7e6aaa0f5669adf33fce628deccd0dea3a93e388fda5839eb81f8df0932f2d42487439e2aacb77fdca8ca3ed0799669156a481216b59a099bd802270f1c690cc34df1b37b548f279cabda8489009a46dd6d975a2dbaa8c861eee995f293db66f2780fc6550a93414ad01ac40587f2ef7695ac45ff3d1046aad3625f0fb770c76eb3ef0c4dd6ccbdf710e55f07f3da0bb520b520e8ea6b885ef33f40a8a8e4d035b6383ef15cf1f7f54794fbb5b90966ad709fe1db0c6ea1cda961812a03bfe521125448aaa033bbc074b7bd6f181f7b541d99ba4228b51c47d50945006bbe00918fc8238b72bbe2acad58a4168c8345997134fd44e2eec15a554cf2c30bc25fc232d40928fd6591da9772354248e1ac6f0a810887c9891e5b23af247363ee11fc94ee49765e7f10e0a418e5d7f65a358d0edc6d8762fb6921280fe9271fc507e1a5508fa26bdc0c729d8447410c723f676fedf9fbfd0fc65e0d539fcc5564c6272836636bdcd2f18a6120b4e797af4a2a01f28c0a93ee507e301f376dde8147a77b366f27018eb439fcb03383ffc47011018a3461ee30ddafd12dde652d45ca0365f78979d451d7fe6d081d6aaa8c2144e11f841b980493fc41810a9b5762f9b6a25648a5ba6c43b5593e8deb2d1298be914532535da618c33325153903a258c98ec996c512280bb4ed3eae031145f2424fb7c68f412e1abcea6a70d32dee83852d1f63878019ee008256b8d10cc4886b5152ccecd27b5acfaa7e581e18120c22898295d98bc88d24c04eb121bcdaaa75d823ecabaee218cda37c34d2055c183dcd686ba76c026b252406d54d59477ba765b65cfe20f1dea3e0ecf5b96d267b049b350aea30f3f597e51beca5b07414d69db1944a5417f2922648ff5b38a539c3da0cbab3ad75b9a41648859b3c3494c988c70949e9a1d1d0f2869a1eaf7ff89609ad70b1234bdca2c9a3d88c87c3922ec4168f8478fd9c5c0b54bb7c20cd115d3e47e93c7f2a5cbc3d1f2337c8dac24f72d955766bb419a305f2d173b4deab4408776f7f05c8281883a3774987b845937aef7acba031ad4306b0d545fe48321d4197d12b71cd95daaaaf7f6d1df0d7f4a512a34aadd9ef16069a6dc3c0695a75203596fc33e2645bac3ebb3990129dc4d3cf41f465474c13bd8098dcf8443f91935ea340470d8594d9aa80dd01d99017a091e4b1474df7d58cf0829f9a6277314bce19d07a43758166ce6018d6ed93cff5c54fd1dffb7d576c102a4ce139974509602bc13fbcf96c5c2d1b2a8877ec291b141b57bfdc2a9337382dcb9f5327d742f6e010edf9019f2594f808ad917ab7558e265ed7be967adcb38ee6b0a22a5ac944f351e752f4e12df8f1548a885d2462c50fc8ba81cb878200d26c2bb1ef4258dabf1f5e6da9b42308555c879b6dd67e41e58658abed21fc35ade2683ebfdf6d3923e16ab362cd7524c279f1d9205c6766a14a1086fc05028e6016800e80986da3ea59c2633bb12a38cd0beb685c9b5e5eb4052f8f0132e9c0e0ed2e3d15b96dbdd1ad2f37645ac822de4212fb45450dee790e8cb4583a62e5de5a267014648cbbcc0a7d0bfd2271928cf0787973559af714a10f6ac8d53f0a99d0fa409c81f4ffe60d72215d1d5c13c97cc0a0139a61426e0f21d8e1f1339b99c55bb275195bc6f0c147900d23854db7befeaae53beac59e9bd2fd24e5f4d55ed2d94fef8f2fcf8c74b3260b02ea97d532617b217ab3a6864e9bf2e1901eb3603ec52da903cff2609c087c1c3d28ac43ae9986cd4827d1a9ec15b0e98394a25dd237b831a172b264781ca2629feea5127d408529cb8f0f0f5f7de2a08da5bb8bce6387f446fa7f1f80bc860da2a5925e9d3b2be639e3a9d53e98c54cc1449a35a0420519b19ec336a7e1f8292a18d797b40802e622eecafd411571c3b0582cebf6f9b4dcc35886f09f93da1c5f551d83456d12457aaf1c4e2544a6ce8e1cba4e09c79f2229af151f24771c44f97d257efda084d032b5f5d39c0e99d1481544159f6e51f4604d49d2a22d9b6c35cdfc9e683c845ea719d48212c442b9c6bcbeb8781f836d1b51432203fd1a90d0e0afaeb08248eee648282fff94fc505c3f857c31366c6058da6710110a763fe9400b345839b9eec78f4f92df4d49c73d724bb924f77b67880cacb39708d0dea2ec7003907f98e222c65712c8e86765e891a67da46123039b3e53c92ffde2cc59bfeee715f0d102d25379b295d4ab93ed26d19a33b8f4a644e9ebca9ff91bd267c6efc22fed88f068c8775d3ac053bb58cdd58755a593d669872862f559b34fc5107fa4707ab011d8ec568b68671842c58d4f2a9f524be5465d566e78ad0dc3b8ef14b9264f00ca9a02b76aa630610c80c6747f236bf7b1ab9b165426b5f6d9072c9fd87ac220808a559cbd057646254fb5e1bc2f52266206205d321847155f715f297253e6d376d5879fab67ea3387e28dc23a3cfe257ac0b920a13de06df4679221cd44f538f900891c8897b0644485b529f5576be6532fa62542c22f9eda66545a97faa46218157d322b143fe57ea4ba2d6281025d602449a1bcaae191014a3ac0c10537cbb9420cfb6c5397a9f4b4f0d96ded7057154b0240f5eead9c14021909207cdd89affcf12e8d74cebc1ccf1d7d2832c3acb2e98b613aab7b359564071895a54b971fec9576dcfc157471d012aeddbaac0d3f5dc23a57e55a2458405a522c58b5895f7fe4233b1a1521bd52ff66af861e3027255f8ef126ab9902a402c179dad663a94ac335cbf37e441e54ff223b1f396fde0012d36a73190a9dd1b201f78ad18a9ba3eeec77ef37c268be43e07e8edf3e81d2e7fa366c1faa6a690449b226112f75259f7749be3bf3c5eb88f4fd7f85119e5d3229852ab5bceab9d4b684b5cafe89b393db068360bc22e1ec00b82da6f5e065a2c0d9336b6d0d50692bf7a14343ff995bf98829103cb5e74416447f3de5431e5c754d2684a09e337a13837a2caa814bb9f9341868da3f13add1ad55f2ff1c06f66bb94ad34b8d2bf1193d0ccd896497747b858373ff7c400f079942958517cacf6ac70d60f39e439daa306ddf685d5983ac5e34e03de3b906b36724b8fd8067bd14640bd10c12c001edba89ecb01fed163a4edb02847b1f8100fb8de666b8162d73b133562e0ecef33b5e83b0960442eea7e8915d2b2bfd57ab69682c8af5a55359c0033db40ef7280bf634c8c25d548cf01db9ee931147dec38317881bbdd21ed068a7e654a0b087d462d0fdc8d1a1d983e4735822c54d5e39b30c5abef5fd084aabe4099e02b918f2934b2d4e636bd917b22fe8d1c8ed46b28f0318fb11fbd601ded84f8870f8638948cb3f9c6568e7f38ac2c68854f02ebe8189e5f38019f8ce3f026878d109dd3036b89b3a5287bc56cccfb4ab5dddf2fba30ff41dc75e711de74fc1f77ce3bac6da10183ee1d405f1b42141278b8e340ab9dcc0e202aba7445ad8f6bbc41e5fbfac151dd0b69fe82607d105cea156d79d9827c66453605f769d6a12170a3400a232e62295e05e8731e54b03abae2f11c0258b340d59064e3ee2819ff8400dbc94b04c0df985a420fa5c2b18a5d1ec0a8a8cb7e43e87d4b867520278addb34a70e9b185fe837392e98c1f3d97b07bdaeaa16f5bd3c37995a3b92aac4a5e74f7c7251231a024976c981fa70e200ddcde95f4453f00c009884d8a483a5017ad46e74207b8077d0a523d8a468fdea88d7e8eca8f5bd93f82b5621c806d41c98a79dd3368039d16f9db40b5aeb3e8cb41f1528f4286957e5e939964f3441ebb8a3483d0cff5ace053852d21f72a0e557439fec54301af470d9d21f79780ab1a4159306fa3db1ae96696d0b8a6b485527f6130839d843068bcc4e1477a901e860a9c294c08f4c00169e5a29dd5ea87e89997993cc5ccb26932fffcc1da1259022665602b93e09452a9c1e2093eb3a7239afdddda2dd7ded3df0ab54277640f0c4f3a7a5d8e16bf7954edb8e7cde5980789e07d99f2680404971decb1e904cfe5c04f208e0dd1163e7cd23313224da1d7a6aeea402f3164a16349bd30023a512d13fdf9f1ec2648358d7d269e4386df603a7213d72d7dd26eb3dc805ebcd32c58c7d406a9cd99d77275452f7c0e55d7b32647e83fef1ed50ea3f84e76f4f6ac0e4dbe0612050f67912dac951f38920bbd16b792a3a86b304367bf480504525d829897750b7fcd0962ab118181522b1104219631fc2f48016a6aae5932aa8487d7b7584ce3085d7f5e419d002e3222b8f295ae37f31d7fee77a2f071e2899c6ba2d49d14cb625c61a290c71ef0d8021e51a3a9675757bb5fd2ce113d2014dcef6477eb0aa63252d95d73b6a8f0185344595718e6e212d6bce1040a7b730a0ea6342d87e06f32372de299cf59f0df31759148e0103153f845a42646578e93a76ae060b34e152a70310651839f9c9e40db170026811d33c579178a942b723c199a468177e984886ddfb38e78fc23e2b122d4b910ba07e90d22b493ac6a22f141ececea97fa807f60c30b238eb81e75f128dd70c122d06e84e4e009b14c97994fc1a66171f9fbf5033ac6d85b06fc994913455f9473fd5b7ab33144964a60e367dc07c90087f492f0b8cd4cea57657e94589d586bdcbd8aadb45bf5f6409c372056b272f2632f1596c8049d78aeef688db3d17eaa6203da0f7cccf3de41e1f9e352e5999b1a5d6ed59d630eabc8add56c88ef042e1903f7f6b06f28b61fdf664c68fd5cb44d432b5f593f2ac3619a588d7a288062d767f3fd78e17dade1d76509833870f13ecf8de1c31f479a3a511f6c4be6210e864430e5a88f3ed89ade230b94c3a64ccc4421320f2dedf47610fbb5145dacc18f5be8edfced000a31138931a201e77e58b37367b8ba8162a22ce9c628c492f5dfa5dc2681a9e693b75fa18c44f909f8ce22d376a285632312b8f401a516337aa4dbe41a0bcab2794f0e9401576925c2022e7260312a9026a1d1563e3fa9607497c0cb6d2e1e062a5a8914538716e7abb0d8a22f92531bc2c4db3ff72557c0969f45da8823a63c328d636f4979504c46371a34c9157e5d930f82cd835af0d789d9c416b60367db7ae8cd9f94555842e3366928841ccb928f00b273970247f0dabf525a3b47088b85f758704e08029bfb8bd587042297b455e366164e5ac228873ec296f43fcd4fb64bb64117001649a63d41ef03102e2815c2e1370b07f2f806a7a7c2f401f231a4701bd555ca1372bc1a6a8c7349ae360aa5ec9e56589d77ea6b40eb9f5e8860a4bec2607d8b1d0ff888b2cb9fbd934cc4460e244a57c027a294f9bf8e74257f305777428230c1600ea90c80a1975053d3a6e7e2b7e1813a70570e5877dc646f3a8512f03e4c0a253384ea8041b460f34f718c6dd418865d1aa070c1b38f9a51bd5201b64b7dd3d99c0992d243804570986d89798b51c155249e48272d50f72b825b4f6817b658412f0620f1f94a3e0a36aa993e2e3d27995a768d144c30f52718f1fb62a115db56fb8769dd39e474915326614b71527868ee3581f5cf64b0042bbcf2b5554cda72bfa2732f2df7da9082634afd6dcb943c4464a0d59a4f7828fb65650864409eae3c68bb1e85d8d3e79b9881f16285a387d0e252dac3135c74a7759fa39131dbac3dc7bbda64883aa41005819fae4688921c20962287a1c919b94c2533c8c77290143df369b14d41b836e2c42dcbb78ce3b166a111efc5f3b888b281c76d1717209c34cb97bb8b04b96ed10073590a97cfe10198f1996460fac5c5793cbf3212d9d0f1ecda62c1a9686e56d1379a76363b0172eb36d5682146227796dcac4742819a1630628861189c8e635a62c944f85bef3ad9a2d6ca2a96b6c3cdc39df8c6e2e87a8a283fabbb0d3d1f5e31b999893f12d2ce385d4e01a33391ddcc026a7ba48beb9800946b4b9f2413969aad52f3f31728118914584dca79730156d8ee807897ef2a1480076d777aa9abb531126e94ded290f7f54911267db9d87ce2915b1deba12c9fbc8153338768a22723a61ca9019ad68b2f6fb72a7a58111f51bcad8e4aca196e0f9ad3aed0af489e982210fc925ddd489614d196022ddcab3f8f0e206ef5162aad9ee3654adfe486cc2fa0192c87dae219bd384c4ea9f472628a853499e21712019de8e2538fbf167d7161d719782d148a58927be1d7c7a5830ee6dfa0c88c2accf552264633a0ee0f4ac6473371d24441420913d00cd56748851cf2dba56317e60b3cf081330f4bfdb1a79e3927b380c4818e9ddcc1df66f7f5b011d4cc0a5581e82a896802ca74e8d6a36be5c4b5ab0e937a2700fe9fa1e1902586294ea91e1d5ef4e080d853449321425ba2d766df1d4970a549388c8851fe815c93d1e30ef7520647e4e1915bd157d166fa6f6d2b0d97b60a4a9a194d88ea5814b1cc8238f634b183ef5ef3a1f32988a05dd312beb53b8c78bbe19e4eacfdf4a711efaa7c1eeaafc97f1458ed3320ff57c6c4e1aaeeb1c8d48c1b6267ae235bb29dc4843add0d972f70950d5adb071f545cdd3affdf024c12846aef3bd7d8ad36db9c43b0f690ed6951f7813a4787c384416c038d51b98d50ec72640f5c18198eca8e57b39148acb073176f9fa5340e9ecdab2a88f722145452f64473e3c2eaa354ea98207bbdca6690b1ffd3a4299b2ad233eb09a52812d535a0cc25adde316055b9bd5a99904c5255ec98ba09dcef5b88cedaa000ba3ed7f069fd04940760411f69c160dbcc0458babfba6646bd1925f3e9cad598f4fa96a78b1406160c56bbcbd35eeff7dfe4c35b87c79f4ed4fc0d220df65c2945575a08a2541c87856ba1ca5c9c0d86a54f2f67365bce802987033c090074672c9d8e62becd2136b0d21d493f8b5052f54c2a4e923f626e84e86546e4f556467de4f8c4dfe7b2d3e893d8ec5f6127118e887a4c0d50b11557243abadbf938e864df76f53712e71daaf52336ad5ff35e7360f0c928579378d7ac076d81927fd0414d1de326de189209bd8bee8a01fd02535c7f6a301abccb6ad675bd23fc931b7e61202890b3ffe224227f5354847f79428596e709e3756ba27a68f4d613306de6085d4b3b4f3e72ec47af2b3f2d408c8f4014d8f4ead2c3a1a30ee904e728d545e036380d275a3f0071561f355c7096877d11e36aaa680a849fe308f024ac7b708778e603b3b3dfcd3def4dd4b60e290e262da1960666a8f6fc7eec7d2b0f38a065c899ca1e6d63a778ad5f38bf04addc84448a646200f0e25013cfe5c079a969f03ee82eb87d1221c081c4e1a738501f39f8ba5426833f67706b14b0f2d2cc23662a022a42e8b628f2388783bb59a85675c08f6fa50bbddad268dd7301213fffec48b0415dcbcfea59cc35538a8c2fd0634cecbc35e201056c7943842884dcea8a4cc0bac64758e36b156f74f84162cda77f9e3a95211e470b432e29dbe940aeefabde38c7002478f87c79c39b571dca4bd663ddfff61adb114d8e3a238678393d2e752673d98e921c09621a86920b2b1f8459aeebbfad2dc4c42240e5c04868b4930e80ad996e67e35419ca3e466cde968aa6a879a810d63e8b3705ff0d0e955720c3cdc5f2037068c224a91c25385e73f391098a0ebdbf713ee5d7d4b9eb43dc10d13bd6f065f060e199d81ec8c948ced295a51d41df4384343dc5f2fc2d5230a0ae53600411cf76792c9e9eb87f070dc721a01cef2701d5e44c36f86cb35e0e012b925ec91a9fd165d90208ef56aea9916d26e367d130d95df24c6fffca9b01f007fa900b1101ec278c77faa25e085c27f843431a974f425215538054cc56b1ad61af721ca67cc4a5b3add4262d0a020896bc207818ec090da5a74bff11aa058d1f66c994d3d4ac7d8be3bcb70cc59b6e6925e6070430f4937d44abd975860d90ff4a9b561975c4b15f19cad34b3307c8b013e3643498c8595ddff8b67a0a904f1ce3972c94771c08043c0e3a4019ac58894f2e670a812a5c4cfcdb4c97d7f55d21848b7383233a010c68b3e4daebd9d09bb22b935ae3cc26e042508bde3d006cf5176ce1a7c17164e7cbd835f26371ff484f31765e33f991f2d9decc91efcb0d9dfa7ad28bfeac9efe52a31a69cd04d13637ce776dfe8dd68fc4ed26d84ce789029e92c1938298d57f7a52c0a227f8099d02e308e61c447812a9ad44b70dabc66e7f831cdf7419657f7d9d99bcfef02d86c3b51ca54ea5bf50e2f7e227b2f14a345674bce6c8241082e865147da54e0301a4ed83aaad16d4c7749a6baa899e424dd5a71da4440dabc4220180afa6857523e1de5030914464c6dbc370c31d2da1eb9bb5c38d2c600126f2e74ea59b01362e0f6f682767c405ef0d9a0eda2c431cc1e9f49f75cecd4c504739efa14c437a1891e35b8375e231fd126d83d48144dabe781ce39b17f360d8b727a31c048cea13e20c1a7061b819874dad8e05d869e397c8b386b64ee0b6354bb0671e3f259d474c244e99ae55f85db26a74559c635fb150c011657ba3a5ae5fbcf95d79dc63627ef5188b458a5c0c36b881af41a4c7e778af4419f91faca9e903d939404383fc2a4363a1d957f5b1973701b9fabc541724e2dc07d537d6f2b26f0880439f9608a2400ea0f8831091569bbf6a9662d23f465f06fe970f86c077e0166c7b6346e90c442897b7275952310a54fb7b2ebc38a23a702a217d3dd2d02f1072c5b29bc2ba53aaf0cc4f9ae7b716fa63ad526bec8a7df3ab89e2f5fab1a3b895f6387f091176087baa0d35e5e02a38fba5d4a12b038cb5c8872657016619a59fdb137d248b2638a5935f5f21133cdba9e5662cf63ac17f22197c42e6d0b6b6b8b1c21f4baaad0614923a4c6673ff127e8f37a29c8bf9d3d9ab8e64eb56184179fff80925aa1322f60dd60d7a0e7e91226c81d5f1674ed13c63b6c22e8b58ca83843e80cdbada8885445c7fa8c74e54a310601517623962423cf0811e3a59c35d1d02b97d9468523e12bf87fe84360dbc3a239caae53bfa217c2c38d70bc638cf3fb94ee3e3aaf14a0c79f8a0c672d2d2af4475f38d70d46b35ad20c6bda54eb37ed7fe3ce727a609784c54a051aa99a178f8bc414bb04aab5bc76e1ee60bb50477ecbfd0fc481d3b4d7936957e292450a185cc6432b857f1aed3e5d168c5841b4cea907ff5a217509474e7b74816c3161c5d48b64cb4353ef5ce503b48a4d25db057cebb1e6c21c42814cb0eecc9b4df91596a0d481db0ba7a714f7051f6bbacc17809fbc75d0ea1a02f6830c927316f69a5abea09ca1cc6208f1210ccfec8134a1af64d24187f64d19863c2325c8f0504494cac1e2b83d6e9c66d2e5db30938e75bbfbaf7aebb2820e8a07b7d751b23e2e0b20cf216cd4d1e7d29800b253a13025b90516290e0a1e651ac6fa218fdb7e164c96bfa707defb1bbe56cbbb7f8d62c407949e83c9403a57cfcffcbdfbdcb1d86326ea1ce066cb0fa75670dddbd3dacd019d3abd2a3603296925abc6dbeea18dbb073fcdc9568d33a66bb8d09e6fd43bd36422f619177c549587c25dddd9607bf9e034e85366da3ecd6036b08ed33ea60d5d06638b7f75875610a7185b643967170eff3867eabd52edf186b71526f0c487ab7254a409bf9536e163a72ec8c9a37ca68eeb3dd182ce4248b951b1f21b5364658fa8f7cb2599b21d498aef0e25fdc3e7dfac3d1029d7e505f10fa0962df7786f9571e6b26ec39085e1c5d9b4046cc686f3e5580e597a6e575d90ce89bfbf1655264c517bdec9021f915c1b904fefb18583ad841afd4ea0da4e638346cd6abbb4a0c325fe750be499b5c1dd3039cb11f2450d56106bea164897197cbb304d9d76efb47df734bf0f8e42c380d66c8db3a07eafe6ec7c7421925d22fd8be1f86b9068fd171ac38f9f285bef1c23fe13407e269294b245d7f078fe41776c0ed307c04015e83086d3c2245e6dc7b647c2010806fa7affe80abd2aa592596a69fd6f06598541f69521d98bde26e231f1d1014d7b5776df0d2f561f7504eea01592f52506467cf0aa72493d571b5b89d3067a52f486ac4307dc9dd71646fb32d7cfcbad97e6d84e1f14f73b8864c9e97c7689f5789b033ec1b2dd93cf85b30b26de55e995f81a147ad69456a6ba82a99554ed1e9bd3bb9eead3d3e31f88901df66a338484a2179a688beafc8a6d3f496a6ce402e0068bbb480628105002975c1ce37ea29b7840089efffad3b7a1e7351609f72568c11f8a237b7ec9dc55d8829c24685a8b80a204c58956568b206f6b5494f6b60bce354b3155d2a292e630dbee2b304de455a75ad6b033d3cf0fc6a29e5547995f80403dabdf3902e7ad18164d6908d61dd81eb2a74b780b6d984b38dfb0bcb33cb80b32803ed27020c68641b3ce1f2b2832c3db582dd3242314debf74494ee112c8fc9b035d42fd48495fb8f9967648e28db031045916dff11d112a7ad22983f9051a17c7d3dda0c7dc5dccd01a6547b8db3a753468d700c8c360b77c37e1b8b333a756963cabfa72a0bccc7c17797a8c0f2bd03c9e35c9375aa3dc982b75db49f82a9ef6fce5714aa5e15a6ede2a039a01d179888920178ae08c903ada6a05083441cb7b34f623c0d979ac7f7f968e0c065956c653469315e663a8ef60641cf3d8248fbd7a84246f981dfc147ee895ddd871212c334898697c54a545f01c882a53fcd8809d52c9210f0501be4503862013e45721e57e224e42709190a916bb0cb6c882e109a5b99a889d305bfbc5527553ef1b4db1c92b8798d36685bfeb2fbd722beb36c46b00321bf2ee9e557d12d5a7befaa14259509012bbd0cdc586251ec3a270098fa5277bed0c255d4f90b1ab2bd49766d737716fe02661a1eeffd1c217fb0b394fc033ba501d4c0ba71a40fef01dd48ff953372d80dceab6384fde1d15bb5c7f8fc2d6d3c421b337ea8b5d2cca29334c22630041425401089555a0c84513d160b33c40853929d339dd5eae5625178e59d1e2498dfc10a5ec570d6641a0b1d553438b2f58ba6e4fbf90ec2e50202ed8e009fe52cadbcfccd76ec9828af6734b911c5a5dc75ad1f4bc5afd7a577e6b95f43df3ea8c2a42a47bb039148529c772d6810d24e41f1c5341b9d36b0161ae235201fe460210fb05840d7bb7236dd1a68497bef36f1f1b82b90f0ab4cefd275ee2d5f473499623122cc6278398c8ef2ca8c4421a3dc44b9d2d5fafce0d0c931abb572367df8460bcc70544d5e7f09e1af0c99349f0613d9357e8d8521acc4eb70ed922506d635bd612892331befeb1338479d6ba5c858dc66c8fa08fb9a8d1deda89b1ef16fee861959918407a414e817b846ca719d05294ea7ac87ac1279508da1632e05d4316749745aadad29cab9a29d7882facb2b17682312763292b20042cc9431497e87b5dc8e84bcb96b5f091cf267e09fb33231bae85bb55381eab34c3b22931df5df5b0e52dfc1e0de423daf2e6d7a52847bc5a80522f19d8f12fe3e021acf7be616e5b35185b7159a3cd55a9d4199268790cd1b32bd45b7c587d5371e984c51b730ae71fb97de05e6f4082c4dd3eef8dbc95422bbb8c85a7375e7073ddd24bee4e3af6aa28a8bb1b21bc6bd095095b0a07f71e584ba271d225780436a7cd3c482e3da5d0c29f7897ff736eb92af8825b3d912fff104211cb1023f00ee75bd45d0c599805db2d9e89446604b48a0f6a2a181a5bbe8588ca3257090cdd1dbcfc0225c70ead3eabf779dc41f894dd00ba6adec703b16131035b3fb5bc18799a84469e3f08dea5eeb829428809b109ed8d99c5d77e3e2a05ea39f4986a0f97e421c96bab72a443ea6606cc1b088d7777edcbd06dcbd519f49456429671faec3f35b352ada5442497876593003df11357b63ae76644db5b9f6ad8c1bff229a8821da506cb04fd5a5e0122b9de4d77491429fb67e10443e3513cedfb691b492f977ec4f3a4f6c50c64faf6d8e4876a723c2d8656cf721565ea6d3005b0cd84186c445ed0f02b4e08a94645b9e1336b6d9b65767f36a5748dea2381291a5c39e8871d54b27ec1c3e6d092fdcaf8ca03c89b669197b2ad6defd8cfb05b288da1fe48f84a0d61d0eb30a4c795939c60930b93c7d2ffeea30fedfeb9d9f5ddc4531709f226ea97fb62dd86c9b8a21a24c5ba5cb3644583cb99764d57b6f7218278358595b492e70084ec66ced16f8dbae6da81b1a3b77a4649c5aee56a00db09c38c9ce54f3cf15eacd5f657f776cbda2a39ea33136fbeffda3bdbc3a414b9c89de03748e8a2031616e7298f97d073bd337157deab78fd02a075ed06239431cdb14a405687cc76b160745a29b4002a62b4c2e85b35dfe87cc53d2d9859e1b9ffd38c1e644e750d4ee09a76f8debaa02eabd3bcc9df7be16c5975e865a999f46b8f99938d62ea4a3426572c8c84003080c194320f352184416bd400c952efd6f169d3ca5f7365bcee1a1197715efe323c59b03e3071d27bca81e220fc7845960e62edd336ee1c210ad426d13fe54e945b92621d6b94b03b2780d1c705d1da4acc0e0118968cdcb28253bb4b96db992d4fa91976850e1b4f0bc77105e6028a7f3afae6e0bf1394e4b5126cc1ce6faef15586316360e8396a1fd127da2277e1d12ac8ae5491716bd052ab67543bbb3963904884a9e5862475de85dd2b70d4e8b835d0202e1888fef7a2823c39cbac756360c726cbe07e45543993db4a544fdb23a1eb362534aee0dbc95eb605ef842771b5c977aa72e992f97846e2d11a36e1c3c1eb5c03a861cad6e4f6168f67d900cec8ffc432e6c413432651e7ca35dcb40c97f68f15e6ff2dbf85db701da042940a0fcf0a8d0b95b1b6724af78ae5cbe7347e9cae09101de0d0cb474bfd254d56d1080c59808bd725eea32d8e0ccd5d11fc51eb32570fc5094e894cd52179924ca428bcf65d0f6c7655f96e691420fc3fe3bdda4bf1d644e3d7022db2036cda8c2a53f68e5d782913cd3c33fe78a74488de8a2a576561a635ce139177fe18a614289b436b5243b72bf239d2c9626d36a31aef4fae05c3bbe78693230fe8cee8263066c93ae3213e208d12d1a2e481ac9700c211093cbb233f3b3dfa7ebd2b84a5a396b464bd51f2343af33cd0ffebd135e6ad313587b70742c3bbcea879af4a761421e33e34fe24d3b8237a12c8720ac1af5f45faffd4bfe254bfa029e32ac0d36f03363a9d47ff52628f2e1aafe0a62a1d441e410e8e0e62315b99f2154a1c2a3bcb8c14ad32ddb3a48cf265d29c46905511399aff86c7a9ce4b4e7619a6702faa84192c0576ed2d245ac683ca64cc5b113ea19b0ad5a8c65c64f59b07e473a88647220b86c6c238a680804289f9b784e473fb6203a56db67fd348b364fcf4bf11fe25ddb3ebd7913983ef7e70155e421b7b54cb1bea069984e58f7d7fd62027756e24f972dcfd6d624fe9c492c64e6bade429a28fdac86f5a76a8684139f1ea065e06050989d8041bdfbef50741873a81fdf5315d3a5782a99fcfb2623adc0345728de7b75a78513863f3385ddadb3d2ae5cec069cbabca4eac91f64c4425c4c7c05d6fde4a4b1caf0a376ee5f53c63f082e79a9fd61e6c701b014b708574c954e06bc7107a306e53df6fe8d24d77f0e04d4790f41b383c1a5283172051073be10d3cbc42a885f5e273eaf358efbc6783b0cacf11539a3722117e7c793396739011239353d1cfb042a317b997314b3e84389cc6f94fa947d28fcec284366a6e5c8c4337dc6eab81a5bce55f2c632d444312b99355ff8cea9b86a8e6127058bc82991853cb39a01e95a2deac8b4be0d97e3bb29e97dce1cd950aa16a751d2f8d6143d5f7c8a9b587f42c01ce8872bbe17aa4a625a098ddf83652f1da85ae33f53c274873917f9cc09fd331f97a44731075efd014f793b353a85ff91fff3539541f5d5d71059ed9ae82832ee5e66dd10ff9082233c29eaf579c2b83d1c033bb040681a861e11506c71fac724468dddd8e7ab6b3d593cc40c0fd4a787927317ee2fb5b3375a6dc0aafc08d4faa8253cc5b06020cf5f4465d5c51fec81936866e6723feaeaae81c63789d7bca36f5ef24299e0fe2fc4f30ecc6edd39f00f97cbdfaf263975d184836cd1f794dd67f23c720f00da288ae26291f2c7ec24e553b2965059cbcb6d8f5a7e49eb02b9dec13e8d1aa5bc24380b2c70563c0280a47200ad832c4676ef973d5b625f018360b5e92fa3b41758fd70cfc0ddb93be985a91d08a69a1d08b3d07b568a306f25ca44ddd9f80506100d90dabdfc83aedb3554b2f69d9f66bbfb877f963f9d11c4a87023f71a4a8b904e8a9069b2cffbc36a5758f9c131442f4f1c08fb39e5ad00e169e101499efd477b63b858d49d27bf6c1617fde2ef28fdda24850ac9419888f449d0f86265d3f5326c6c3031e6a923da2f1064070077dd62aff8d998329bfacded59504ccac33aa3f2897605a052c95d66051ebcd10665e4b0a8d2fd7ce93d882c13453c512dc20ef21036eaab7189ca643ccafc5fcf96114db9f7fb4c07d6be8b602210167e3e554f80e20940360ef13113bfc14e6234599fd748563d0e5d34e0f27c2686c34b46f99137e61389f04858cbf74056b8f853bbe3043445c9591a4ebce915b74ea38918cafbccc401332e85f89b43c1f40de9dbd11dab82ecd58ba7458e86a402ea53b355e270aa771c131bbb2539f5efd41391af4a3c2f639b8915cdf5ba51a8004c4afee1f133d0906857d3ecf811776f750abcdc34f7c0c432cfe7f1bd24b5ea10406eadaf4d7983c1e639441f3087968ea6141eb2996b58b060eabb2f4a5a177b5624669b19ce3fd58561ae5dae649baac618b984ec7b9e5a69a060fc2d0ef39a151baf6cb459e4e06b4ff7d1ab97dd78236f86f110c5634076b7b8f1f755468c901fc78fc1b2ffc5be250c29353325120c7dd6aeec1bcac1b5675e72940fc8238d2dd3e98b45a1cd5343ffe10bcc0623732b0e80ceacf66eb54ffe9af8a51e60648f43a1e9d94c5f6176ad6fa32e69db2885fd0b20e916b7e71e966f749877eb7241e2cde65d99a899d929e8a6326e18f9e46d0d4b32aa095e3a9b3f4aad3ea60ef7f1129a6916fb60323f0c5a0520047f1a3186b86b9a893f843a9841efba6f3adcde024edee5e8601073056cbae432f323c82ba89dba0bb5826dc53c6659d7af58a5cafb213ff510a612431af2eef58ef2903e23250e660a2edda721683c56dd686a19cefdee57830a9505f8b5bbbcba4d1b0cab89727eda65a41cfc3e4af01dff5ca8d8b4d2e5d157b19993eed17418fdaeba7b235f552797701739971cda7636a1c89de01962b2b0d8e9d3484f32e66559f6408558feefaba6483ede9c5db44f29a57a7a26c0bafc67c4840850cd992b94fbe50a95c30c2102a91461cbeaacc1c21f1e3b7bc3f914c8bba67f6cb09c7fb5b38bdc9172a0c3b0a8105d89f319b063f6c3abd92556ff571703137cd272eb20df565bc35f6ac05581ab7b4c6bdd51bc41994e9dd2122b8a4482a7f73d6294e0764b0e113dc3d8dc8f27a9ecbbfdf541cb0ffa2b12e30c796a750d95016a37368ecbdb4d995adff4066f5882b68c7c3a530a0e240e3d90f13cad267e4a95a4b3c6b78994d2ef184146355f1c6593e04974099876b54b6114ddd341a0e42145aee2e54c5ddaa3dd50617f09d637b69f81ea427f18c220559182532cbd3ae5a5ffa17108850513858a4f0c4bdf4dae2fc9cc0f496bb46019ab43bf315a812cf2649500aa5f8ea660c3e28a431ffd2d51f8347e9836591898130245bb9b3eb59934006c3d4861248fbd0faa39d443a3930f8b0f11a39dc098d5f69d4a23d121c235f71c9cf6657c2735a477ebe0104ae9b9308fab3ca5fd1093cc90641caa22654bbb880f91e0e754f08c8f60a4689bcd986ea4a1d60a9bb716bedb5325817a25ba14bfccea5d38d455779d97750d933fefc9b5f84bb66de41cd7b84c5400d12a87a6ca0d58c43b10b469891181815a19c3914a8527779d4a12fa28276e0792bc5b9da07cf8b440002f12c56236c718ec02f46e93c2d723a18df690dd63c704b29a6a4799e046d0cfbbaa10603ce736efebdc2d667e1a159d198de57f05a0b7ae62d5efa026b100d23005cc766d22fb5f845588ebbb7a70a6bacebd75fd42723acac904bbd39ed0bb4e26121c496e61fb0b4f6dd49af7e015320dcb6bf0313e2c4a778b1f4419e7ab36025a80c78185385047058c5f87643fb03c7dbce3749c659af9dc1ebea93a33ca08b4e07ab19c2428062cb1b79d6e0e42f4b7fb2413c52a8d9ff0a67497bc70300bb10c901af8024d625557992594c9f13cd1a915e8d0b2a60500b4e0f20f46d3e4c39e52109e55aa8efed1d3e508a257c42aaed26350355921f567a7d7c7283cb9e90beef46fbfd96289a5cb7885524478d0132aaa62522f66315740477d666657daffd1df4af8a2037ab62255978b81f44a1212e875579b65a7d2e6fb997e7ca1a4a4d58c0524d72cbf4faf6291262b0ed969c8fef2c5b2fe2d18384a752106abf33073975e128787367dd5e3439a8236aaa376ceff32d26904fddb2203fd8290248caab26ab473aba4e52d878a956f741b90c3cdaa5fa1adb74a2e7843694d7c42d2f07b1e64762cba1373da840ba37b8e413ee1799e19a220363a25a5eed793ac0063dfa027c963c4e21ef7331087916bf52a5ffe2d063de001d973c8f3146f490fde33df122448180786c1d14d88b0a9b612918cee66f650816f188a5c55a751ecc6737986b69b53adf4bf154d12b4d2d1b1a19f94b648eb026f659f94b820256fd23b645afe525f40f88e6b08610c5c963f7434b0066fdca42f4bbd2416ff1b4db98a7c8e416446549d5e33d64d68eab0149c17fa5751361af848425c2add2f5bfb2eee8af396422ce9998aa07e146b35f306852fa8b74ce6037dc71d4a02034e2a0847ae87431ab117ebb1d4e826885eab258fa77d085f3644e9d65e4b0bc2fdb341a157b102a974b4df82635f8d4c9000f208e3457b27f79aa9cbcdac782a53265cd6a55f7b88f2461fdaa713112970d0b14ed146020d0d003d80c7bd4538003d98c42f4c6d5a0ca054263b43b962001482e4e8498018577375d734ddf389456221875492017657914fe58f8134dbb29cee27de95dd5343e556724c86cdd60ed9fbcb207314a8e560f3aa314308c2ba77707d24ed691ddc7e7b96e3211434701724c894e1aa21d2ebe353d834af5817ef894c3d43463e3cf60ae1efc4f34270e8bcd1c43e668fbc3492ca690ac53c625870a06a5160792648d26b4e5fc2d78e682acaaa08e9edc6a2be6ba05beee87dd630e852cbd09fe025107a7ce02c3eb9f642fecff4a3e0767698e3a216dc8be6260e7e219acc4f6d9ad303bb21f93223404680fb8405917e44263c267a95119184a15f204a2ceefcf69f87273d551bf822992407ffa213ef45a58c9d0a224ebc21e98a75fb637e98fb226f1eb7415911f49e6a9fae5cc71c589951594640d69ebf3b7e6428ca4d9d9967420be8ce6cc1950a86f9d410859d58fa8afb423947b293358539717e38d1743cd9878da3dd320354716e57d7a1d46370f845abb34c6de05ca14895f51db3a81118fc9021dd611c085db9362dde2ea8bdf27e733c16c8175f6dc60aa19be49f24434edc81ae0ed54e2a1d37a5ec08e7705a4d49b1baf8e0ea5f3a5cfc6c373eacc3165cff55ade1630288549da3c66993d590caa8abb9515f89d4f5b967214e61cd536da234254d2a93ee91d37fa2d37e818dcd5cc6c1d7985e832b2b71f8d01b44af39dc97a2c9b84d592776fdf08360c0b23935a8e620c653877beea4f4d09ecfdae1ddbe1b8a3b97ec638c54b7e4e0b12fd6bed623beeeb955bb8de361d3f09df641b3199703fcf8d144158446f03e18c4b693662a07c9473992fd77e0f66d912fd024ef0f747abebe77c9b3aeed8dcd3a263b2505ac1bbfa8eaad7764f719326cc1c0a4949dd3c33f0595d403f7de81e71289c5f4b96ec9496d5721c0ee1f6cb1946b5f92ce01c248bac085592af06f1be192ee3ac5d1bc47a633cf2588f1409624aced1b79bf310535306f785da4e5e955fbc8d1c29a5ece5579a341db425df5916eca851d5d4f035fdbb91210366db3d627ac7f1cf36cbecfc046f63a51d9c63e7dfc38a052d05af76ec9df1ac9e13417561446a3e3759f280f35bd92dc12c4c2b1526892e04f1b51ec2819a75fba45282ac93ec678318ab4fb053eb51b80a9e27440271668d5cb5581d9415f250195b6187d2d833d9684029fe20cc9774ab217c2f38e1b99891db8fc0af4d26b59ba2d0ab21a7ba0f6671f6607a4cc2aebf80967ca05ebcbb8ee94188ea083f62dc0d13204659ef5bc373bd388731b3d55a877113e9dcbadc0c1c42fab3e263ba53e875fc06a062c97aeaaf4b245b1c97b245b4b41c9238f5e01e88dd55f19857d015c357c141f1103883a3aa472032ae76a69135fd4bf41efc2b9eec781dd328dc7f486dbfa157a29d8d597c9aed902123e562d7e972163b9577f5ff8a07cc64c7e0a3712880c0da44154fa7a0b879a0a70a918f610a2575a6c3bf3430712bd018f0bde6f54e1da3e1b2b9dc6ed1bd265c9c4c8fe20f82a9079e784f7c594466144f90aeabe51390e973c09b1e9e843c97f61bbdc6a092e13e81aaecfc3d2eb53edfa6c25ad86e6988c74fc3f247f34195e1597686c3849dce24b92929802bf1bc891bfa20bb1f93f07dbde90f641538d5038fe53634fca70b2f780adbd4b946fc5080f1c6ea05fc80f848ff6d2f8100c59d110ef48a3d10a6d7a7d5352e34ff2fd7a785c1a01dad28796efcf902f817c16e7c0f581b5534aecc4975a2795cb9ec51f1122bb67b00724d9932f4c608e7a2b600c9c5e93d3c856e7e0f1bfc19ed4e66de2a7011338087b9fed07d513a75a956df8513e94376f9eb4546444365ed169d75a3eb9a8e528adcdc8266838d0dbe771db4253072b62da2d4dc14027b02af65a7e905eceecd0658e069b869f5fdf6d42945b5e2c22321db60b936b11652a0b8b39cf6e735a83ededfd21460a1af1f9cc39b387167a77461543e47b7c15297708c6e625c61fc6d722919597d140afd557b1381fa34d56aa75e81f80c6476c2587ebba56e003d7fb828ac3d825a0cfe0dd4f3337907c5504dc0e472cccc54faa7e8e7fec2b7fd89c63597a8b8d351dad48eb4cd0b90f94c8b304e7957e8b37d3d0468f764434096203f1f3bc2ef5fc196b98a98aa34743e0557daa74f678f9e622fc88b3d351499ee2ff2393b1fff3a029bcccd7d2df22f606b3a3c7bb34505997d895377d8f79d29333b5535da22b1560a5b03541d3ffeefee57ec0a117f62913d4f3802bdb2f5b286c6b8d1e2564325d37778d19c688d5198f76dec3b26a93497b253225e91bdbc9486d647db42572ad63452fcbc8e780155b3290c8224d7f0e616f970b6ae326317d12590e4f794a1773c76628b4f7d643a1a9f9f077ea53152d88c49c44485451d6bff0073b235bb04d66ab2095000a094088c634e58bd9d561e7a0e54fd2cf60046423f87523d2c45925d88d81dd8effc70f180f6ef44c86e08cffc7bdf21f03155c399f75c75cca5112032ef69beceb4ca29ad08098f3e8060e7404826cb155122abb0d13573fa2fb0ae80c0a730ac5c8630caf366820442eb367fce69498073aff84872dd4a34f35fc09096af79972f305c98356fe0cbdc8e0f6591dfa74906ff477a2cf4a91fbd808114d11542f1a146c3549b3c96418eb48129a4fc4110cf57cd912e68c4455d1d32c124ab848a081e611025d4b93f53f2a43818d789d5b49d8bda1f744cda950b6da325bc2aa3da9311d9e7b59636bfbf95e5edf8f4fd75c268ead8f92ae0bc28488d256a33d1bc22d2b882560eb325a57152ad81f6c1cc44bb8ed5e378f6151d6fea04acc54f0406acff52f94cd181b5b55b5ec664d4022ca7b87857d27f39d782415173745970d76aaa3da6c44ceb71af3959bdcfdb115ff58d475ac8536f235d9ec5df1752bc94456d246c6b84392e0ac3fcf5ecb64ec296ad722fa24affc5fa4e057c52884d27f7215a43e6efad6aefdb16f8b1fa4443b2e5757ac9fd5c95b5090310d2b24618583726c5f8e5b53ae3009ceffb8970249edd466a98738189c7e23c6379f2926f9ec5be9a9eb90a205930005d8c06604bfe8480de4364fbaf4a95216d610a7fe07b743d41d9088c29e0a47ff692af682d86eddca1e91ddee298e1340ac24049a4092586e8429fd4b0c3d9cbba683a36a3d428ce924016c124578dedf072408e3e105c79a3f50825ac3b9ed357b9a28a1907847cd313b2db2eefb266d2f1a3982494ec9d830c02af90a12e08fd46767e1ba2bb7c3b6af4e5c21197f3ffa46960f957b106dccc2e7090cf133931e53af71be2e47908bcd08c6651a9a031d5cf21d89fb88ca60b273608a751e9c1d6592a8d30ab72b3b7e4a7f0dc3ea4f088f0c27219bcd222132156a01ee073539df9c5d425b266a7c4f0c1c7f24609bdf780065e0f9b278edfa70fda81d62c9fe04f5438f7b248f2c9a20e29bb4b15293d2c49a829ed593654066b12bc866e154b96f45bef787f0948a54acbebbc186e275d620d686c0e3a1e1d98f13c3e2299e13197d554c4b15edbd716368613d134009c995fe779b98c59c0e95ef5075f134fd026ba9c5eb8d4d326cdf6b769f0e6eec6da3994ba736be4b43ce5cf185982b431ba2e8856488163557dcaebc6c27c5efcfb0f904030b4551a5d245a20403b9aab3841183b5da8481c5158f8502fbff67255392e81f6ac1942a93e6217faa5543e717b37def44885586674e9457f09139fc8611a00249e6336afd0c1e867c5f5d9861cfc20469900b4c59b4554e5ea93d0ae594bc337ca32429c69c64f87ba07b9fc72852f47697c2be1d47f2288164ba5b1fbef736bf233574b6fbb74386da7223ad7fd05fc80bd720948a5a355e7bf361c4bc6c23ab6b854636d0a73f347d5780873f113ea471689ada2f314aa32d7ecc89f354737d161d54de5f2120bad564fe10a6e4609214e6616d38f5f11d5499ecf276e2fcce5095fbec5dd94e4fb51a6174cd43153bee486c384a0a53762f6a09831c479dd0fcd67f69e53b7ddc52e0cc4924c52be95faea14e50c07c9417c71376a6fe822c1caeeeb6514c801e85c1201af188d79168772dc6217a20aba0c310c5dac2618c6368854d6b92742c92238b6b464831a7a22fe81b7cb814977f75d23dbff3c0f1c16a9031d04c54cc31dcd20b44843c803b08aac796e94740f874a0ba3a31033e4ee93edfbe3a8ea4519eba2e74878f39f49a8c4c2ced27e07728ff02b2d7a9d05023ee781449d636606959723bdea8a24a4c6b33a201ec36995ddd4d29dd0bc1da1d2087e8c45ca44ff8bbb112259cc0bf0d6e7c2bb925e21bffd1a3f84d5e9138a3e0be11e300dadd1323c031d5ca47d9bffcf8abd6ba4cf11d19e2938979bb1bf2567f71c9cb67ffc61d93998abb39e4034b5940bd2c91babd685a29a44dbbc3ccc2207173f930e3c8c032a26fa4fb129d9a80416a9e868660054cb5abe731c2cc44c5f62510231d65b946c5e036ee166fe1c2b166f17ac9cabe5dc9aa731aa7eb51dfb51a0b1fb543590b5d6be6c242fea7f6c0ee0c8eb729a564d70a5b133ba93c722b640b30c969a00ca16b4bffb1d9aa032582e6c3abd9ef1a32f7daf6b8d39a76aac32569116afb23754732eeed474e5bb8d1c0fdef8c3f7d5712491c95c62913707403bcd372b71e97f7e688dcce576ceae5c6d8881276ad3ecb3cb284f0c16372e716d63d6f2fbf504daa5354a26614f9e48824433c908c7526236ec1e3401ffcffe48a031017e011738d76cebfd4683417a1becc4bafb2e78137bbacc5a7bd9acbd732635ad146d63c2449e1a023328d7a1dce08969ace1792f9f8c520937837ddbf5d85f2b843fc9c8a5707040cda7d7acd2806364dc905bdcc6bb9062793ff51da63db7e8d05061ea4e5d83d61b5ee4e86faeeac65c45be071c9046766a145fd4128b96a5ca403b806dc6dce83021681892681d94eedbc0b076ea8566927334a57cbd02ffe2b5c620cff074682359cb03f398329b85cc303afaf1a3ec94a0bbc5363cacd152ef5eac2f32e6340e7e182df881f17a72adfe2accb670fa06c0c9c0749d4cbf353581e5dcf4ba1e0da7b7d01614cabec7b525d768c30131d4fe22615c79aba50465abd65cb10c1548c073f179f5604cbdf1d155dd2a6b854439caa015aa93fd99713c76347ceda8a6bcc4d90c36844da71c9cfe5a0f9b596029f8ad21c2f329ab956969ef313402b6b64d3a8160fa0cd4cbcab4c7df9adb3e784caf220b001bba19b51587cc8737db6f1ac6a77730cd5a41e13c1c4e0617ce3ec91759c2f7de6493da46d2052549d8a8496d0dda42fd7f626a99b99bb9f436093a49e3ac940c5855fbc4d9bd2f7fd85c6d4c48b1d114a42fa7a1072283ae941f55e97a8813f686b6a4193af57d616783a72d2f6d9678ee4ed4387597ce5c9676e035e227dbf774cb123d4fa96cee59fefd6321178a61c3f8cfb1f073589d053dfa04dc9a1e0b6ab6217e4f6ae710fe7e6d9ec6e94d16bde978296259e356e3f96558751a28601919e08e121e313287192562a4581d0d448cbfc7c9eeea8cead22d9d44ea8ba9fe2cc1b1f75751a15dea04e16a90e8a660f2600a5a48cffde305b2696d1730043829918472f58653e70165144b91ea23af6790cce553f95b1a20e581d2584dfe5e05c6a410c591dca60aaa4b25212a3870d5fc9fb8048c2c5cc518d77dcc3a105b4d2612cf5a9b1e56a6d699d8955918f9c2294debb3a27a1491a81680a05d060d801b8791a637efe958fe1bc83c7063d3dff135e1c80dd39093bbcb0a07c6967f1026ac9dbd65c3cae28d5890a96fb7064ebe30c77d78b7bc93d4857dd0bffb0b98d1615b7963bb986d927fb151c2729c68da530df4e78ed108374c07f1ef6fb3f084ed43912539692297f433e88ac00914fe79cbe753e3a15349edf252b880dcdb95dd4cb3a65ef8f1d2a42dbe1a4d966b9248110cee8c93bf61a55f9b01b5dd8d5157559ef892b56479cc75b9a66f95d75de16c0c64ae588c45fb3edc62866dc06cf45868f5f47752d3f10f32f1199e7090c3442488afe279ec26edf999976f1f5c47a202ea4625c54dd57f102061e4596a356a1d44e5bcbb82f657964bccbed40aa361b7dea93c06f3233a97ae89b112e65382643aa77326aae9325f8a65ec9b40ef398eb1eb1a56ed3ef7c03ac33146c70578c96bb6cab56aef65025f16c821f76b2b90e61bf1d0790a55e96361a359f4a0d9b2f2ace00a316009443cb9356c5bdf85c3ba5ba6818eb03147921559f495a57b0df2f6d4a566f188f0427d03661d1278740db9053f6458b921d5159b705d9c3dccc518d840d8def5ed7d9544288105849d146f2c0ed3702b26eb8cd80a4786ca494196c3b36f074075a90bcc68a908873b3fad7950a080252d0015ef8f7fe61768ca9bb7469f734382518123db060dc0e3fef399e1b2294f8ebb3ed4bc2b363efae0ecbb8074136fbf46bed63aea7368935968d2dff088a6f97315f460d3f940effa1484495d5f72b1946e13694163bf8b5090c59c26b6ef3afb66ba7cd1e6e8cd0da583d2eee11d8ba7dadf28db5d0701598f862b67315d3c09ec5057b2528f51333921ef33231fc6399f5ea8fb47248de9b76ae5c0010ed8234bbbaa16704a144a370d571c22b48a2e8283a9bef69120e12cd5b78cdb544b0817a81a62376ad14680fa21f061b73c2e7fafae799b13690bae26f8a53eed78d3ea1fbe9b206fbc1309ab2ff1b7cdeb6822cea035bdae4e20344d70c725c5c7915746fc550280a2cd232cb0eb52bcd6d231b26f922dc05621006e1072261e80c6a63d316fd0702b9aa35d53241000a3f2fa57943aa97abf66356307e1af373672b78fcdec4ed53fda586cfe550458d1252952ae1c4772b50f42fe8f1acbd19dcde2263e1cdf00da6d4dd4e8efa3968a3c727373a82c04ce7eb8aec298ad4e89cefa92b3d6767594bb46ec9b873a016382d6011dc7ae62cb38f3dd25f1896628ac8cb80299a79b842c891646f504fce9c5dfc2e9046f52e5d279c28512a00f942301049dc5c83cbd2c26fb3b5e222d0932ca7715ffccaa609783964259639a7684805f241f8d4db0be7bedbd6d7c7517ff34b59af794413a4901211c17a42527982648a544457c962071e7ff3602ef40beb8d5b9bfea92265131eff4a005b984c38c5a87d8cf0cb54d9aba08a0dc46dd91f2973a5aaf4dbcb55fc029e523cfca41b51fb71c8b95d08a480b6f30d711225d7a55a601f9bc127918947fddd23b8435a9fe12695abf36b40969ccab2d58aaaf7d7d9a5d5e2139065b4340e0ede0f998e5469b9b447511f8a422afb523a11d4f950a2bca171fa96a46b2956ff87405f3d462c5ebb1c3ebf1cf82eae178316e278e34b3dca918ef840a3285d4b8f773895fa9cdf3522dfd7e8262c5467356f6328509e76e0e850f2ce3d9e6eb8756ee00373e06fec73a5b10b3bd43b4cfb83d4c4c933d89b2ad8300e7043cdca1ea7dd55c33c97fe1da68f334262a952323cbe91645026a72e39fe8a342e2c10529130018b933a19d1016a13d49e91629c05dc88f3f721da6c42e36784b06b2ce6efb9a2f4ae97c379f855d736470809b8288d433aecc4b3618bbe1c667204fd0939573b3d33de78204a76aa2f8de9e0755a25dc163e860229d5f2386047915f19f3bc6ebad3118d299b3df2a1ceb6bda59d00ba2fda67810ae001480f4e6a452e4d29007a90056426ddcb3b65a3debdafcee8c0a0a32524899c98b135dc56957e340dc3214d0caad697bbafd67057fa18a23d4caf01ace34470b3be894a957c66a0f341f898a64fc6c0402c0702be01b847640955d9639b3a3435ba1971a1c3f30adc8427f992327ff4810cbafd1746399c1cb833d48f28d0b7b2a8411c012a592512a6ff8291ba6d5ccfa116dada13af285ee9b8d07790a694f008a8b1aea89400abb95135647513cd12cb55335fde2ea6a368102ab8d862c05e8e5b7a9b5038ce17ffc1c0b5608a5b69da8de1d2c658866cdb235bca92f5ba2894e6891aa91e17b1f544ffed1a34c820b0c49cab46a83354d6bb30a1e162784ab4b0db05abad3c899925b95534a3621f61c3bc7400eb6ffd3ba0030483127080ee44f66d4b7e7eef493a6dfe6dde4b2785675488fbec60f5cc988daaa24410d11a8cc3aa27caae2c70d8852f257b8ac134021e419b1a466e9d570cafef400cad6492cbb253b683ec7b68f033ec12638550d4b638af09ed151c6d6a90e972bc677aaff09e29e499982393a628f9e327e3902b692888283df79e5710a1e7bdda6b658564e251fe714b291d1e3cf725c9e2f0f71a9a05c1283643c8b6f8a9a2d8d260e7ca1894a29d97cbdf098c88b679264dc07adfb05ed39b018624af432f38c30d78afc0733aeb086662a1a212d1460abf0436834f7e783d9edf83560a779b1a71bda522aadb24d712f54139b8e8294c76050fbbce686ca1003fbdef3204cb36bd285f83c761a96cf6ad0bae1b05c49613cec9de5f7b2ac69dde159654368da8442956b2c4e9f63a12201eeb3c51f6f30147f809ff141c9f5d8e988af68c8d41d75483b00e38333b13eb3611a0f9e1f163e2cea854052f6a80d32e23aecde56015dcc06995dbee483a5ec3dbb718516a3fe751ed0a78d199c56c513d0a55d3bafe0adb08715c09d8623561dbbd054f7b6d928d9ebad50e0d45a0053b4ecbcb7fdf1cceece4b5cbf6feb4fec0c09f9cc8d084c7e7584124cf846e688512dc0e3057783ec9acde3c42e5f73eb4bd8d06c1b980664204def32b2b8df41199ea4a040cf7c283eaa17f2fa327c662c5fb797c76f9eb96ff880bcc2dee8f0ce23e1f9057960039921fde3071a09d0d9ccb166272be2899a992f269371c74d6f32df4e0cc5600bb8d4866c81ccf6eb1ddd4225429d65f0037f5fa211d9d79c86454079f464df2e97f768bb061220f8773119087c6eb2c79b892d6ee1b3e02cb92cd8644fd265d943a919e7c5907ddbd24a4fee74b7ece957cd6b8cd366ca01173102ca21ee8b6ba928fd4d92587c696ab587311853d83476153b6475543a11b501bac8f8dcd52e2dc7dcfada50bbf5364baf4dfd92c6b88c29f3b4a411d3127afbc28167e5c61b59ac6a9f94e0bf22afa5d9d7344ee94b30fb5c8b93742873fb074cf949adb9ca434eaa9b0ac9a5d48c84c7a67a73e8ac00503c12fc6a393f350aa7877765be808c754f45fcf2d176fbe1c891af4dc4e775e70e0d397f1c3cd7a07963a8a081d765c35d68eeb280605ee56bdf7dfd415978f1c50968a9afbae430c55b91156999de187d2a31a72eb57c3d074c2736f3151e1a7d772c7ebc68f2254e1e6ce528dc3903e9fbb6b724c3dca20136f86728b65cf8b5658197757481234f47097c189230adeb060a5856796f7619039a3a61ee9bdb3c3f12b46afd63b899b44227c26385bc0a0e397fd06c653b2bc25e1f5f0d6f956c059ab56297a8a137bfbb95059b516e45c10c82e6abfa87a1399ade1ac216e8f9bdd131d6eb969842189f60c7963c87668df409ff1e7dd83ea60314291bc33b4113a0e5e4dff6d5e1cbd53424801b925d8cfa2cd53dea4e3b1af9c540e0dc1ecab3e69e430ae7aed155aa078a561a1f16f74c1a00d1a8189f03bf40daec62e755e2ccc559d328894b58e4f1100ccd248e105fc751a9659cc2494bd9f6b238525a3ed397e67a39fdefa21f46e666cd5a3cde76d501ade156b63a4953a20054ca16c9c2fe959d2e572d770818b702a5f29392a0f7b749647234c8614b9359b5cb71da05f1ea2b8e6e7db63e5dd1de2e4d72afd4682fcc4bbc8b25a7de77ce258f18fd724cb699974f2d382b7ee883a349af466b924ce21d7308ab8247896d393f73ea5c24aefcb8e06c54457d5229a525a5eb6efc2fbe4f4bfb178001d12756993c3b4759beb5bb412a9b5be16ed936095aea24b8b262fc58f3824e010cdf202cf8d6850b2c5c03560c8d4408f0f9e44b442a2dbfd69ee73b760666d4d8e33f48b02c6b6b1320dcb22f7ce7b3323c5575cfbaeda3aa23328e29d08126a31e447340c440181cca87e782b893edde049f16717425e4f2b775853deb013e1859e26f758cbe64cb135cd4d0403dfcbb530bdc2f263ab9e5ce90f9e961f1e50285778dcdcd308c8c90e017ac6846868e19181d9db2a665030e81650f479204bdab065da8216a7d3e735bbacb043ba6f1ea582a97f1464f4dfc22e6cfca8efc58252979ee8b25f09466836f1b8d5d8dd559b4ed7c4ec1bf24aee241d1710e6f617b21f7f76b2925f6412f4f41c5910c84888b5bba4246b5c1a22c66949f8d1bdb203c650d10e0624e000d8d1a18d5e23af8dcf3ce7e7e5a6ebf95a8e6b66b63f815754300883a1ba934ec8f0928e88fd6e2c906416e01b45f291fc94abe6f0b27e1c3a6d5fac2f13fdcc1fccf71a9e108b9d75b5006e48d1a6bc9ba6bb42c4dca75bfb66dcf7edba560a8bed6ede3571920c3176fc91f31b0a57018a2839d79457cf6b2ce11f773527121cf949dc5f10033e890e7d1b588eb47b9259855ad97ec7293d355c2eeb8bdc0fc8549c2c50a50bcf730aec36d68b0079aca334a96307cec73c651b53a99073aedb0d9ede4589bc32ae1de4265b568524cd3a1c207055332164abcf3a241bd21a4cfe844591ac54c681318325f7c8152394edeb7e26679b174a802f0eac371cc87c6c4004132de16b0e870128750f102d798dd47de50c453d2122418f65b0d171eb93ad09a9c59ef9d3c5b2afbd69e5aa621e9478428b3367e8cbfb76f2b3be77f255e347aa9ca74f90cb3c07d5cb36182bb7a930b20dac49337b0667e8c251e36ea60870d939dd9e6e6caca61edd07873cc7b82e3db0e5964b302d0f68ddb14b866730a479559942af873cd6a5cb640e5a6d476b43db235a89e3064cfbed87f5c320fea919d2ac7cd99bc880abd5dfe6b372463d9eba791efc71c444868ea6c9bbec9b146cc21c52ef93fe20ec008ccafa68efc2bd28009ceb07bd2fc8d8e12a19f768ad12f0b50ca87aa98b45f97612b4f8b83516a915fbaf1c8552b699bcf5bb93747a114ff00392baac43f6fb8109abee62c091b7cc457756b9bdef1d169ce181248a6861551d5be5a1bf537448dbe81d79a8ef28a85ad59110916dd6d65421336e92192a45e043d7d624ee96d0985b77fbe6ace5d8001161afedf347e98ab511038aa8a9065770c451de7468c4be889a57cca8af30db17d24c528c1eb0f18da77371fc27f8f8b2ebd29279d7b05a6aefb35b0b56c2d4d706486946e6e23c07584b6ad906145d61f5d3268c8656e369336722e3a111617f0adbc6300b376fab20acd0947cfb2b1f3359b702016dadddca3622b5010de8fedff931c555c9582518c883cbc1caf951b77a5519e48c06a85ead4ed0830c3f7d6dadbba3ebc2a569572c69481a436c9df31afee964cb6015b2af710a630d27a3b675f763dc53a628b2d91f3eb85833f29756790fbcd6d6f0a07df98292ddf2d7ee0e32d6e9f06ca214c5c620c60c1e012b76d7611ffba66cd170f90565a290354b12966010773feed01506e4d88f0bd4711ad8fe29248c38dfa7f7f01ccbe8f566c72739a6b8f9a466457e94d9d782d20d6f600cb5b914b4924db9c895a7f124d0c93ddd750ebca438722e5f22ae0e0fb5fd0e0efae7359512579476188e09ac7fd3fc81abd5c7d530640afb103cd23d90d672ed1aeeca49058f618e519df7f551ca92496f2f4bdfe35e5acb0f9a2f7d9584a6ee3bccddd20630b3592539fa5f1c0475a7cc45d1c8971f79a26e0947b77d947f37577f4fe6a51ec93dc95f62851c456e57e456cfde6e4d53ed2086c858a8e410cd1935e098e70e74324377f7b44e6e37f89e48991a1f9c4b44427d3c239ef1e19d610fdf96e5464b2969b6269dc6d3e6d7e57fb8048e52b4986fd1eb2be3a5839ba83a2e873078f3e780731a225d1979208f015d80c70d2323f68e523ae9a66a4f3a0baa7cdd496c2435cf95cb7e949b7a5e240bf507438896947f1f7a61f2d7b3c1c4fc8f6ba091dc7a8e9fe3c7d9d5f3dcef68555e79a84534d71bfa27cd328c995f3ad0a697e3a807bfb33f9c2e95dd95020d9feb5b0f3f216384f5b17017f5f6151788449b5b4d19d778fc72c8e9d81048b57776e421c380d60ee3a024b97aa54ee5fceda352bc2ac1bec9b78a3c2482616fedb551635dfcdaf127802eed79bfec80256215579db3e54923c9d7606f05b0860b81ff15b1d7d562c698de06fe8c86ccb5a620d0e1a8e6472f0fe91eb71a79a1a6424ef9153d7735461b8cec71693e1b714f5fa4bbcd04145b192cc364ddb746cf73fc31917c1bb84beeba5ca32cde5dc1d5b03192c1e7ef2a86fb63b9413be45522105a4b30f6850f00a0052b6ce4ce9624bc3d2e6b634c2a257a6e1ec6e7b3e84f91ff11b178cadb4eba2a00c1c7858203538946e90cb5ac5d10c4559a2679e2cff680353b9fbdc34a8085c6e82f03b1364887736e711729614236a6ef59ac1ee7b6a0fff6190186f97b5ceb37e4708b59b245d47063ee8d4750b015d2ce86393eea9aff4c820d24f84c4fd8c544462753132190c84cb12fed178d46d69322f169389aa946b948cb943a5bd7b3b386e6ede9e20cd5a713cefb1a6878b54968c145241390ae6cfae80b143179668e0f132056d1eeaee934a39bed0a4dc5d3ad1d56bf6477eea005249d9d0991f6d20953d001d08bf218ba821c62c8dbcc7902dd687017ac95d39c8a8eac0ea038a5897c819c79bd48cc53732f09c280b1e633e0a813655dfe37fb4279a614e8ed6b6176f10622252d06ca54dfc64a0ac61f2caefa23c5d58599bbb97e6afcfb501a0d7151c18f65d769591ebab89a0ff391764fa267fa36196d0a5309f73781da9f5642ea1bb1d87969f4ef4e0fb6475db2686c5e220757a36e4a51c6e4f7730e4dac28a00a2582968698ed62e52877187cb9efe27f34169d759012fc7d03caff0f75218e054fe6cf04f21a53677ee014a95d5e2f616b20941624230d8f8e38ad523b9d85ae775226c96b77b885b489f8a6010e41f20f66e25b8a5e9013a0b612da423b417b00a2a32e3ed3d8bd8b2b9c190a88704351c34a5534245e597b18e50bb21107312cc987704a5e5416e1c5849e3ed5fa93ef44bf6945fc687ba44b43eb1ae792579535ac3a9708dd3ef7c29309084c4a1e9146f5d57f116df0547f88fde8f6de8473427f92a0cab5ce99785ff7211280111b0c602022dff2721971215064d7401552e51a0d751a5dac742ebe90fd5769c2d995db4a5657cd1ed88a2a20c7400b3c45e78edb09f338b03724b493eff17ccfb1b4286bbbc06e8eed9d1b33c23d10fe78c3bc8d386b02be22192059cd60351032b9a6e0018c7bbec4e2cb34b0f54724a7267810b9b4b14cad0d4cd313508ff073b68855fca2ad60c1ca097bdf668b1987dd6d7855746d4c8435fb848a57cfa08a6e75f9b58f67d34e391bde4521828e372d1c7f53e733a4c778c9e74d95eacd4ff22c38c88a44f31758519cf2a6b3fed70654869b3c06b3d4deba99f3af88e95767815b30e5e9dc489ddff740858663ba129f35acbbe1426797596c8289e8a77a53f68d4dbcbf27b22158370a9c40e313cca3401ee98c86216c97f8cef688c619cce61bfb249c8a77f8fc95f7f847f82381da51030bc0f5cc1a55dd1dc1c6b4e255a93ad44a4585eb5f74f4eab9f4be576858fa2d07d342b964a43f2795c02914d0e096e0db4c9e12125a86e9dc9e914b82a1655187e648b219552d18cdec398331102b5e6e3ef1bb16c69e1bfdcea00760058e78976189fac08fe7302d4754aa3105a716a807b825d60df4e57e9614ac77d40e5a50e72dd62ce434a689c4ec06b6d83637b226659715252ddba367c189b95ec51e8646133ad04314a1b0614061e16e4726fce7bbd971344ad1996d39ccb7045e891b5943c5d1f1a21a656d228d77418f45970c4a90534b1d9d12b9dcf0b2e0d30985960372fb53fcf13afc1e84bd8e9df67b2177ccffc7c06297fd38261ae1b0e026ed60b365a838aca24e5bc585ed33785002982ff09678bf37e105e2baf23ca72341a5b8bb823cfc8bed1fbb47c8e6655f9dc8345788708f62568830dfdd4637b21d5816dc3d00cb8645636fa2a270d377196cb37456259a67d574e7e8c4ac6ef0afedc5bfe4d4a226b6cdaf15ef55edb6e294789a35d50d5ee7ce49931bd83ae656da4a13041b94ee089810f1e54ee573f430a9054419b43f87a327d26a054ed99acda63c1f14ed26641a15988d82042f1b516c26ec05e2c9fbd632494ca499e150b2cd94db127bc791007064b29e0d77aa5dcabbdc458107288d44d7ff615263f12e54ae8329624d9000dd72157ac6cea171b5d4313147a528b7b37708245151efe2dadb0236809af78d3c085f48f5b84d56b86467ace05783eecd9a0e0534b68217a5b04fb4d247fdb3e75dc363c56dbb740417fad3871b631dd5addeac77a0207e9b863d29bf7f5b3b01c039117aa9247a2e2942417d40cca783d179953296c61d17e351e9a1fa24fcac8aa92867c449765e54189435754da3b7fbe51fccd8ae9f2a18b2294376fd2e396f05828e557f516a9462d29e790f4fb0cb2a5eabb5a247da328cdfce0fadc229650f07875c519f096165c0fe013efc22cea5b765759c158b5b135c8eb8907ffa4ab190c3423c1707b7279659aee2b785802145e3599568fed98c51c5b85f9e389d8633a07489714e1622b580e0990ac2eafa3f91e8391986d41a97f71507c1fdfe65787d82fb0c3269d1f7fba987d5b7a5b3293576c05d560500d39b9a92a3b7cf92db3043d31a3822298645c952bd73542bca93a1c91d1a472f38a4eb56602a137a5fe7c748561a26a5fc91cbc64af76ebe3860d2bbd84c9676a7d63b8064f6fc6073382823ced3a5705b5b9cd6f7f3a939a1b02093df4d6671587eded5e0cdba27282699e36d7cfc451ba913242dd314605fe6a8cc1b31f0abb40709f598b78cad8cfa3bc933b7cdd7eba9cc6fa0b7faf5fe74015d8fe3027e8f67afe6d587b71a2a0f2bc758dfa7f82db3d68d10d63a30bda4bf87195434b414b87ca7cd42a9673ef9eb6c0151ef5035fb9750a698f086ccda4cf6384a85811d0b842371a1e3467eb2a5ddbdcaa1564ac4a28b9e04b6dee065f5be20ce52e2158e1e0876662e51a796ac1cc5660a5f83a4f6486cde95ab3e40949a7ab5ae6a845609a6851e53fea174ffc2a1ac8def2e63d8d4d6907ee37fea8286125438a4fcb89ff39664d3b3457dbca8e1723ff9ee1e818a4e663524a15f7ecd7bb6c73198b87c32f0d29dd4a22bf02e4aeb020023edfac890c746f982055c3561d3d4392e33f0df728c677c9b82320f5306b32d5b97475aa69a62bc073d320e0cf9a6b5407b761f46cbcebe79508db3f21d82af4643dd1b491cc5632a561511501a409ba978bf3d821798fa17d5502b8bf4c33564d42d32cf186b8e17a542ad510fbf98f024125113798be2a42c7e3fa47673cdb3e4053e4b8e73c85f6a8e9ecb7ce05956161b3f6cf263d30281203ea6ad96283d6f7ddd42cb6592df176e47140b6557fc7b03be1d3118d56512496e2be08bc61c22d244a4950ed2a2717570b8ea016c21aa2cd809b829faffc4a4b5a8f051d75626f6d4c66e0cfb3df2bb18836bebb9bf244bf56c6320c99c85ab05530bfe3c93c17c350f262b220138d7519e1e4fcce53f4b4481f432e333f552094bb83c810648277aedc6a3d0a4e4b20913357ddf4b52d32d2b267da2751f833f7075dd7c1d23fd7dc3aeb5447ad4d342d027fea3fd50b63619aed4a99961e7ba6b3bdcc93fb040c924c2d89954cf3abbd540a3a333694b4d621d57f96d0042e935b855c33cc3a756016aa78bf96a43e32edd57157af2729bce9f83e97b668ffefd65bd0af9f99a90af995744272976d9482bc533ead4a2f5184d3c3bb7dff4306a73d09c6a37c8a9225e0e5f0d654f9e87cc0d1082e5bd4051ac663d00b9b6d903b6a4e8364bbc3809a2f8c36c3d04cd3bef045304a55f7dcb5d938c91ee52b5fbcfaafc78cbf832693b896a70b001ad87debe73a3e4cdf2f6bd560eb0091b1d4f45c64306ab3447382faf29e6e1f8ad46dea53b5e666d890b40ede89f6ef16a2565432cc04b63f4f8a40174404cf84175ea30f08a336f3d2b2ea6825e97b5e58b61772b0f2194d971d861fd8374c3880f4773824fb2270c42be09b4e262a4cbf06fef8a773e01dc1599a7f208a81cd6691d6b1a144ad1b1f28e82281acf04a2276628e305ff2cc2f20396ee92beb297650b3945e708e4213d8d7ccba0dacb34c9e4ac2fb594f891a5821c2c9e0a8185e1bee2e776401ae502946ea71cd9ee53635fa2d90acb152cf1fed39f269d8da840949b6ee5f5af1e011594db50f42ef1098feb5966a6c2c5dfbe79e4bfc2ba968e42b06dc6aac254357cd3d2e05810e6ef2806674bdd87053431375934020f41cb6bebbb436f79251fce7caf28f82303270e9b5b02e15997d45c655ed6a50e202327db1396383596da2902f4df32a366c0d2b046fe671d20af0c49f373233832ea710cd003a15ce951ba1284aa8149e9d0f5ac4c3a5d1d71f6fa4a5f17a573c18e9dd7328e60e7ccd06cf8710317daf0ab18197cd949b72da1ed16607e88bb919c8a3606d0839c18f43060b0540fbbbd4a88b255af3c19867c5998d4da64672888f03134f9a448df488d81bc9c24e5010344f8a22fafc6aa688ad9c7bba4d0c5c7283caef68a88b1e7447b95774121280c21c4efb6a977f8268a40ca0f06e53cb46b3a68b11ebcea10d3dd39fda1271411758851fe4b778da2a1cdafa5d606b2b3a00e90053f35646cfa872488106b507a8c9caaaf49151b84d9f70ec1c0f66e58ad202e9b82609e7903deec6e5001d637209bba39407e6e320aa6348c089892c1119c6e980a46896519b5532298232053d9c43f3dbe12525afb208b3eb710c580cc7ba4470f2fde38fb93de31ffa605f852fcafd599d6e98ec552d32a6e0cdfa56e759109addd1ebfb603f2ea69ca5c2c10a1215e19df8141da808d623fd2fe61c9ea51756cb558ceb790cbac930ec1416699dea54d4eb87b9591f507cf4e0c2e128f419cd1f39695c2e23eb0a75745df69e56269da749aef2adf5c3c72258d5e55f669176440a04b3364d0909230199c525959a819e89faaaba48703385157b7803ecca7887b95fb96daf605e50c3dbba2d4319f83ca81b4b2aeb2944e01b879ce6a4a416bf984492d7da7ef435172ee2d53f6074c7d95631ac2ff2f9eee58ab3fe19e0aa273d1156db2e148f7b0883463d8de55c82b0fdbfde309189d95beb659cb778ecd5e43911cdfa060e74fef918b68dfd9689fd2b88ee916d52be91dadf911794dbd6a64b7790bad74660b983f33fb3a6aa5939a3730d6157a13e94ab4ca8a0f72a71ec7f09bbffdef247f92c28728532d11b44a571efbf53be1fc85de1b7d8503584888efa518b9725c5ee4d9c82e65adaa7d2bdb37640b8dd5a98002ca43b9c96830be42fa4a11aad70470cae7b0ebe9ec4c284bfe90ed78724a6605810db23ae6428541b62002a5e27c5fdb4104190933ed867702c21948ccb8b74d6b291fa2e5e21a7bf3a53745c6cd52531511580ac10d72becdf37ffb799c1b3cc9d0aee2e8d9a3082a3877ee83420cff0faa07247538ecddcd6a07afa52d20b66ff6cb769c075c470295c759e4e0598b296ee1dc8c3b08968bfbc352ca0896c89e6f71a14b54d503458babfbe209c1cb9fc2cdbb4bd695f1679bc440fdec82380d864bf8de8557a2fd0c5d3307e6fe947f872eb2200baf45de01d6e196e9decf332e473b0c94571f3134ab6dbc2b6398264fe3f54161b5336548d3f6218b84b9a5b3d380991cb11878c339a18080cc8e0afd10b199490c36a7282f0179bb49b988c601e979a80b871bfe827b64c8d73f6db319cbd7b96360ea92a0ac8eb4563fa7804b715b7a645ca6c47e8981aaaddd9926c4475760b131588ddeb6e4e75cca1e51ed972099f68d1b2083ff9c47ebed73eba38024e0faad2a2d43c01c051a22d9e3f6c6835077e9da66ee253da2d6d67b78fbae7fb93beab543ae72f4f1b827c8e7fcf66149cd55ae44cc1520297bd0661bdd5ace93a14d0ef3535da08942bad284be99e9721fe54699b45df4dee8d3bb7d17fe16ed687d5445118ad6d480989c801c3569582d50f171fe471ca51486ae1d29bb7a17ffa1378a70e0836966de0f5ff622d2d6e034f056973fb07ed737738bf1ee81fc60199d00fa3967ae58ad308ffc64674e9c3bf56bd581036ec40026e3ca963273122155e1e5875dbd23e4a0c0be04b6a25c54a92687a85e69778132641080fa8706306c6a3e3d2ce3f79fa3a9b89f239eb44dbc29802ed9e7a6d5b931e7221d95139a677f509153a675865fd35fb5c6e5d37aa77e103283ae0f44fd54bb1601b89f9052e3f46c15d17bb913a0b5fc66f3a7bc36d5a7ce90039c87753ba53cd9f8dd4bae9c0a59de986760f4aff409e979a768803b8e23101f014bc8cb7c8fb9e50e5f9d6621f87132361e41952e2f4c9e51245aeb50da992c9a86baf36e98c06e7aaefcae48cd5bd27cbf6a7c086a5ef95cbedc7f5e371de940453f69f0dab0e6798a665dbd4f78477020379312f15790a75e26de4cd5de2a877299533cf72c241c262031a3414f525a6847c510050f6b2dd1d457937769d39c0a86cfe7bf93263579857690b111e30eb24aaf39ad02211e640894dd759d5bc32800292581e03caac589ca70a62f35fa3da8b0f2e6bea28b33779b908b355472362ef61d2a4d4dfc6ec12f95b8f2885752fdd7e6205b7d7770bb6584fee2b64dfc4f82f381161e7fd57fb4f98b3ec6b4ba926d738343e6535ca036e69b6a4fc39b576fd0922bd82cf148845b6fbe45b6d0614709fbb5bb830d3bf1a7b95d632490c64e95b8965e7fef9166d77e1bc9c7febeefcc83524208fe538c7667a34dd5f1d8e95546739a95164206f5749fbb7601662820f0b54f9337c24e2a8a50895596b83ac0d2be2a32b739bfcbe126eed8dd82c84e9202421a0fe05baf8320effbda60e3cf4c9848a97c9ff1051db0b51685f11121b3a7ae0d47c5915f52d44507668719e53709a0fb5bbef32b9b1d889afca148f916ae99749f1f6f9a06b1ca4be9168beb3ba3a966ddc19429826b50db509e1f770a2091c5e25458cc55b3473fdfc8f0d69af47c6257196b7969a115fda8a18af5c4e06de803373a972e39490366c5e9c0892dece59188fad0e046ab9f8fc6a80ed7a2c756755b609cfb4734c198cdc20810630b43bd0da8c616e0b2e05714069fe90fbba0ed9498fb350df6cf93d624e3ec6d4e0d0e68fbe48aac1818e7ab948a466a162ecdce357977c9d422125f99d118499e76cf2a0b76a62f8592c063bd551e60b5b43f5af354fa66f0f582087d3bfe87a7f45f8024df7324efe2383c2cb65134e8c15f4d2c547f7d7a6a32a27e816190ff10f50f7ed27613bda2f3f8ed863317cfa07b458a9a548ef8d8d97440264b6cc2485069034fa2bed90aff850efcc8bcc57189f335e3f7847bb807cc55dd9a423bc5e979d98efd64b3e854484be83f44a717f08660974c1c7ec520a793f2f09367e513cec481be8be08cb6373084343fdf67d878c31a7f2e88be5eb0e7c4599233796fff17361f9b138a10d407669ef93c704e46c0a1c9e0a0a468650b7a0693483a69be91dd108b4ca977bd3b7a86c9bab65b0156af8df4e26e36a48fc3abc9430e19f15872add8343be425a9c45b4bdc7b382ee468930d70c53e4de08859412f6c510fb3944a650ead2eaaffe83b818519ae267be22527b7ce6fff0066fad4d9c126fa94dcdeabd5e479e7532a2c7e9ebc373abc4e52f2be02df964de4fce8e1852ed0e3559f5802a6b56bdc45e7a9d36d291538ba08fc6f9bb983aec454ce864365fdc446b92702e3ff884c62ac360ae262a7e0b3409778f46c7ddb0c82dd704b2a8b3c563cccb02ad5dc6fbe491f1a0492167505fa4e0464a9b571b64143651891653cf4823d78f980b71102d117361441b5d52fc40f640616df856ee0a79a6f47de73cf64758941bc05df7eae8159ee7e23274e74ffb8ba85c2ed19197fe4a3786bcdcae19008b846fec530b59d917f0116853120322879eb079d9598b8f5dd040d16746636a7f3fcc5c79dcda6cdca7a40da86e90410a2655db2e93f040301e77b53e0fdf3495b21f0fdea6fb87d2ac67de5f57f0e7549483e06a2bd2c4a85bc027a5e96c6aaf79ddb1742bb108c9e1b84fd704dd120d856f3c6d2e3a3e3480e3ef907087adba23111d995276339610f59bd5bca7f8eebf4b80d54c8210d8efae60d72e7423c392d3dfc9f507c8969095317f7689e961abc9381ef4864897a685d7d7b638f33d19bd794add761b24015b50106835af75d83dd4943e7ba5f9208f2fecf69fea3c26cdd0a34d6ef554d066fbf862be7002794c85cb96a423884c84f01a54e3916934b5e77c2f0960513fb255d7b627169e1f5af0e540c64b1c9c19ecb02eb0da5805954c342fc73a71fb6984c12b60c410eb24af1ff71fa78d9cd025020781e41cc08dc8ed209de1d5ab6b3a30f0d20dae3f01899532d75e69cb33b74b24d9bb0753e60f9a46eef185c9dd843615a43727d8fea0fadbe13d5f05b70803816d9b792182d8a16ea19c3e2e044d3b78666969b1e3fa3beea73c775925233116ac94cecea0276fc21ae77a71a64aa28fda4f103b953814cc48942087e29525fa273d16b1e8da22a5c4ff5007bdd2f09c4f0de5231d5a8fdf016014b71ff490ce2a8fba03f013058a1f84e1f3b7b3cf545b4d65676d6c829dd0681189a5d6aa72cc79183abbae42084cf542976196b3f503fecbeb9ca8ac283ccd3b91f5e544cc5c83789f67ae68555cb88180e22a07506df35dec52bce66ecca43d8c97bd03a832273cf59f86b067db24171186e2acfffc5fba99a21f72428d2f152c4c40864d9cc1d20e00cf74356d6fb7e4c8978455d668af990249f0d7a73ad8d1bb1a85fb4164bd0f20fea96c26e85834ccdcae848a9a076693824db092f0b6594066591f5be83b9ffcb3c3a368142bdfe0f3977da38bf8622df7a215f00f72fbecc907d48f5f97f488e41bb8c73fbf7a08ff8a0d6c955d17562ce96257149426703e1127645a437cc50a60d1df49039d406ad7222833acd9b8fbecef3d5aa2ccce3935eb32c3d5a145a9c0f390a77f9c2d82e1dbdf8fad31409958e777478071f36a6726d0aff2b5e3c6f2d8e9e5bf7d52d37669d97ab379bf1a948227928a818182072290990e5e45ca03e5c385c7c14f65bf7ceb49ff3d6bc6d71b7b5e5201c7f1d2462aa2bd7211df916bae870178ab76f7e69619c7b5b5dbfd7580bb011c9d1735d018429f975c9107426f9c4e971e87816f25777a4cd8fab6fd6a6ba36ace022da508ab0e8d3384c14abeb3370bb72b5eb7c1edb3364e614ac4e93ea8a2bfa2499cb27dc157ece9397ef216aa271d071695a69e8eef3b944bfb41960a722fa9b962fb279030e8fdff28f44653cf3696e6b5920890c43974052abb1bf5aa03dbb5b63e8a6445517f9e03fa5514d322e674fb948653c29bd05f09c8c780f19eeafdba435a277950f4b34fda5fe85f0bee7e722d10faefac3faa737a4f1cd769835ee0065361f5d4608cbfe56d08a0c73f86e911b8ed2be921b3ccd4719008f832ea22d85c37614ef3ab7df306cfa780a83582be9f2df75c6c5d406b30e456fcd1786f89cbacc9bf6a149dc746e5d635e298e77007d681425600e8116bc237eb4375e0f1c810bac49bb2665b6d2b5a518a630f4a0626271cd32c6c15da360ac0f68dd94818be1af7769e7ef86d77b22e99ccadf7b327f2fe90650303949c5f279eccaf59bf49bd0293be6dc4b59b36b46a97c5104df2b636df18f0a8cc9fc701e2472590810535efed143974d48209a88d538a4176b69be547dd076baf749549e4d3580173286e04b3f76a69478fcfce9d1f8032e226c9bdae4f89907db320796ad7412f76273429abaf3060b75d6e5aa6397f0e4401c0c2753146190f75f7d28e9e7c4527ee9ce168ebfe490dbb663a75fd1672f173a11f7a80e9019c0f7bced4741fc3603cad4f3302f1a8f40e71d80b86aedca43bb8f33eb8d17d5a99543b0200e539d49485ddbce3542f083aba4877871ba6ac332979e455924bda7d05d4584fa4048ec45b3bf0443ac29fce4bac73bafd65a16d1fd786f25b9482c8456f275cf9052cd3cf44929b4a68e39c00b4919e76ce61174f200f1c4108b5b059864dfb4a93a69a37ab15e96156c47cf845f3740494cb90f3941173637f8772b2db9c7bfa6f7e16faff58dfae92305ccd0678e02de7de156700db76025248f212cd0c449b55d81732e3796d76ff036f5745ac0671e91f3a0f35ec7daf737214a7e4178a221f38af5d34fd67c311a588759ffdbefe8f2b43f49d75d160506a36e0eb9ffb9e9dca03753597869cdcbd7451bcab286aa92d2602a3347f986ef421d470908dbfadc32e65719540cbd3d301af00064b5cb76fd5204c6036a11efec48a6c4fd281d0a315f9182c16377f7c0c09a58c318ca4c4c99c8b9409670f7e48a40c2abf46f4e15017d134a7ef46b6b3919dbb0132b55274c94164efa312b7636a5bf0cf37f925c0388b2980b7d0d74938b4661fa43226cb97f769049ed7f321e4d64ffe1f3d0f94b71d74303c418c93af113f80e058854015e924b812c723cafdb6e3d87dad357b2d88f09e9fbc57392fd075b795a503493492276444f54b3e2915401bef6f0eab86c7d9a70a51315645ded0672f41321fec97a1b87ae8f801b6c8473f2e3d050cc95b51eb557521f85f3c683763837d656932f271ab8147b7218ce6c0f4d652fc2a29322e4c0706059d39a5daf76e0a311f4f71591d0d0b39d8e017c9c6f9a2705460d87252c7e438534491f7488317606915da3fc57d2a9d99e05a48ccdd17fb309350856a10babbe427cd49f675647bbf00b8133f57572cce0a9a4ee78bca7e19c26fc41306c2129f95a29e91089cab3fe00e9ce6ca75ddffb01ec749a6c9fc10bb952f87e9707940fd4267dab2be394e536a21aca9c1ba763c91b283fd99f71371d846a5cc7e115c2f17b3a797ec4a20448505a42ac0193f21d41e58b294a8924de804f17fd90d23daa741d64b9f79f3179baa6338a1206715eca1f0d1107b67fefd18dbfe3579b76603efd59434d08dcb8c64ebe803afec13d49a30e1cd6745cd6ebb604c00ab53201152bf8a0596ea269011cc027a8112a94cae15b35a7c6f65271a083e7a8c95447571ad6939708e0d354816909c849d3e83dbd129ff34a7e72963d440061cca2604c833970a3943d682091ff3836a8b57ea5bea2e074160704495581d6e2f0151c905fc848035dd4c972925e3fd945d1dbf401362bf37d467ac267ca97f05cc366893afbfd58a13f686b76880b0fbad7a57a3461b9142110c0b540f5fece08417dc301eef307bfe535219a86cb9948cb9a074e9717549a6dd17a106396f1dceb3fdd6373b10f86a3d39e44964d708a1d0de98d7ad6ae52ac4d49056a552475aeb1d4b375903d1d2868a2440df2cdc1769833ee75aefb5e41ae614aab3c6243734dbb0818650a7ec602d6daf7ac74630e013d27600b911ed838556b07cf59854c97ead72e010330630d59f2c01847f95e1cb3c5b8a6d330073beb1d82c0a9b69c3259af2ef299711ce8fd618c9f41e38f5a1c3a03111d1de3a73c3c252a42acc1c3a7d28233a32d397c05e5ed88a6c30f2d51e4ecf64a7c2fe10b87fd0ebe2f7a4f7ab821751b676752a1d0d424f08f25efca49af32ac4a247ec9551883761146f76656ecd47d37a16808bb33f1d54ab107982a8b905b6e8a7dbe713f8a21bd77110313611eaaf19af6715c4fc30c356c35069e2fc1e2c8304e098b2196e583b720ae7454cfd11598530f5b5cd59640b3cacbf1e2e796b3f5cbf3cda0bee0a18221c5d14468c7fac534a99354fcb5a1387ce05805dc7afe434a10a92a7d4d4e1d4770e5dde8c2ce330b04380b257721bc8ef168dd599a09fae9364b838afa837c0ec33b89940656d20e0a7f63f35ae7ec9cc778f7acc95f796d1f99ee1553fae0c9ca12d50bbd4996fbaf65df95cac356a1c7e919ada3f2ae413ed18916882378c6f6750c2956edef67895f62ff3e10c8c7a0d678a60edcb1bbcf1c6930420efffeee581893f98cebd7057509fa7a74cee2d3f9ad1e6fa50ed75ef512e87be83c4cd15a2670625daab7bc3f468dcd5784b8b686e0c444c99424ae49cbd031c1cd33bf7d278cd7d2cb60ca98cf4cc4d431d9784774147f063a015c372dbd0263edaa42187844398894da785abfda667059452205931542b5d968c3febb05056ec734d9ba4f2879bccd69245e8074c731800dcf2429f4f50728b5432e779b208e7182f7597274cafe94c2c6dca6a226dc8acca1d62c594e5eb0d56b344d78e9f9ac638f5ed8f322669450c65027c33d7ebd3ffd213f09fde5b41e252f126fe8c416e3807f392a41584715191f728377469ee5bc8549c7bb96455e2d74e8607ab7b35468ca04fe69905b0bc144a18927c7a5b2f1a6e64ff095f363ce400834f8b2e30efe9971649237a95645c2e9a9e77ffe779d9b7dcc418068562a92220d2efafbe1f37dfcaaad905d1b3e41341bdc0e17e1ce4f12221dd371e0a67b475d44373bc017f92101fbe17ca68864cfea3cf9244ff025ff80b1dd1b66245fd21f5657099a974da2631e46587bc264164637b86acf85b3833e338b5bafebe76205c10a1accf654f123e6b919f97568ff80f41715a504654d2f4163ab0ef81f6c1cb7f0991eb6dde13362f054f67a320049e610c06ab7b2225e3bb9aee81e83ee525cbd24e0d5ed055ada6630a62708387c4c5b0f4f59b085b9447903017049a1d9987b3f38d902a14783efc6beae9034bd6fe5e34578908fa13119ccb3472bfd7573907d4af0ee554a7d027d101e2f1d846869cc8a60a4bdd254ba611206ec1881c68ed9d698a9ef598effaf47bc78deae670200ab31d6fdd4a4b470312207b0a91830bcd73574ab98eb52c75d83092fedff1042413d0370324612570599f2c3aaae24173cd78cc3a6db9cbff23622f6ce7e250ae3f8ff898daa7f3f025bff7c369885480b78dc1e18bbf8447e25857602658676be0a0ddddaf9c9f1f3745eba69c481778900b6b1ca3b27dccc922e07887729c01a41c0a1116c9ee5163ea7b50a38c08f07cfd1a476238623891cd9f88824d18094640147065362e4547baac053083857dc53ce704e937d2962a364e6cdc91476f270761f872ad69302df2d55abd16870a528470aa57d46a6694d21d53bbfb624b79574b6e083d12e6c6c01117b60be13185a71eb2a297d6132c6a6d615d2283712641675ad04298113ebf25a632443c2db8007966ae4accba4d81331543970efac2fafe0d71498908e0dc21cdccda8e95fb1bfa2382fc79129f211c609f35b6430a69d400d88fae9ab976298f99c22b19d24a9543d1cfea5bb86101f011dcdb938025290eaa70bb8e4078503a1f63de48543bdff9cf192ec696a8fbfe4c64a6ffd1d0c667c0a67bd5ed5988972839702131269a89018e399384b4579a5381bc88e156e212e4f5b136f0062ae9c0ea2fcad1ec93f1383a9978abfccf55ea1b9d95ba1b2f74d6f399c006093485ae8592c34186c7bce93a6668c87119771b4ff638c395884448e9b3e4eeca686b4b8521a9a88fae2ab69db9f2c00d351c143d7e9e14aa3f235ff81f8d2b29e6956bcbb2ad7f707fe9558c52aeb4a59ba44c97e75fe667d0f8c7912c1788937ee0d5946fba34554cd9b7aa3912d23f55125db40356276045aae6e90d3444a1390a1c0ffe5bbff2f3e393acd51aebec0a9713166d91c78c3983a441af956ad4954f77f0500b9a89ab465b1ea5db4828703547329d8b7a2af2e06c8830481c0ef50144b720b3747eb06060a4b45cb434e56e0c27ef031fbf598b68aa127b667af9631cc0d69dc556c4ba8a5867694c1c47377c7fe41b96263d736002cb721006a2b473bb1e0e056d99e5ad20644dcce09a893db7ed486b8929b13bcb53571f6ec9597fcbf8d143e79b73cee32d383f69f23ca5f8dedb9a81b7f21118ca4e8a3baaf080cfeaa890ac93aac86d57e2ae8d71ddcaea3dddd3d729b6e609a91976356e44d43bcf555c28ede522505bc5307afea95a3306330934486868421948a57bb463dffaf5672b261a71ab757d2db58f09512be501df60c87e5453844e1456bfb67a2069316c56de1417b4994cee4c47ad0fd0250cc145772c017972bc1eb8d6bce88402a3782e09a907a5e72763eead036d9045fb49d8db19f8a7eee5648a5bc4fb252ff4400e41c6f5a08e7492c82e312f737d8cb06a8ab5e68cc8e4745b8a5fb7e30f13ec44d1b2fe5592ffe28bda3af733a37c0ed88d2d0a761cc8f84a28192f80796c1c1ed96647131322693250f723f16296e9718fedbb7edc1d3ab22df6e7c2f812a152c37906da919fd6499184eeaeef87743cf50db2408d6961cf45f7ad33f3a7f740acd47ef7cbef052f47b9c4e623caaed35b1d1a5c2639cb4f086e6b07b68e3ecfd1dcd8475d031c220e276ee8497377d6f812265adbef0eb3bc1e03064c312f2b155ea7f379c72d47cab11316b1c43e80c6e11f2bb6496239d67b08163a5af12edb9a6b1e5a5b998a109f61d89584857aa519392f1cb0c9a74872b30d117d77aefb27cf1b0400669f735eb6ad0e8a886feb2a71b50490fa10987056c3672b10ae27aee2455b31ff5984a8b9b15e6c9568c60397d9b8e57a53766dca3ad7e9a4ae80578357a26e2243b386d942a25e45aaab1d6fff5d8daaa80bfe32665c5d8da21b261d3eb9d3029c0d70dfc534c80ae1de5a7c74fa918682ade8410d86be1f98b24499d427286202e2e4c0b61fa2af4f44ad3e0bb2ba72e44570f969cdd72603545d21759280fadff327ce891259903ebee0dbf90414620e02bbbfeb530d3d452447926f74057207323ff4e89b9bf69b0cf9846ab83ce9adc0f10547aa58058705c8ebc5c8273746f68573fc0d90fb73710191ca6345bf899890e6ff20aa7684b0ae9dfd174ebbd742622017ebb06707a38f931a957af1ae49e1001397588a7dbcd670b30bc7474e8359b82b14d93ca72f0c55f005488168e7e08d88fbbd161cf6b9eb392bb50c1bba6ab16f16330ecd0b9796202b177ad93911f5fdfa58993641a91118e68f75df0b949c4fd48ec3967bafe38984ffd1e55dc4f8fbb1d2a3b0f56c8ee1794a46b7eb0a579f8e0cd7f18cb89aaf486bca5c5d868aa3d0a86c568d476a5c869defa53e26ea7752be42e6e42b0eb7fae32bbbd6ea1075fb529be730b24c60267c02f01dda158121a8f1602d71911198f8ed3736c0ff13a679021b32ccf4b076cd491afbf519e29def58c6e13f0f9ce55c5f148114458425107658b88fcb888d307b5ae7791a34c4b125c8e6c1971d59b8aa36ac2785ecb1f37b624546bad2e693e988dcf770d41a9002aedc414d8d774cff3821cc64f788a4e34e7fd31448a9d58e58db239a025f3e61d98b9e589f699c3acf390935625957a6b70c095506ba0826717601ab2cb6cb8265e1ce279192e9b4d123121ac19b3484983355f7d9fe3ec9eb3c26c2d1de19f6745e84b2bb6c4a3620c5b926fc849ed9210009076730f9cda6103ebfd0ae24bb73862997b9b37c69f7f1cd89569d6cb08debc075194dc849d19df0fda838198fc1d973b244eae9d60662f1b28a6821e0d12ba01b87cd6c12b9076c3bfe2958e3af43e3f1ca5592bc3bd68afc1629eb686c48ebdc04a5ba5ffa307a1f60d15c604b592bc0d707f0a74b37a59685275b560765225867c4350ff6e65b20729a119b0559aa0c6b278ae1270f46f37d422aa38ff7273d753039f646d81075c8c8141527bc52d48619b2c33de3721513af17b13e9b3d9927c215da8a8f55f0716cd4cbf94ace88f60645e41355c6c8c739cc4e5ca6e5f5e8b7ed96ee0c536f685e9e3c57865c205173b727668845e889bf0f1544df2332faca9537d231b28a1ecd03fd9aac436a73ebee79aa539a2d1e90d2de7330a63f80ad7d161cb6adaa6282507a8e0020a0fa0d53ca5b428c8b55239c4b29d68d87d28ab7f31bbf02e44d6f867b4daed474e6a19d5d45ae6d3af50996009841cc590aba3ce15d1a2ad69189420916d1c02e19bb2d0731fea478dc43d561c1e73b38eaea6c694fc062377a68bbdc165cf8c167cd905551878014fa964938d718dac74a17e375b6fe236bee83365c2e60fe837e2f775757617659d3fb5f213f42019bc3a85c8d2f6d08e6496399f6078f6cc19e7104d70fcae3b7eeef4f1e783cace7d3f2390fdc97afc2a4214941167f2e83ef29ce4751e3d349141405a22d8e9a625aa89a06a534d047341741abbeca6857299cdadd9fff1ec16654b7f132de72288fa250ccdb7906fc785988e12ab044d70e9a572d02472baf0b6ebafaa8c02476691faed57034f2ec83c5f208ba3c0e16ee7172f2d627e484b2d8dc18cc3b012768c5082a4a77b92fcf0d5f91869153b4bd04aeb4a08fc51e10cb3720b53ff1c28dc1a875c409e3eae13385efc3e8fe217312f2351077a4674a30f04955fba53cc736f72ac961ff95ec760903740e753b4803ba0bf89c760ff250764860d94f9cbb2f848f676fd00bc6449664ca7778e3c54f14a5563d7a5ad9a74c777527889ca4575653db8a82c73ad05219fceecc5cd27bf86568bccce7e2f8df7418a92d3a221b8c940544632a77e204750ddcfe943cf62761d7fe51fe9b5c5b5a5ce71ad733c45256d159b17a52d9a94e33348a412cbd069758a67278cf00eb9dac2e61539daf31a775d039633f12be5e4f228ba83ad641f6f5a8206a55e05f58c7833320a66f030c34e0fe14837a0fa6bf932927beebf5eee39252e979eba80919b7e9edfec33e78de84405c3f823fbe0759b8c985753d356c471e577eb95a47d9b4014aa080037de57b2e345bea00cea6a2dbc8cc974a832163012433fdf171c4bfa54478b8f7e33cc736796dc5b3f55cbd3b8f40f17b79ea2c7550877f307d4c86d54f9327ed3c1dd99a7ab082cc74ba19ba16d76367e88f0548bb9c31b7f947a885666bba2d0dc39bcef58ba0aeeb24bb85070a7777f00b6a35d631e5dc75c550709e54e343d69f227fc19474ce54370335f1a47ba425a04578d3e7a228206a0fff7b7799992c6476cc117d9bbc288664484c38a9352edf87f1df8307c662f28d8a43b7ec57e1e040e6f8d205f8dec6b1efcb7681c526fa97c27d25605a3c5bf926f8ee6b9e0cefad055e4443e9e77c87bfd98c4e0d2cc4fb3496f399f28dee08231b0cd84d608863b1fdb29892edcc439be227817f4878d7104895fb0c35904f9502e8dfaf14aac01765747e8be45d8e2c8045253a3f1d58bbf1002c4f5865cf950ec5cb74ad9b08c56030c32c58451bd14b167f4f169bdc98de888ca7737d10703e088c666d934f78404bcd4e988ea17f6d7776fc3ca6aa0ade82d8b77491b2becacd0ffb324d0e2adc195df9adba1412021e0177713be887ba09245b9f6e55bca70de6d992118636a9936f0a4ee42019f77469b799b8fc2c85d96158b0f52cb103888a6826171bef2e463924e249942bc97fa2a4366abd302dd41f6942060913325149785a0a143162ad77909745e0069e90a27cabb29cb6decb68771a1f767a9925e48be73d198d108185adb769152943c44ebcc7ca41cb7243e931955bb22e2a41dcd14f489da275db8fd82dfb86da828aab35c92f1f0415f004109a6b792701e7373d7d33f635572919a0926520cbaaf30924e2ed0e8f3df78a5bea3361e52d69616b8786e7cb1e850453b1d0e1270186dc5e697e09fd761c2c5636c4c24100fb9c51d567c498225f732584b11d56f306cd28fa4773bb64caa100516641a46f8092a24c8be1e566d097b01c121338503a40e07993d7411c5d4759d349be1f5ae2112c610df37e66456c752efc51108b6dfa9ccca8cfa1e7f050012a1ce9da02a8ceb8511cff4df09ab6d7caba86752bd020ecc4c5015d5dcd557484db2cea92843917feac6d5c2b1418fe4ae66ea217af45caf362d900f68ea1f274e655f800cedb505482d4dc25377b28be3c712f8d623f5ff8f56209d183b035990d7fe1d9a9583923515d7890284ea7f2261e5995661a734c3252daa0ccb48ae351882fdd04553772a43554f05eebcad0eacbd2b66ff145bfd73a8d14ca3e0f619ea6e4b8ab427bca2d444a7dfd9b936379de848de1c142245f04d45e922a9318ebdc5d63f102cc0bbca58d6b827610fe8078e305ca20766e7c3eae3b3a07fe8fde91888a665e3486bc4951c4289c23b4a3d95c23b27023a9c8a7cba061e22e3a3407352e63c9f9908030380dc5b646fa76dbe87ad61a88026af3a9874939e3b0c02a50d89660118140d26b441b58569aed0093e8a57ea08a708c7cd4507ae7889356e17ea8149aaa64206c8dd9e9b3e5a71df2d22465f14219d32682e92829eed5268f7f1ffc5958ffac8313259c1aea7a88f65fc8444c340ac15b7721cb6313c331a4ec017d6f8bac833187e729d93d7243d1c65f65908d9bd5998d4ec95fa06d9becb1ca820eb576ee32db92ddb3b8db24dccd76e6e86a04ada1522377c6a336d629dce397480eefb833bfed93ad47e4286f07726358ba12611e65d8b043c1b0f1c896ca6c0a290319891fd21517394c33d66ddcff108e4dd0973706bf04cb1990f77fc2f3e7adc80b7e71488992730e8997dd2bb490ec33739bc08ae3929a8c80d259016b6560989298970ac89b663a834921f8bd119f8ac989de0adda25dcb5581d7ed1a8b25ef97d7c3793a9eb8a293792bba2c5b021b92379487c09feb46adcd94ea9aa71d1423d9ac7f2ad2e7200a172d93182d935a741082c86cd6ff8473640039f8fa4ee71f08ddda330e8e5af749246fd0fcd06f60cf8dbdfcd40119f415c89cc594ed76f6dea99f2b74904517a8fb89be218f1bcc42c3cacee9e2e074a8258b61caf3131e9513ca97f3ce933b9693cfb6e106b130a8e38ab0d4fbf559bb0f7635aac41281bd32a49ef076abae259a1de83e853b076fd554b28abb8dc851c3994339378745b4e3276af12c92e73042a6494b5f1f1ee23bb835fb9f2a8c6017da2580f0e29c29b0f92fbcced23438b41312bc895f0ea5b9c10be0e05703ba367b67e8556728cd54fd951e9bdcca91637f51f43fc8f4ec26758549942586b1ebc376df29783dc9ffc4a2c2c2f371071ac8b54f1e0ad9774c4ad2a37dae806d7daac1b8571d1965241c3bdcf9f179866879725505885e37ca3097123f870fa48a29354998e94d9386f896a4b3c063255246e0d416064d27845c73efca981817237184334e99682f961762e510c2caf51f661b75bb8e9f795b640e38a6c14a3e703dba7b741813f7ea62acb41c2a72874a8c999156630130ce15e9aff3278fa1edcb72922e9938776bf2038e4b919dfe6c7ec827ebbbb73a371b7fde15d10e20806c1d1b916f99537d54a670b6f0e085323b0fa7ad1d588addf70d6c349efca6607deefe0962cc681b8a537c3d16c451af349be4dddf60f9f817ce538f091b01cee79b49fa615d308e0948ad9ceade72a6bf56b2db42d53eab0e7e250c3c48b6505c68ad536e173596a8dd47d5771dfc8076c29be5cf57d502d1cb14d6a4c576bcc8e5df0c9c49feb21524c5e4365c4e04c531d29b4b1f768154425679b18f0ebfe696c4a7f59dc11f4e79db6049f1713b8a7369e1a3cef2036e06a4c9e95ccb30324fabb63dee9270b70c6603fb6ce55b1822f6da710563958f43e8d676f9686f8e69bb50cf9e53fc902463ebb19ca67375f53369f5b08cf57276a0944ca33d29015d51eab8555b575caa5214efc12d49f0033ec447a26073f17598db92833167af85a551086d631f20186de67d029e2b61a4a6612c7e753856df62a7f18b374a56fb35ad0a73d1bc80c74a9491b045ce9703a6555ed5ed63d37846e0c71cbaa20b3e0fecd39e8a59119a16e9f024cc0ef04d1ab26207478d3adb6a71c87b34d274cdeeb3e50682b1e8385a3f3e5b2498ac2c598cc121aeac9a8de38c16769cebc0bd940c302b869305d8244ac068e9a323cd0b24eb933987ba40e010bd22b59d836d5757c1543b6d7f479351c3eb6a500d7d1c83e932d0883a773f5a8d8a99f07f18c14d0cadbaabfbf7c2becd05e8792a38f73aeb2e6b2598045f46a2513f8bb3c60d0a489ac9275c17e6ae4532cdf740ba84c7846fb676f62b63752bbc2f0fb06d645fdd0a294e500cef45b88fb71330cb19ccd87d604486fc3361490b33ccd0482011c117c89d0b136219d0efd55d362f4dc311b98f956bedac69a8972242795e0ef2ddb619e5c94d39abd6d0a7456028afcd43a03cacda0d1103d6d00c9f409b6b61a21cc463189106751e27ae265fc684b5236d9e17a9524cc90361d124238be4609bdf5530957ec09df2a543d5589d79ec9ee7bf36e3e96a1505122755673af4286c9edf83f3b6e8dccaefcf67e2bf017757f8bfee803626dfc4be937ab373974ad14e6e0092f09f0799667dc33f6465c2cfd54b1f6a36104a6b571460c0165896a2a3fd475c71647d7928aa7ae24359a2d266a60c0c0926b72973d98192200beb0d9b576e29cc1d9fbf59e458f4597ac6e4a81bbbb65b21dcc7a1f6d6acf74db6470aae01cdbe22502613dd26b2e53747fe9ae48716e9753a57a4731c03adad31b75ac900d629c6b68cd139e6945ef2301bb10ba854390a855b89d0f74112a6fa98d7d9b2227311f5b93db5d093cc2fc4bcbf75034c7c75008811e5ca4c93822ca1cb7a3f8ec5e19349a1073b6a1dacdcee4d4b573a13fd9420e062dbd45831bfb3a3d7fb571eb5f0582ca2225fa3260f7183ea784902e62775e1693304e6b6b4081cc8856023acb4e08edc890b8f118c012dd1a62f5582c7800f181a5220b12e33a281e7e4a9751517ff440646412613ed5aec3f13298e0da15dbda9c58775a4f39c0b00eea8d13396b4b700f1c442cf7ee0ee924cb7202c9024779010e6464b3144728b1d1194c6235eb9507fda72e152ff588df8567507d4737bf6086a0eb7c34de098a9a54da6cdaff987946e9a46675d4a7176b384f8a0bc52084e655237b7b10f5a528d6f21468d2e0e8b94bffc4a1cce3b6d00e99aeb2942095002a3186de1ad9349e2672da7a59fc362f7d8c7561ea89eb05c0266b17b25c58804a8889ea4fee6eaf9eb07712934f6a735a7337dbd0be14f07c2f47c2ae86ddd4c5bae0c52ed80fb0a112f43a705bd87f64087543d9e3a7cb5d6e368d0698d6b6d4e4b8074543ccac382e5797ef660f8cc3eb4d390a52a2a6438401f61784e0c1cfb238ad0c729d66a32ee8a89eaaec24ac4433db3cfe3c530ca004329c8b37686467fb42ff7f39cd4e3c84fea267f2594f7d6c1efbc89d8e7daa41636a59195a57f628cadce7102d1fa47d047129686ae5db5593eb3db9f03663168c6f492bb805870c47d6af9e1488e46a90c9682bdf03aa1b73a14f77df0ec6b7ed8805bd6c97b8050b81b822b33255802b0f2846f76afeecfb9f59d22184c39af3bddd8bc2d5a5feb3e4698b4a738be532c32e17a2e7fdd2e8dc8d367150c218486021defd7c390537f38db261e1e565ecfcbd98f7d0e303bdde38bbeb7ba4c1dfe10d4b8c793dc96f7909dd0feabaafbfbf35e7720d7b136f19a0acc09fcde82317d81606f5bc05b10c4af33b2b03cd5e1f9ad8e50f1a2003d82d558981e9fa58410a146635fe48b65c7165f5f335032c568a21a9e5b36b4d0c2e166cc6636d99938ce6662193b892f353ef2501319a1aca8ffc54bcc5f9e28ad481255461d5304120743f26a508c6301f246e978e942ee7b360b22432bee31f42e6fa84dabfea4d6d21d6d6c7578a58549a88ffb839c56ed75d295e0236c4a988d7ee863dca105f48c9c21842714bde06c8c5897fd4bb38c11240f80c05f10f571ecc39f015813d49b92075e7e9f501eb30445a16ae3db968a8d050f78e996ed50a29fb71d33491034b7f60ba7dd7d55ed8eda86e769317434bebd7c348d31e150b473817d5aa52d2ef0bf9025ebd73052defa839ecf2caa50be104c107d37801991ea3063b5a7b3fb9779d348f2174abbcc8393bbd26bf6b60cb14dfc81fadf363d0b3e052ab16686aeb679cd43bf2d72564a2e045063b879f868214c3c7dc40aced489244c60dc0ab59bc39772de52e82eb81ee9f7cb28985015d6ee7b424fd2ae31c419c74013faec9acce12ebe10b44ca223b2770e950bb6757727083dff359dedcb7d47af707612c6ceebd86018ab5d6c710456638cff395b565e93d34da09196ea4d1313b12aa77b7166df3d423e7db22e76cbfd5d147708be0d89ea5dabaea291c59928b7a0eb5d48c22a04056142a38afa169d2aff7ef38a28a4f32ed1e6498534bd1c8a10c4e8466e4fe71781ba15bcb7bf440073df410cc72022033f25677654b7b3a776edcb1b3c500245947a008071c24d74c6efbedca613039dcd86add6c1ec80b8c1d5d0d6f689c6135ae644ce84713354e9d6afcd73394d8403a82145f89b62574e383437335193ac35caa57d3a0f8bf11b6637ce5d442fa2ca86075b3f3c5fb109e9f7e82d5ebdf55884fea70622e1fe4c38b1843ba68864884be86cbc96acda02e3995edc605b9b74a42c5705a63bd34d6b154caa574adf8669924f207e980398b80c24063d52b4bebb3f412d0ea6c2cb2624cf847cfae63625b9f5bb3757ec69ad47ccd8bcce4cd797f26fee99df2f3642687c45a16e7d793541f171067d012cd5bdc90a5dea4fcac8dfcfcd26eff99efe6abb950ee24f80dd8dd2943b6f100829befeefd7335000f04a137a3b73f26570eabfad5b472d5a06c0c0efb556788ef797c22f4dfd6adc17eb3e28ea47c8f6e6445273c9a913584c2cf20fb71ca447e2fdb3601906f3ea5d84a1b923fda6bc25b755aa0b78121937adbb614db59c8734dc6375b51fbb4912eac8b4f71bd6d191d6bf9d6922f45825a168382c3ed867de1369dbc22a4947959ee4be30e94ef7415f1227f11956e3266a233773b1ab4d2e206e735b0ab0dd8bfe27c59df1b4689d22a813150a02850388fe8a84543e1b2c32a41d1bcbd699ad9cdce51b279e22e95ac652e53595f4aa8a4fbaa651e41effc5214e4e48589b1c198661e7c432e64cfcae84c78c97d434ebfe158889613559c40fec393e6aeddee6004fbe85663f37adafc45e42c0e5e8c044220d73fd2538854e0a5b4a1e568876b71b447b721a30ae7c52c32e6ab08dcf1f6b3993ad89d0a8191f7a63bee7c8fbd0ed437c7a60b54689626baefbd5b279f50c0daab8393dfa52440c46a506835f7a0ba27de0189a76b8229974c93bcb8e302f962e2e0ac6fa3bd7afa76dade0770b06085593d778233ea564d1da9466840b8aeb40fe4e2d9e3f61cef4ea69fc07837a2c0baf1953a29aff22b27d0b79dff0284383cb4013654166b98bf18f832b6eacb03b4c889c8ddea3891cbb5b2e05a1d8d50a093bfcea1802b42e1bacc4016e016b93c0ebbb29043fc3a189d76e28bc63a5359a370779fbd440293e953a6d393c4349afc5d91aa4d897cd580b36cc0287cf9fc523ee7813cb79a1efc3c5d4c541c0b8e09ed419ec024b4f06b1c5ea1c7f85340acc39d717b965d0490cee76bc3d7881d296f94941de3432eb0f62d9542d4f6f21a39fe290b4a9520ed02e59791d5b9375e7158ddfb13a05b2dfde9fc94a55be4151232fb142e013c1b4f34808e367fb711ae3a41f7e3effd3cf5bde67bcee0e3841a0e368687e6022ae8c64db4a65ff9355ffae7c51cbbdfe1cdf14292bf631ab737145dad3e0621690d73c6477f0821292569ce21aee5ec3307340b8890f7baae998ba3c9228430e391809de5702980db3fb88ebb9d84a5cdc5597e2817197a881daa710ec500ff03379a2aaa484ed70cf16f00f503d466a5a34d4b7d29b8c5e9534409ad0ec513edf885d8b980cc6175618a79df54d75ced3cc02db260b77833b4285dd0700190fe40ca7fbbe18c4668f79834475a1ff6af1f0a7a869d0335df39fe8aa35a154cb8f8ac060c9a1494255a756d8c3e5cc2561376eaa5053dde6c85d613b91fa15de9e62dcba3556e3bdcfcf3f15ca5617b902ae5c2115f385d8a24c10565c235e34dda8b15847241185007f09633f5fba66a54a8df4d82de5a4ea9ea9963334823d5f53a0d5037208f472ad8a193b9176149a5674d459a61c92a6c9456c1911504ecf3ad1c78d912cf4b5280126d9e328f4ff2963c55d234196a4f221eaf4471430d768d08fdc84ebd664e1d1b0984efd53e64e57fdf91a59245c7026d93b4ce36f07f3b55f558138e24e737ada493d3849200c4de9ae8f468e55dfe82d5acf65eba27aef2493bf9ab67ed9cc68607b6806268733d8070172255bb7b8f85e82a5c621f761d5e28396cd211e5b42ed857bf86a8e5c4097c321606a46d3f7ad62e02ff87bc1dd7c76875fa13dea56127e8c288bdcefc4dec3acec991660d3d5913d4f38a172de0810e7819a7049ce2eeaafd91cdcde8ccfb3e95d350849fa26d25bd07bc43f01abc865b5d99fc98514642013105ba76af6e6982e17a39a2618b5e6174129ecb1b0601484def46fa9162b6222bb5cb4f4f66607c98c36ce7c92bf00b5ff95eb3b3a94a401f0bb8d97438c420aa2ced44fe231b71f9e63454c761ae9747aa52f49e3d07f0577b30c0b32e5f311fdda63517bfdbd39fc011f792ee2587ad1703a9a2448ff6c1ef9c879fe207a1f273c88dbfe5c693748214cffeea3b93b35904e6bced9debd7678f898640b0fc69644abe6d7376485fc32791345c896a52798dc9560c29490b7054fbff2e883fed0b73c288fe2146e790c79632e5f0e5e8d0cd79b48e22f1b220fc6b6013d1226ca3037f01567173df14e70f8f0f38d0759627aad613ab0e250576ccbb89ea62a8a110315c509179f0cc22c48cfd46ab2eb208acdc67f6bf1c56792a2389d1d3db2b2780c081871baf3726f9289cb89dc49548d3780a7226381aeb5c536cbe34b81b22334027064c1582768981f0b6853b6e32901b31aa93912707e93c94fe2319f93e88de6825f66bf674f3fbea943e10c4c00fa27e18c692ba9a9fa283a927c8c7dbfba909cd04359e81b7578fe5c785d95d74f4bed28f01566aa4e23b032d51878dbec365087028a63b942ed510e501a76d3466aef7bd29969cff185d58e00e72165d5dc88d3e2189198f12880200fd346f2eaae7465bf960fbc829216c492bbb9d3211dccad13865a1e9b059769f04319bd87f88eca976109374cdac39f15b9be080c7eaf15591468170e4527344a3dc2030c39b9d10d55792b17b3fa97c387f74f75ba099ce2cef26e0d773216ba35dbbd70147086756f2293f0d4985bb2445b991b76e2634b2d4c01a33102f99252faba9ba45bc03b56ea2434b3b6db8109d99f6c558b019b713ca4bc01f491bf48693b93af234b007d87434bd842093f730e3ea70686747b4e945cfec175ec371045503efe1adea612d5bf85414da0f1d0f792d37d34ec9e3ae47f31a3f66a74ba7e7969d7cd867e6c9c30af2f6a1cb6cb1a1fdd028ef6d505fe33a15bd03d93974f7c5a0e6dc00765df3eac5409c6e109d70766a0ce239891759e7336448cd663426a1b4b98d7c71e5913e41b13b451b15caf10d9d73042220edf97a185d8918b288e150b1919381468b306d7bf857ef84b8ad8dbb6531b1ce26b43360b91ebd85b31c8d51b5b1ea49a2f73357d6f4a9c1c61472fecc5f0b1232213b144e8c810c73f90fb09be9a9043d11faf778dce716e0b28a8185bf0682bc79389fecf5f28e4f879449ba61fa668ba293fc50d5d630394ab83dd888985c72dca50bc665ba42f25dc79c39e112dc99949319917d06f8a621f5d7dec35d98a639ad6d1ed0538bca052c9bb882467ac5264b65c772a00a5d66b07151e584230282bce2fbd982de707c3f67aeca741030b4eb8221fec8d874794e72e976b7a240b78e66eee675a5f82d5b4363538383ac4c30bc99604a11726a69c34a0041da1b08343052db27db2ea7eb9ca80ea352eb5cc591a3e1548abc208bdbcab5037fac17bf6cb88b73f63dbbf9482229923d6764add2ceba127a195ce50cda5ae3e054de30dfb5244975d76314aa8baa658d20f2849574905e346a2ade59950c70a1f1aafeca9690e778ff1e477039792f1d80ab23bfc837d6f1a11ec4d9aa311170a66d6cc2833e4909654aa541688e81c185351b3c2b81bc595c7e5ac94eebe8557c8cea1f4fb332bd32a01c93eb601f83a40d6d1b771d5468ed13e07a5d989a1d9805ae8eee9ce18fdc11becb35a3cf1e2f3782d9dbc3a54878a534abbfb11144b618d369a20be804d25317ad8f9b3825247ed391ae8c6f270f37308eaaaf093b2831e4d30cd333d933969c7289e1d793582fd76861174ab272c8918f76f3befd223679b06b0ab400b02a21cd683ecfd4c4f6bd0aeaf10c15cffa4487712a1852b4dce9213b8fc11904b2543e253b4660d87bae5b1522cf240ba512bb43bc563654994c6e50cb5456519fb563474675e026f622c89338290ecbe909ce8b85e317acf90edb95eeb181f9864ed1768de36f685486fc93bcab15c33b7f33b0a29c942d34ebe73bab2d983df16851deb9c7f63d8d93c8422b5532404f78ea129cec79efd3d22af74bb69c95b5bcdcccb467b65888981758ac98b640d9756809c0b22972c909a04a93e60276b0d00c46fd1ffbdaeff3e5cb7d164b5cdd2460d06a3bc88b0fa6b3f6eb586efa36191ca87e2aa6b9155b71cb9b95309ecf7f6c04163123998f2d612a4a7fb3a4dc661d8a20b9287faf91f774ecf8ca23a6c6d6d1155a1957a628631ff9a95457fe65815bd349c8898954672a94173f04c31904f18b0720a69a5a55f4820b97e32f3c3e838fe02baeae5846bef7e8ad4de08964f0b9850ec63f13e17bb866d5fd555213cfa13be4cb54175479e127f5919247f3d200daa79be9311189bc22f6d0f11fabe4d987769425f264e6bbd77aaa9c7d9561f6a90a40c6a2279fe5dcde8985e6136f276b6da0686751b2213236796865a5548f27efade10e0e3542cf27e34399c0ba1c6d62b03fcb8527140ac08648185d1aa6d7a504eb8eb50e45216313203a3e35aebd43525dfded4932a023d4686fd8ba58a42d3a68ffea7ddb4bffb9e4342ef35e2491aad180ebde8fe80930702825ec9ba2ddb5379913fb832050dbbc70ac79bcb2f0e980c03933d6e7144ffe3773e719076f2579b8d0fd4b71a1a6b73b9dc69e493053887c290ee66e49c36d46254627c406f95e43c663c822c21549029c578b931ccd1460838451b96f145020531bd065bc35b293b204c7da1f8131baae538098dba2f8ffb2f05c0c1b029bcc44756aa6e0da476f44614c44c72c122176b01e2f57b887fdeef64e580608bab7da6ec5aedce9d37d90c378cfc5a8987e889d0fe6a18b20c64357d0f0c97127ad425b7456b6886178db3765e6ef791093f977498a737adb509d4eec570ff7041c1f9d29a52f78639ede6a2980fa0440d5a74c4a7f99554e7cb8b78e6e0f442fbec5ff21c696ad45c46d23fa5bc2d6508db822782423cef7c4784d289f98938fad82c876ebd0e7e8164370349f4cba5409e3aaaf9ab2d72cd864553e5642e0f718ac5a698342836ea8c493e90af6d5e412e158ee2a33ff174353080ed36dfd5ed442728ddbe01e417c291c7f5e3a043682fca3efd7e1931fefaf37580bb5a3abb46b243cf1ca3881fae6419c3aa44a1eea70525908060e2242b3e5ced890bfdca88351c4a14ad514beba1046d7ab48c473ec5a8f398b9ece09e0d10da9bc77641004995d30a8ce3bdb28000520da5a1f60255283745a2cdc67e97cb9daf7526bba107c37eae89dbb91133f6762b0f856c8748e093579ef6ea49928e8933b919bfbe284ce740462ef3eadd9a76742e38c0f1b24cfbfe56bfb0c46d7c01bc590678dd3ff66ac873d0573211e66df06d3e0a693d13a4275c033f2957aa6e9f707aeb29148505b032567b7d952f0ffe1f63f2b31e3541a2668c31e513d0cfd712eef3ca023f3f97b4d0edfff1a3e331fbb8393d38f08f4255bfbb958eea10f06dbb9a75b59d72d1e9d850299bea8cfcd06374ea9c8914e317f4fd005e467a9a341b25f88550cf48ea75bca3b71d9eb793512b46e7c98f483e29ac8fb36cfde97b435f3318106ff89d2374849e0b7c199eafaf8001d1ca785213d09ad08cfe77594212e840863ea5646835a34fa10b10d0cb349ee62a7ea27c8d91846800da393593be402e18678867c337e0fc8485bba9c922c728f865964c3816c99f30af6f2335dd03884e43e87ab12cf815e88ab27f20e8d69565eadf5e829d2828bac2012277ac2a26f71d1baa0cf2320f11689f738a8c835f621622a18e64eb8cef94d28ea9e9a2bba41d8403ee5205c02b606215ff0345476bac07abe3d1de33de21fb7db249c0a9b8294ce8f40c15f0aa29691021ce39a4174069e04aecb83a2437b23c6424437d7db40ff7654820762757ce7ca4ad024bb35eff7c606f5a73536175419f191fd6923d7c063eceeab1d7ac4a5c0eeebc2e471722379008754538b782adc1320e91245de1e588d69a0e685dc9e290fb08840217f0bf34621fcc7d4b2a6aeb81ba85233086de3b0c73bbea99672ea4e3f6dafd8439f81baf13b3bee4cb110b2ac1036e8aa6634e647e96f4a6b3618dcfe235f6a68f59d0fbb592b371c3886009ab8752ea955b4d6226822d2f797d9bfa284fb33acf1d98787115d0b0fb62f197acaa8b213881b327c795434a31e66b2be4ba2331f9e70d03750f8ca5d97b0f11532919a6fadf438f3abd0cfe7e16cc4fd4643191cf143e54659e063f16cf2d93a4ec0bbc74b194ad3ae04f9fa76bcf4b7bf721e25d96cb9117457d22ade241f7e65a603dd81f45e16b2c73f62003b1db034658e68812fe76491003aaa3501b6dc6ce5725daeb58946e1669afbcd232bb9b05d01655b907239727dc1f2700005d57d1137dba527c88bada31d8981e9ff0044571e651277095e72563e5343618febc693185ea722113cd8ed7ac1dd97e301721aa31eb1ae22907b09dba573bb512f7c091f8e36c3b82ea4cce3c6935b1a978c89a166092bdab7055ff4c90b98d529ac910965710273b9cd97d541b7add65dafd71ff74d639597a2fdaf3138a12aa6cce329179bc04e7e2652d546d988a8583ca62964b6b3556ce4e4c6742606c11d1124b533b8f8d274c0dcfe21a1c858965be79ccc37c9ecec7b317db35a8d32a49268da67022f24625101fc1c3274af85d2415958d92f95fdd0434f8b6e18b0499a4224a6822392114b935f961a84b0174b9c6e6e166d83f607ad964523e783a37eb944a7d652462ba2dee8393b5a6b309d19e1492ff090a822ff8ec6fadaf4e5c46f398a064af0d9f0a3fc0595d438382c52136d1969012219eb4cd6b1d795fc9792bcd7a6ee186b22649a874f1c055e62806d4df5daaae68b04190edf09dbcfc7c909079499196043eed6183eb218df7b7b05bbd248b3c1ebcebd04df80400d2af523f1e7728b80ddcc6031d594b6e68837b6e389ee9d26859aae201191a367168b5a856da57af9835a0997572d52053437583ab65e29fb5e86847aa91e34601258e6cceda2e4e31157b09bc94d2866cea5170288d4ba734a8abd8127f4b497fa6172e93e6d7d14468f43f464ecdc0f575fc6ad1fabb002ef8f41c49461ff6bdcaa97d99991008eab91049455ba99900dee6124275217571712b2ee26d443e15c0cb67ee75938324c565cb9b287c0119068650bb4bee180af7627573933ed4b171f98adb93344590224d6b7f8d2a8505e61142fd24b90713caddd01f67091ae0883a7a08c5f380a2c0e71578fb9bc34a463e3e36fed7b073ed446c43c134792dfb09595e2d29608ed33d27c70ff93d3aab2669ded894b8791fb267bf476be449b31a2669503ca3cd0704d4b684fc0e01b2d555313468e3183cfebd3a1bfa5c443834daa7a2fa27640d5b65b95c843434cb020564aead543f3c9c1a364178ee017b3790d157e80823751c46e6360cb6cdf442e701abe2d6666c5d0ab1089f839cd8a28ff13385ff828d3c8ae785e1678a2d65900e4c41070b49da4056bf86808d337d2ff522fd17c517f91cf71da4fa376dfa26f8f852386f3470810bb2d48e9cdbe65a321e4440ef2b25db2e03061e9c302904fbe73de6358c0d64ae9b435e87ef8be997725bb1ac34ee4e9a50915e9af092337c96b29d941ed24c3af34f9b6e8dc4aea23e21f3e82d916b3f64cea0ffd3b783451a4a102cee066750f8c121fa897f71ce0f725cc6c4edbc850e076bdf731ce93fda759e0255b7877e977bd16971a327d62b6d239fe981598da739b5b41c2b9a5f23d1e74f2e5b6699a0909202af0c0b07ec43c12d66c7516d4fa7ba4145e70632eb1957e02da579cc3c30cc89ed8a3beb1a8106ea6ffa5d38795f8558d37fa7e6ba8c47564934618c937f93ecebf762f6fb382f75c3cc8420705b8ea4b63ab06162bf9055073448f90ccc813d20fc62b8c98a346c4c3b60f5a92b38b0d5c0720061273386d38687bd3d94396d83d4fccceb47a81604673300de24a206f87b397498bde677a0022d1953400e69457de083b4fdc5432b665ac3ae078b888ce06052343d2ebe172d4dd236ccfebd3e3b035257fc1662fb1fbfc56c24331db6d547ddb48494fe2da80e02d102ec09e39d4bba01e8e8e73700b06a5c9a6a4976b2ca0f64dab2d06a0ad5877d985819fa2d66d59f061bdc6cf2f62f3d253c998584a87cd94eaefe79a349587a7666ddb4b4baca1b4a86bf48892c42505fd125bfa081e67125ab4a4dd31242d4227246029ba656fee01eed348e0b8d23cbcc5bc50cbe97bb02d6fb816ef1e53bee13e45d2c4eda3f36032208e6e11beb9de49f67d58975df5453f79d04a9712022b576548e84ad3302f3b4f9a62cf22f4ad2ff5dfe2f376157625cd2d0f789e6b6e8d5191cb876a28dbfa75f104bff54cedaa37d2d4424347d0cc43803e7a739061338f131daadeb1909100384a137eddb27015f2f84c79035086ead7eaf5aebc8b12e766e64f1efdf8941e04e7eabe962d6583bc3472df793c446754607bca5f629138468df60ce4a01171de5ad5354750aaeab4f99b7439b3027e379dc17d8733868d0b75cb3d22068db612d60a0afb9fd0c1b77f31f9cde737a087309d818b6386202dd503510c1ad6af5dac2d63f1eb152f690f71d5bb44df566b4f93cdec36e6f29c5ede617985d9f72e10db04851819b58afa3e8355ee5327bb9ea4d2ef6a6cad33054df762b615504ca9056d7c72d6a514439f531cfc8e8881702e677efec996a922f22be4907a882c674f138ee837411190afbfc81e72b8658d8185dea64a05cbb5e7f8664450969af5880a7c58aee15195e552a57453b4f73a60f5fc0e44a174c7b74d951d1a9e597ea3dffac3c188d3f50fdbfd2b8ea040b98c8e5f69ca45b897a295ef6d2ffeef82284935811f3b0bd9990eaba0e6ed4a2dc9dcd67f05fcd2160374cb24bca4561dbb94f0019cfe1522eb442612a6e9b1151f7bc5ddd6b8368d3fe3ae39370046eb1b9b8c9e03b68dba32aa4082af0b06a666b573821b59673e1c71140c6fac1eca5c0ba209c2636692cbdbaf7b3da0b6bd6574b92b22d41b15d4558c63eae7e48f41ac9bcda0bb5b4ba3d13a2ed179596dd423dc48e080a17361484cedcf9481991b0c92acaadc0173dd1d0e5e0686c0c19def381b4b0a2ff812e63fee0f34bbfd59ff9ddf9c7a9078ef3ae0f8fb437e807a30603ac8fe5da37d14c603cf4e30abae321d59b7e09a133e5c845caab5be60337d2bfe549c89d91fa38d22f598fad2ddabcf1f7133dd4f3be63a27d05155d21fb59f6e18d8a621577f41ac274209cf29e29ddbbaaddd21cb76af16edacf8bdb41f2a789f16eea6b287a9df2576fd9d7306398dd0e7c31aec8b2f2e1bf712f39225c1422b110516692c08b2fb1d8decbbe4f7ee7dc503b9c093caf24af1a1253bd60bdac777dcb262cd1d60bf0df866d6f47ebc75c2719ece1684d8839fc49a380d1899c1d423c682afde84717e87654f498d4a1eb2fc8810cbff8f57ff65b8b9aad3beb6dbfb386d1801d3d24e094620302e748e2a904ad74c3ca3ccb7deb85e0546f1e6b8292b42eb52405b33fd1c6f9d5f11bd9761b5e047a1179c2501def4eedbe152c0d81c05ab48ff75dea20886272ae5555dab8af3acdff1742104519323b13a7fef4a7e7ed29a398db6c1f27c7bfc6e1e64b43bb15422c84e5646bfc5d67e82c044fd9627e532c56666f9d567a1e468876526f8febd901235bbc8c37d89b841e44c3fd18b7f73625fcc3853a3a9bed851603d6c7861c2301965e22761a4eb5fdb266bdb0a59f502544b67690d82f60543a32da8ca29eaef82f376af8cc99f84837140b549915f3927f407b05c8cfa08d680e106a66f50b009f7138bbe770d156ce968558b41d41b3c4ed9caee3e8890ad6e597f507838144830f049342a01bf844bfaff34d80fecffbf8059cba6d7864fb5e614dd75bdadb1db1c7be3a45bae260ca5345ad57061370cd7b4aac370785bec633bb5c44de44b55453c89c26cb9fb3c9c1f33cc78726804f7d7f7ac49f4a139166399651c47a028199314a4e63810d3ab91b0108bdc8b9cc8e71508e3617e0e4dc8c32d3998864e59f32bdef900fb2190ad850e90095f02a316bb171693031e1f1b800134b86d525eaa6f80d16735cfb654bc8fb029430506a43c0837491ed692977bb05f5822b3c9860ad7efa18f14c78a7242e65828605fe0cf3c64f3d925bb4fa4124771a62bd8916f5daef43d99e52ae700b0444382cdcd0844b249e7d82f106119e7e46656cc6ac6c8d177eb14b2453d8459f51c8c0b5ab6469d69dea612b49c6dbfe434b762c7aa86d4df18a9c6d4457c70f36ecb8b2ac96a0dda7cd1272ec54a8fd2d34073e5c0b3e9795e15be89f86c10e585fb72c516ff8f975ea2780e5b5d71b53e4f51f7c97649c436d77cd45b386c9cb9c4c1099314dc7cdfcf16877a8ddd4eb3e81cab2291d821bc4bf8ec96384425460d3d1a128ad5ea143bb6426b1b0d512aace4e4856467f94d7138cea62891ca8dc2e08386fb3aa33fee4c8d2e8d5f59110a69f2a1df47bb3a6d128d2628dd20d9938282378787203d40e84951a32bb928e7eb9e3155d28de4653655e60b7810f7b54e449a23275e52e7c1f99a0724b7c00edd5dc628a00d904650dc0fe84a3299a22a2add0d54991429098f623a38a116edb0d52251b605264ce45a0aeb5a98aee0403e811331cbedc8a526497667396909e3d5cf9823f4303d6ca7542980b2dbd33a3f786413d12562228a4bb2b7fb484b9e8811e8fd8f15596ef108f4b92d1a600c691185e064e581d365b27ffdb00e82c226bbaa64ae3ac02974a6391ca7b5a1e2b44943c2b70a412647f622e0dd8c95f142228fa5ecfe13de15154fe24433891098a7ebd42fe38b34b8e6d350c3c591774a4c31b674f493c5b89e391fc6dfc7886e4a813d50131db0b1275ab9df83a68f03498597d9dace37a180105fe4973ae7412b9d7003f8a762dd932159c8bc9303d931cf91915ab52ffe988c46cb58b6d5eca25949991b4d458e95f0bea9a78a0655ae9e78a120269cd5c0d1815a4d3932446f8b5c017c39d5cd8eaee30f02589f4e9d82e4e1577fd3781d4e07dac6b2c21a61a6fa1d4ed8397230ca4a0cc8f8b37a35f6567ebd57f1e1b0a7758201ba5c34bf330299627bf20944f9dd9f55fe19ab458aac394cac90189cddb5c13c344fb6a0dbf0f6a0e5ef6f5bbca477a76a4d21057432852526ac890cd7387e15a88302bf24bdc08848550a792c64a0d1fcda1c5516ef4828a0f225daad6500af08b74f5fb32a17d51ab31947fb81c8c62847358abc5592ab47d9e4756bce8f2c2f0b8e58de235b2fe9fda91529dd66b084aeabe6c52fcbd2df1532380bae99352cce1f4e943f27c6e2d202673a4c668b625f6962793539cec18cb258ac260b5292c4970d05b90f4c218c6e94e9b5caee84dd6a4b6e7dc531fd89cf783ff15448e8d5c661eed2eacaf0510fa6f61e33c58616353cb36b2a393958bdaf4548d966673af2fb731a363e5286e036287c85859023784e35bd7605b31667742e60ab5a6dfa1f4be75a6902009a121cce40aa306f224374d253f14140fcc2e17c278ec219845c9e1e034e2475aa7f80a6cdb39bf136879b0bc26a624edeec96e053fbcda129ac010bddb5c51c5065fda1be1c1d44329b3cb04532c0ee3691663a431518ab85e1e18e461295d9dd564532fe83f26e68d859224152ba3a1281e1a83f8c8d488f07e3948e5ef7bee632c1c4d358397d1125b2349997c8fec1f1d1acc5010a694f445e5356210f143c538a392c423c1b65b286e24f7f7d6eadd91cb1ef9284858194ada580eb03f3e633b33fc970e39de1fe70bfea52face766e02557b7ef29268f6615fd494f234bf282772128306512b3387f77de033b1e69c8c8ac7ecfd93a3265c11ee7af207cd3dac47cd2b9327116af8d26a095619dc4a4d0ca5b7aa3f5a189147d9730232117c7e9dc44b4b1002cf7eff5912984a4cb84768c2524f22963301ff99ca6f800a9595cd1cc8847b530dbb99340be9875977fb327562906ac591f3fc16a86db5b0139c66f6cb4a7886003dce68b7e7f8f681b95e70b75809e5041904a32857cc9af2010808ade2548a1bc7dab0eb19842b128ca204413d21ed8c38264f0da7b0f3dcf61533a9f434ba61a5a8e39a84eca1ee2ea8025889bb8d3330ec7a7696aeac970a2d1d0abcd0284c208456d0faaf570bd71888e1f8cad457ba68a9d16d7cb78dd3c709494621644e75a2864b9feb21b70cfa58271082a7c7ddd60bff6eef22c6265f823740d0341bd9c0e5c5d58efb776158061a17bded37a478c892a2a116eea31a909db83203d971a7a1a605f46b448bd8da75668df5b7df9ec8c1709299940b06dc883202bfc997432395223827285c5fe99ce43021e0241e29b1832cfbb80aa5d6e02e5a2aaa152f8c3ad528435608e219dcc2222e115570c321e4b7386cb83418d36da58d2fb0f95b4b3a52651dd4a1689e1c805546f246154041f4cf93a1730d6359a9b1eb3c35046c215021e7003dfefa71481b9175124fc3d37d2db1b0e7365b47baa88941e54d06326f6f6490253fe37263730bac65668e63ba513a1f6726d93e728422e28034794685476b608a8e9d91daefdc83c8184340ec96bc7b51410297526dd3ca4e22d5e4ee5ab6d50e2bbdd2a2533dd414f20af03ee1655ca00f8cbe4c8ad16b1be55863b3ff66914efb5fd361a4a956cb8c9136b7a7e593904ef9105c2acf4ab15fbaa1ef3578f5b9ce2d02e1fad4c9d8acbf24fcd0de64a606e49fc6087f978585a3f74afdec533b749617afe68737d147e0b945efa833fadfc27bc2d864bb28ff0a070c72fcb90b2176a59574f3f150532e36ec8c3b5fe116212321f984e3a914d98784eeb145d1830adc3338f125dd435a770cbb11bbd710b6cdb6e0a9d41a44d8f16d375778a891d349501d335275d14f4dbeb974b56f9aa1ad06099c2d2e8166c0759f47cd08ba932032134d21b6e3fa87066cfeef473113cb68196bb03dc236d5370ae43650068bf90d03c1059c7817e6252b152fe9d793ab558eee572994b846b010ce2554f110d49433df5f3e5b0b02b88412d023d029ec8864766d9d4cb244cc3c612356d4d859e24f355ef3555a2a9d5b0bd485d35d7637927d2c4978a80b7c0673ef3e1bb84edc8645100a6ffaa4be1ab1e3d276c927efb8b086526fb6bf858956336ab373b94290b5dd87ad5204c0021978fc797cc3dfedf7a598c5bef05c4cbf1fa1300a3c0fb287f0493a7c1bd3f327c3781b971897a778d88f025effcd1d1bf423df9f83b49175d8a65c8ff9f45b2c3a9cc238342ce9e8a90fcfdd0a05a33936d1865e525464c8f4e371480bda245f0249a818c2c32942e84b5547cb8616c3051e5b94e812396793d662da970d2a279fbc7fa492dfcc7fc339f92e80a0e6cd44956369a1c92a04cdb961db4743ecbee47750d88f922498c74a9e47c55e4e55414854307c5cbeb62c558299f2101a787021883f66203703706103cf142e3fb64e4cf8e4c96235af239835c57476fa7d7ba0ccd000a35c720d2a8d1cebaec0d96137624eb7fe66b4d8c2cef05969d7da6f83931e3eb8be089b57a0f1a7c7ebc10121f90469c28ae2a790be700aa474b9643069e18260e13090502571300b541a8d6af816c81ca357c10db6fa665222e1ba1bed072af3ac78a35dae2bfe583b70f469e58ea063ac03138c4f64c2c1d673735ea022ad6e5ff1953513e35a83bcd4b18a69bd9e3403be209446f267b18a21ce0f2b1f76a13283b4d595b0bd7c0875de5dda292c62149025ae47132289764068e2e5ed7550a741f493a954fafe3d02a022a8c6926e309872e12a5c28fe94d917f6195665b449d3a75e2a4ae75c82f76622ebfcc39fab76f1a3197ed335b35243f07f7cfaacdf57448340b356788392fd8a5b41ed41af30096334fabf947efee22ce44b8bb16c9e9794cd1c6cad409e2c5d7680ee3643868f00f79f99e89cf5759f82a94706aecb2993db830348d99c765dce7f0de22a6b9167395236d8482b36bf3ba6c1d8fdc5f4b0302de6e9ab291d2e9d3ff600bd5d632e57563bf9fdaed3f45f30e5795cdd5e023fc44c821d7af6cca809e3a466cc7d3e2ecc0cee98a64f78d4b241819e9d9bb22e54209e45662e489d972decbbb9393e7d772a97a5c333f488965fb74e97dcc978440e86518eb091fea70ea3cd13420532f5ad77e987a679c67997f049fd2efa3cef738a9fde193395422174a3185f33b00d3e9fc81f6feb4223537edf9942e66c11ed6a92dcf0db35b26f99ba6d263dc5e131f5ddbc5d88081aec99349f894ecfbb99c8d1f850a80e61c69bae1d17e7c61f0ef501e911d59974ebd0c10889f8e8d7fca1c552428d83daa40e5ca68ed0326f65ebfc905e56f502b111533a2001eab2093191013e93e4f6c684f5923500df7a96ffc38406c6847364ad5653c823c81ab80e10d6e476d701615007544a10c801952b51d8ab543924d9d1ad698bf95e87ed24447bbfb952eb8a5995d0337e5a6cac56a567a1f656e704f0a25dfeb71057014357e4ba0cd1105232414ed58f66ffbd7e56deaa295c5d5a2a78d515442116d24b9cfe8ed423453b0b10fb9a16c52c5463b01a8ab96534632044c321639f55a4851ae5f4367c6f75d920d8bd6ca11d7e7b31bc3ba81b7fb7d159279fae0afdf6971cfdd0baab0feab80e2948868bb71b63cc584b0c93db88862f385ec73f1d91c2bb38a42a2fdeb3aa8f510c2353db047f5cc33fce6a56b2c7804b5655acc0bd53b8e54dcc3e97c6078779e3936177bc3acbf8c6723abf0fe35222a581fe29427cfadc7362c03d54f5b494f8946c338a4f8f2976771cc48a4d10a87e548b0bddc44f2f8092a8fe5d31982903b67dd476ee9267e976daf51213dc155773c01b5218a0fc1755875f27ba7d94c479bd731ac49439589bfc40a29cd45b05ab6ac238f892ce39a415dbc37f525d5f78171d9e1f3dcfa1b3bbfe52d4ada4ee5d9127c956347a3463d64fc04f73496b2a573ad34b43bcc44d4af12c68ed441e8363e549ae0b4413218758e4b694dc934c42ac89371ffc05e7ef925b5fba6ec814c02cf7076d1d1ab0edc0a8acd3b5174fb195f72b9fcafd0fbeaa282c107793383b282ebf26bbeb367f67a0710e80c5a40fdfafaa174294486f48dbb42968b4cbe74a9896a15988655956d5041d5e4689798fe3525ebcd87e56aff3050c24590c51d57f16827bf8dbc639bf5cd95b3f93e77fab5bf0db5adb00f1b3c39450702d2f3492e572b4aedfc33c28710fedb31e634175a1f5416954bbaef225d09d5ed644792dca1ceaf1a53706bee1fec575fada6ee4907a4423c0b4114570ea6a28784b101a3e7247c5d4724d2edd2ae14549697cb0c47e8c6a55a3bfad925ee531f82e0dac3ec6b02485659dee6439ae9354c37b762b4836f6c724e691d7a5390a44de088ef6f39327e5c50b00efc4dbf588e5cf7686c2814e9b55906a8a7fc42eca36d252e4754feff2035b7b96a398ae0907c3f17825647746cc64e77bf13fdb85263f0df2d8f2eaec0b63dd85928811a84235a28936cc2e8f8eca9a23cb2cc27bc32a59a3d1e7ef9e8cb2705bfc686d69ecdd0293e181ecc0215734cf72e4823286773af869e6228c57a2ae41fba3a317bce1af18c98a78e94389c5863bbf3d3230cde2571ba46f7046d36188a014bc5de87df2b16ed3504a851a95042aa9465adc0b8e963fa2f23c4f9e7b25157f5afea655f6dba8ae7273d0948bda2b479b4bffd3c17e2539dbc8bebf2af24be5f40bf896839f9962f53655dc7a36f2af4c2448323c4d82f264d493fd5a2d6213197a348cbfdf7659f1daf3fed46b3b210a296df773bdaf16276930839eb577196f9a6cae8846eae9ecaba10a571512ebfe66b8f06121f912cec40cad192acd84c26f92d3bbcd27983633cf7a07162ae0791a1835c168711bc10fa33402f5183c88bcf8315045b52b8ef177f2d611cb0e174d6e1976192f656944227aa69255311d58c57168a7355654b42fc29f1103a02c220792a994362f80f667623bc866bd64778520a7b03f9c30274313c8170697b196b874db51dbc08ef589b6e3663b96cfde5e14d8a5c674e8af259cd2a1ef6799b7bbd5384d16dcb23e688ab7f57fe42615538e516db7e7e636886dce06bf6d8af865b1ef8fa862fe57335e22c58d72e52425867075f1d6949e439ef386c003f5f90a8279c1acab403a88a374992ee4a3eed8e6f044007c515e376fe5940193be4cc0c6e8f034cbf3969a88769bba122536991087b2b25de874d50c790a30a622f2666a9bebf5126741165c85bbb4fad9ac2f800f4aff080eb53a911d6bda6ea1d8beba2beb2909ab727dc572be17e40d3a0850c65bf0f3be07a472414b3cf8b047c0082a89119ae146d37442ab40515ac1f38202008fe40973e24be17c52a41f3b7f8b0c69e9a5d6b87237c1f44b98875ba54415d5ffa4b8386faa6c20710ed723afc338d2397560cabb79ff271e7b022b610dc4fce8aba43172e0c6ce69531b12acace1d7df97c2654e7f8a069e0abe64237fa23dfc91eadd74e38d7f75fd6447775b0ce867c450f6772ddb6ba578d3277b844fc5b08c7b143765f94e1059887aefe6a47abab098211a92cb32528d2f1e23ce97fd4da47eef68ea1d0466648c536f4efb475db0e28e8ee863ebe532240c5a2269d0548711562da0c568f80774ce49fb0b19af9d6c2708089828cea5d460bd638612fd8007f3a3dad8621166fda4546bcb4506f172930242f6a513b81f0ae82c1118e675ab631bf13215c39c38f0c0d4da0990b62fc5030385ddcebb885bcd80571be506de75ac60a1499db22987e66e5e0c7ac5c5dcae1ede25adc22809ffc35a1962e4a07410f6b5c72d8e09f13acddd519a7e9c5841d1678e7785eb2384b3b82070b79cebcc2034ed42dc5d7783d4892bf2c9ce47a97f1ad5c36fe281dbb7716b1a1de0fc42f0139310ae9093406eda35a041339007d0eb1c7921fe0f1d5c23426e88cf777bce9c090dd36cbad6057bc7e89a856701b0157058784fae64c9963fa22f2bee889288424ab1c5684949448a414fd5997e15652bf651828453668446d9879848fd3529e2386baeeca784936e20946bb1f1e4ef7e5c18533464f6a437097628402b714ab7aeccad700fce70b19a83c7198759eff9ab03e0abe7aaf3475877e068887526ca2252d34283d23b32ecb9c665bba0a3c33b3b8f567651b921dfcb2471f57186481e08783d2c982757e4003ef92aa64a167df1691627f988c5263e6f22125ac62f198b2c68b9b84931f9a1e3dda73aaf288eb4a8dd01536a6d0f8c56d7ed588dcc72c5c58c7b542c568bcddf4f23abd72ce45f848e8f0601f17b8aeef2e741e5179118263fe2164a5053ace334d12cd1b3992c4072fa8c0fd87222ff59ead630a00fbc260ec342125d6870692aace1616a4a702f8dc57c64a4af77ef16777298e0829b60e7aa8a7c7c63374f31eaa5ef21752176a85e750d9aa5eaf9e9e58c4a787b4540c85742ce011f8e20e7687c3b4a756d4a120fb42bdc25bfb0c64a5714141713be876105b97a6826b03393b747e73460ec95a76c18e51adbc579347d24ed7b84d3113c57900bf544a22d277dff7c0aade9a7268d8ccc56bf34251f9044fd440df33abd682ca172fe7a3ee6b8f1a49c3e5d2cf960bba297b089c9ec49da02ea729bc4a7947dfa3c3cb9c01bdff184ff8f0564c35370b0ececdb035451d15bad0550c7bd4428c09575605c80fdbe5a87c6d6403a19596909ef69b01f874003750f8636ba9c9b8575d707304f969839cf35df5718a943378b03a32eb113da2288031fe44bc9e7d01c791e7b8b48b85d6765c78a9abed99960fc90a3df200745ecfc2f5a9ef86254027d5bde02ad1e56cbd65ecaa80705c2e2e42f5803eb960cb56c688f05a3017d58df8c0b350ae3abb6c22a0ac4624e01b6afb24d63e2e9963c39a84b7057b9024cc2ba49bb9bc96347b1750158614c3e97131b8f14f645e4253632e5c1111c384878d7e3a1da7c1c8b08f035144a5cfa7e83f1b6a95c6e04d00c4073dc45b1470943802db8f0e0eefa7c0c29ff96e89f8dd7c57f9fa457a8d71eda8a8b838f5e9a5b05bbe14d63977b7b84cff88f515ffcf62081250744da8f94951b2adb2b9a962cabd3015dc0f4d3f4d92633a1eb14e8564631c5cd848fd1d6dc6a553b68c4ad5a66f12cc522444b25aaeae625a0f0f8951d30e271365b5c2ab5e4ac80f2e9564a04b014fcf094a053c0414820d89aba4a22f0101a9353edce685a4b595a4379aaf8652361c9ddbc7c326390f12f9d8a5f5de2add5701a0468566eabb1dc9fe0b670abb02de29473b927b85f6451c844186010e269204cab3029710dae2d764c0b3a5ab0c314a156402125538e567e1a8155d33b22cbed36583545936ff8864bf1dd48a3578979dd2333910e7ae671c5eec7e4996e14e809e25f21bbde2c3022f4de5a8e346baaeaccfaa1eea7a0809695d70eaaef097aac09f10dbaf7d9f2b801c0a61f84eacaee4c4aaa3fdc71206c035b1388d4721131aea254359c9d92a4619cc8c6cda43681261a11d55a99b95e344c02fcd335862baece2009696eaacf7ca14eee90163262c4b03379f14f9def6fc67ca57b82160ae92ad60aeb6091b1ae66025e7c897b1b7ddffb14e9fe8e60eca822fc8532788beee74672e8bfa5f6b6a7b6b524c559a0ddbc011143e1814a7d3c009bb8fb15a1e7a8eb077ba3a2eef1f93edec99341b36c2eaf89824b5b9fb9edb1300d883a5791193fd717b13669871f744ec35f607905ea415b54536c58d58d836353aa5414ce0cb265d12e24d02f01e3389984a32184adc5337acc4044174c335501b8803d799162bcf5424de2e5477fcb9895f0cb7edd6ff3eb4cd60ad434f46914016d3cddc171165d3cc4136940c6d9445f4bf5d043feb09c8e67fd7c613d53b3900e3594cd71701f8618a38b50b1b5976327ed60b5d47f501e254618405395553e415e36a7da8f20f736514b95ff4d08b83da6e576d49c61bff1fe2dc0203f3ebec921b5b4700c20b47e8c2fddf61a0213fe6057ffdbbb25ae8c051e1f1ce5e96fa1f68dfe31cb93961fe87c6b7cf85900ec00dca1902cb0e69c8e5e26f923aa06ff97231684827a86967e489d806f34936a936d95fc673211e0d78d8137dc36421223d1b2eb9d9becf62cc5634fc7a84de28481f96c9e495c627f904302e8f2bf883b8937a0fbbd8abfe0176e77dc725791fad6605833dd610c74c7e5e2d7c3c287ab93c499ac8b6af799ae6943e76b386fa57cf1cedb35c46a7301adc497451c59e79660aaed5bee9603780704a11488d0f96f547e10350b26ab923b2ea0c406c69e17bb7d89b47f4c645c1b23877bac7e4bcad102df8e37e1749eef29f38272f1d52afc9120d3ac47ca71a37d736fbd7a4c80c891d5e4a3fd79997abad0f33e9431ea2dbc7ff06b072deb78802761ef030969b34cc7f752358170483e8bef44e883acc33ccae39177573644c88a170cd9ce05f4f272ed4c9073eb447e84770ce24c545d283091a2526409063727ef92bbc5de27056a463869d570e394807c6420d296a17b34ab09fd172dc1ecece99a9c3da7eaec5ed64063f25e78561367412925b2bb4199bf95cf952d7fb92ed169e9fd4b744e5efc901cb7a368bb777705e1720c7f3544b95b5fbcc38de78b5f428465fb5d540e788644bf07eebb5d15d0edb725071aacddede8d86c22abb0611e7ed1b9590e5a21c9113c6e05edabd7eb9808c035ecf0dd365ef8dac18a2a322fcab90b9c099afd43e58150c00e88f281e6228c03507ea7e19348a5434bb991c82ea27467f89e4a3d96ee70553d7f5d31de59021067da749a138de8f950e6b7aba08cdf9ae8524aa87e0e615360de9cb4b788e8cc331196550d2b801e5950d706d4ec6882988cd9d1444399ff52ae7c9b4eb4a55c4677c603653edc74b6cc82e85832e919c6cfe033abd5d5ee05b9fa7eeeab1f7168d9b4755da0287206532873d3a5aba33ea6b296c42815779d376fbd82d303267fc8062b5447f75456d8ca446dbc51dbd7ff8a3c67cdbd8d806d525aafd256d1e625b910f798d16c8a2de9722d9975d93b73b2f70b63b6e555a4bc16a69125b074b438bac90537fef5aa8963237a66a45a2a806f547670c25979f77b2824df8da4311e6f6473a71b4ffab803cec3dd011b1178bc7ac05de3e22bd1d10609e6ed7ed848046089f3266b8a44990fd2b19c01aecb59477be7fab8989b5927e8d2431855be08fa103fe94d5bb2d45f0bf5678a5cbe7669735ca134ef9bb1674120200204f9fe8b95f3d6fa8e2db2dead86b0fb803c1eac355bd91613027f700ffce750dd6ef31b5121a6a23800068d881fe65a0c6a5d5694d4de40c4e4f6b5276f71d0a76d969d0c831ee31452cc3543851e974b738586dbb4ca1410654f90ed1deb1000cc49af6d8f1be35a978eb59322898c23e06f259168d8745d344751727542f5dda1256c4819e70cedbd7464f7c451cf2052001736fb408d914cecc395dfbf23a4f502f3bc0041b64228431de74a21414ced3ab19053b95cec56b438e4a05de6ef822d95d3d10046123f510c6e81c8259f5b18155253f88946914650e206e16e4319c973564cacd8be1f9e384ac43d2086e3140660ad3e906c8a0b93e7ac948cbcf7673501d4fd0a8be17fc71d30c6edf04a46ded537fe7e55aacdec21cc099abf81e05e24a05a77f6e8315cf2861b3aab7070670f25f375fe9e8b52edb71bdbfb39d9410d9b6cbb8696669e8f10fe8f6dd33866fc63c39222c7da62aba57e46015b860ac361768b2c9196df017eee9acbc6b361eea8097b130f5cb3918192c0649765ac45d84a40a272b3230fd493f3c8b246e779a2001d28a265eb6bb23384c7a959e17bb8df3d0f9e2624d76882d2e453b5ca5065e530c8b63c012426c3256cafdae4893fa658654185300612b2d9ed5e60573f03b12f1a50925c3913fa63b12aad5ba56b1439ea63494521beb6882d0353ed3301091c4c209c1b11b3dad490c1c48423c2a805691b3ce2d09f746788028301dc39d9753a7d31a5d85fd5a80f773d376ec6f0fd16be50841e25fae23d9e2f134156fd9a093068c08bbebdd54c3772d4443b5135107049fdf36e7e05035966c6df0ac9efcc339843836d9552080d363ba5ed4826164c7d5b3b12b0150ffdc1fa6c4a602a45e0ca5c1886a2422f25481b129aab267aec3353ca3966dabb99efcf1158082effd32101d89ffba3836d8cf4f60e16927cf318ef4aaeffdeea15c3da5dbdc04c62ac86c826f1e29139152e4c7732603a7be6d24d25e562299429bdbaff22fd85f4c180d19fd950fe6607addca3b78ac1bc1c57efcdefd6c3eeb8e05979054c6ea5f5bcc1772aacb1383a52e5cd796218bf85bf44edf9ce3157a49e52a5dc93f39024732a49c38c59064bd451fece6df351edd80aff5aca49848e0e868592b351a4b70e630efb4cca8994c43dd5d3538dd5ff1020935845fb781c26306e1c3badb2b38b95b28f1ac02468d7a44e15c744f8f377ebf4a1451de6a9a9e24e3d15bcd59ca775d9635aaa52f347c537169dd444b3b9d4caf2cd1f32ba52d5c5524244c521cfa9232f414afeeb298cdb95e599cf6ca1b4d9a8fd66cfae51a39a0fed1321b186fb60dd7c13c1f29c13e52be5796c899fa2ebc9d1ab6bf5eaf2081ed80f47df742027792903ed3216c745efa539834f22471d139df037b5fb492c8d2b7db3ac68df8cfbd83bf78232c6cf1e2e3899ffa6563192771c7a287250b45d002ee96e52c4617d68ae13da359b602929f1549750470d5b0e3b503162ccbcfc08099812148ce097ed1757f58925635e1f8c1cc642c62d04b5e211ef8aa4e9da8dcba1e484ac85d3bafb38286c85b396c973f41dafacca5edc585d82ad17ed401796ef2481fbe8470b214f3aad7433f3d40e1a77492c500c6826985537a70da110af8deaf32a44554e5bce7769c03ab9ba95c3169985548a352692d390abd31754ebc2111a881e9304612934128ad7442c9bdbca4363e4976ec5a801699613a07cc33eb898317152b989cb83586fdfdedcd48ff1feb6bbcae7c3b4aedcefdc200f6256754c99ce13546d4a4b6f87afb10687c37c9b57f635c92dba0f78831062e1f79cf6e26b005461eb8fc33007e4215f1e487e298f894502114e6cdd302f85af699fb525771b4732fe10c3c71906cd4098185efc681b551766f7a6f9b3443f05ae77cdeab7ff08df38a4a216770ef398a5be93c88b35f8e5744e6ea6cb54d65406e3c5cb308b19510b0f65aacefe554a9433f4587086a0ce50597827bd2783185004385b97150e42b13da1e0916cc5d195be2537c4d9f3f138ff3340ba4f6f8f92e721186f3629d44eb9baabc6a1e8425146cdac7e5885489790a428a642f5e39544d0200a6c8ff1b6f3b049c9bac82c10ebbfdef3772450f550b1b60407565ea2394699abc338ce67a692d838aa57efeb0a357692ebc597b112304345100074c928edd45013944b38cd1a8608264f2cc4d8f3f265144d8d31f0da4f2ffea82814ba94e992d6e934c9e4d87e6f8bf5f38d99f857bb20fd90e968a681d90556106ef476c70aebdabea20124461c61b6cecb1fb6aaabde475d059e82326d91b81c25259f2a403a76228d80f4742585d57c8434ba6be4824aefd5ecd5e3c3cedffa90b4b1effe154ccf5c1e8354f43be706ec69972c130d4062d6abf67ee9845a683e660debb645b73573b4f14e7f94920dfe2298ae3cff65039ed4b2d7aceee90948c0e795610c630485d277051e35b7c73710ebbb517b7244fe38781526370ae64f3749fecab8f6460ac90432f3709eadce0b8cca3b95ac2c85e20c44ba55ea7f7373623ff8c68a73af2bac1adbb715689eaa3601fc7b430a68577755ce248fbeca5a3118638fa27afdb102491ff17253e55e4e3d15406de93185f327ae1b190c8b4f4a71f6ffd4df6e3d1babd6f2466de89667b7ad931ed83cdc7f19703b9fc1536e25ccabfa877d6d34099529cf422287bfd4c7e02294d8a9b38dd4bc848c1f3bd5f0a6a97ee8f3020705907ff66cd895f5d102f6a290d2132f1eb55a2facfcb0d39df040612e956007d29130581f72776af4baa1248f4b81f54005ab689f73e567d89d7ffe5981358169fb1b1982fb459daa4d0abbbe21e982c0d5b86e09fa52c0b455d641fcaafe04d435086a596f681b63bf5443844860f0d8eaf9c1ab8db012f8d263e00ecd90a428d070580181acae0803fbbd93a5b7fd2210c49c2f8326422110fc78f13d75a8482ec881ff54dadd456fee613bd035e1569fc94da5e7fb51caf1dca0c24d443fc81273d944ed20c8e82889e50075e6374f5a95c474f9b8480d489066927b4d13b4a60017ced270707c6cbce0e0a2358fa771c31a30d2067554dfe2f2d998290352e575e934ea3641a34742f7a91305e9fe2f9e772be0de26d2ee6f7a60dd90ef5cbf4709d4b40c274602d42d79133e6b13b5d0635e8fa1fb08d0e64a5bf941fb0f065874fbad1c3a67d7092a292256638762f7a0c403c536b7edfeb5298a3dcc2d7eff28fb58aadccf23c5a39c3affbebf786385362e91ae9ba637861a7f14ed3811c4c0051bc6a5d44e77dcf53399a5a837cd6f86edb319283a6043c462248e588d334cbb8cdcb5eb42d9fb32627267b96ef47ff82f3ed090ae3147294c3be51f916fb862cd6cc34ebebaa5dbd55fd2c437246a5a18c87b4d4678230705f1818133e1211fca37a21cf25f5e85655ac3fccaf0138bee4fc159d581981422c95639f6f132ebd00648fa90f609a85a5f25751e533b76af1dfd63cd354e75a49f69f0acf560ebbd38f239a32a28fcc550b8b3ce65e20e3b0b566faf0042a7942be18444b9f2a5438805d580641e28aeaa713680f7205432b9f28c4469693d9ad87fae4946473bba28d8f870f25a1af8b44c922105afd90e0d756d468e84f05bf191b508c75c31aba1733dc6e7aaa81f4c2b53e2189da1593836090d13954d14a3cf4e6dc03a18d88ccbdfff4274df997cb84f6dce70a0f079f8e5b1de49e4ab1163eafd1b5984ed9d9b2585023632db2ac6e8aeaa817b4d0b0c5aa36ed51797b04bb89e33e4b966c82caaaa9ace5d7ee7c49d69ed1e7386ad629d5cc3c7dc6336f8a0ecec7f115d67d6e02f31d89fb2dceca714f6371c73281d2e5307a17367d87c1a4ec2edde8b749f3217f8fa46b309d600337c660632eee74f08df8e9bce4546d7a7bfa90af84d2ca45d8114067326c822a0ac9e4590405da3839a6d0891ca567b5df2d827eb03cb875d82b11aa2a0d24be9edc9f484ed987153775ddb348d718d4554dc025337b79a8dce29cf67b035bca1a6b55b207de8cdfb7eecc6846f8f29115bbfd8c37f08a3660f68e74a66084bca4593c151f18e534ecd6631a1ac9570608bb9f4f352252f1292f909140e3e179bdc0368083a9c5f01488e08397d2d2d6cdc688f9778e4218c5a74cb78f0984ce94d415bbbe57650341f04869a60f8f391b1519b163c2d5fed837ff60f148d185731011e0e04cd5b0356dcdacb2f99719947b6918c9ea2d24aaa4e43004b04ebf8c39a461a54a3a355bbb6bf3c1e7cb9770c6043bf252bc6d68e0ad3a47ea8f089622229662176dfabe96456fef976d30fc7aba8094917c24bfc258cc4b515d474428830a6eb13b41e2c724d58184ba8e4ac0e6456594408969308c7ac9884a74091611c5a5b0f9e442c603e10003ee93a1a0bb72bb658aa17cc8c52caa8b1c3faa99bddf099b4f9faefae04c7beeea6bb3f7c8414f9998b70e59ef91aaee5304624ccb5e8e563f65f8d02e7f91b0027c362b64a7022fbf4b7e852a0bc15805becc9787d4bdd4ca2069d73d719871acb091fa51b187fc4e40b9de619c8ea3d4061b90a21c916869178e24493f96c8d5110f663a28fbd17d44f169c087bef408ca3f15424e0b5eaf804eccad808b3144b49a6bf4577abb58f4abba4a3fe4df0530d6fb3b53d19a4efd2e47d4577417f7dd900543131eeea726ef66b20c3ebf1cef4fb4198af1a52012e92ca2690cd538467ac8a0fbad3790a1384f906819971b03aecd7da2ed389931266c472040fc03ff47b47f97705d45092a9fe9481f162e787d17eff3535756a21dc3e701550934c159f04f136c7cb7b0ba89987a0db6be800fb441a400ab84ad652f7b5a2c90c0ba9868523d535df320b510f5bc0340c0c52ee750fe2f87fa0902282fac65e74b05cecfcc448acbbee25046cb4745d8ecb3699d12597f2d8c307db62307b1cba55d3f9cb859245f03259ba87fec4cebf4a3d154c065594070d7b5249c19af7d3aa5808e72a1f67f785f4b1e0f75dd8e3c902a37a13f2043ec72a1389f2735bdb75afe288465cecf884e85abf91ef238a44ac36b65ca7fd9fe9a20b12fa55fa3981ea1d76a1c0c35f91b98f95a10e154f301de114fd208d56df7a48db66b375ebeef3c78458d4390795f7fb47f824ce550637c6ff6036a7bdae71e3eac0e4805208e6246f09bdddd8725e5b047b480d5586f5313630706ce6b639463e897e41f135734133931b539b7dcb63c947485ff239f7e31cf27a7b07845476cfee9a97229cf2740d0b354c54b37d5b242ab129501ef73c55049a7520a62b612f1072ff7f27883ae9b3d0d7d25bb11641b26d1e015e0c3ae4fbf6e1e382ee3e51cd6d49b3dd787e2b506cb3bbfead5eff8bb39adfdb1e238ceb52ce92cac3fa6b7c1a325546afb03130a21d5bb60991bc4c71d02a7cc75da1cd2b700a89df25f4cd018de9a841da95c6b53774904acefd18010306e713fa76a9be9996e3d22e800bf06b2e5aabf3cfd4d5979ebcc95f732e1949db8e28ced8af54baa32c3ffe746e9846ef0a33a3af1cd513c7ff33727d0ead15ae003af0251031b88b00bb576ceaa2be744b4a1161b73a56b8151819565e948da6258226e9b4df94d1d28e8c021a178998b73ba9cd18fe38a57f35f45f8461d59d9837b0e20fea0094c8d6184b7d4bd9ee9b9e965c85491fb52db0d9cedca34b3f7ffc8b44ba3b1a9a5a23b56a25f1963ce9fb69713feddb35098ef4a330414bda12c5a5c8e4b22b00264c05ac8be46af8e8f111881a10fbedefa1ee7bc679774d1e5563b9295e10f27c1ce865552a4a430055790685de1222c314ad8ab7b32fb4e6f6dcf2e3aed46fd81e918d1af4fa0afc18c88b589e3aabdc07f99318e5db133fb3f24af990e197f758372e0faf4c0537fce6452003d170d52ec423cf8b85a180ca1fea72f6eba87394d9166a7ae4b75682df9012b3258b06c49ea0aac72ae50df84bf5fc0f79f303939a2ec28af8110fbea938a9e9029a15adfed22a31e96c991c64a46f68ab719b7eb9d4cff26a4a69032c9493794aa105b828be41beea5f8edaef3960fcddcc3f0f6c46d0284e0814b5226113fc3a9d8e3bb3099807d1bb4d20817ce096d1e44cc4733bc0dd726edb737ab7d3f687ece95eeda6b21378d7947291e6a504344db29cd54dc47c70843c3047106c4dd5deec6b8d92efe844d816393bd612e3aa987303bf9f87279baa8d55eed6da53c7eab38f3681532061686da019326bdefb8066e1773593d09370313e3e89c735a7b4c7c0ab7ef3aaad81b128a206cd9ca67f8bc3a6109311fc953345dfda950177c716dc5c19a81e0879e5a01f96844cb6a079383a0329a8e3692cd0664a47dfd597b4d87719098e6e479a9556fe6d15575869fe3850a5138a300e09c831f6eedbf6601b10106d6e066c559ba7d790c35c0a9eaa62e38956eea6cc979d13987a168bafe1765a55b68e5daee66e6a3e73ac20ad03a3ff2b3ed1093ec3576dbba49a3bc01f57f3ac93ada7df46a9731694b72d947e15524f4161d6328443b75b30d74969971bf15a02ad4f3f184ddb25d50aa8c486eb0222a9d681023afcc546cdfd9da6248944f5b09ce170217da4196a00c3ce01b91b3aef743b3ae548104c8127d12d7feaf8d5e266095e69269200bc06ba71742d8de6afb14791fa96798d2c938004e0c2a4129546c987665df9fe7fadf182b4ed93753d74d910badca9d06f9970ec664fc5133e0e4c023050459166d4caf3922cc2b1bc95daa9ccbd22a87d3d77587d90fb760b947fecbef4b140a6626639034f1c425594905ac611d316ddcc759dbbba62529bdb5ee8226f6af0d75b67fd1005dd0f80c1a7f3f1c8246b886ed3a6f4f5c7bafeca7cf77d8bd1edb948eda35496cf44e7897d9f6529bb4ef361ce778a7caedd5cdad03bb37343712aa9b59f88af3a1da34a4989427bf07ac0b3ab78ef98faba72e3a7c20a9176296c52b40d59945ae965ea0ef38c491608a1693500bf57988b401fbb1ddf152462ff02755f73437dd8157ba255cbe883b0976c87e89689320cbc5a2a7c072c2467487d731fa02ee2a5f29e866a4daf0639d92c9aa625f36310aa2c66489da38a7a4ba927ae396ae9fa457d73a4aca933059b2184b0345e70e124953d40d6ab671771fc88fd83f285ad93cd51fe994cd3c98dd866bf3d9068fee1e61a3b0b92bd3c7a8845d830024436e44a582988d0c262b9fea22abf53852286018eec703dc78718409385cde345a643bc7d08bab8467b456db685220979158ed5a1b44ef3214695b1060f7925d53b5a320478a40b96def98cc34076b1060c48c4ae1066f4b002637bd060d272ba1e1c050095ddd97c94e11ecf0927ba03cbcffbadbac5b70ce5a479c7881f00040ca7f7b787ba9d3a2d209db4a34fe8f260bedf70c035267668871327ebd9c7fbf870663aa1ae9fabba6a92c4869696245f7fc3b779a4fa6098bf7c5cf92902b260c337ad4bacb17e2a4d77c14eacafa4ddd752a56a3329b73f7ebdca4fb96e089743b2f8055edf8766f32d49271ad2871d2c775852ecb082177f92e2b21d8025a0a75bf8db13514543d0f3533c04150d1795d92e27e6e125193ab454ecc4e1a15fcf5c77d81ae672e3eb66196a32c6d2b839d5853f5dedb97326e8c74e0d7e5bd5b5056dd7ccdae4d8aab2d16d17b56ee8b9cf884f2ce34adf6cc02a576a21c8751a0a900d9aa1211c224d813e895f17f0c7b5e85d1713c135b7b84e7624c0a0e3fb8932229de019451220a0f74bd78c908a33f033d66da6b8a463f2f3cceb02e039a196bfb59d139979c6374691dc10ff0f26a9582036edf268dbf4b3d3290535c08ad55463e0c79d57497cf1e53328e3f61e004787ae605cd3fe85fb3ac90f9dcdce733edf6d096084444e39be7c25b043a4024ae82988170263dd8f437de4bdc62585bf43a47ea656c5c377cefe1a88acf8e59795ceae0886cc2ddc258805ffe69d1fad3930cdff67a89fb69f500a07abc3995999c3c4c153b8595a04f81a9db6a15446304970a2fa9cdbb1d0a9811efd797a4727af3bb059b98b17bd76f0a64ec5c07b8bd31004c06b798125516329df2ba9c3129aa4ebf91e43ad181d4d0f858c4deae57536fa2f8f287de81ddfec03b7e1ce3b12b2f0b5f5fdcbc327f74a0a7a85c44c51e8fc1cce45a992aa6b52bf78de451f8b4ad819c519a9d3e46d87bf07d27b3107e1ba268e4347853d3e915abf6510faca1f255da8a09b1080e172509c81ce73408140da5917b6efc09d09750747b7a1613c5f7f1726ffea2913e6c07d8d190ae736e8c8d15cdf4004bfe6593a0fca4aff42673357ce9d3b542f1cd552b8a77d07adcb20e943373cc2f031ff2c07ad1f376af4945625e150a9cfef130aab718381d59b1f28f40d14fbbfac142fce162d345fa1d9a942dcf0aebe4962a3b278c49083eb85ee29121dcbdec3476b8a0b18b7ed24e0a33b13f58fb62b6c01a87bcc92a28f036c4decec6097f297b4192f0a94aba896b9d7e0877fbbba221e7ee6727cfcc125a4fea5429a4d043a4857b2e6e2fb08a8a80b2b7451fc24b7c1e216255cf793f0e7b2baeceaba55227cfb18217a3cccb8f6c62abf134216bbc3e81707402951aaff54416a6cdac8cdd762039896bd805247e0fc969839efdc0b3a9746758c0044a6fa50b76961a23ddf2dacf0f6db2fed328a593dfdd3e9a9afc922f26e935b5c7cb577358de4d3848f04f9c45afd2dcf74875e863227283685ea3d97f06dd88222ab59c70a4ff541215a2b17a67a221f72ec16979df43ed749ce44e4f4c8d627a2ee817efad216581faa1205b347cae5797897ed176f792cd430caf1724679fc49dfe451f8f781f188ff094a6b607a7d2382083f930b01666e28a47a3eca4dfb4cd07f8ff90a31bf0f89a0864a5504b2a3e6a9ba7fd24c2f0e782e76019cc73b90fc66efe13b103a99c5d970ba05e87e4cea83cce7c2bc503f6f57d5a25c3dc596f5d931463fb80ac2877f40da0a04e38617982cc533b49172e260e8fd62e672450fa754c827b71ab46b749079a0307286426cafd6f73ed02af5bbd43e8e2fa4c3932cc2d00168f448a480c45b3f266755e50863471933880c978da35d9fad8fd38813449f7471778f4f8bf3409f979923a42260eefa18976d8d4ab4b96cd130701555cbf2f26e6ade72b89ee81c20a072c0753fda63a5e3261b9cb686c59081ef56b7d07424e0ff5c0d85a51db6d00a9c9307541f8892be1918f02e13d9a23c53e595bfd1e3e8bd09f296b29d65b6991251375ae1122a4d1bee5dee89bb43505809a0a459d3bb7a671c2fd49ae74917b320cd658ae04eaa9792e538fa6be1a8b6f5fe8819243bb7c1b958e3ca174e4ec3435634508969831e7c8fa3443d26dd20b0342e17e589e8bd5bea490b7f17e81609b9806eb425ea28cd7bfea4c560419b494eb6c78118ba3eb5d26439c6636c781f622e4c584b8030092cfcc2029f208ecbf80b383c2005211dcb179797fef6bd602dd02e436946557767524fc2a64b2fc6ff6a14b919fb92cc2dc4ea02ecfbab5e4a0cbeb7fe55e88fe8438e9099751c81a937bbffd00e853500ebe66305c425eb90e8682105d1146080cc81944007c435fc96b676b90958bec94686c97c710b4a1714687ba8ce0b7198792b981467a453540557b9c073270277a68df11535e1d1836dc58fc8cf071d249f97b9a16b0d215cb782256a42822cc863deff69f882af35ca4e80a259d0f31d72a0fa92c33bd2ecf786707f62ec5045e12cfb145588e7a0b7f6bcc6ecb561850f4ea2b885492d1922cf565950312e650a722ba8261da8ec8fea22e67448797980baba028346c7adea22c09127d933b15872fd0f5940e6fd83e51d34adf0e895d8823910e7014026d385fe2ad17904dfaf0ef24d47e9484d481d2c50967a466a3765a7e71cf0855e162a3a9a70a8aa62d8b1912631e9933d963266b79f1ec2c970afcb4fd6506a45279e2c36e36ee5fb477bc5be56377aef889cdaa7f881db88eb76a0a195f6b4c150e077254ee7533b555a33c753f552d1ffca4bb81bd744755e550765b1b3f7348e2b07a472ce6e698c392fe947f96252dc706444c693b60dcdbc45f9aab72e58eda277f2e32a6f5841ac41a2678e6189eb7d1749cd3d9e4728a13c594e59013fcea0e1863b439f1ab93d257c9f53c023dfab0361d3ffa1b65b465c4b3a1a88e24d006d17585319f792c218236eaea0161fc4566ca7deb8ee5602469871760b3d5b17bd36183087f940aa492144aa20c682aef81a37601d33ed16f92d9f593a1284f9e3f0fae4855e3fd5171039a83c31a6d0adc8147903b45bef94a9884ab9897bd2571889bfa6142e9097902b19087b615ac94b19031b55f89addd40bb5303f2aa9817ed2fb61c73111e5a2ee230bfad09cdfd6981419decc3798b85e3249103363f73e316b847115a5b7efb68bff0e912af9fca57a1ed374e6fcfd3e2a624c3933ac445f0fb78088821875a8ec6e52576ad4d5db659677b8e4b851f86da92310ec5e5f01277e45d358acf8dac0106404564408710b81704a3cb57dc735623e85cc97dd1607587308c4e09e66db552e1144d285ee39183f6d25c939b89cd9a4f8614fb561647db4166d01a067a7ea16620862ae329ed9794d62ac0d6abc7400d0c7f66ae1d5454f9364f07732d2e02b91519fa875698b0e0de964bb3eff8ca1113e651f61d6dadf479e1b587981175b0d39035dc78b59d1c500bf09a913ec3485a42f3e381c6adb292841098524d6b5fb8bed30c3ebdf11dc962c99ace650731de63a2bfbc818d27bc484a9eb1e912c322a825c7c6908f46a9002a807206d8b800347deece7636b8cfd45140835d1942040213f77075011aea5e2ace696e3fd5807b93c279ffb763dcc4ebc0fcea2c9f42aa2999953e15447869f0de37ff74584e202e34a0a189c52a6b6ecc61b91bc44a954bcbf99327558846420d463db75bf036b4dd0ef041f6b6d80a63020cb77a1d5498e71e92a7f96b1f803cf9d86c5d9e31f5b2d715cb52ec8bc94fcc327203443a70946970b39533515ff7867a98818e33a52c2583bfdb8a2db162704c09797616d734cbdfce577a951276345279891de3a179291089c7a0b315f04e2c27fe6ea07e0b54a43e797ba94626906be19c5f7993e1a5431a5fcdbaaa22ce0047f251ef6138b5e5ffa98ac17312f1a279e9203484c930a689569f4f640c7523beb109ba8b0cec7064ce970025e29b684f57f4a2874854fe40fda71cdea40973eaeb13882093fbfb07246eac94938a3e77420a963e0ed63a0924d6e4e909be6583a878f9db3fcfe6055fa9e4d99c242ff6b37010194e0afa63e3df67cc519ea9205f2bbaa3651609de1bd77da1494416b6c965dfb8e69d08911a021ff100739765f3618e2fc3afab21e876af99ab69eb040f2138236ac528264456beb82f3e775618e589b9a4732b28a1651b6f58adf8634c317348898848852128772ce871a2aaba354112ed6ee73276ea65d1a1a719b7eef5743db24c9b359b1c58bda871cf4bf784bcb4ffad5c05a731aa843ddff3b5ee8030b2239b9207fb428f6dc2ddf485b34aef0d8b448c818c37ea29ead279a8fbd43eaa36f356fd04e81c5f5d4eceac5f6c50d9c514d416901bd8da77a9683220c75dcb6606f62d80d6de1bd6181c430997eb662cf8f058c6d71f5429697772314b9916f6e404dcbe58eabbd37821140bd3a39d0137769876ee2de8ae9b2d74cfbed60f302bcd8ce85ba6fb066851183204a017018017fb98dde597ba2d491d233fb048cd4b0ebd0a56e22733f378068f64ecd0727005557e2559764aa6d5f1f47239f9772f300a13fa0c4d079c1e84825ead15dd5295a6dfee176db00a2fded24fe04a5161f587977939551193c6623fec114e7a0381a774f5553fc7c4d2d0005779047a69f886333fe089ccce129604f5ed7a01b8aa8e209a9f55ff5c080ef0ce84c3473fb9d4c867f6523396db726e44ba8e448b02906af5e31dc0c63659ab2042bfd0795d9b0e21f35f1f98273097cc418b3f3c764243daeb31f35ea2bdf0573aca5b6b93b0eb12c2c072067d72d48ca2833824995a4a5ba60a8d074878c0ed0c6b8ec6fe7efeafaf37e9d46342cbc62cca93ae2d796e9f79fcae32ec2be5ded82bbc3a4b221b902f1f1dedf19eee916f7be0c1233ba3fcbcad97a5c92c0da0cb387822ab78a0dcf4964eca6899cde9cfc58605d6cdaf897a6c6adb87bc0bc0fcd2e094565ee6eef76987e2b760db9293cc28b29d7815e4c485ab0b0ddc82727b4011208be2f5b089eb5b551c5bd0d5cd05b3d95a38c0357357aa5b27627133d99d114216e126f00f2c1c4b7c71a5a1ad38c0c0f2157a3d0e1482cd9c59f155c61d0eab8dd396e231e0b0c0a804501553b56c8aff3acadf2d7eda19d975a00f2a556b74e11f1561d3471c6d3c0a8467f53dec69ceff3f3a838f45bb92f73ab4a0d991b8a403f93d9b9b7697832a860cd3084f120ac632976c0398ab96b7a124ad1f1765924a948fa6a061197158ebcfaac789d5c2627fc520a0709096e57d99a7dae9ce8d2765eaec987f47454020f51e9ab92b3cbe6b9f5c9257a48952963a065facb268f42cb2d0a4faa9c55732e1fe5be48452c1976f05195139e436569fa0be225424a19eb8d82b6348025ca4c98a781b66662cbdf6337231641644cedc422329be0df0311bfdbe23976ace0efd376ea3d3edd021c1a6fd971bb50aac68aba36133e202cbda33b9a21020873a7aff2efc582218117de266a9fa885bf6fd6dfb5b8903ef3584ca142e4b98b5dba6771a32279abc6f0aa046103819d676c7cde9ff788bfcc482a5565a079384da43a40bf9716f36d1565634225e3dcbafb545cd9a9ca879662070cb7289135423d7bd4fbd1261db5b822c85acc28c09c8b4ee518f4d7a5c442e61906778b606bac26cbf39900150797ce60905634e843261f1d8cbf1527fabf35048de0200ddaf664a9d9b51863ab90e5e37cd74aa983bf99e3cacc9f2321c708bad451f2142dc7b3cfaa146e263981236b09c15abf25f24abd60fbc15db8a5f868abe336a5232a393b39415033006ec457604366eb3135e244ed335dd4614c9c919c66ab84d189606261435fd213de13800b18ab601490809d1474a88d5d2a512597e741596b63f5dc92912f344429e0455b481129241e038427260858116733f63ab503055dc45cb694a2cd97e143dbb5bcf7733bb878389ada6527e36f3da8fdeff3bf46612e5ffa54648834077a399d3b0fedc38a963dc387666a3b24d8e57321b6bc62ff05ba6261724767f408618a55c81b74dd4169c6f772a15e649eb7bd6f71107612b08f959bf5bd672731b358fae1bff37a1db122e017bc1b75ec8f89ce9408db3a676375853a5127c91e633b37582386c51a1e6869017f88c3f66eed50f50a165a3f602dfecafd13e65eeaf54a296bfc55ff327b118d07c0a8c50c3e55a6df1d32fe2c69a21de4c00ae502d65d69d5ef3998264bee6debd3a1011574a2f348a36293f0e9cdcbdeb64f052259f6bfe885ca7a613aacf784c9661084579936ff53f0f54801255c0e217701d604125451d290bd9a19bebf70304c3bc852f1987b834495392f5906972d3d6c776d6348fe1eb9e028f01f2bb36f3f505ec750c2485123ed2e6194534e7166d12fe30ee3d0fcecbc639e05008219cb8c17015f277efda6921591e23a64d7f31c02f6b61e904454593d38dca7d3f5a2ada99c8027041d563b0faf02d4a4ee4c32712273b6ef2c07b2eaf35b4a36341d7366d85ccc437185be28fd4077b3b01a8192664ae8c69d8c324fcc6e3682665e1a407b8cd2fb46e7b42102f5799d20f38a0fc8ff50cf362cdcc5811fd88ac2cfb1dadd3c1513e7df591bdd3682caebfb1e7a35623da57fe24d6df7f9cfd62730c68e29f3308b83f3985b8f7a027d84ebbddf3cf9fa5673db13cc14b021a491977435b8bcf74c7932008e7948fa1d4635b29cc9fa2b5c6710a27d85adf27e0366b18755bda1f098e34cf477ab502375851de73947a77984562df885da856abffc6eeb37a86cd9a04f1a7fd98a01da7605afd2aef0a09a03129f56c15d8f57602183099eb5a509f7e3d5f1d8fdce80b8ddceb1ba2a2b8e9ef7b1b4da38beae3de90fe6f18dbd687dc305bce17e41997101670ad2d47d4e56ead8898a1a89341060c94055356472e8b8fbb48b2592c8a2cdfcb9c56b28998a3c4e1bb5f37d7d2ef9b605c50b6778f674180bc2306a57f09791cf3037a9c946aba78b91ea795d0467e35a6de0cc44cb9cab7755fdfd8e7f2bb793a08fe7c0dd2dae36044d3a4db83b92fbaaecf0504d1e4c1dfe7a6ce40c9f77e59e6ad03b1ac38eee5e1c48b4fe0d18b0bef5799fe86d87710e6feb830226494cb3b2412103652425c30204b88eb89656d1acec251a29a3b1e7ea1484439192607ca69587c85a60cdb1ee2506d3eb83d03b84d740094065f7be29a7df02c26fbd7d3ebda812f11936c18a65f732e99c44fc9248056debac08185dab269ca4707aee27318d3feb4a690baa5b45d1f58b29fcb9b76ae5ba8248568133fbcc5dfffcd218a9691562e6ef83876167636b90889f69f29d14ca35613eb6538103bf5042c29eaf235c7e78ab08e87401ffc7cadbef92b4e11e2a1c68f323844183acd7c69dc0c67a937968d5e4fc66ab4a7d6ade5294a006b21e290f439212d4a6ca389d8c5a11982a8be2268e1b92fa25c25233f8e53c84202951eddb4f153edd4f2e3a0a85b300fca67df29083a0dd8521cee60f710f35d6b3c6d81cb75cef30ee82057edbe362cc93458ec87631420341b1b9212435a4c2601b8dd025dcd2461628fbb73347a9aa12a6ae0df23d28ee5e077620e19036ec03be4286c38293c3c70bf6383c842dadd3789bdf83711253108c9c7c5a3bfe9eaa310836ef8a7d6d257b48cc0a5e0596c624a2064f7d9d0673b7d710a459f3b77f335226d97ae32823459e370a4cf683c86175716fb98cab06812faa8e96fd5b8fcb5b65a5c2c3c7d7193360a7b203129fa87725d4f619b5623751cffd6a65744ba2dbd3d42948369b898f6922c989913f2e86228cee9dfc7cadd4de7aaaa685eb8cb104a92f936ed3ff74a0ce45fdd213dc9896196e087fb847085f1a6e07e58a745bcf7d16f08123a86020e4bb7240e4fcb6b2831720cd3a9471b51135de4bf52a662953341bc9b9502a7502d9b5249d329bf943444e7b1a02883e64a7077b570ba2f6791348eb8c05b48ac5cbb530382b70771e3605111d0326777eb42524b8544ce3675d248b92b696a9529eb7eb4c12208fd177688225a717a3414c0d11be7f66e97280074fa5e13d44a59d16097d1ba85c404bef9edcc9922c0b5815a96999b57b61ab1accb6e51c6fd360961fde9cfad7ec6e44a7a76cf14e5303db13c58896e00f4467371ec6541bc46cb8ec0d5420e3d5d2afa923053c80c95f2dc6e37a0137a8f5f926d41c4df84f77c179d1e3e7db4623e1307d3f820ea7ab58b6b299944a97879b14dc4924fe1c94b9eedab1ae0eee0cca6c6996bb9d1b76a377141afb3e5e6e7864bb97f7dc2d93e4ba06785ea1c512291bcc82b6a9266124bb1244e6532b036df473e6ab48ff54b1d6168ca4090fddba1180ef2d6fdae0cea96b308107d682a90527e1f0ae7c0c5c70739510e70ffe1e5e438429b374855c1384ddd73fc1001801a0c582c98569007c0473189bfd9e7f5a19599041dd905a80a89951627901dee4ff2d04275b3901a65ce6a45c3b62f78d37ab4f622ff02b072ed79f6dfac935abdbd2760345e2c5dcd2c8c1b85677b2f09c73ac30948dd82f1bf04d64996460c8d5f7d215fe473a43d70b25291f16d09a9e1801dab2aac6df2d3913125c7afc1feb2e1e2c1330ca1aea97524e9c96485593f94e062489576f4544867ab54c7bf7946103a820084849da2cef066497fcf5ba1d46fb78fbc55ff66055d7ac80a92dd40784cdb9bb759374427d15680cf5eac6767140e7fabfa7b6c6ce087318fb4097e5d6ad154e643197d801c60b9b34c60c4bcb24b1583553b7b2f743f6a3ec9064ccf9f8754de0b2b23fabeaf878419e9967352f356b790ff9904abcb68f4a4e81801d4e1f0bfc88da727412b07e5d0ed6e78a295e232d35cef7e063ad22ee2c7ca0d7c914785615ca8f1cd952b6cb52c11dc7f36e7b52968595d27b018e885cdfcce794fbeeded0ca52197029ab0171137c6ddc058bdefaf1d72fde25d6957b3f963c4f520306baedd642429d1104206183a2f23f4b7688884848944ead27fc1f8411934a81fb0a0ea30288ff1c52935fa41fea8fa0f0de295507a0df7fef0ed65e6e61b1a80638aa0b63b8bf325eea4feb002e3899842cc279f35107c2dae3546685db9eefc29e0a281ebf3e3f89b40b7c138a67528fb11580a7d9105313343124b556f184193176858072e8cb13fadf5064f6f4e89ab42711c0e5d9e71d61083046b7553425e9533f4353069e97251a87d983be466b001dc98437c90634faa40176d0a55910ca3631dcad768fe7b99e19015100c8aabf939ddd77748f2fcc8862ffc5948561f8043f809681bdfd7af2dc19c402e5d8ceefd4791fe9ba1cd5587c07209e776b6e12b35701de6fafdf19ccc417d9f48bfd419a1de8bc69cf82ca6873524685e03ec4835928436b210547fd3f80032a208603b6e309b5be0330c1cbec754de9e79d16bf3cc96b7338e7e85d72c1bd2a973ff160af5f2c65a70f956b7d812d5d94ebd266131a2e81d235d423e71c87d9093d16cef6034c19fbf4e219714198b9f4408cd3fb98dbc0870c706c789554144c88ba843484257c1bde171e722362385abf26b367dcd9e8400315211b8cdcaad4ffba4f81316660d70d81595ccd1d0e32033e1bd84030e0af8fa689fee78d27ca1591e903e46abf47be8ff7f22739ec64433be4d7eb1da8ca2d86541c039658b740bb89f2a6921e15512e7934ac730df6d577dd74af2d323f7a235e9e66e1650bf0b1ede050dbf5b1d611c7b9c3ccfea781a6ed9162ff66539916c41f3de6db37b235a5e6cb7e6786109fb8bb5a87e4a2526a4370c07a3fb07960fafa10fab8eb29d72ba94e6a049b4a95d82bb6823fa836c53cdb87333464933cc552a9ebd33db275a64a78144cada471ed598a27b400160aa2434989a812c400266a9b273ce3f50433049f5986c0c95e06d62511d80d8434449fba2e58d9afa32a852f4e909893e60bcfd8e123d77b325e707acce3b77477834f30fdd66eed78d57d9de5c88f9121123eb9a9f4e01110680c9f06b811177d50dbacb266a4a56ac74e21a6c469975816dba8225a4bcbe9e2f30134975efb695a920660cbb33d3b76f453243f731985c54571529fff27edc1566a2ce5c35c50c94b4878a443a7e6f4289898762dae16e62bc2cd2b2ef97d21561efd7a962547b28c87fcaf2347479bf1a24b63e9fbfd76638981ccc525c90308ec586957597bfd0ab18d835b4848dbc6a2ec52841bd8d9a2c72326c1a67b730457f2a1281209a260d36190c2da2015f7a77f61b5da8460bde6b9b6f899b24357d53f1a6763fb84244239da8ff6603520955a73e8eccea7d95c48e8a6008f8a7f691ffa767581739e148b8c7ad1bf0818b21f1fb835395476c9f894fe9015d438195db5b47ff7160898001ddd667054446d859da9c8516307102fbb69efec13a4f01a29bd37542c424a0af9ecb207fc64719f120b1fa46e5e04ee9ec4e7ce1a9adcaed8285b91545a529e8396632a955ceb15e26b0e0f4d083cb7a023c634fe6f07ce4c4fa3cdf5226e8c7cbcdc8671f5a096921439e28aa1a732d718a803d1bc4a283cb99ea62a277e27339db903b4567106278540eaa2c8654327766113cee3c1657925aefb2a1f0ffc63bce048dae0758578e070194c6c226e3c5bc38acfa05e7a4d1cc8985e301b6667d1a250b4423c492ea97eb3f68a392791758b27318924909bf0c4cbca26b1955b08a89d4cc9e52a003e218ac818b604f89929de4fd154fb6ed947d65253315645f907bb40371bfccabdc5255e8aff31b14effcbed84f108739c4a50e48f827bff82dc28d0cca66a05c163886004f0fa5d7541907ca0660d2d9d9a9fdd072b757987a827fbcb33bfc228c141ebdeb84d79758af0052cfaf6ff96177be4d2edc96a6705605f6f1c68f33de1c66a0b179bdca396347f01e2973c247a3e4099f83023f6743d590e35890a48fbd9274c2114bd3442bc02585b0b897eaf081ac05f6b4480958dec80741b57307ee7c5e83a00fc0017a2baebaf97ecf2bc59329ab20bb18c3ee33c798c462a5531ac4a1a05dab54342b4f5978506b86cf15790324e8b1379f5995575fcb6ae0d2a9540a66b5f2643048ff8886d606efc16c2ea1570349383b11a047ce520cb4ff2aaafe64f02dfc7b0077ec31108671037a2fd114cafb3e1dfe12054e0fc8a674d275a9494a3e5d3fbfc19e653d9d81f42a5665e4b95065371933b80fb89de659e7e43cc058dac638cc9ac90fc331dc7737bf9bbab4fb8ad77f90fa2418395fdf1c5a3d26a39d546b57c82caa8af8027d75ef5d4ec49a5b294046041d5d0fa97d27e96ab4ecc98314c7270c6f24f5931483ffb75d13d7c9680e7a27555616f04b60f0376c31e72720d812beda98db92ea78a2590cf73a0933a01116f84b5e274207cd0d30be1567c794bab1bf770b60ad7c9b7a377e83481ff942979d7686d9fb4ee6cfed440826ab6cba4c45d115538a28fc9f6befe1cdaf58e2db86c03a0bd21bcb86db8948b774a3641b9526fbd0c5deffd7bcfefe5ef1df57d84214ccf1c7c79ee4e9e11b00b49ff1b1664a602e5d1ccdc417b0b4403b07d3828670f9b02f100e1d84b88153269162b119cf520bce8f61ed841ac2b6e0330f4d507bca565a07847a6b445201df83641b6934a199a99e1ea5dde394e9811924c62256a86010d47b83bdbdedfbbc3e0c1aef293500d228910a9ee6eb7118245964c7c18d2b524c85efaff10c8de91e0a0aa6d8af446f41b78201ced39642312d928995f3fac6272b67175dde6547f547862ae39753b0f4131c35dae541b8ad665c22b40188bc53b73ee105b07b194fdf78a76ea4edbaade6031fbecfd1dfabc431627f1a991c3751e602344e6c2228b640c89ddf2c1b02992cfb68d516d50b0dd6e1b405edc846763094dd296b9ad434fc2654b6181d3de9091fe653ac88ba3445d378a60a99fa7eb06d6f28f18a1530569ed04d3be4ec8020d5f2723dac65f5bc7b8219b4db2dcdd7bcf0e62d1f609b0d713ad000cc7c9d283572fc2ab13b65843ca10c6ee13c9a9f345f8e88cb1475cd5ac384b22f71ef7a43485f19b997dd98dfaf12ec0a89dcda084a79cea12d38916ef9d7f4c8c7d32507aada38754b520e7464f66011e28688f98f003769d562a86b42919a274b284c6f0d091266c305be9d67d8f11e045805691a9d86b9e8f6d13d1bf5e2fad5cd23801945cfddf4b4d88bb9feec48458386aedb1b8d9d9011b536e664bff6a63711c968fb26525c7308cbfdbeb018b0a29e81ce43ff59dedb8ea10eff1a2b0fa3f4c13aee823ad45e508daef19dd000fdb12b89a9b6ed3f7f16a63d27bf34047b7525d6f90978ae624ce724ba0ac1a955b975c074e77f3f542de369f610ca3154e7dc89db3e6bb62f524196ee34365935c25838b34b58f87f5cab03ae6fc8ca392ffc1447386924cea2166139d0835d0af7faa6db237c95ebcece1f333d115724e87b58704ec452288600ea7b5b898cf837de74d5c6522336f469b67236f4b0de50d1f36b2174ec36076d24b8e7913a75a3ccd2912752681d5363b02e471da45e48caa5be00d58d60ade899d8218ff190b030d4670cc92bef53ddd3d75218f8e6bf2a295e671d9ce624a31966b376dd08f6443b09fa97d5d7548ce60ed253a246ece9c795d34e0489c4ac24edfdb36430fb409dab3f3f2e979e92856d2acc6379f559d47ec7080b8f8f9762bc67a6ac575d7716e97cbe027ea53c0614869730ceaf1d7e535ae16a26a1f4e91c07e1601e0d6f9eec6ec00bdc6d9c4bd5f7bb2232967389385e41e1c5b3134aff960a51999fc14da53e36f8d6211353d0b8abbec8858966bcd02a344789363274f6d6eda0dacb52b432a3c7327e8b4231885961af4923991419f6543b29c468022f07c04f96853b4fbc6a16758bc71447d65fb2d6d53619be7c00d91ff65bb6e18ae9b25417c8ae81ba49d58dad334137b62634dfd497525924eb3438e8a77efee91699f94729f16624879e259c8425053be92bb4d13cf491c38963dba9352fdcee01b707c0410e002f519d1ae643fcc4f52ac092a696537bfa6ed9ef51add727b75c9a0130e612f9f4776910303c43783dad22697258665f2cc27b8e75c741d1ecd4c4de8003bc3b951ea5f44dad119857b9aa0e081e5fd3e6cb21358673844f4a12b9986d2dfa35f379481854e0d89e25faa51017f84264e820b0203d49cf2bc9774775fc9f5222876ac2122216698a94b8fd8c43de843280bc871ab624d69b1c5f5149b15c5dd39091f087e8792939fccd336140706202c845287a705ee5fceaad5bb1c2dbb77e2a49052427b723eb1502a2f4b463046bba835f1c0b9e4db0e0dde409cc8255d9d96e938f5ad8a40913750e93e2a0c0e96e61df6c03ffd28e7384f65e94247fe6955cabb1fe573f72a9d7be96b89216b0af36584f6f897db9c47005a9db41e7dfd8249b5906c4682d0c13b4c2c2009bf8e0aaa88c1a70e6cde77a10da18a598d910e8fb910ca07f10f2f9897379860394fb75aaf38c0e5a3c986146ea4d517bec261c6827f3630287e003e50fdb2d1747cbbb7f02bf3f88e92af9b99ce02027b19268df9cc10ba40c60c25ae47d7165da753d279990835960d208d83ad1007ac131b82420518a243cc3eb5d29cebffe3f6dd59f24c60b320417214820e49d5c3ce0c5842d7913240492ccb9b74c543bfd7e2142ee201fac040233c0c93178423490cf4c3baee1ed5f2fafcc7a0db11071d4f6ee8e916b9d1fee0db4f0ef91cfdc7c5216387657bd9b728418a74fab25296c6dcdb5956072078a6e1681045128b8a52386736302de01e78d690965d9c2e27c136c9ab981ee0a234af5c461d6235fe72a0950e5ab72af5ae235a281fe37695438021563d4ea277e36f5492a4c367f70622d876866b623e2667a644457af65dee6b8c78bfb752d5c84c4b88ee3fcaccc2317f0798d14f4436365816cbb5c9ab43ad2257abde6b6cb9006ae4e85abad4d8ef35cde7f32c2a77a5d42e7bb1f10a7d1306a122b0706b9fb76d0086097c5b8933b8b4afed37a524ee9545f1dfe10bfa3c1d762c3bbbdef5256ee55eeef49e87cdc3cb4d557ac9ea418548bab418b8ab55098e57d83fcfa3ad9ca38f46851a57b61e017c0024ae3b7d8e957e069558cef886590ce5f77a8d665410e77b400682c345f2218a57283d11c8b9b259cf1b9bc0585693590759a02c6fa1615fb5edd66734d8bf8bd2fa9571982eea3b08c9f6bbb748c0bdd4a0bd71eb9f0e0f2cee7c24af48f97ff3868142b84f5220a17dfe4508dbb096c681f3a9264acb51e8cef02ca1f042cbc525bc0fb5f273c9915a8b9df7db806c27133138dd8b1ecaa5ce58ae1d9821eeff542e1488f815afe49cf62586c15915aa802b61457fd3b880112ecd830098b2875ef646fd163bc9f285945c9c0247efd7baa534cddf1ed86ce84851d06a71d02376f0e136e99c2d8269f3582df35bb43aaa0be95a717fcdea99a099ae26a06629b28dffb880aa65533fd60a318885a0bcf744ff462e9269c542f44a271da9d1e9f812a8d8419b0d3ffb6a8ecf1778ff3c020a6a2a35cc846fcc4dcc44b56a79097459ef84b355068be446f8c860ae3a29c1a7c03341004f038ab8991ce5fb430e97c15265adf639bb2a3740747511e5bb4168a96e2dd70a67030b21bff514f6023f662ef3713bfa5e28c80a9c83d27f7fc84a2a5acb86754b66e4cdd6d3b53e68f1c77dd47292eada1c53514d22552f8015020adced9166766c1f65a4b6c0b8f7a7df819858291692cbdb5ea4c26c78e7ca833a55e141a5f204cf8358910002a3d00c90c34f2a035568ebc8778aae6fe8380dae1a5bb9b707389b7e70950cb64f6c51c8dc61026fce341e2d7e39aa9a311ce077f3cb6c9f689df7170cffdbf172c10c49a6f4e0950dfe2f58c0dfcfcff4a4df2917a099aa268356b2713fedb6544cad54ca04608c9c4dab53a58d70be48a9902cb6481e995caf491351a9c2cee9118400191cb340086302b3572887615b4822e9d4e96322e75ed8656a93960feb0ac7ffc7b44f6a281ddac0086d104d2954eca903c0867d11590d3a189c04be152d7379079d581b5ab2cd60ef238715c5206b698e269444bf462e2698d4291343d95702c54af3e461f184758de5509e4140f37d78fb24fd9004c10aacc8bfcde7b89b98d4d63bb22b0b64d335f9b168c9394ed97d6f10bb7d82b6f9e6f5ae73a0c1b2225113fa8af717d64fad9184cb2000c59765b77232d1c749c636e1a9d0be877ab2651d148f078b32f37c535db2ffe43165e8db21d4663bcc86fbe81b68887e443ebc09e2b826e8b5ccae2f7900d79554af190b7fcadcc27e7085baac0615d2510d43d8856e43b29ca7d775d6db1d950b273c91f1e7f87762bca8711d1903d65e058b16149c44cb2c86f1ac94ffffcb10575ff47ccbe842cb21483e14ec38ed55167904577135f6c859b5ee57919635a13b3d2a83dda060119f609927c10a08d93549e3d21a57592aeb454227ed05b26d97e6665c30b571bfae3f77065135278720f291fc5c9e7e732824de33d4ad1b78ba915122171d17fe7dd4e55cef7ef177ad561bc8df8e835770cf69990f7e0f461a980435d752346c25af3e32d693b8ffc884d5ab9c90ba59e747f5e45261910137f97152d3de0cb3dab8a03ecc808de9a2cee158eea423abbc62d44272fd8d13718c4e384a6637af8994d92abea0ba6bd5dde4b968a5dd12f5c32e0c6a170894e73c7b6a3a1931a16ed8808d06edf4698eddd489e9bea79229b77c2f638959b0e502a70e81d7b1520d3ca58a074ebe58cfa9b672e314ae6925c0492523577d3b0b05e73ab9eba758e2cc2155fa0be22aef724e048d045f9855bdc6da97cf9c03376ed171a14bfdaf099830ba789807db71847c9e5911ec7f06a3940fa37dc8c62b78e44c52517c8b1da290e17ab4e44056a6a064fdff117b36fda8cfadd77ffa928719fcf709bb25014f42e4645a54f26bb5ca50c3ed82527599d3981667ac7ebc4d5abd56edf0d0c9122970f8e804f84f96a84ee0d3c4446cba9c058efd6f82173c98ed6afea2b6ac597a62abf79a3a3cec1955951c3775165a563f8b0726beee3f438533369c28c60478407469aef93c2289e65f67271207b87e78d46b8a3d3905cfd5f29bb83a5a21a2877b1a12929ba1289d9e5ced660afd03586a7906e38d73bb3bdb487cf8effb41432b7026cd29426b17d773810b16836397491429d0d60929f6a23e9c82ff1dca5786210fae029879b1b9a12b491ab24cef34c7ae69b55cc5a0ed756f3670b64295d3511fe5ba38445566323b4c680ca885b53809a28d2d1c59171835cfbda88d9d0ef71a1c545dbe58e3b3d420037a80d3f80bbde9f17cae1799a765181fd79b7c4b6e5713dd1ee4285722427d39fe5fff1c5b856fd384aa047bb9503618f31436fcb368af3520c15db73ae973e10781a4cf8d7bd22e6ac5752560c78feb6e44b0eae86d77d7dc4f3b627b63ed68309e84c39c961fb26097e78a7df195ab5574059809cdcf7dae8c046bfa76047dcd97e080de566c17e13440825461dea28b3cadab272592e81f78a01281df5a4774e685b6f3090c280fd8350bc5ef7afffdfddc9ffdd161578fd4abcb282d2b43f95537cfce57db91cbd736d8087cf9261219e53db2b7b245cc75cbce3e823136e16e00f9d7b8df19936c2177afc398db9e7731a42187d3a185fb7a6c42c4fc89dd513b7b73fc85bb361a880f495da48d6c3022b30561e5d77c1561f63917dbc6eac40db642f02e714da381fcaa75ab9f0af7d2e004c0b96bd3bc304a183f7049be54a2f0216d8fda5311ad930c954ffe75d2b7b87ffdf6018774a25f9b2714e17a3b1e5f76a931298aeb143954c05b97ec0f57ff7a2891c1c8fee52d5d797d421f9db583b747253467c70ccb6898ce571d47320e9963fe5713a7f6a1044f704e77bf4494dc3f3c78d1c4f213416af4fda771b7fa113aa35f45d47c787ad412b46f959f2da097e4653a3e9daefc4a5fdcd35e9bf40c3187583db0a783accbc5f0f1f16856736375ebf31eff40ef726461d5fe5fe8c18fbb0d1e1183973888ab6f44bcb3cc2c47f023aa3b22029244c48875e1e6987289aef8e593fd2c5894b9c213423872b915cf96abf7513e0776131847963dba96939e44d8e2c045d4f3e8d5a161ea105ae3daa2a1afb538c30680cdfce3184cb28cdfece4a82e81bc39ed7ceb59948cdf86619c3175352daaf6811d1e270c37cf55b780f8c39f10fdeb73312d745580645f86a9e1a8af28e5fe0940144a48046b95cbd1a09335a1dc353bf7e7776070d0e490f7d688be0e7e7ba6ae3c1a3b938502b250d49cb09c14a73d12045fdbc01fafbfcebf62b220382ba2e2bfb9c03a90af31d98c68c9f1aa3ed27a22fee1b3efd5dd48e099167fbb5156105fff02d01d422d316730428d9527fd831a2ffee629425ac995a5e7ce04f8d486cc9b9fea9d3dfcacbc0ef818baeefec583226b86098f8400110d0af7085eb04432acee5367bb09e45d26d99beda80477d6ec923c8dd602fcaf506ca82ea4590e7aa235d924a08bcc7c5c064799c83501a0e3c174adebc5893505f10bfdd4e798bfd46eec1048ed6579fde2e558aa27e80946938c6e28e0149c9432c0e775c8f3ecb39aa6dcdee3e2783d21224804bb500b3a763a81660173ce1dee36ddaf25aa99a10ed827c4c300e433297d7729350002a10ab4005487cff0266502ff127339cc18463e4237746de91c44cbd51bceedfda074cec604023a7e7f6c3ed1320a9ab496319a2bde070a7e173631ee6237c28d152c34710d0c9ab0ae759bb6ab8d7f789c4704a2f88b828d0bbd6b96072aaf75d9c0956d6fed618dfb461c8d9b0347e37092ab2abbc735b81ad74a71db295fc1e3aa1099639e6495c9c0b98ed6695168fd0895e82f3478304181cb6a5a67f1a56fe97208e1a1f4ea1d8fb797342af7aa8e75e09392b8d79950915fe0b0f4346d7a4d5e7e2060dca1b223cb8a7df0da44568d2a11e5dab700f4174e805b77cd03ad7f3d7950d377680a8a5232ebc911987aa4a921ac50de44be32694076bb51cd8775065bbf2b35041c0f6da9513719df6ed12d66355221edbf2b2d4f8ee97cbc34f1d8508245a582abf474a13920739b1188805210f63e5445617cb75ce92613b797c81104ce2b39d53cc8f0bd50948f909b8e3af5d4f463e03dd734cb201942c60c6cf208fc2c77129b6361b2e0f728debc79ecf5afc5398fdb3975038e27e24203c383d989bfaeb665df56c99e6ab208acf7654d7dbf44354da3610aae6c9b4a26022a24d181f2999f8f9585036ba8457714ea5b70ce974a8b2cdd79e2502f527574d89f7029ceac4b4d7a2390fc9377d3307b88f9d8dff4f4ff302f03a12e60366694ba89f2ddd5aa6ead651c346f2c9d16ecad674359697e07746b620e9b0fde26d50243022d3bb056acac77c63cb5a44b1523bdf4fd2c6150cbad664411f2c81c21548135d2e58c1ea254c43c6474614ece3db5407ecacbf93c5baab95adb5acbb0480e9833b09c2554413f2092f16f0e095ebdf00eb7b1dfacc7e5b470865b9ff0f1ee2198e33514b5e1cecce7daf8d26a2aab28c0b6517bf329e6af7c700d8c0867cddc31dd52279d1321b750e2218fc3258d2aa5b9bd956db2ebb0e3eeaaf4f711020250047d7cc3503e975eb36dc1b534172eef7bf2701638b8e1c7f5d678142c4a300ba10cd52d0fbcdda0e080837200a70172c03ac2340e836a6044216c10ec257fd6ff785e81ec21cc998aaba207ecb6959a43f2ba05b2e88c7afa082e61587a69c5f7ed5b5d4416fff6238b436552dcb360ddb2fc261b45713fda50c5446e0b6e599a8ab61c6e03248a49c99f36496ccc0487da27acd439741cf77e927278d175bb99618122d4eac8e91486e6ce7b302849f921d773dc6a35d637921311199092bbfba56fc5a22cdaedda9df80accade1417d944e5cd2fe6e9f4fcbdd6366e3540c475c6227bdcd98a2f00b43da087ba254bcb71ebaf191a27dd4a3b9a982fe5379d469a85193ef3dcea944895265f9ed935bed64b1ca9cfdbef84f9fc381e348fa1fc0da42de9ea123ec976b6c0d948235035f99eb74592ba3a6af3c6ac37e5386ca4f7f5740c051a73949d0e634a11df8ba9c3b8c6f58e6f0d66f6d7ece32fd3a75e81879678510e4a6c0e3df568bf3268fe0b2f716deef194533847d551edcefd1e98889b169694c0f0330ef33638f210365e5c91d9828241769d90c28b3c1d4f5134e2a244be68dbc667965d9a4678e2a52b4f9086f0942bb4301fdecb2fa258571ed13065754b1defba61432fcf6191f30a208cf610c9edd93118634b8fed047accba4ec82f5e0ebed15276a1cfdf67c017b7a26cd8c67339c5ff73f85b38b861a85d919d4b5a908341fa1b0eeff7d5a0391e282f216176052f6185a4432c1ee792a456acbc753099dd0e1d6bd41c1f9f563b9f456cc7c3107acbc5106c42368cff690fdb102e232726e22823201ee4c91dfdc79fe6a5a64256ec255d3d73602892beaaa5cdc3f8b7f2a35804f583c5c1b58464401b543f24c4f0c1a2ee740e14e836a545e62c4eb950c66d1959db05c0162840f322726f5a5a98cde37e9916ace84a9c4e0aa1eeb622149a5b3df000c5d2eeeae130c3b466ff7c3dfab94f0d5081c2da7c087e1b04fe35fe2af23e73f1d727cbca72d5b50969ab71a920db13256554cdc3f14ee1341576f2be95984ca88aa9bb4a6dffcbe3522beffce6325d94448bba6d7db2ff90a85348e5af44f71be9b7442d737a5e2b7f4d2bc1272775d2b9d351ff2d210151a5b2d16e7f8e4b74a4d9255800ace824b9ee44ebcc6b207dabe97f8dddc90d5d8607725a1f6e145fae615071287a5181cc5dd35bee108a7e78bf2fdbaa9fc731c438194b7e8137ee855e013262aaee63380c75d40cc3d363633f9a4892e525ee25183f1d9fdcd53687ed5466e617f255aa82d6e7fefe0746ca7bb0b5f8686f80d7cec0d49ae839971f36aab7d5f4972204f1fa86b87351a263461e8d7b3a80e54c1aef9a766390e679acf588e0c26df774280fe016de7aa727621cfe818bcd3721e4102ea207db9391b28b2b180302b72e2d9caf0f87b9d065cbe18cd09434132d4dedb94120b10b54333c6a9849af823f72165769e83961195e7a3b78440f2ccc06569b036330198d47fcd4626515a7c0458acd3a8b2db5aab87d13d9042d52a635536d4a2d654d68a6f1652cf6f24dff87dbbea7ea4c23538f40e6a98d8d3984555676be47e27e3edd312bd50b8af3f7e2e02e14d4626039f2ca76c11748bf0195fab6f80dc1f12b39e0543b85f6fcb1e4235f4c26a65ee746d419dfc84b0fd8b0ff573f790942077671934177dc1501772b6299895746c94d99ad914d589c5d5df22e71cd69538ebf61cf7831a2ecadf76ecaac1e631cea33093475da7e28d8a81976b87cac7bd62e33dc04e3364b96958b6fd07b2113270389381e3e02aa55ed0e07a910a1b15f80a059397d2850aa0c1a0a4a072503875025ba7bd9b346e90ea7122d82dd079efe31d4179b8151a87a456e99fc6a6b5ae87aca593f53ceb521095aae2e917ba4e6ede7b368c2ce7f8e8a1c01ca6e39710a4d38c6b17e23a0dcbc4b606daf9e74cbc5ebe91396c8c3f9bd6ef10bba25806860ce637b1702c891e4a1bab3652abcc058efdcf63f4860faf4aa81d0cbed0c4adace6e418355b85df9b9616c7266351a10ddb9481db7316d42c5a4b7df381181bd0dde723ff219ad417c380f495f5fd61d1048bcc619daa9b85c0a574954a711149a0ba6f0789ee452d6f50e307b0f1972cc8cd725d9da4732301cc26612d34207aa7f6c93d5cdd9cf744c3fe8b2fec00352b2eadd736683d76ac4ae23eaec06a2d7c76a25d984f021617003fab55ffb448fc898771694624d5c4012713259cfc77af70aabc875495d2ee009be47bdb438f8692e706d8bb1509da70f9f8ea3a676a2347a0a22987541805e3c043d9e2462013b82ffc1e457e1343e911c13c60da7ee3c5baf76b66ab038c08b7d778bee86a05030ee0c64e7617b43f5aad7462134bacf39f2227dffe4f7b08e7e8f88d3aa9acec1682ab00143a998f30d8bd0a93c4d5a30ca16a695551687fedb36034e559dea12f0f65316e4e7d760e3758e82ca658b76e5c1dd66e25680224513306258fd9fbd7f687e6b8f47c1fde2f7deb8f7b84c17050df63f12fa5f9ae5e3d6ff3d9645aa117df5aba73bc1af293931939f7c24489893e8b9c55bd1b5f9c9563a64a70493ce8466dd5b89def6584297c241f559e73ca81029639a3cbcad7705ff9eefbc5ffab25050e7f54b6e2900af02012073c87d7129233bd1de7f93ccbb3bcd09da95fd6c6431e69ca83c45f27c46e37edf65005b1737f5a06b034f22e1403d9863f70970a3d4b2ba5ec5b277ed60d7b7f54544a57c820535706fe106a0086979751fbf16aad5a93bdbaa31b57955a9efd3466bcb344144a0519be9a70afbadf9a9cad685e42df727e263168590bc1934bf920e5b34910c56af29a03909dd6eba8bb0e5d44727951941e7dd624f9a7f97e091b598255ab000af30139522161b421e71b60658fbca754d348d95a203d54d5885e543122afadd6b93a5f6d0f1df954efa95e6540fa3167f35030f67eb99ca39f4a190b951b032477f398b17304051ed001d0cbc51de798253a48670ea174faf8ae6087ce3598991a249c19de5433fb8b91b00296e9973ee14c4b1f04d7547d2542118d38b29be6d128cf1e65b0f8a7d2bce7b7f43923295cf41ed20bebc0ba141eeff4321de7a1e1a02925012cad04d715469ace16007aa859af1c6a5877e00be864380283f7d0e5df48c86fbedc5b0f06307a786d4fd2e959443f3b2026430a388639dd6aaa25dfb0f3a2f6a25b70f2f89487c7db15b2cc575e95981c04bf33d4d458b832b9bd751b78ad4ba41ac019487cf79432087cb019f9dcdb214b8916974206789265e0071623a4703917ad81eff88edb05ceb14e3518a9c64487b4f825b4579ff385aad7f6b26f94e5b62a09289250dd1abff70e4471b0101d4ab5957a737a67376342f22cb0d18305241d83a72808422ff7161d07c828bf913848992fc8fd1fe757a9a32467a2819ec9c5b246ae486f46de1f51c7a1d9b2e4a0887188ba22886bc9fe0b455a70c308deddd69af0615b1dddadac716b76976b300bdc7786c55c31710699267592facb8ab460fb87c6fd640c6054b80e652214742ac661041c60b84c6bc58a739d738ec86623b826867e39c949e421d97207aea7efdf9fdfd9e4d5d894cceef28c1ddb03e369162ee77e61d24f921e4b90406b28b0840124c9f7361c7011048f544ccc1225afa8bf757b1d8f49e30117b9761325b68df5e4572ab71f8e7d9603ae3a6ff19b9488b0a2f17baec2780b2042fd5cfc894647f9bf1a35981f1abad794329f28485c3b0877c05c339162cfc1dbe6898bbef8bb0be3696f2a19c7114d92b94d3a7c510e01d29554b1d4e788be850ef35759dca7a2c98ee8dfe3164fa4671b37126d8b3f0ae2a67d9b383c86baf307922029157bc842deaeecaa7f307dd2c7b43e432f833e7d4b073f5c3202545071731a0e1063eafb921ec541f7592d28ea1dc46abe52616d593e58d87f271582a6f7ee10a5909edd0da3960ac229f6679ef6561bab5bad727411ae679c6c87c747aa166cddb4e8c91f7809c67124fde9519cc581e8f45beebe3ba967c11c264c3d71e6a70640ff5491b7ac0719ab70c78680540c6107cec6584dddc488501d5b9bc9c4e55e9df44dcacc9ad452a6785e51f668c8e432b438ba0bf7984f7ea2d0e2996b2f1d2b0346ab5fd95df2aee5fe13317c39ced2f55e420b4982743f85307af8788a7f979ef1a0ef774216a1369a3cd0830754ccb4d0e2cbfb5e184d4ef3ec7138761053ec742322dc926e2384521cb2da9db886202fe72a5bfcd937c1ec0c6b88370bcd10ba22d8c77ad914cea6928f8718fe2f01092fb13b36e51a77fd75690939b3368514f7191efa199b4afe94907d2d6d242e69dd1422aa38e502fcf5ae68c89223cb1921586073a2bf5384affc92a5c6a54c4e5a0442b70e71c942ec91247b89df82d0d224431e6d21b32e9ebb41e47ffcd1658e05ee545cba5a9132b5225e3954678aa90b0a0f87f7d5e852447fbf1b4711aaae947b8bf4daeee487a2aece1727996953ed5a197d17ffaeba8c2d2f4c50d59fe7f70fa7672d78352c98f05704bca7bb36580fc81da632df25ca3cbbe174aea5cf4dcebab76b83f28f9cd610846987dd176fdf74c7feacc26fe2ec2fa91435903bfc732b65f9632557ad8fc1c058e66b84c08f2b0cfed4de40edafe06c867f7d9e6e92b6176385721a7f23a290511dd3ce36226391c54b4a5f80db2b3f193307e8978361cc0f34dcb589b37a8624007ef07b604562e06ccc90cc0da12515b5a45aca1ba85e5611e4fc2d7ececdbd59586f27b2410fd5556688941e29a915f6e8bcf45b6882e3560ee1f9255167e0db2b574b53f18f3335c440129e8e2bfe0c43d45dcfa0e8e38116d0d350c7cefbf7b899c4be53822f4d61e2efc5b60dce1bd132d1d1da7aaa0eed378729e0dca960b06b5a7739f4fb6af1fd9feb21ba4c8f977f8a88c5665a907027fb41c11f50bb198f92817f122b8fcde107e87f162f759f6efe8b4dd15ecef597aad340b2efe6cecc798c4e5fa40eb576558548b9888972a99ba70128b606a9506b96b2ab321f30527a0b0d9129a21c0a1927c0ca427d87ab63081da70220238814580236d4febecd1cece84a932d19029932909bbc5c3dfa4723853bbbc218fa482cd3356d5b818df29fa571145e359263d337b011930799a83eedf22bfcefda0388ce57c6f2a94865ad8500cc60c901c0eff469d6aacc1fc3cdd6a5157cb781e1541389b5a8629caf980a55ec2a7e02db3429f6ed76be963e20f31293a435f7cad898c3273248dca683d2c051da23323da3cdd093d6aa4395916ed6f7c99f394457e2febc6a78ad27fae4e1c844f28d305a61b3d1c1ff523dd90a4e9a356c89e2de2e780852eda7e4ca83e3728d1b6749ec615818929da7b0501ae8b2e38723395a98ded53e1d32006b39226f683c852735715951e0850937a7cf5226a19adb00d32e77fdc4aeb68f15c58105b5590995547cece04b527710582ace783d925e767d38be88f20fecc90d0854c8d8cf642bf0fb41a8e2e66c4e12dadb28ab5bfb7ff93d13faad0d439ea1b2c12ea91e4f50ebbd179ba20bee3ed6fa926e836250275ecfc113aa1cba8c2ad6de8987bd1362b4510a572327d342a5da943a4556b1c9dbb21031b9df6c79f9998cf3f58a95a6fc5c82f0923e95e81ccfaaca19389e3304f519d8a2c242d589514b183efbb9a30fd875e32482c7c53f81f50e4b587d953cf16c1682436d00b124c440ad34f67102727a19dc1d88a93d3596c21e3d3fe38945995eb19813307eb234451664585d6f875198afa81df05bd8ac3c9017fa6dbaa94dc60b22e2abb256c37c29e57a5a2972cc9cecb7f0a19587431d3b7a2cbd2666e097ae1b1d41cb2bb7ae47cd848a1140c4d287f8607064a3644effcf8120922b744ad2f8a0d10f9bd22d1c43b98c054033151e02c85b303e2cace3daaa51918c979a4f4267a5a4d537261f621c02d7005167785b9e20884af45338dc1c8f41a543ebf754c320a527fc7514e9c579b44c62d5cdba1ba547a167de6c99baf129a3a7a062a61dfb20ed16449bd63c260b2f4ea43e77c90d6f9c567c372a015742eca6816b63dc63c133c133be0b7f9d6b409cdd657ad0702c21b02f3293198a431656fc7d49cab53a3c8982d372a1d5b8a6d7614c48fdeec3697a55f4017386bca8d90bb8989dcc9729f08776d4c546f3a099f2bfb197876508f29103c9bba918e215c0422f97d5ee91e192358fd07e4b9557cabd7689c9aad82d0908eb1c65a09ccacc78df2fbd8c48edf79235f135fe9505541ff95110a4392674264842d518b596d75319cca7589768166120f0c0c348cdcb65d4f74fe2c6181470487ce3d8e880e6196ef802626791cca663e6df310cbb39493aa13314df753cb018e374a377dd22ec7f11ea7e091b51130757f93c850d5c75258be497c20bd1b8f38e50a350b7f7526d943fa54eb0225e52698d4ebb0c882369fb5bc7cbd844740e044f376148b59c2992f358d5e5e983e8a3df077d3042a3f3fa71d06a77130a0d3cfab001cd9b5bc4b08c237df56f4b0643d0971959de1728becfeae04baa8daeedb089aec0494e2b58b3761e0c44f39214fe5dd5920da77519b93f2605b07ca002dd32c826f1ba20ddf07ad7e1767c27601604493e52e0dff1fec5ef1a3dcfce39c25fa8ad298d4b27f35dc66638c550fc4792bf5885578476ade9a2894dce10bbc683cb9c192d15545a47ecf824877cda7159acbb788509cb4037d47c6f36bf88ff5a071e4217e253d9889f12fdb5c2e5ccbb86a8ffb2e746e16dafbb0b5a045a2fa27cd4b83d1453de186b4969818e7f73b9f3c23d42f0b370c4ca08497ca9150cccc2dae66c4eefb51d896dcf8f7f70638c713f2076a8963769f7e581693a587faa776d128787c66445ee7164ac31c487f6971fa964626f6a7adf8eb9a9a09c819c4bbedfc217f5b9c48ae76bbd7fda3b65a0a45d086dd4c60c6ddbf73668e70009f21c7fa826e35085f91c696d04e7ddd4a5ad7fef8b5d9f9781e616a05f0f1329eeeb05208db8f2b5ab1d13f1e088cfd79ffeeab22928dbd6244641eee2f1539c83cc42e00563914cd9daaabfc06caae0ae4cb814c904ef2addaeee79f99d1d17733151e421fde657ba905c3f85fce6196ca12bf8e9591c0aeb7e970ccd4b1190085d12bceff6ea1ae0e43f73ad46462c46b90ea8d6791e9b102d88ce1ded3d1dbfb210ee75d68f612433cfb43ce0c86bdb58c56877688de66aaafb9f3f87f7ac50bb73c35798294be2b271301428a8fc3d7fae53eef8e441835b4ae74ae818bee833647533a6ca4aba4b58ccbe775054494c97e27aa33b8421b304a061ae6e950030394a884b1f545c066099f5cee259bd1090e37677e336ae8daa39370e00c515742f9b0cefbd10e668b1ff320026624ad7b0a6ed711d70589a3753d826c45dbd44416875a8975537beca6c046a45fab69bf622bbb8630814c29a396d3c42033b5b0b85988d57467d90a215f4a1b09dd7ac4019d023bca015156067fd5e37e984d7b870bbd7e57fe76db043a3ab97a8dd242f306e7de631e879633a2b83dac65290cefcbfe24e47d680f52591f3f131136f44dfbd6018bb2b50420acb4bcde1febbd758ee6eaa3e368efb1d6f42f527771e74152de5598edac303be667ead6b8d2605621cccc4a573d0792546d3f8a5bcda0baa1041786af6479f546ec1bcfec753bfc9f004d2dcf3c6af91b5b4bc374f20e2a0fc9b375055849b5e21d1f4980474987dedc21cc41ce0035809bc6013387eec60f134f7098dfd42d8520b859c45e6d0059fd72e62658b7fc04b798357c69dadfd9b47532a19d14e8e1208a031a69a62f54e14d26c1317febf98323b111e03003155ef8349836bcae441c43c548b31e739ff4980adcb38a4e5d1a58f489394416a8735deab808f3f0c15e1c2923ce1ae9fe64bd654a2f46fcfd8540cf34b2f7a279791690cf0d64a40573efba0f66273b2924c62e13b05c908e5b610b021c53da6d8fea49c61c5234b4188bd6a5c761db03c639f5a24b443cabee878ab7775bb8e1964a5778402648e94264ac383e4ead5ab1047f73319367a0496c1447eb7622a374e07b2e0f4ebcd447201e378a1cbe259e6f1bb58dc7f2c9dbf3eb4e3bb3cad12c91043c02365ad906a7138c49c44e0c88727855d4b01006c5482587071f7d504f5d54ab24e5552edcdfcb542b27eb232d2dba4072dabbcf9f3aeff057c6331f778750e07d3f7cc882c679c088c30d947218c00c82b54746ba4d9c0c39c8ad4cb06ddd110581fa62b909c5a53dea728088306233ed13bb642f7f1bc6235546eb4cbe91e562a4b25540aca39b39448051c402ba8dcadc8458e96b1bdea01a1bc2b4f36ac9f0d71ccff2d7372574d59206eca260bd9ce0a079d7eaf05b8e075bb18106a67c0ff5c4437b3ab2a290bb351ac45037fba20ece890575844db8189c13b5abe6a388678200f76324b0e3bb67a347eb5d8363ff5587986dac198c65e62153999b6d3c4a8c6e9bf99291b277f3119e7b7b4aef051a8ecacce40d70ad2dfcdbf0361312716a7c8bdff0a31ed6b70e183be08c6461d16c6b4f3de60103ffe6b53d74fa45776fb25aa486f15df636061dfb93c9010871c87a79fd9af9692f63fb5a2aff40cbf9188dc3df4323f97759648c23ca7b21e505c6576cf51c8f5fdd69c489f6eca11cdfd2c5c9baacbebaa14ac6e27526e9a6ce9925c598212422ca0adf78e8b713c78f6db8bdccb8e1b041333abc78961e39535494f01e79f59e043181ba43c542086dfd54a047514142bb59bcb14996bd7c5dfc94fbf9cc63bc94d567d28b768ef51dabfbbc19f34a50be12ee7ced70861fdc9da0a4da4f5f58a4e6defefa2d2d775df5b150769ff863702c8f5ee4e1e4e1b74252aafd36d50e345d637edd142f82ff3b26a938d195ab691b00e7d1d57c07a285f27afc4bdf6427033878101d7de33383b4f2a067f646e9ba4800a6636f8f896baf6838e1b52bab9aae14bfe719ba1eb36412335bff93a0c179574d984eb77ed2234feec309eda33d819516c98e04842109f6742645285c3bd87f081f71b008129d1096fdeff55891b23105ef67b880ee8925b50b184a0387c7330e5a5ab558e90137206820765eb51da63fb6699284c8128d321e31cd333cd455ef0a083ab1001b89cb6d4ca211b3491c886b13a025844b1c4ee98c9ed640dfe6e35ea434ab73adf75bdb0d014ab72dea27b5fbe794f3838367bdd4a4b056368cce7d7800acc07c4a74723ce487e44c274866014e174ec5c80d1ab94af9f55eca777d4c75e8d7fb350f56a868bdb9627aaafcc6c4d9c76920ab94568938ef7a98ce666beb1dc3c040078729865440c8b360941ad037ece7eccff1cbd442acbcef85027982d02811619490dafe1d8a77fd69985033e4c1f97a9341f2196ec637335f095dd8c562b6f5c458f82795c8abf697e82b21d1a007148c7bc57526e4cf2644a5746ae9ca95a8b69f3b116355bbcf01f8811dda19f3a6a3ac6b4be5fd447d12d782905a2fbe5ea3ecf054ccb6e967dd1009b022575b2431aba18a3dd373b973a983370930bb69c4726c9afeb1a7fb8c88f4b5360195bfb01591ea2a2071db3447ab3a019a9da224685e0c3324211473a3b7b3d14afd07a4a14129f71a2ae059a226ca8e39582d2271003279b062d729a4b235ffb6de8aca4da1e68c2bd2ade19f4e8724f30921b7bf612cc06b93dddafb2a8629c3d81d2e0663f5d8c86da940dab07694d4876aad14407b0874dd29845271d93ec05a54ea1f8a0d3246a2a5f1b2fb0ba03f8987f6a4e3205dff8b810de11c09611167e341a618d3190f2d02c7896c28e61e405a0a15f49ee74f936022b4c6c20342116cf433060965154cf705527741fe15559614b47dcfa6b3922684d8338f8205145a3ad8b3080ec75c1ac1f48d1df2eb1fb0470cab982b0b8028be03662fb489bfd9bbff7578627bdfae8e81ee3e98c8515df1b594ff0545ed686d142a59c3bebba2c673b3020392b2b2fb7c5b1de54978c033f1c84516299b04a2f51eb42d1d86c584ac850e806ae8a4ad22f56b3b3050061f0f7878896ed8c772f95d6dc556edd1d459526a7925480753505a25ceba255a57f8bf38c8172873c1355bafcb09869280424d03f2bcc1240bd9a60c21b45da90bca221e198ca58e17f82b3007c917ed1b9caf511620622d916f761182980f2e56a0e0e7803dbe4e68e39848d57531b48a0303148aea1ca2a1cc1c8ef1abd4aedd786b72115c19857446f416d77b42bfc80907b110142595f56245e3319e29872ad794b6d6b45702bd73723ec7ea8b1de16e3b213642f9af25b94720c29780048db150e3e544e9c86d35606e361988a535261c8960588f1e5c69115dee358c7a961fff841e2062c0afee0b57b4cf93f27e5726bedbc11726b247c97a1aaca9f6deca0b898b7a4d9d5f363e89b5820cc8d6b4d369e26c088abe14d2b19719cb1b2cbc1ab925205f32790b7be11d7840eec631e3f21caa79ccb7795b747986231fc491de798ebf71ec8368bd5bc9b593b96c7f2940dbad8033290f5eab93b778b8315f6320213b16a6b67b4eb750505c333e13937ff9c67ffefc9ef55b9a11864a71c564af836010e8879f7386c0618a1c3adcfa7ad8c47d4a28eef9f71e548422cc3a6fa023ebafda3aee4cc484cff9f4df4b3dad882989aef4288256529d41faf6009df9ff46f0d6ae5fde9268affde0fe95ae130163510f90797be9ccfd5f11f41f20aef845dd2db0e1f3276d03f70a95639305625479ddeb7406c763a3ada2dd6e48971b07195323d40df64d0a6aa0cd936caae3da4bb1f8322a6aa097905c065ab28fe8bf3c5a07e11b6e5f1ec5e23a97895a0f585650a6b4d29364d8102a0a411fae93355b3df911244775a0fbadb3b5cf0b210267929f378236d1790b95d05654e01553c40abf2ab308a8574b256efe30277c4109979ac5a4b4648413580c9a1990eb747f9938011024fbe6e1bf68bb3a98e424fdd17be6a991734a39acdc5cdade7f5184926014f8b8d5361ec70262316cd5e65e670eb28294ce0d3a7a2a3bc65314c1835943636105ced91d2d85181633b3fafe08a4fe542d1f4b72f11ea63e8a477eefcf734150c69c1791010a7f84544469a11c2c8f2bf1c2ffe91ad8564028386b654d266198d140ab62ed1f201852dd3c05eb624242323ec77b2947b20757a1f4ac7a7c6a08cb722558364e2efd5ba3adc14b7242a3f5ca79ad9551f2b040f95c87937d3373a5a64e2775c87c59b8fce5bab8196926fb44166b98c39111d8cd23b0c0f2363a1ea0ff080b9d4b4c3c90c4203281af0403c448a27c1dfaf268e2b11a02e7a1020d72e7ddb119f788707e23f9fcc3076480f49b66744bfca78930cc51ab55e5824a20eef4875c601be26204a18a5f75ad49259052fe776ada063d8052720f5f963cb7791c88760f0134210ab103ddee60a01c74019d64af1b0b4446df10c6817b00fe63dcbb2ff8ce015c7541bd7469675226b5be6710799e9dccc69c2be496f5611c83189d55da2846abcfba699a2a9939553054c5b13f3ca4ae008f40b03dc1089046169c0ce8cfb48bd9d65bab4f9cd99006a901615aefda4ac62e3b5eef1c6da2c750aa9ac3f86ca89398f77226f43043e36b0d946290a1dea76468673f8d105c8362912d38ccbe962467f6d163bd88fc770aac0d722c17bdf1c5346fb1b2a746b99b082aa3a37c98c5b2991056a5f450268466c8f42d833d813be20f34f4d92a9475526f2329295f63650a30aaab1b2565dd48cb8380fc5ac9031ac058a89404493f738fa337da2a239470716b772b7ce589258fc93174e4a22df1d19f3329e1f92e38965c0b1adc9bedbe58fe8364258b584fa15fe830bd8bb82a55e63b216e58a9978ab9dececfcb8c864256b05a4e6c1a893c17c7919318fbd3be9f25fe9929198c4dabbd83a4d904164db37550463fad802006c2858f38b7031cd21abfeb89dc7f1eb48662f17b5538f527df6dde922c9910569896f9320ef6656e12a6b4ea03aadfb4cf1b69e495fc205a05dd0f0f316dc000fed1b2e369cb776fa42d9dd1f28723422930c076f76adf4af46fc0c92499e8f9dcd56f52688f20dd3769eabcd070a268729ca6137973729be4c1590b246f35c2b6134c56cd4dfd585a42d0553aaa13bb1682432713ace9c81029c34d070e9688d2f7d6749fabdfc4aab92b3003a7caf83cc5ac2278223fd9037ec082ee11435b045c290ea737a8c54c447c2793cc47706682799188109c3d6b8c623f5ee945f0a28a02e9674f13f03f446ec26fab0eb6349c59f14124d9041210ff0b63e414eed88fb63bfa3c72d4026dd8d202249b965c90bd4e87bd09d304a7ab48c81ca039baa92215ae2afb7f9fc85627e127a741fc64c39fd7522e7b813f7a7cfb3692c5d49ba0c056bbba857f52f4c3d95882aa551f5a91e78686d665e175d8918e5cfb2c9da539ae78ea9c7b813b395e382436f443e017f4bda0be02f92968b5bb8b7c20bf4aec1243b1b3871f3b88d7636a095fbbe78500173c9eada41cfce30e7f9adb7070f230927681d1c366f0fcb75dddec57e639902ad6fafb75ad15bc849cb5dbb178809bafc971d3b0e4d62226d34f4318cdd127b98507141397388ef855eb69857c6b26e0ef5741119564381223f39059ac1288b31eca10b685fb162c0597f6fd001a46bbf93d8de2c8aa694c92f84fd364f4f9edb21b1010db076741428063e49167a6fc62c6fd26101ea3a7dcea8a252af98858b2e086078b3125a8bcfd6fb479259d678599948bef265810d37e80d9d6960b10bd0dda7486ac046acb32bc1b4363155cca09524d9dc467089738822e880dbaf0decbc0ea2a685e86e9c3f7216659a695499935f668b89dc679cbda8a5018ce7fa41e35a0b4ede4849f1782cf298d9d8794bbc1b678044dc654f866ce136554773cce07824b5eee783de6a659b8570573c1a8a5f73aa28bb04bb13dc6f729b13475fc07927384fd6f43c85aa28e99637b622cc46f33bbb8fd855bbfb85469ee4c2352b2f7c89f0d96fadd5c93f28c212dedb17b4eee943fa85f5292f9e11612feb57ca7e7319af8ae77706e6575529593888e27f9e117cb51ae587df31636406c8fc0577b92e933e79d241205bbe42d74d4101b2d94ecff5a201a0f9757b27ec7df353fe0f256e0588fecaa98e92b2a74547b3c098a80a61410e5a511f5a094ec414bdb2e244384482eb5abf292ff9afd54f07decb897e9a287d6c32b6f123a5dbc35d1f25fc58f6a52c6fe00d519ce6158eb703a1044674912df25406b97143fdb2229a9458167e5d9cbbad3d9f350cee5617a419225598e66aba954b066420cb7d1ce87f6414393f55cd8316ac6bd6cf8291ce6af05d937b14402cacb7a07bc0f3b22f9ae09a7757d8334d5f2d3c83aa684daf4bf6bc7938eef1065bc682ebb66f550c6f767cf33ccc93a06309d7a56c8c47d0f85e80402e262edba6b5dd678f7e859fa6414277b3558e724706555cb68c0a0b1ef8734ae142d56a43b6f354fa996121470d331c7d5e4fb782b1203667e58ee8d2ba5ba079abe4e218cff0121c7168f34ae490385afe11040bfcde6c99206f445675f4699b0fe6da3321bf9feacc3d4bd750993d355246674deb31e45207daf7f7405d5d88472f470ee2cee75df7cbba63a0b59b78c7cf9a78b69230f9d0344e66facc211236f5f41cb7874c9ae58b7e714d2091743a42655c1683cd738186f8fca37b5b45ba0af83749309fa40714934e63211833ead9a34edf478d66fb8adb05ea082a94979dbf87006f8373583c2b012b913e0a96efda93a3d4c3487431c3ecd952cc398524b8e71b85ca3a7025fe533deaddd6eb7a9009761e090476f9883328570bcd80459bca7b307d483879f96a14d1f54651db7366e22db34018ef1bfe964b9418d084bfb93e2bdacfbf4ec58351087c91753bbbc604d044f3a77e0db15d937a7b25999ce700e7dc332fbfdd3f5f2afcf85f9229298c61ef8d1a2e615869aa656a1cf0bbe6a394becb1159f7d795e8482fb1e3f1f4b24fc971b368d8773f71589859c15c6ab9b6cd6ab2c5e5cfa813bbdef69a461b7cfb23a55f1997954a05bd5403d71f3773f7cc7da79fd2901a522f0e699c6d8440615841e76ab3249b81b4a66ddef4e5391563a2fd33ef30625affb68ca15648c2ab666cfa4e6071733a8cdcaee6c969bf0ac18c130cfd42aa6666c6d58e1375317161f386fd626005d93ef906d00d06d4c7a52e6bb77116e579a910a8a0442d0865a8651bc43d921b8f2e008a4de215b7f1ca8922221a1901b337d792381218f38c26472720865d29f1b411a1074d500e50ab77baed68499f1ae34d2215bc65804d44c03dd2b5322f4242e6c2b59aeeeb6fd05232421a5400765f0dfd4aea5fc4a813be6097544d5f6b093446451a16501d3ce9b6991186416f57c70c65ea6b79321e8774d650fa1b37ffb832dad3449f266d5776931eb2131a664a806b44f5f15043e80b283136d6e8cbaa22ccbdd83e0015dbc3d378538c7081bad147ca54916c707dac8cf57df41aa47a5d9117b129240fee7c428149e04e946f3c6ed81f059f2feed66c4f48cbf632c16330ce3c5bf6ee93b43ef0804e4152a9c054d712fe795d3677a3be701ea0af85ddd96c2e72fd0402e7eb8813c6edb85649e343f935f5c0b3f7a6425db6dd24d08c7017ab73ed15063d156c62d9483b5fb015d35c78125604cdea0cf5e70cfda3a24c16b57fa1881529d34a78bfb1375e8eda258d58e68b1aae23f4b7a27306a3afe246045312bf5be8d5942c481e8bad8a2b7bc4164ebe49109449652cdb12a4d61595607bc55dfc4e48917fcc398539357d69394e356bc1a168e9b776503d491809ca82125ac9256392f233d5dde268c39fbdae4c4c2ca7b4c7582b99d634c97583389e6ff7e66c22dd70e46e073a0e0e366594ce2cd2c9c8fd433327c00611807a7a6634b94d600e979bbf5188935521d86f7606b4075c656fbc485d33b5a779c29344fa6c0f9137dabf98d670b79d2f09306988eaafe55ad61302b23b59989bb80aa4360079f074bdb88916d7516c469a06b891ea833d320b86a39d802952595a0bf5fc2924aa1af87053d26c54f0f44842f7b374b491f60ca17abb7ac5080ca6dbadb3546fa73565a2df2be7bcff530a0b12f501bbc7d36f41904e3f6e2adbb7e2f8056eac9661137b3da3c716ea947477e4fb5e6f5fcf42568c593ba6eb521233dc18246b26282a958b657d0ab8214277e2ae579c1fef51e948d962ff9226513fe0da950cb2132ee19a4d734f65f59b6373373c775c521d7fff77a816a1dc4c38e895d40fe7e1dd15b7558c87285ee1d1c0b6264c5a7ed9249f6fc1b266d5ad2824242f514d54c53d874eccdd1910a057ebd243c52ae03b6cc4b149a1c8235f76384ba72112dcff60e2d28a673a9e8c5f2338fd7ff30524f0e1679f1b513f73d0a47a5b4379085e90c50c8f40408dde629a542c34e8fc46dd6d61481c77d70a389b430bc8e8570463c31a9df6b6fcc93604787c2b419b973e8d93736951a9682b5112b8822f49df30c806e9de4986bcd6e0eb075191f9a2bff1eaf1a693201bcf1d3e91d99b4c856332de125896f4abd0a183c6e7c59d2a66c4f6f4707054916031276af6b0281f79362b6618cbdf019420ff440959626beff86980fd98fec03651ba1548d91ca875b8231bd227002e7a2300537daad90578bdfd4a0881cc6de2fccd76dd25f55ba76638fb8de792edc07b7ba5422563e68173460d13764982fc777fd274c1376ccd1d1a134c7c81d5901cbab0385f7e41deb3053cde20d7c149cf9beed78b6e021d2dda1bb53065af22eaf69fbbbbd6f0b4c81b0ae40f275a44b8bd1ec302573d55b4c7c34df7c170d08c1ae634fc3b8bb9f786dc2274cf08624a11407ee73464c92cd24a6fc571356102bb9191846b4303d43e7b5ef74eb5c2b61329daa4a806bb3d51715556794508044cb15de5fa51dfa2d78ad33e678393a5faede5262f17bcb81dad1b28dd7701df100dc11559e9bd12b3712ef5e28e7942886cc89fe3cc8f6562c0cbd4cd3f66d7cc7bcc5d93b147facdbc4e8d268b8ae2a78397a2e97bfe77a37a9b97ddd7f084c6c6db021da4b85eb7fc812a86c99f07416d53fc9ed5555a96687fee6fb82efdbd7a9ea75389a33888b07b0fd5e6439be47ef79a377d6eb5820b6629c27041467f4afcbf0921582cf42f9f71697d895fcf8f2d8777c48840fceadec86d2db33d1d0583dd66889149348711b0c644bd60993ca0d61ab23c65f31ed9e8e49408616744a1c0caa4cd427088c65e60fdf75595d13075876a5fcf530d407558a6d51d95b50dd3cc13424818ad6f32f72d24e19d6e0a770afc56a77fee1a2faa57468843b9d3d53db6bd56ea9579b45b34592b63d0faa9567ff45a89a256501c967c5bdfd362ad6b3805442dbeb282ff70445faf6af4f281d6f179faaf4ecfbff43442bde1c70cc29d2ac44a65cfe4e4c256add876f7acfed0e8078f7e4bcbe9d366ab15b60a0a61b12552b6141e2cf98225479620d307f3c2a3f2fbf8f3ea9c68bb288c9223bb3e8c0a487ee634e2fda0b08d397a5bea6b9573e0714f0dd03400ed57ff494388d4355f01d271a129982428ee2d65492a77eff61c951469d6f4b162b3c34391394b4e7bb52ed99ba6a18a9484843d21a1181ddb3ef49c31d62074420e8d320fefe498013e8f06ce87066673c578a38654dc2d220010613afc2610b218d3d7c32763db832f307056952ed3f0e1ddb7e0843607bce1aa28e3f3719968805133ec8449d673d45c875037f20e17e4301bfac87c209b4fbc63e2e6d8677a2ab96ce7276de9202e0874b037f95119c7f80c8f9da300a4edced47091abf08905cc443a0dbbf74573d374eb93fdd7c5e24b54b83dbf3137f1c64b791aab0c09cf3d11f0a0b41e3b348d163a8bc4716aa78c74a6c83a96720189410e68ba7df0ec57818800284271b856a5f64eff55f541c62c8281d77f21b28b50de2e923e5a0a18e5ab1d8ec3320dd034c98a346967bc17d77b560ead67ac66cc0bb9b5112342b9dc6a2ad0a780039a3549250380f79b5270eaa4af4a11c5983ba6dc8a978df909a18c9d8ffcfa94b1c7321a1514539bc02233173a08f45c3809f76abe351cd06f4fa5efca3bead64836a1eb1f0d8937e8c0794ad3f56478900a9b5769f70e17e5219c3b85874378f69a3eb9b0621724ceaa58de98ab18546647b233d65bf9c48bef304b81615dfe7ede1ff4fe68cc6d3698012e4ceeba61f419e612f201854b82ff3e94ee764609feb935d2ad26a073d2f720dd9fde79fa9e88a7140651c8b08bc3d4af538f6e471c9b23a990ac369b51abd7baffe0cd7b8c2c9ddee727dc986d5a0715fbd41c43f2e597aa0117fa126b6e430616dfe570145c36d7e92f6b77ddb71459dac01f578b57d9061aed5ad9aa10649070276c562b73dabe891ab4785a00a571db69cb232557dcc0772f05bb8a5ca91c4890a6635ba8bae407ed388afe149c389ecca6e9546632b99367e574501fa4f3974b00f2da84a2fdbe415e0dd0e51c6b937a70c779e928081c7e31148953f500f5c42947bc02640333c4186f2a51a31d9ed785366a94dbc89bfb022e6a64ab82a51accebccea35baeaf2e20af83a06c3f36acae1678dad1312f28dc742a7471453df3ebf0bd216f5dc0a41c4a9b7584116f0c5c74e840b40082abb0c08f47d1c81ab7d3581172ad4db3a4f15f8c3a238cb55fca4a12dc3efccbb1282e55c3bfff587e42d835a24da7a776e9da9578c2a025067ce94504aab1090614d9669dfe10fde175b962ceae7005f7e408337ac5e3e291bbd95196e8d5a2ecf9aceb227c8cb7f5d32e2385d25122e56665e59cf002c7b56811dcd38b5c757e401bab053056943967a31794e9d4d57c7392806f3b02d1e7aa93d41d7b1bb087ee2903ff49a4079e9cd4089a3dba6f78d4e50fddd69351979761858ede98cb9917cde5e3f5dc1790d71e596b93a77b30f97ed8dc7cb2ae6501febf0a5cde398ea327a196bcb609f63d90b821131bd3e720bf375641a5739d93c3f2935ee9dcfec700b7e25bffee764e51402a0f6970842397ffb4de44de77b935a28f2337e651563a72211264a464d9342a34aef78e862f6f6e467f82321a5d91d92e32aafe30827460ab8baf5684702c3db98bba52835918b0980c819da769d4899dee2802ed010c15f6ed8a73132bfbcb73175fabc5f02657771e19cfc67744df77c2b90a9d167fadba44e80d3d66cfc496306801063051e34b3dddee73c0d15dd83886119faceab0012b677199c1de41851b2fad2309f4488ce9033031415c2fa4692fbd8561d67107d07308dcb81c1865ace241c219fb6d140e8e2b2e1861c1a31283c522e1e95e47ad06759998d929fe8e1661320695aeb70bac005ff326aee2dc6d0b8eb147dac771acd80eb8c432d04bdf3c7995e3b62c33207351d3e5f8061dd6cf0154d18c3d3a8cb1bc4bf43f8d6ded2a1103a25106763b859af8bf69546be12653ec26d83a123aaa341c5160c44ef683ece5bb005d36bcf8b0d36a22359300e08ddb45e64c4fc3ff2883df7a48d32d2e79aee80b2e81c9f13d45a3e0a535b3ea3f715d5c9da9230ac4df6c13203ea2cd48508ab8536eb19e02ab8705176805a32cc69d582d990924524ec09ff78e8b0c7c5125295dad32082c914c172decb744a988968f684cee482bfb284c82d597938db668a06d242e04f3c14e0bf8694fafbcb35c65145291a8dee410706fba42ebc417f56385b196d65451b3bbca0e65858869c99da2a4aa238a912d776ab4d700c64e822d51ad4b641eb82bb805b958cab6c445541357d354936bb1cca1d0bfa39f085f064d0e696bb90ebc4fae8ceb751914b6b37a9949e0dbf2d4d0bd0f98c58c0907b3b07dc3af6447dbc367473af76d571309682fceeb885ce2a1bc97b0cbe90d3af36d0dbcd87a32163b4df20379b351b1da5c4b8dd1117b76ba18c818f023646f6f47d5955382cf8edabe795fde1b42694f499ed27b04474e404ee8b6ae74b5ebc60e469a4de3730550bec0ffe7590fd2482ec31d0ee9772d5cb270da99df4b78f382e4510c5f6336d5f7811a35cbf88ad3f82ee699789e87560d5103feea9bd5f1b4bc90101998f9c9a3c115cfccede3a65728e0f8e7eaabf627061cb2a35f694994718b010f29f4adb074923e1b6e4a5c6804ff8cad42a92241ae40614563dd6d937082993ce6d7a1b516576bb13a57e6b2a48f08954a2ad77b96c1004d59fe99b62cabd8aed016d267174478bd0ed8ad73b4c899a79c83a65020d25ac11c35ac5f3acc7d8a7f0083c638d605665fbc1aa5c67680dc0cc1d0eaae808eb3d9664041c182db69b2e330009ac59fcf9b0c1079629b2804f3b6cc0c3282d8e9ee6abc32b9d848ca55880c089e48bd3f4c139c82a770502d73f71082ce97c0889895b10c9c60bf5b581a40d7dbb523c2e7b92fdf73c2feefe2ae1b4a3c2c416654203e5db776890eeced91edda03c084ce0d8c2c9c2fb400dabe5be7aaf3ef662292ba85805dacc44e35caea72e7b9e76535efa5b10c27150103070da21871009390c69bb8cda26de33fb89c8eb95cf51a6abbf2509160dcad2db97e24095b2975c0afede2ed6cf9b23d32e0df2341e4035c0f9c1d113e109811060841573204d6469e98215cca998c0dd5346e828b8719270f7f4e0728411b15841b5e384568e0a6f892c4d8b6cfe292a242d6964d2a81c1bae5b73e8b8b95cef8b5031079390915f72708c0108cc2ba59daae918348ea17bfe33dd65ba8fff4ba35cea8fb7a39009ede7902e55f83dbc35f0a6454421e068b8f2abbfac7cbb78acd236c285fe999f9aec5789cc789714a9df72ccccb8ccb2220bbba162a98c382e44e58daf22edb6c6c23b650ace9c8d850c28b5fe5608d82f0cbb367f06600d4c2c18eeeaa21eb576958c447d4471b708d2b8be68763f01fd884d171a92d591f8f4761bf13783c3a972d4b0976e2cf3355190f8c929e4fed768f8dacf0590b9d321bf63bfad1d639c292712b6976cc57157a092f7f2c9398cc4a8e43648fc43dadb4cbae1198de2c34449e4bf501ccf581d73bd7ee913aa306838f62f4e205046435aad38b4acb01f0829eacac8898d30fcae3bffde3c840f04df41dd49c294fd61971ee34f3684dd54125f505d916e9e0d4b048be816116468556d4eb73a9598401ee2406bef5469a309ecc32041d14055c45849b93b35296271a81e4e41f7a6f3068f18aae8851dfe369e560908d6d7742ac71d17787aa6b15b7d920a030914db7b7cb38ea69bab447c8ef48c5d0a0a4f469c26d8c9087fbcbc88e130cd1c37097338d5330dc9c2565513042ba0ab68783be048903743eca8732bb445eb988e693d427837dc43c7a2febf26d3e1336c068db894a4a83e84f9ede07617d6aa15c976ff3e70a067559e7684cc616452357f332fa06ed10bc9ed6d597e3d32d2b573403db880979a27db1e75dec3d594c9d170ddd41d6656273c904dafd5ce1a60007eaffa468fdc919f473c51c62f44873b13d8ddbbbc14b3d42350af4f97b240d6ff9a766ab022400dd9776389fe66f0c8b6501cc423ef90dd46d5ba4b43642d1162d7008362f65c5b14a3c6eb95f84d29b9f7d4d8ed8bddb56592465c22562faab37ac278d7e95c9f567eac0fd9f1c62bde683c207072feaf65e70be8710ebe41520b76b649a32803c51ea62d2501dbab3107b563c78d585ec8d2042374e294004c8be6cd93f2a95e3dbae7b7bd0d0a6d8c28809db658efad3c94833deac80e7f5d71810584f141aa7778dc1e45c3494dd3ec60457311a521eb70f6715c84da3621a4245207105ec986f85fc252cadb7d7e25a0485286a8a16ac3f976b8cdb8b926b89a1e0a95210bada99a1e33cb9d002095ce48cc6849bbecb0fc3b2f96ca24c61ab2491b84643fa8cf81f86b510eaac2d2430f705dc8974e927cf1974566635e1c573d265d05e2092c87edd4969bff6ac81bd7ca7237c64260d9dfa1e6cf9bab238cb577e3593f0ee495a90cd68694f9ed2af76ab8dec8a287e8978f592a5f3a2f3f90bf75a0f94132952f0a79fa2efedcefa1bc49841a8889511371fb84c0f63bba6a14f7a4e81ab99b7002997cfcddaa1f5d74b657a9b925045b060999a2f113b5d3c621b5ac07591f0cf4fa526b2ef84a1fd603aa78bd789d13973f9f449155505b1615c26a2eca3584324538c22037093028377e229cc3002521454229ad551ddc213c88be4f1fff4c196e5f1d0ac3abb96f00fc392f06b576f1e092691bd8f2c52cb9574f89507b6ed171966e851113bbb478fc0828093d5a9dbdab54b0aff6c4667f0e426a4955851e4b48e39ca752a7c7e69ce16a85f949d0c6343905c369237097f882088b2e20da2e7f3343e0b9074f67e5928b66a829de402a43e6e0fdb797cc53437d7da35b7ec1d11905ac69f20fd6f21d7b04b16721430bcdd886cf8122ca0a3d4b35dcf802a8c8b791da0fd102fa1f3c05ef9a2f358562c0bcab04fd987cbc77850a5648a5b8f87cfc5b6b3db7f787b84203a4d30657702c0670dc5d53c876ab239dd877a1d48ef279a14f005bde41470398b0860e20fb9b0f9fa5ddb28397c1637853a6fdd816323d3796e76fd9923c3a9a94d85d916bf8f7ef4906e7c7bd3a813c74f8595017cf2620f73369ce813bab5e6a8b8c39d7f67a10c56dfc938c4d7431b533c4ae7425d0813534431eb3b447838d49900e92a3746dca6506be8b4ae6501e0e0bbc4bcf28d51437166147b6b23f5c1572892a7ed928b4f77bbf6613a60bb807981362277f2b2994d25351fbeebd6dbfee8e2d6af64543d5dffa43e22e3b56b60980b9545f2925ddcafcf1b5256103c19f1aa2f612f628b6fc405c018a1a4f8732e8755acabeae8271f8d62df7a53bdbb4c21d72cdf6fe465e54fabfe2c9e4a11ab647640145de94155f98322f8d8bc1790a4e0e51f4a170c82015f29b532c984525e4ff4620116276f4db2dd1205281719581322b4e2dc73ad7948c4629a816b2224531673414c5ea77cf29aeb7abfef0702d705fac5c8fcfd924b1ff3b805a92f0a1201912b6b66a5833bdecd59abc90933c50f05214300c28b27e34df0ca89ef84e891165db60ae663c24ef0a1cbd3e5a8c9a9d1b4c0bd161b1d518cf56f39d319aafe1d2ccd198dd5681510e9309eb8ca7f1ef5b6ead702808508208f4467a4dd992ca67eed3f001ad6d8e7b97668414c5d3173fb53512805d6efd99cd192cad2d23c5df087b7055423a23760ba3ad0b9d620171edd9a8acd6ef988ca798cf5b32fd8ad9b309a901450fba052745e2b52a7e18b01e0fcee0bcf71ee7ec1bad570fe35773c7319c11f95fa844df4af0fa328041f7d20fbac256d9d307907725cebcb960f23bb1eb815cc3c03bc871f268cff0a2a301fc294e4a5d80f274c54b3111d29921ebcdc6c32a2ce1403dff33de2f4384bafb380f51ec7a9578e316fa0faf978718688c2e564aa6294e066d8fca6872ea55b7f9ab6b51a3b11900a735ce164608a48564c30d3c206ff038b61706ec0520ffc95166daadbcf251c0096417a11c8157c175d9ac6dfff4f2767f5eca3a53ed52b2be7a705081270bd5d4d981ee1aabd3e8bf915a179010a9ef9dc2085dbaa72bcc6c7b4b56eef5d4bfc34ddab621acf7fc172f2570a26c5305c304f9c571a9145eadac8a30399d44d683c7ce086f3ab723ff4be4c0534f5b7a37366c24c7e45756bcc946e591fea1b4e4a30c3b966aeaa8b7df7415e2ed7dd2644d7fc9a50589827718109e96a3a95866451a8b6bb8b4b106c75746e2a28873f748cefaa83a57bb177ea7690d3bfb3e395a7b7461a661af46a353b6299e6a567abda5f6f17c194d4fc16e57b579286e34bba100cdc5bda5eceef6f1eef7b555d638e1aef7f7692645a7830311ee8f4825434059939d280c743c433124b1053655f432f44738a579ac48bf99c449dd6b1bec2a0f60f6b514b9c3c66518245a5d9091b43a0bfc99eab3b1060ae785fcbac6d52175f9a49fac4dbec956d73db05b2c5f86fd7ca1084470e18c098b1ea6e2c61f62501a7a08d4ac6ae4d19f56ada5cf90af893194bb5710c57817b68bf317d60622c53a1f032fcc4a0bd370344d6cdaa6392d6ef8671823e47950587a1d5b374882dfdde02094cfc66e03d9bc46f3af866fe751d9ac6908f6635fa77af1579df39fd33cd776bbecc6a700adda91cb9ea1bede068b8c1ae8a4db5e4be1137694e9296cacba4e2cb30f5adec5c8fd4404c72ceb06992b3347a01186bd93c7bde02683ef8c4285c7799fb73a347090efb115b2aa7376c3c97417bb645fcf9573f90b4a1c686774b619917b270a882143159fc4cdecd8f20e7e1cdeed406b7445645f745364dfdbac4ea388b270a1e37afd393ee93fde5bf2cf9be6983584df6dfd4446246960f59995d88536eda323fdeaae51d986f01917314e711bb5f5df280240f66575306c30878fb61deea34dac83772e609d7b715d46958cc6f5def117138cff2ef95427232a276c65366b642590c66426a2d7438bbcd61125b8cd062097b1f36adf89c5e998b33e1a761fd2a40e0d4047de2a5040bdcfa9db947f5c09f0b91e8495dba8dfa20d08e8f650f38447338dcacd40f2423b2dc21b4605bf47007daee92098eb38571c55919105ed0deb0dfc3d5185dbab4069390316ad0a8d2c0f805b48143fe9759cba22c9888147f63bc4f43415a520edc3eb80c043ef9f9ad9647f8a1f455fec27f46394397a05a4981088e2ce324108e60776bbcb9c6c1d240c159a148b402f0f8e292f4f97be4b91b0efd33ba8b9cb74aaf38a34d179e40f2af91bd95425d413bc17f3a504c91210f059d5f6c4380c0ee40ff597d169a2006b3d2340936fc6efd7d8362c2c6da0db5e2843c5f2b0bc269e027d3f812f5266a3c3b1ac5613d16e9de0b027c4066c17d65a96a4f102c878d03500c06f4b0b8010034b9fe20944a81ae22d3f0c77f0f2c973b82f2f2292e03a36108b4a1a0899ef377cb7e738778c1dc1f398c70bc4b11e2130e577db30b0b994815191ea0937993ef00ade235b77fbcf38e46b6839e553770a4e7b8c79ab868605170213848cd7b1647fc5267c1347d57cc631e80ca3afe922fec84b818df770a625066ae5adcd80c7e2cfbc226ab72accf71bc3ea4fdb21ed8a2a2a5bca0f8cfdd494ea3e1c97d2c4208762e1133c5212459f365c86ad2f0008f93628597a9c77a80aab18a4e9d2cd3a3c4b97ae1336f1a10ed0a0d8c02c74d050e930be508e1ea95fa3d10e33033a2c28e2b3e195915716768b96ff8a0c058b56c6e800b76f8e6dbf1bedb6d27907f9228182ae0c309c9a16f8aa57ace622f315f2be88303e9efbfb7ecc0f0e00ff362701056fe3fd41776a2397fcf7ba7aa55f88f437fb350294d4715c09fbc916ea16b79fd162f5d691185b20b0e054a02f772ddf140b858e729e34783c2aa3682c29b1ecdaac878ce028b8b60028c1851999d34629f2b422e20a2baa7459de540386f267d60aac1d3f3a2478a9d611da461bba1e06ddf37109c80be6373b14a1c2f58fbed1183eb1106f7c1f4181635487bb6c118b04b5ccb9d5fe77dba70d74e8310b267d2408999af68968840133ae57d8566b6d3955259b7560890e736a108fbc411bd768c7a0e311fa726d209332906a14ad2ce7d87f9a32aabda0f5d3d45110cf54caf49773c34b24650a48525259b48ed7d78650aafdac4bd5d264441460e050344434cae9b514e12c89f065a8d19dc42a7f2d6baca5ec829de7bf298529bf5ba29eebb1da7a1ee7a44c899968674c7602cb5d04cd36bc30df45843332263cecba2d380c517a4b7e0027d6e454f15e1348764584fe3eb0f76295bab5b9b5d3b3762cc45fb8b9747a59379ffb293b3892acb5ffdf92006da95705098867dce5c9bd84367cdc20566a7bdc4ad99120229ba17bfbfed3ec9c1df216dd2e7b134c8f627e095ba8b5c91184eaae44995b0c5e4aea50a76814d92228292af67bebe14a297268c53532a90ec6dcee479b719b6d2818cdf142ae87e63b85de8c74a0a36ec66eac9c45f7c544c886af498b1aa477e2ed32a91be4289327f0cb422b870071c261d95e02b08bbd1a450fc2c0433b5a487ec33c278e46aafb8a744e29138113552890c11e03715895fa429938ace1905cd433f234f5409c280950a2fc30e32de747dfdb0a139d3de0df66a5297e63090203094026d458913a750824a52ac2ba484a1bbc4e2428d5649e55e6e6377f198abb571a32149efa38467a2c5e1122b3a2febd1acc5c812090afa6bf31bae3e65e27ade40b2c52b0381e0265d16a73f0dce2eb8ce434777ee870ee1c50f3441b9e0a5be8e770804d436ce000385abf30da3452301cb62dafbc78d91b817cdd3cfd4c9b3cacf860a3eaf0b701db6c84ac51b48f83eaff2a57a0db1c4026b21c3bfe1d0fa13e48d6da483e2c1375016491df2dec6b742d4fcbdb72b9491b49bd594737cbe5de7b772f59d646f6825df5dff6270761969db4bc333c06294937672c7ae536c502fb9f79435d60d09a93741bf88dfc57cf62455e47fed950d052f85e570ee355d6f186a12f1332a3a971e611ecc70c692338a2e11fc7e8852ea3f70a96337dd634e1ecc5847543590a3c597b63f034e7188944dfa492a960f4c554506711fceb984c2173388582d5db0d1e18c3d059bdef3a6a3062313eb1ad663da107d489c95d5662de8c4b50c5b3e419195c652ab6c29bc61140c2eb1df2a4fca5c7486dd1e05eb108e39543096835481d727b9862074034c81b21b24bb27c4cf6b970b1ad1818294e068b619c352356edb1dbca39ba0f516bca88b14600fa6d14fd6d6d0afc8c3c7bea6e8a5f62684cf716ccae9a26c9cdc447c7665c34b4b613a5ac90a6b7f0931886d0252cc46f9fba6d4f59722a6364d4c8e9a50e6d2600d73d4beb5086130dc6cbbe5bc22380581beeec0340c046b5b9bd82ba54776c278e80ea187dedce5a2621dc909a3728168ebe2cf360695442f94707c2e3680cb261dc8ca3e4dd338f9ba40a7002cf2afe3b6099c2ba36d5d9b0b0688b26ada4bbd6c01a88553b85dea55eaba3e45b89a8e4a7e865da3b7276e44dce03a2cf5282a3103ff18b328aed7b2a6614d54d98484e8d1af613d5b77e70b29543adb726b5e095c4c13073552542eb471ed29cecdfb59dc9da052d0cb85a63317c9c0810a5086c1608860e18ff77205a6a3183c8b3d457efd448621c29dc7338fae33a060ab14feea3ebc04d8e4e0461f9788718e720ed75a36dba16cac082640636862dd17c2bd1e5a52dd2f75fa5318c2a2ed849dde8b512f9be1e703f9984a784d825a68f7c1c7ebcd5d011342583d994acdd37e931bbdcae54c0bab7b118d306a2f27618d5678425e304abc3fffe727997935aa4d835081ae461d169fa3f86a3c39c447250ea1ac2101f4438bb05abf1f20af08fb95530781e3509383ee9d2646d35db052f071d125f35bd0a163a93307528b21b5afc7655bb016cce9a1c22bc809b284a276a9fbf61cfe1226b1c11959dade5232a2e85bde3af75d93f5a741590c905ae85c06dc9129863509812eef63ef501125348ddbd3d866042f72b3416dde166658f9a5675b48dec40bc8bab60d8cf73f797808760a73961768e914311c763f5a58b43f66c9b072d2a37c7e81833c5a735150990aa145f3c7c44cda7d63a86ebe4cd70c6e18845eed621b3cbf9e0f555ea07ef263d54ffc23d56a4438baad8a88c584f1494e6d63f0f41dcd0ff440e66327312f63b27e927fa2efa2ec4b9bfdc6b34ebc0f65fafed1cf727ced6ea63fb90ed2b7f7d832c4851f5f72e740ccb1f756d616b62bc0cc1b4319d84e0301b4b5457e7b32c5ad9eb4eb525046ac97cdf2b0704e2ffdb073bcf16d51ed0910e21d918e4f9dc9f3c168704f6e4be32a52f6237b65fb33fd9e40bbc6f14a25bf51496fb70266a523456a78ba210db000b25288040912e2a6c1929c82c3f9a577ec8448feed0972f67c475b252728758d998f45168a64d27ce14021a8b5d4dc875afaea96cf18e1d038d183b70bbbfae497b3ae91d6984528db315f12c633be271c69a9ad1682fb4b7f252283b79eb474cc503868c325345978ce5d92e5ece0c3b52fe5850a4acb05f4bfe65d165f1d05b2ff108ca1ccccdd55bd71bff704c3ac3a8ddbc55ebc18177497156844acf0f2c8cdbc7c6fc2720ba9da9f0daf56c703d12a179675a39d7bccc7fbb93b39b3d6e5dd1256b115b7cecb3bcfeccf7b504201aee610065044b8aaf59401b4a78e07db66976ef178fb0ae27f0dbf792906cffdf9447c51be2e50c2b5d2d6f9ada8cb1ca1f09040a9e863f0c008ec57dce273e8737e2ec43ec508d33e86137326877981df90dba6669e22b15ba0606fcc42ef54a0ab22cdaa950b6d986a396a8b937f441ec2ed0058411cc79a6b99d235d781bdc6184859b4a49aabbe57350f28f0f5f557e3e974340783cce3b2687dc5d12c2b658e698f138e694fb7dcc2dc26e5d9c0c5794e2d233b121b8afa355cc8a135876cef133fe75e34b370709ad7b88aed2a27061c70728b5161c0d0ff2556d40465b77ec40e18cea1dc92c1c90713edd041aebfaabde0b741b6f6915a2ff99c987fc3bbf9d23a454186b91436152075bf0c713e563b5f26ad0efe8af77f16b59c4d11f77ca8af8184f357d19eec4f84c318ad54c3bd5344cf7219637507d074221678d2ecd14ee4734e65d499fb9a14bd7547e8282cf51f519728b7cf334c5232205703a84f938d2c528ba8ee1d2e6ea5c59083f2c860583bae5ddf5a5593f95ec513525eb2a396f12ace150028af03de0042db71f31da397a71728c74843b14115b02b26eb13c83c77ca3db4551f7ca6eb6a5ddb4f5558630f0496333b97b3bf8ce0f3d4f4e24b357c7a7795cb4c8e15c0546dc4b6b43def9392ddd056dcb459633608e3c516ef216afbe3e7e4fcca76d6aba0fa4ddc6e5a2113bfc06c0ea85eba6e39ddcb6e2678687d80e3e96adf671c567243019ddb409ac76acb226c5d83ce76fdad444c4e6bcf358890ba11c5001e92ade92e85d8c4b28cbef31cd99e3994a6845a2e16c33f18c918927b4d3cc6c14f2af5f20d04d748454ebbb1e3ab43efbbabdd66bfa6c22500a1255112f42cdab7e2301f2e189c126db7268c8643b9bb9149875e6c4670183d6a12130fb6ef7adfe4dcc99855749c3f6419be0edfa806bdfabcdcdc451ec56963909e433579b29ebefa80ab2ac324c048a63b83713f818e2e997f899182f6ee7077116f246de1bc7010bc0036a55d8fc58e0d5fa613323a5471984a3a29bb3a859704f0a96241136c52e847ba74e544edbbe9e212b429a89578a55dca18d9f22496ab47006fb072b82383ba1e7dfc4684614e42d2c5c718d3bc6fbb6d6890282856ad7221c3543244862b6650ae86e51ac15fcf13a98bd72c18b36c4b880302e48d690f62fb9bb2e7c09fb760aaf2adcbddbe881ea8fb10b1b6d321ccaff120e95ac479adcd93d6f986dea90ccf7ab1e25eaf8f33a72b255c24eba37bee424c20a7524191e84c2b8ba457655b1e9a58cc921da4b74be4dbdb0a461a57f85e1caaecd1d3c441680e8280cf18968d2cd311d81870d237ebd99ad585f9b887e9a91ff865c86c5cdee8ca7e9a356ad591a364a6ae6fd99ddd2532a376b7bb2e5e3d78fbb3a48ad20e13145ac134f1179321e17b61457262127a6a6423833c161c1368461d753497315af94af3855391524662f65b76d25943764dd97aedf2ca011fb4dbc940682e3ad62ebfcf422ffeac83dc14eda3a14425b806f7617868e781b5f870f9b4f6a574f0f6cae14b17ece07312e6a01db925035a57bea324cb9512b903ae3bf78013ecd43011868a82abaf483fc2212cdb6abe0062918dc8b8adb07fe911ff9c3fd9265a62681e02665eb7b9fee8087a849acdb9d1cedf8b580ba31ba9b9d913a3f36ced655fecad775d4ee4fc7b1d7c75a792e8985a4a184ea002eee35e1eaf8ef769525265f9ce609fb747c734e6a60da087cc1d2c41bf420f1d6097c8cb4512eaf2089880048551c04f1a5ff037308a49b10c22e4a5430016a67950b6e92d2cc28c0eb4b87a12029164db114395982271ef82b11ca9afdad104ee49d1aeccae5e429a01fa151214b146b6d2a43524d03beff3151cb6bc9c291018f455c2d55b572644739e89ffe575b12908aaece0f635404e6fc1f42ecbdfe599ec88a3ccc50184e912fbcc25fcbaaf71ec8d6124ae4c9c5960cb4ce01d6b8af7e9d5c64a34e47ce7e7ceefc259cc8dabfb6b0fc0eb16c444c9f2940f6eb188f172a207b775a8369b0a7885ab2db50118c6a94b4d396ffd0b45f3591bc6d5a6cf3d643486be1d3229ff2aaea509cf4a269f4770af27dbb1faa04e11eb2e6e17c7c152c9266ecf2e40a78984b2a1b24d762d77f31b0bc73a69347f16ee5d2608e62b780db9719b1662d4f7664cbe47b70fab8a6e0bc366553772589c7bd6b8af9058313d5f8930fbd2c7e514f981c71df95758e4b57cea290035cd55bacf5cac964b15f2253254a122d97d62245adf67db908090f5bb9dc97d7d6130cdf54945a5f21d689b9801d05a20fb64b571f476a3a383ee4dbb4951f3a344922828cb9da0d29482ac0d6c94c06e5c4133358e31e84e7b624ed2736bb178f4b7a627341b437825c56a40b72e174c8f491229a4feeecd13505fe3f10919e3487993453b4805693613c26ff689d42205f82781188a44b05d5a92e76dadf6f25100ed12d30f97ae51b633c98432176a86af2ce06e2073698be0301702910ad3d9d1fa54e1d54d6a73bab24bc53e55605e648ca1989f216d5f90581efa44aba659e2a80cc3c9018598e17f4a95eef8db6c0862f84a572199b6e325adbd4978c49269d7ece04fd6f3f05ed64d294a64faac9486bc450c7462697f5fc226eb837978563fd9975ec4de397e681f6c73beffa971b1486d88271d9d09c2b251e726c90c7cc6f3eb033ff01cf87819878dcc0f507daf9d4b3369764b60a4760de57bd322a8c31c8b7a5510431a7ed0f0514c5f3be55376ce42ae3786ccd116399d35b0acd551d415df3cb863af9cefb9f55f54444a1a71618abe6d4819ab9b9f18888ae3357ba203bd8f266cb4d97f3dac6bad402548cecc1ff3efa7204d21eab461397beac77eb3185a7193727e5737b8f10d152451ce291a8499ae25cf2b2e51db7fca94ac1ebf077ac6ad416f62807ec9eae0d8b5183e7f720a5e2e4751e3f0ecdc9abf0da642d8608b2f621711f6d2e7407995478d9bd42b293a8339bbb41b1b4791db7f3e9fc99bdc0249e46edd23773a8db4277985eb65bb38e0eda075bbb39f48da56ae691d7f224ca2e6be0537813b0665e6fbdcb5d14481af72264a56c75bf5a22ce82b70ca873842fe15d448667b230b7667f0f1c88770e780c360953aa0568b922b50f21641fe4b80e33de699d6f51ae1f0221ff5b2905c070ba33821ae806fb506c25dbf58c8d20610cc6f49a0a34fdf625dc5fcff05b118c990718e4ea02d40d012c99cc9abc639db0210c9ef40b0eff4ea70ac09d814814af64a6a71f3f5a7f3c370f10dbbba4246efefa3ddaa218e716b7d5550603c75c8425a82dfa1510b0d66869eee7ac4c7a81e424be802691d01a3dcd8ab814ab2c1401264016fbd5c21d34cd2fa5cd9d7db6aea0b817c26b76c0fac25e97052e00a872a8b459656a74a498689b14429687d28a5649b7b69d7ce059adc09da3b6f0087ba63d3245bb766c312614114a5d7b69f8509596697c14167231e34f3bc40586e9d65b12f72476f6cbf6fbc57fa4466ffd87ebe54c06ac808cccde5cf2428dcd5b690827bfc52d8a19a336dc36872cb1ef7ce8122d61120e1f1644bf9afb3721c8f0adb50f9d0e4f13f3cd8d051ff4ac598501eb60fb8c2dcfce4f961cdafce7098746b81d2e4dd9374a774e79385d74bda0bcadd5a290db919b4e2eee170526df950f734c64334e5ec5b32a676d4e5a9efda3fdeb3ce62d0879ff7d2dbec98c825763c23d5bac4cf4887e5e8feec211b8df11b68398aeadc3aa6c03c2405656002efc34a6dcad4196bcdb18282f56361ef6ba4e7d6591429064f9d703013cc1f9444a6ea707d6a4591f4a9a55d9606f8b1474685b1852153ca2d423a479a7332aaceda1893155b8177067d41904f20ebf97f5e3c812f0a35af7cb5a79b8973b0c262534bc12cecd89e6d1554b991cbe59ad33420e88f8446c9ef7ba822b42b10e5b5b99cf90dbd6c915e35cf046fdfd009c2105bb9ea275a87b3aef00552acb0ebafd5c4dce6b04e5c0ab5d6277ceada820487f96f65e6cf21834949b84ac92c62f117fc6dd37ab64699a256d0ddaa7ad361805f1550fc266b20d0bca4573eec28a8eda069de4def0a94c4ff904038207942a1665585970dbbd9ed1f323c2be591b988693bfa8baff13e2bf4743f6f3ebb1389c0f812aa3c0e11313d5da439eb20e949755484644c3fc10971549e3e6ae2bf3362b0aa5dee09a11a156283ac86dc499f5771a19c555c9bfe0b0d8ae08f3dcfec4961e1ee6122ee6e665f838b5c3fb06e1eea1f0449c5c66a9b1dad74a8eac38d4c95ef61a3dad6023a3ed11951e04baf25b5d4c91ab728e65366aa60be5d6b0aca01ee821f1d6ec406c3f4f3c9fceb75f1c0c15fdd982b08250226ce26f3a61734a93544ebb75b6db1a815a50983c215d80d2839160ea16d329ad2cd837b8113690d1f5ff158e0e6b5cc01b4c6a24933c9791a1238485ca4a7c313141825550aaf187398410fe5da2447b53eeb330818fbc6cd0d996d2d236949bafd98406b0b0689864db425037647db17451bfdf7cfcd407316b6967b119724815d48a0ab802dff9e8ff1aba2e1fbbe7b1f659b02f7bc5d490d926377d215d13842b5864f93696cb504191a9a2bc38073fe738918f821bbc86f1dcf9da753bc8c552b80cd6e954959e14e50fd30ee85de50ba46f3777ccd5d3ca04611714d4bb2e833adc2e1bc53134c1223762f55b05b6b08a4746fb9b82cbf24acba4ad438f21b51d586d4ec7f9ba887231b53d4ca2d2b59a8833768e4d43858773e799ae156ce7fb17f43c13a30505ee71fae21e06229530c9e8cb45c03e16209953d8f6b751a1ef13c29fc00bdefd521694ea526d83e0d6d6d78fc1b8e2812e71ddb41762dc6e3f16e7081e3f39ca8e05ab1becff7903c309a11efdda7095df2f4eec21c31a499c5a7b60865ce64679752c1843a56c19202f14b50d250600fb8420cbfb2817a310146caab06e44bf797677e39ffdc2fc169267fa1a20d70904c14b36477e4bdfd4e259cca34227916f4159df5b5b0c7f831e1510abe5751979a7f0df9a8f83c515ccc7b42b694b9255f639ceddd10397876373b9052bba3054417e8615f7ffef33176c4a8c9b817424006c18f0e0d73f5d87b1b8c580ea27d3ae4a997a40d42c2da9718052e7680c5b4d67ef9689d182d2afc55ef9ab2f6028b1ade80b6fe5f1f4ca9abbb78b9e90c44777b416fb59f2ba9843bf5246577d0c462e7eea88c898bec433cad572a1d3b8d0b56b2066d19c205896498fec3a311f46e9e7a32ddc7c38e8a1aeb20ab8b1bb15f93e8bb039ac3c19197c4f1e8a4ba7429f6027362009cd968dc905011c469b72fe57c5681f4d796754502e292ef642ec9e74c4309820ddd58b9dd1b546c8dbefd3e51b16efc57c49dd5cc4c02d22d8f57c666d35c8a5cacc7ee6a1d236ee47939edda0b64cb7e69f49c40865e8648e2d9add0f6383dc5c400944244aada3cb4517110ff4d240a0d7ec38c91cb2342de3ac0f3cf73a3f2936f9b48298888d3c5b435d24f5de040765e243b3e729fb7bb7150316869ea8e12b03406f32f1a0bb8c69fa39556258ad876e5767778977eb307ede999776276f24d566e0a6aec1cda0af5cd135f236ab7b420d32cb13125f69b09112b98762ee8d381ba077a4f505dd0161571bb4da11f331ee475c6d2e2f426e659217f35b59ddb84aead5de5787aec3f61916699b3141d4f8665260d89a63491a8eb6e9d7d75a28838de8353c50d88a2cd6ad6e4322010154957f972cb30a3194a3f26d3a1a716b7f2c91280367b3045c45abd06a14cfd53ab26e5d517c3cc0c18b26b70d7d905e6635771cceb2b028a223707cb5b2f6df2b6444e8227841eb1b45650d5aed597fdfdbf63aea1916116ae6ee9fa3aa9585758625cffc93f8cba60936ea37f4b1d17cca477b57ca6a0667cc5cf8a8ebd1deb56258306a7d0670b190d574bf8e985257ba9c26a4c4d4411f76de125c54800d0839637ce6e7f2962e8d96cfd9c8ab4ec674773e5b28f46b959e1096c8b9334f786f6402a62d7117a1faaddf3eef6f07ec732db661a740083b02c763b054bba0f85f42e25ff25c9bdd23da399939d622073209f7fe33ae7277745bdf5b2e6467f6e5dd81cf3d03a7e3f23cf5d05f7e3c37918296da0f5e45cdb870c130b85b04cc3b7cf5e367399237941ec4f3d3db2e035f846f96093a0c60bd0564e964d9148789fa5afe9994353ae1dce112bd33518290d9a6b86898002f19e0851dfcb6170532a2d32f9336e545a4c9bbfc25fb88a0b5262414910df1eba3b4832e96f9bc24d7367c2226082d8f92207c682fc32e1fbcb5e91cc56012307f7ac7a063c30b79f801a92aacd2289c33be6898b0491777f4ee20c4c5f3902ccb759225ec5aacd4a13fc217def2ff0480f19b54cadc46f394e95df67129b4436c0563f34a1ba2baab458c2c06fb03dadaab3778d9ae34fa277b276a08c56c480f3066ed3681bec928455fc1277049529c1aeb230f8bdb396f786f71df7398cdd0dabacf40eee6dbfcd3974959d7a059ea8b67b5dea829ef707c69c482b23a5210833106719729fce3efbdd508388b9a06149c8f713813ae34b6ecbc79da219537f87f50600c36fc8f43fc6a9d9dad34f8519d10c5db73ff257d7c68d11d553273327be71dd5ea8a96fa2b5501247e4cffb94d280aa044eab7b3faec282abe5e43dbba03c3518d1a2e79b9d764bb42f07ec4f2daa60090bf7f72d23776dfbda4fac9d5661f94f6f02195cdfcd9a4696800a8edcd06970162176851b89d330f8b6a80c725c628856229130d2c4c1b6b87796673970d233d303b19953451323685ccf5457c1f0878c04da9e34a60947c0966b8f96b58f2c3d2e13cc30b5f77c4bec0768ae4dc84f358558ef7c58c74634d83e018abc9aaf4c3bb6da0b9af18640de254442d13e28b46f45eccb6104cd422970e865ba8f592443a53225c5bedd4dc75a648b2768a9664c007004a229f576330809d385c7aaf03cf357d0a4b8feb082cbe75383f5dbd6ae5f644d0aa921f4fd67a2854f5be3d39a8dc4174b0e3e2c01f4b4f757b1b9617a3e06b2b2fcb71c1a442d4fe557ca4eeec5b5b7514e3c057a337781324b06d09c1e98317db5ef0276c3c31e524ec62dbae0fd6ad3be08f9ee1e3119b14e2543fb9b755b2206915cdae6b2499d656161da1277219c1703f665b1e6d76579ccde274d29a417c5fc1d4f3a98032fb0086e2b088ec2f8796c7b4e65ad6769a14bccd8d2d878e34b661e56fa5cb50edd008673147b05ecd4a08f8928b016424ba84fff1a5f490418a0adf22e0cb99ea4787d12735da7c4bdc8f3775ce6afc39cf1ccc62abf1af91412f12e9be99af93400ddf3a9eb11bbd8fe8d87aad2fb6b06b5fa0239a81abd3247deb1b0eed9514397cb6cd94aaa8f05477760452fa7efe14d429eaa0621a8e447efe5d0e713c614aefee41dbed8356bc2d36f9bf7e80cb471bd090bdf736aef8c105d1ae3e9ad68a10fb02898458081f838153bd8680a0f26f6c6226420872f0caf27b438477bf0949aed5374e550819a379dc69ede0172968ed1ad40407706a49ec5b023c7fe2b602281490d631f859edccadfbd3b086409830c11322441802ea67ea6fd4104fdb8f08984b73d776ac2e672e1801a866576e03800aea6a1f5aad1ca1836976abb50f382c984ee5268637e798841ffd315f060cad4051856bc702d277fd63b162467a27a23213743891b5f082a80832ecc553c910a7bd1c8e346df868a3506d472ae530cf4d68b636b3972a66000691900cbaefce1aab2082574deb1a31e4f977ef1340d4a13f5c67cb6452662d8e8e8a886639d6b935750edc33ee61937336d2e5d617a882e578d2d1929b8bfa7aee23db55295c7439bd28ab20cbd26dee77f5d78d37affe85633f6b1bb1f66499b0486516d868cc73753742a14ac2f44f081dc72a5bb37851650a79456f1a81820848bb59d844240115eed40718d6181fd816246a85f2390679c5751a703822618dfc87b1a641ec7cf2ed63a7a8e65550ac5e5cf7f6f8a7995c6513090eb579b68eff5b24bc81c8f805228ae13f4e99891fb0065c1fab6204631638477e665e3b49261c9d3bf24b4e0a2e107c3dafa6bb6332386e7fa2a9e5a30167eeb8aababbd498645db6870a85f7b9b0e00a8743d200e01a5309ced9012efb0776c2a2caddf0fc05d353e30d8042d115995444cf4f365ca52b3dfbf4956d12d3fa94b3476e19467a7988631af218fd4c5f6dfd11e8bdd5414f6413ea17c7c69af31508c13be7ba8368260822a802fdb469ab8d68a7502e59a6b416e54597342bdbba6ed7ea5712e993d517e7fc47660447ad9c5964fee61e9feaad310eb1de35fe6aabf3f0db714f6d7cd0366174f3ee536d3d5f2c199799f14140092543ab42a2c5e50c8ab4d911aa0d4433e3661cf8d1d0bee689e6edb27986ded57f212484135a32fc7a8a145c46fcae1d05304bc9214082f1161a142d7c48c27cd27209d93f4c26208aca5fb52ab89ffe1decea8cfced36e735b9b10aeb09ddc74965e816bdf6e3bde05d24782246adf510499a520e72929ac088c62c2f62830017413ff84014cb6c9b46a7f0fb5147b841ef663b49627d6e4ca1ef1845dc1b415ca276b516a7b366415cd7e4e71d36e2f0ec7dff9af14379b6b78ed38480e970116e0bb5a82fb772327d1cdbfd0963f7e8c7f9f8b3bbd417edfd533c1ca9935b23d55c8feba91d932673c91cca23c6682cb4538539ef5bf3358f6177037b1e3b89ca07a070f3cb0b322546dbf12cd554716693b763db159620b14dbdaa037f8822b3211435b246c304f19f48bc1b7ab495e40b911d486595c8608347e82d3f2b04dce5c56d8b2ea513a3e4f9ddb9ed668abff3f70e19be1d66fccf9c8bc228c6f6bfe1ffc65e6e5eea7ba038f269974f74048dff687eefffe4eed823ee9b158370e50cd32b556f584a73f8d028619120038cd419dd9d204949c4f8e9aa6dabdf430f4038f8c41b85eb33999fc0d6a6b2a6235c86db2580d5a1a9f285a660da0106c9e019d78abde4f59e03cba84743cd7a38a7dc3498eb2594319dac8841ef799907aaa8b8d4ddc794090a9f021c774ac4894390f16d7415d836d0d173f8671f7201b83164ba19315e3bef0b13678eb06a79d0566496da6b7a99fe2f2c3507d52dfc32cbfcdee70b427efddf52944d23ec29b649ce357c4fc31b17035485f26c8f2704c93d3822baa25db44e7a42b3f75fe59b6669ded8a4818527b2fc0cb17ecd3bd055f162a103bc63d11ff3ce7d6c40d59549086b948b1c56704d13471de7790e60d5961ab74b2853e3d8dde9b00fa0bcaa5527ff74c7458a44f0d511fba908ab36a6b868e429703d042a7413b3c6164667affbd9f5bd6c58e9b3fad2c5e6b669a0cbdc3c9a5ad54f1880e8353aca1a2500403502101512502e82911d2070d8154ee22d6afc3d4f5f5a957ab8056c738727a9e1fde607ce8b4a1191f15227dd4ec0a3a64e4c73c126ffb5084ca5461de99a2cef5504215a5b58cb86d4d28dc4a906f3798a9a6f0aa377d1fc7f1b66b53e523d53f21148808a5d7c414ce903ce28861bbc5c87c1906750d9bea2fd2736c073d79f5119502843aceb0963828517d68c61ad465d6b3b9a3f21087059d2c2964d837f32ea6545623ad5638f7d297b3d16dd9062a6ec852c63256f01f4253ac9ad9d888653c07c8bca5876133b9d0913af25e2820c9ad09fec6bd994d36500f3bcd2f1a3ae27a6be54958a494c9fb6cc888a3a57903b8ac4d104d850fb02a12fa2e515cb06ea44c971eab8aa1d611719362c2cb6f573c45c0e526c1acf7d940e31c487d6eb30600b532ae559f3916490583b3ca885e5e0a06348453d539b7fd066ad6c7a882be06727be9640be7e3fee499cb72f29e6e16eb4ce2e806c729ae703af8d8171d54228f7c6f67f461faceccd62a0c0bc0faf9e23ff8e0fd5249030126cf2c7f904f244353f7d1696d6a1a72e735f677d8ed6ac95388ea5c5951b930f8cfe6fb2120d99aad1986e4f3e62bd840fe86714a4cff92e6bd8b3bba293391d6ce1171864a4eaae90855bf2a6161daad360f7307925360191a2d1ece225ba4ec2aab5c6a1fdcbbc45aebc82be961b4c4809ecdecae0e2647d74e33f2740c6ed2fcde1bf7c7cf2c82a2c39b9e3e95863b5d0834f4648ab4e2b7d4a05f0c8051608507adec95adeaaf267073008d2b59d7a4da8e1bd595c5797768d1c3927e0e65add4d99aaaa91424e338f45b2e868911a56195ff5a3b8fbf2ebb505086d74aaaa4bffdeabaddd486e22ee754f1fa856412d17c31baa828b956f3dae1214666e45eeb4b3afc7cc7485ab9d7b626588daedae499abcbe58f710ba1c07a646845909afcb9381bb0ae3eefb2977422e6fa3ec4655c51d43736d501252ae61343dd68b81ab03df937486dbb9ce18ee32875c912d78a34e65252ffaf23eef7e8c4b14178749a89aca8987785dd08a00245634f4e8bf7227d7f649e929c32328f7356458e23411d131b6666b0ed70d8ed9bd9f6dcb4b85c8d544062d0b16b327e6d8010b0d91a3892493026c81e314fc92647fde38371efe0b04d010328964a242e2e6ca6f83a5e2e5cb66c24f5cee72cc3f9dee2593541293d1e7c62975e1312d435b788c90147b3f8539b96f2e1aa3e787e5f2ba583a56aaac697312c57a3bc38a8a8610f68b67b8e230c1ed8bbea0426e0bf243334b0903e34e534174687fcf910200704ba79b926d09a3874cb29b90d1fc16dba54a5a2c8c27c477af15f204e0ecc9f35c27e683d4b516569e60fb48694dae5d8a46b31995d4368ff7387df740e6714242c504602a3a4ea0b22286174c5ff09bd71f0cdaf11f355dce5947053f914a45e5c5bda29223adf53e6425ce984db057e3a6155f99d6e312c7ce05bd2b5c8c918154bb2fdf1feec27da596a094c0601740373d72e46a956615f448d525379e026070c0a8964947456eece75c01e7232b5d6578158b90b5d38cf459510d612c1876b2aaf20e15d23b6147562c0b9665a2bbc1b94298453c5172a68851b9a03fd81f6ae328b27fc4609044c0ef9221994971ec21b65c39a8f1abdc4baa031bece1223908bec446b90f685e58768835d13194f4b4b3dba6b5bb817b71ebfa3726197bcf189b9a6aa0a7722a7f87fff1c6d2605a73f78a004b91c5624e7f74ebeb2e1e5f5f0594fd0ad2322c9d7538bf34e8de1d2eb2473b7ac7222ceb2047259b6bbfb5e891c385470f93995644038fd4009b0d104632fdf5d42fe9534139355b5f4a283331313a5c6a403970ec39eec2857178293e588affb8b55b5b7e48bca2ddee94f2746be33a631afbd07c23ff0a8531a78414c1445bb5d390ddd8712fff54b60b3bab378f28eb8091b7419cc054a9f774716b8e9ce446c641ace24f29cd16046c5d045244e4a90093472f368ef6d667d8529637d013a23f6392d5bac84c5e90c4a297713c35ac8dd046eef54906348b29c90bbaa986704970b8e05210833c3f15877148331d45b35f72697ee84df38850b0e5b51b4ba17c9aa4a4aa951d00495e5b5af7af8d224ccad86450c4cbfd9f08c7016ee225e1481b9c3386b8c1b1d3b6cbd381c8c76c011bc9aef85a9893f5489621fcd3549012e19c5762757e43a11e30b8e9acc7089e94099cbfc3efaedbf5aa1d395415269ee829942a6cff7d840efd881c67d768e95c3bb406ca764c82c32b4fd0a63f2642015f8cff6be7bf6e3454debcff88f21ccced88a062f47e2034e591e15930b7608246d8aa6dda6627e31661cc5214397cd956ee455eeee61a2f173a6f26329c345c122f5185cd652cb86714882e3eb3658303bd2f9334733e5c646707aea3f8e746a9a25b93af4199a6dd6571e9d1ccf16b68e2e1317c8da84a28f9513eca2e25e0add68c2a420b0f9408a86933b5ca5aa7a14d538a9e0b3b8b3e4aa6fb0635abea70e10b9fff5e5393e911d4c5cd0fb00f27c1cbb7814130d92e0a7686c6024d01742111b03beb505940d2735e8a678cd202c706fdadf9712193f3dd2850718a15c10519058762bf1e1e170dc3547522c156b503e4b08ab7edcd1d5b1b3b2764b6168aa94e58b5ba1a0497b5e739f2dc8eaf1f4e4de9f36ff17e94c85b151781256dfaae0e1249b4b9cab2bcc568f73154705bc4dd553c2fb24c2ae604a3766cab98a34b9106c58f8766ef5c7f7eb2eb53c0115d1e19b38dc004d890a4dad9de83fd6b68825737985383cc5fa36313cf90d12f5275eefd5fa35cd37c510f83ddc3579324b1e0d41977d3e63c613c95f3be90ee15ca8b738794841aeac058a2ee5795a082ad867981fab8b284029a61c076eac36f62fde870ee6123d7bfdf71ba9e12380c42d16b55286dd644c42cf93983fd525c99446167ee56305a044cb76e495dce0c36ff201407ef6cf506ac02f8ab42e181feaeada89d13186774e12ba2acd9f19969068a928a7e14a13f3ea081dcbe92125721ad1c2dd45adb5114943c0ccb631f82544cc4230b99b5cfc487eb50f8d66902febab1c44e075ef12f702956afd568f17552fb939354703862fd0b9e94540cc958e046f6145c1db6e9705dff82b2f8ae51723839e57f94cf8e124b25500b359e52b3735f9dfe2b602345ab3f1e3577e0ec57944fec0452891a88492685cb8e63af4bc94d327916cf433695c2a5462d0ac7da4629fa68e69a0f765e574f894d0aec0a8e17bbb81c9b4dcb842bd2f1425f4d8934a2a34510047984e540f5e4c49fabf63deb7a0c58e6963f074865c0dfbf86ef9d5b076a09a4b6cd6593f9f78eb4de2550b2435b1c2fd8ca06e419f6d0b578c74609560056f14c824c6d0cafce98238acc431cf0c7b7d11bca8e58c112df485f6f039b3d6f1998e613ce1264c734ea21ea888accd3cb9d814c55a4650c2ee75c1c38f3be7d7612f69ac66f06a945fb12e88fe9d588c8d633f04c9bb76ac2bfa493cae9586708dfc725c23ae8ca3e9c1c5efd3372b3d2ccb7ef758fde2542ddf07ef5fe50c29e9c3415253418009abe72d8525b29b353eebfeb8223946483334ed1edfa7ca831673193365462761aaafe88f7cbfa5f55a9a719f4a717df8d772344ebd4ac97980e07300eab8ab02bf655bb4027936fb8a2befc55aa7936b3d9581ebb2f1f4796bee224b0f9bf26b7f4e8b19b452f9358c983cf4e272dbd1fab01f459a0e35e0ab832eb016994f67e8fa969f2c22127432a6bc9dc84b76282731d2abbec4869fcf742485a2a51d684533afc2eae8e290f72bfd20f34bc17170ced45e2a0bd12fa67884c648a6cf9152993dec80645a6d8c54e2101e1e1010e38abb09264f31da31f52a8e5350a810d943bf19de2624f173add58ac2fdbc4ea8d585acfa2a65d3005a61f4512cecf4781bc5e511a604d2a5476c06e9e17f8d57d51b8a4b6f7740e2d304ada90c4dfc8e73fa831a7eb23366e8894256456744de1ac8402ff910d0c78d8c96b49e49a6fe360e324ce01612b530cbfe97df48c93037f756fb61e09eafa57529a4f16094dce4c5c475a1dfbfdec4c5f573e109ddbb6b82ae29f7f7e4b0b9c47d099d8cb0ea5b2daed968970276479a3203d4d99c0bad60f9a3bcb149482f3a9a4e2663d8c29bfa2c2afd1e6d97267524ff706099af6509189a66e8e57171f947691378d4f5d45ef8d421e54305b8d3a5f079356a6f61f7f27cd095f4848a39bdf0a6ad9dfc8e156b2007f7e4cbc20f3eb1f9defdc766ba245d1a6b6464de37b71b45450e7cfde1f4a94300f2a197352636bb3c347a9860f27da0b83652fe8e21e884d5793cab5936202bf7caf84b529f902c674d590a69e4304f30139b835d03deb91bcdf315166d41e67af4322539a4bf27fca098260ed932c9c4cf2cd52bf0f0a30abb583cda8046ffa39d66f18647ea99785d8559a7b00700c1e91e0602ff5cb474a1c26ab8fbf732b56e5e94b503d86184aee534378a57b5746b8f60d0cdc8a891da1d4a9677981c9e0752f52ac1f6ad03b16a25567b5d95acaab3340b45988db3a39d19b1e8fb5b82f4fc683d944b675c9f96f1645c285204c375efb14bdadcd0228b6f0cf1e8e9ee7989984b7004ddfe21014b7cb58cd89ebb5257167970b6520639abbd82f57553c410b00a89b17789ed7dccf7c56808566f6102f8e9a20e48cb53cc9b2ff62eb5d3cb13f07357e3577bd2234de6e948fdfe966fe893dda9d24e0487c703281e12a35f24d4f7a35af6d724c93a16ce8689fcb6edb50b1b2d283f5dcce5227c43f27ae55144ff93b8d0967f1b4f5c13886179880ac1595466289fcd58892a2956f8161137bd3aa93d750d348de16bd32341e94b1c4ad23d0e96ebd98aca5011d4e8620e8774f20839901d5f2dc6e972a8c41add0e84e46d32efadfb0b1c6c2de2fa1893b3587558b16a63fd9c1d0d2e7d29c46afb4eb2e59f45b65327c5b05ffb396c729d39b29786daaa2e75f472dd02846b512bf6b31bf6114623c2b091aca58cba9d4a3a62333a2164b2673a2ef6d36387fa53c05738e96b18896f51e4895694889db7b3b3a552d9bc8e533bc57d97b511645541e939c22ed0eb08d28a55703588fc55305056cd8be8507fa9d0fb0c6cc0ebdd23421336f902faf4abf9010596aa09df80b200f21cd5f86841945dc8d3f3e82e438c06ca7322ed52792fa4d6dd1848e70aabffcb7f816f16c7698895495e606398ec8443725ca195070d83e7100126f0b73db3e7daf4e40063f4255875124115ba7ad3be60d9b8f74ee7aa150ef77e10d5987612a7e29270bd8e30cf64983b5eb26b232aa735d303a09092f1ffdaf40a0bd6d29c2e506ea226b20c91ddcadde776bbcc60cf54dd3a687f19f9dbfe7176e329551819f2b83339d695a533bd5e56ee7b7bd6431d79ea944ef96ebc65e71b0b45c57cc2b14191c01d3559d2af92f0d5926f4b550f56d4d577c521ee214f7843e9b2d403147cde76cfedba598239328092dd65a31b6462abd7d2ea75bd568b60e10fe3fec6cc2b4d0b006862ec2bdafa39fdf81f572a6306599b552e895dad61c6ca1ba6ae509ad73ac794af80bbe35f164947c9552202e00ee8a56466442affcbee60785c0ab4d4ad5365d29f0253db457c9064a8e1addc436ee42d9db0fd43c0689d91e19d5ce8e60e81bb4eb9ff53e44323b9829fdd3d18e3a58acc3fbbd01697b8981fd5019c7367690ae0ac0047bd3a7d010dd5c1b8ad54d45f9a6be85724071b00ef32629b9b72d460b5ab770a7e171f1fc0b5637d4bb3ed16c167fe33eb8d89fe3b3e47e7da3984d3739d9f5e316d5395dd94e487289ac7535e45d438f24a16568f3472b6e60bd76330f10015e86e6baa1c927d55c4a9a35074205bdff5a861a5a7aea9b1e68514dc9a0de95b55e5bcf3b071c55cf3c5e22b7f004e26e28d626f44d92e2b1bcd5cf6a36af55f21221db4aba00ff612710573cddf1480c76fe929569da088ea3cf7689be05d6f248ed9acb1cc6ae82d1d7aa696078182753e0e3fda318e0aed90eb4f6b1545f3b87328c660f50405359720170505a8216029da53870c66da1d9d2d992ab8c00ccb15fdb444bcc5b808c928fe5408642a6211a5906ec8ab0d6e368065d7c9aeaf60945c0fd1aeb3b2820503f6db0e88c435e5c4c6ca241dac4c6a9dd225e2e6c49762d10aa3521b5e6e1e2ff3b0bb68adf5c26cdafa8ff33b3f5a0b74913f14e8387a2aafff695fb3c07131055b56953779fd2d76bcb7f84acb37d67ef9ac4c5d265578fa8f7c6d7b60d91c8eb8e4c4ec1a95af6c347698b4789b2de31dc914e7c9d0344fe43367725ad21bd81c58d2034f1b0b775c8ce977f9fbfb2509d6a3424d4cc3a45fe6acd1e1fb9d20ed4cf78db1d1a8e98442b2b267ca314e741bbe3b50e0cc62836652a5b9b0804f9a3f4f3c987ae6e5f51bad90149954cc39c7ca08d8241c218d45e68517947353e651fa9174805877cc377dd1d13c3b52bfcc6c25f4a0083cda7eb7d1cf5caca8ee5ac6f708e9644ef46fd1114df1c8555f0a001bb328be168d41c7dd72c4fd451db83f518f8cb28036c8da60c923eb9cb87f68618196b8ecfe7d7b46459317ee8a8a5a8b5262959c6fd4c297b5d7e220267f4f55957d1ad0b251174a509f369193ff9fc24f74cbd94efb5cbf9783301107aa3021d7200d9d6eec253d740a2666e7b5f05374ab46a5b78d140a6d8555d7501f54f9f08803d63c3b89c83831aacfe657044532c5582093dba555f51a81440e6180c9f76c39f358878a7e35f23ee9f91ad726fe0b9158c357dade3e0bbe45a157431d9fe175070e1e1edb71c66c55e06825f6a669945fb52f5c73b4fc96d0b92c467607cbaf4a6c8eb9f2744837849b327d6577dddaebde446f32eb51e1ab396bcd0cf33dc6ad641cafa4db35786eda627948f1e7e5fcb339d56cc58d4d080b68bc1f6e9229eb6c9277ec2dbe1b6501d1da604b97139e7c34e97a46dceee8362fb51498ffcddfb3da68b6dcfeadfd15a5e0da9a26c0d00988ea0867dd2a64da7894ba61f2d60fddb080f95a1c525663da686c9ca064fd253747dc4303f77f29dab9533d10270883c1e0fe630f87125b8bc0fd25fb26edfd3049c7699c2ea919c74582c3e7dd7222a465d63b96ebc14ce4341b89b8a6fdcf0f36b709806f2ce0b912e51e3a37a051486e9b2c717cdf8f29ca798473c4a61d8b408782ca0b2dee1b69a326b4bdbb7b439ca229b2a3c2941988dcb98d51517d4b0cd04ef4cfc1eaab2ef2468c25c039af6d76f511dc2028e0c8aa0bb5d375208ad1da89045caad70b4da05aaf2f041781941eca40edb269a534b9f84cba38b786ad6040eafee733d21b379e5eb5aa2cb12f09adfa22a2262ece73106e8868649bb53f22f789c5a92e8a74134fec45a376f2ecb2530bdec41255536e3e7295f5505b81521a38171527e04ad22cbea4e00e3820cca0ab3bdeae753882c71baf51befbde43850abae2a5326257d8c2affa9141ee2bec351973480912d751d7433af67e4b7b5e96885454ce00f2b416a014a36b7e3329d1aff5539d3eda32f34ce4a36fc0949e30153a0b458db49f075b36928e4634db4a1a4460e9c5fcc52916a629644632ebf2158524848662f5bd3649e7da8602c2c4ce3177cc5e60f191dbd57733f08de44d7544b43dafe2aa64ea6c45f76158774f3c2ee95d1b5606c0a6ad0a703472e428891b8bab0063fe7862c3504a1ffe3425d35dabf62de990f4d45e18496be224bab79823a5a01e3d0ac2fc25259e6bd4e8445c4cfb6d3cb67fcb56c8e30</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">您好, 这里需要密码.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>PostgreSQL</category>
        <category>Administration</category>
      </categories>
      <tags>
        <tag>PostgreSQL</tag>
        <tag>Administration</tag>
      </tags>
  </entry>
  <entry>
    <title>两阶段提交事物</title>
    <url>/PostgreSQL/PostgreSQL%E4%B8%A4%E9%98%B6%E6%AE%B5%E4%BA%8B%E7%89%A9%E6%8F%90%E4%BA%A4/</url>
    <content><![CDATA[<h1 id="什么是两阶段提交事物"><a href="#什么是两阶段提交事物" class="headerlink" title="什么是两阶段提交事物"></a>什么是两阶段提交事物</h1><p>两阶段提交协议的目标在于为分布式系统保证数据的一致性，许多分布式系统采用该协议提供对分布式事务的支持。<br>顾名思义，该协议将一个分布式的事务过程拆分成两个阶段： 准备和事务提交</p>
<a id="more"></a>
<h1 id="PostgreSQL两阶段提交协议"><a href="#PostgreSQL两阶段提交协议" class="headerlink" title="PostgreSQL两阶段提交协议"></a>PostgreSQL两阶段提交协议</h1><pre><code>两阶段提交协议有五个步骤，如下：
</code></pre><ol>
<li>应用程序先调用各台机数据库做一些操作，但不提交事务。然后应用程序调用事务协调器（这个协调器可能也是由应用自己实现）中的提交方法。</li>
<li>事务协调器将联络事务中涉及的每台数据库，并通知它们准备提交事务，这是第一阶段的开始。在PostgreSQL一般是调用“PREPARE TRANSACTION”命令。</li>
<li>各台数据库接收到“PREPARE TRANSACTION”命令后，如果要返回成功，则数据库必须将自己置于以下状态：确保能在被要求提交事务时提交事务，或在被要求回滚事务时回滚事务。所以PostgreSQL会将已准备好提交的信息写入持久存储区中。如果数据库无法完成此事务，它会直接返回失败给事务协调器。</li>
<li>事务协调器接收到了所有数据库的响应。</li>
<li>在第二阶段，如果任一数据库在第一阶段返回失败，则事务协调器会将发一个回滚命令（ROLLBACK PREPARED）给各台数据库。如果所有数据库的响应都是成功的，则向各台数据库发送“COMMIT PREPARED”命令，通知各台数据库事务成功。</li>
</ol>
<h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><figure class="highlight routeros"><table><tr><td class="code"><pre><code class="hljs routeros"><span class="hljs-attribute">mydb</span>=# create table t1(id int, crt_time timestamptz);<br>CREATE TABLE<br><span class="hljs-attribute">mydb</span>=# begin;                                              -- 开启事务<br>BEGIN<br><span class="hljs-attribute">mydb</span>=*# insert into t1 select 1, now();    -- 插入一条数据<br>INSERT 0 1<br><span class="hljs-attribute">mydb</span>=*# prepare transaction <span class="hljs-string">&#x27;p1&#x27;</span>;            -- 准备事务<br>PREPARE TRANSACTION<br><span class="hljs-attribute">mydb</span>=# \q<br>jintao@jintao-ThinkPad-L490:~$ sudo -iu jintao /opt/pg-master/bin/pg_ctl -D /export/pgdata-master/ restart -l /tmp/start.log     -- 重启数据库<br>waiting <span class="hljs-keyword">for</span><span class="hljs-built_in"> server </span><span class="hljs-keyword">to</span> shut down<span class="hljs-built_in">..</span><span class="hljs-built_in">..</span> done<br>server stopped<br>waiting <span class="hljs-keyword">for</span><span class="hljs-built_in"> server </span><span class="hljs-keyword">to</span> start<span class="hljs-built_in">..</span><span class="hljs-built_in">..</span> done<br>server started<br>jintao@jintao-ThinkPad-L490:~$ psql<br>psql (14devel)<br>Type <span class="hljs-string">&quot;help&quot;</span> <span class="hljs-keyword">for</span> help.<br><br><span class="hljs-attribute">mydb</span>=# select * <span class="hljs-keyword">from</span> pg_prepared_xacts ;          -- 查看两阶段事务系统表<br> transaction | gid |           prepared            | owner  | database<br>-------------+-----+-------------------------------+--------+----------<br>        1045 | p1  | 2020-07-15 17:02:07.180102+08 | jintao | mydb<br>(1 row)<br><br><span class="hljs-attribute">mydb</span>=# select * <span class="hljs-keyword">from</span> t1;<br> id | crt_time<br>----+----------<br>(0 rows)<br><br><span class="hljs-attribute">mydb</span>=# commit prepared <span class="hljs-string">&#x27;p1&#x27;</span>;                            -- 提交<br>COMMIT PREPARED<br><span class="hljs-attribute">mydb</span>=# select * <span class="hljs-keyword">from</span> t1;<br> id |           crt_time<br>----+-------------------------------<br>  1 | 2020-07-15 17:01:59.163772+08<br>(1 row)<br><br></code></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>PostgreSQL</category>
      </categories>
      <tags>
        <tag>PostgreSQL</tag>
        <tag>2pc</tag>
      </tags>
  </entry>
  <entry>
    <title>内核Softdog测试</title>
    <url>/Linux/softdog/</url>
    <content><![CDATA[<h1 id="Watchdog的功能"><a href="#Watchdog的功能" class="headerlink" title="Watchdog的功能"></a>Watchdog的功能</h1><pre><code>Linux内核watchdog于监视系统是否正在运行。由于存在不可恢复的软件错误，应该自动重新启动挂起的系统。

看门狗模块特依赖所使用的硬件或芯片。个人计算机用户通常不需要看门狗，因为他们可以手动重置系统。但是，watchdog对于任务关键型系统和需要无需人工干预即可自行重启的系统很有用。
</code></pre><p>例如，需要自动硬件重置功能的远程位置的服务器。</p>
<a id="more"></a>
<h1 id="Watchdog的实现"><a href="#Watchdog的实现" class="headerlink" title="Watchdog的实现"></a>Watchdog的实现</h1><pre><code>看门狗功能设置了一个计时器在预定时间后超时。然后看门狗软件定期喂狗(刷新硬件计时器)。如果停止喂狗，到达设定时间后，将会出现狗咬人(执行设备的硬件重置)。
</code></pre><p>可以分为hardware watchdog 和 software watchdog。<br>    hardware watchdog 是主板芯片的功能。不同的芯片使用不同的模块，例如：Intel 主板使用 “iTCO_wdt”， HP 通常使用 “hpwdt”，IBM 使用 “vmwatchdog”，Xen VM 使用 “xen_wdt”。<br>    software watchdog 是Linux内核提供使用内核计时器实现的软件监视程序。</p>
<h1 id="测试Linux自带watchdog"><a href="#测试Linux自带watchdog" class="headerlink" title="测试Linux自带watchdog"></a>测试Linux自带watchdog</h1><figure class="highlight routeros"><table><tr><td class="code"><pre><code class="hljs routeros">[root@server6 ~]# ls /dev/watchdog*              #查看watchdog设备文件<br>/dev<span class="hljs-built_in">/watchdog </span> /dev/watchdog0<br>[root@server6 ~]# lsmod |grep -i soft            #查看softdog是否加载<br>[root@server6 ~]# modinfo softdog                #查看softdog模块信息<br>filename:       /lib/modules/3.10.0-957.10.1.el7.x86_64/kernel/drivers/watchdog/softdog.ko.xz<br>alias:          char-major-10-130<br>license:        GPL<br>description:    Software<span class="hljs-built_in"> Watchdog </span>Device Driver<br>author:         Alan Cox<br>retpoline:      Y<br>rhelversion:    7.6<br>srcversion:     250C077ED39E75BF25AD8D1<br>depends:<br>intree:         Y<br>vermagic:       3.10.0-957.10.1.el7.x86_64 SMP mod_unload modversions<br>signer:         CentOS Linux kernel signing key<br>sig_key:        17:EA:5F:B9:16:4B:C2:26:55:5C:00:43:FA:D4:E5:86:CC:E8:A2:05<br>sig_hashalgo:   sha256<br>parm:           soft_margin:Watchdog soft_margin <span class="hljs-keyword">in</span> seconds. (0 &lt; soft_margin &lt; 65536, <span class="hljs-attribute">default</span>=60) (uint)<br>parm:           nowayout:Watchdog cannot be stopped once started (<span class="hljs-attribute">default</span>=0) (bool)<br>parm:           soft_noboot:Softdog action, <span class="hljs-builtin-name">set</span> <span class="hljs-keyword">to</span> 1 <span class="hljs-keyword">to</span> ignore reboots, 0 <span class="hljs-keyword">to</span> reboot (<span class="hljs-attribute">default</span>=0) (int)<br>parm:           soft_panic:Softdog action, <span class="hljs-builtin-name">set</span> <span class="hljs-keyword">to</span> 1 <span class="hljs-keyword">to</span> panic, 0 <span class="hljs-keyword">to</span> reboot (<span class="hljs-attribute">default</span>=0) (int)<br><br>[root@server6 ~]# modprobe softdog               #加载softdog 可以设置 soft_margin soft_noboot   soft_panic   nowayout等参数<br>[root@server6 ~]# ls /dev/watchdog*              #查看watchdog设备文件<br>/dev<span class="hljs-built_in">/watchdog </span> /dev/watchdog0  /dev/watchdog1<br>[root@server6 ~]# wdctl /dev/watchdog1           #查看softdog设备文件信息<br>Device:        /dev/watchdog1<br>Identity:      Software<span class="hljs-built_in"> Watchdog </span>[version 0]<br>Timeout:       60 seconds<br>Pre-timeout:    0 seconds<br>FLAG           DESCRIPTION               STATUS BOOT-STATUS<br>KEEPALIVEPING  Keep alive<span class="hljs-built_in"> ping </span>reply          1           0<br>MAGICCLOSE     Supports magic close char      0           0<br>SETTIMEOUT     <span class="hljs-builtin-name">Set</span> timeout (<span class="hljs-keyword">in</span> seconds)       0           0<br>[root@server6 ~]# ehco a &gt;/dev<span class="hljs-built_in">/watchdog </span>         #追加除V以外任意字符到softdog  60秒后系统将重启<br>watchdog   watchdog0  watchdog1<br>[root@server6 ~]# echo V &gt;/dev/watchdog1         #取消测试<br></code></pre></td></tr></table></figure>
<h1 id="警告"><a href="#警告" class="headerlink" title="警告"></a>警告</h1><figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">错误的watchdog配置可能导致以下情形<br>    无限重启<br>    硬重置导致文件损坏<br>    不可预测的重启<br>线上服务器慎用。<br></code></pre></td></tr></table></figure>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">https:<span class="hljs-regexp">//</span>linuxhint.com<span class="hljs-regexp">/linux-kernel-watchdog-explained/</span><br></code></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>softdog</tag>
        <tag>watchdog</tag>
      </tags>
  </entry>
  <entry>
    <title>利用Github分支备份Hexo博客源文件</title>
    <url>/hexo/%E5%88%A9%E7%94%A8Github%E5%88%86%E6%94%AF%E5%A4%87%E4%BB%BDHexo%E5%8D%9A%E5%AE%A2%E6%BA%90%E6%96%87%E4%BB%B6/</url>
    <content><![CDATA[<h1 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h1><p>Hexo 部署博客很方便，我的这个博客也是用 Hexo 部署在 GitHub Pages 上的，有得人可能在多台电脑上写博客，这个时候需要把博客<br>的源文件备份在一个地方，这样只需把博客源文件复制下来就可以在另一个地方写博客并部署到 GitHub Pages上了.</p>
<p>本篇介绍的就是利用博客的 repo 分支（ master 分支的必须用来存放你博客网站文件）托管 Hexo 源文件和配置达到备份的目的，<br>下面开始正题.</p>
<a id="more"></a>
<h1 id="把博客目录的源文件push到repo分支上"><a href="#把博客目录的源文件push到repo分支上" class="headerlink" title="把博客目录的源文件push到repo分支上"></a>把博客目录的源文件push到repo分支上</h1><p>cd 进入博客目录，Git 初始化：<br><figure class="highlight ebnf"><table><tr><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">git init</span><br></code></pre></td></tr></table></figure></p>
<p>完成之后，添加修改的文件，Hexo 就自带了 .gitignore 文件需要忽略的文件 都已经默认配置好了，add 全部文件：</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><code class="hljs dockerfile">git <span class="hljs-keyword">add</span><span class="bash"> .</span><br></code></pre></td></tr></table></figure>
<p>然后commit<br><figure class="highlight nginx"><table><tr><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">git</span> commit -m <span class="hljs-string">&quot;commit first time&quot;</span><br></code></pre></td></tr></table></figure></p>
<p>提交成功之后，接下来就是 push 到github了，需要先把这 Hexo 源文件映射到远程 repo 上：<br><figure class="highlight armasm"><table><tr><td class="code"><pre><code class="hljs armasm"><span class="hljs-symbol">git</span> remote <span class="hljs-keyword">add</span> origin https:<span class="hljs-comment">//github.com/your-name/your-name.github.io.git</span><br></code></pre></td></tr></table></figure></p>
<p>接下来就是把Hexo源文件 push 上去，但是关键的地方到了，master上是 Hexo 生成博客网页的代码，而我们 Hexo 源文件是要 push 到一个分支上面的，所以接下来先要在 repo 上新建一个分支<br>新建一个叫做hexo分支：<br><figure class="highlight ebnf"><table><tr><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">git branch hexo</span><br></code></pre></td></tr></table></figure></p>
<p>查看本地分支，并且切换到 hexo 分支<br><figure class="highlight properties"><table><tr><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">git</span> <span class="hljs-string">branch</span><br><span class="hljs-attr">git</span> <span class="hljs-string">checkout hexo</span><br></code></pre></td></tr></table></figure></p>
<p>再把刚才添加的 Hexo 源文件代码 push 到hexo这个分支<br><figure class="highlight maxima"><table><tr><td class="code"><pre><code class="hljs maxima">git <span class="hljs-built_in">push</span> -u <span class="hljs-built_in">origin</span> hexo<br></code></pre></td></tr></table></figure></p>
<p>然后就可以在 repo 上看到分支里面已经有博客的源文件了</p>
<h1 id="日常更新博客源文件"><a href="#日常更新博客源文件" class="headerlink" title="日常更新博客源文件"></a>日常更新博客源文件</h1><p>以后你本地的博客源文件的修改就可以直接用 git 命令 push 到 repo 的 hexo 分支上了:<br><figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">git add .  <span class="hljs-regexp">//</span>添加修改内容到本地仓储<br>git commit -m <span class="hljs-string">&#x27;modify blog&#x27;</span>  <span class="hljs-regexp">//</span>提交修改内容到本地仓库<br>git push --set-upstream origin hexo <span class="hljs-regexp">//</span>配置push，以方便后期直接git push推送<br>git push  <span class="hljs-regexp">//</span>将本地分支和分支下的内容推送到远程<br><br></code></pre></td></tr></table></figure></p>
<p>注意：执行 git push —set-upstream origin hexo 命令之后，以后修改博客源文件代码之后，直接使用 git push 不用再指定分支，就可以把代码 push 到 hexo 分支上了</p>
<h1 id="更换地点使用-repo-分支上的博客源文件"><a href="#更换地点使用-repo-分支上的博客源文件" class="headerlink" title="更换地点使用 repo 分支上的博客源文件"></a>更换地点使用 repo 分支上的博客源文件</h1><p>换一台电脑，配置好 Hexo 的环境，配置 Git SSH key，把博客源文件代码克隆下来:<br><figure class="highlight routeros"><table><tr><td class="code"><pre><code class="hljs routeros">git clone xxxxxxxxx.xx (你的 github<span class="hljs-built_in"> page </span>的 repo 地址)<br></code></pre></td></tr></table></figure></p>
<p>博客源文件下载下来之后，默认的分支是 master，需要切换到 hexo 分支<br><figure class="highlight ebnf"><table><tr><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">git checkout hexo</span><br></code></pre></td></tr></table></figure></p>
<p>然后cd到博客目录依次执行以下命令：<br><figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql">npm <span class="hljs-keyword">install</span> hexo<br>npm <span class="hljs-keyword">install</span><br>npm <span class="hljs-keyword">install</span> hexo-deployer-git <span class="hljs-comment">--save</span><br></code></pre></td></tr></table></figure></p>
<p>接下来就可以开始愉快的写博客了，写完之后记得把源文件代码 push 到 Github 上，然后用 Hexo 部署到自己博客上面</p>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>github</tag>
      </tags>
  </entry>
  <entry>
    <title>PostgreSQL有用的SQL</title>
    <url>/%E6%95%B0%E6%8D%AE%E5%BA%93/PostgreSQL%E6%9C%89%E7%94%A8%E7%9A%84SQL/</url>
    <content><![CDATA[<p>记录工作中常用到的PostgreSQL常用SQL， tps, qps 等等.</p>
<a id="more"></a>
<h1 id="恢复所有的函数"><a href="#恢复所有的函数" class="headerlink" title="恢复所有的函数"></a>恢复所有的函数</h1><figure class="highlight pgsql"><table><tr><td class="code"><pre><code class="hljs pgsql">$ pg_dump -h localhost -U username -Fc -s -f db_dump dbName<br><br>$ pg_restore -l db_dump | grep <span class="hljs-keyword">FUNCTION</span> &gt; function_list<br><br>$ pg_restore -h localhost -U username -d other-dbName -L function_list db_dump<br></code></pre></td></tr></table></figure>
<h1 id="设置查询的时间的时区"><a href="#设置查询的时间的时区" class="headerlink" title="设置查询的时间的时区"></a>设置查询的时间的时区</h1><figure class="highlight asciidoc"><table><tr><td class="code"><pre><code class="hljs asciidoc">mydb=# select now() at time zone <span class="hljs-emphasis">&#x27;PRC&#x27;</span>;<br><span class="hljs-code">          timezone          </span><br>----------------------------<br><span class="hljs-code"> 2021-03-24 17:42:24.528734</span><br>(1 row)<br><br>mydb=# select now() at time zone <span class="hljs-emphasis">&#x27;GMT&#x27;</span>;<br><span class="hljs-code">          timezone          </span><br>----------------------------<br><span class="hljs-code"> 2021-03-24 09:42:28.560736</span><br>(1 row)<br><br>mydb=# <br></code></pre></td></tr></table></figure>
<h1 id="抓去网站天气信息"><a href="#抓去网站天气信息" class="headerlink" title="抓去网站天气信息"></a>抓去网站天气信息</h1><figure class="highlight routeros"><table><tr><td class="code"><pre><code class="hljs routeros"><span class="hljs-attribute">postgres</span>=#   CREATE <span class="hljs-keyword">OR</span> REPLACE FUNCTION get_weather_info(city text)<br> RETURNS jsonb<br> LANGUAGE plpython3u<br>AS <span class="hljs-variable">$function</span>$<br><br>import re<br>import json<br>import requests, bs4<br><br>res = requests.<span class="hljs-builtin-name">get</span>(<span class="hljs-string">&#x27;http://pm25.in/&#123;&#125;&#x27;</span>.format(city))<br>soup = bs4.BeautifulSoup(res.text, <span class="hljs-string">&#x27;html.parser&#x27;</span>)<br><br><span class="hljs-comment">#script = soup.findAll(&#x27;script&#x27;, text=re.compile(&quot;highcharts&quot;))</span><br><span class="hljs-comment">#categorie = re.findall(&quot;categories: (.*),&quot;,script[0].string)[0]</span><br><span class="hljs-comment">#data = re.findall(&quot;data: (.*),&quot;,script[0].string)[0]</span><br><span class="hljs-comment">#info = dict(zip(json.loads(categorie), json.loads(data)))</span><br><br>table = soup.<span class="hljs-builtin-name">find</span>(<span class="hljs-string">&#x27;table&#x27;</span>, attrs=&#123;<span class="hljs-string">&quot;id&quot;</span>: <span class="hljs-string">&quot;detail-data&quot;</span>&#125;)<br><span class="hljs-builtin-name">info</span> = &#123;<br>    <span class="hljs-string">&quot;thead&quot;</span>: [ th.get_text() <span class="hljs-keyword">for</span> th <span class="hljs-keyword">in</span> table.<span class="hljs-builtin-name">find</span>(<span class="hljs-string">&#x27;thead&#x27;</span>).<span class="hljs-builtin-name">find</span>(<span class="hljs-string">&#x27;tr&#x27;</span>).select(<span class="hljs-string">&#x27;th&#x27;</span>) ],<br>    <span class="hljs-string">&quot;tbody&quot;</span>: []<br>&#125;<br>theads = [ th.get_text() <span class="hljs-keyword">for</span> th <span class="hljs-keyword">in</span> table.<span class="hljs-builtin-name">find</span>(<span class="hljs-string">&#x27;thead&#x27;</span>).<span class="hljs-builtin-name">find</span>(<span class="hljs-string">&#x27;tr&#x27;</span>).select(<span class="hljs-string">&#x27;th&#x27;</span>) ]<br><span class="hljs-keyword">for</span> tr <span class="hljs-keyword">in</span> table.<span class="hljs-builtin-name">find</span>(<span class="hljs-string">&#x27;tbody&#x27;</span>).findAll(<span class="hljs-string">&#x27;tr&#x27;</span>):<br>    tbodys = [ td.get_text() <span class="hljs-keyword">for</span> td <span class="hljs-keyword">in</span> tr.select(<span class="hljs-string">&#x27;td&#x27;</span>) ]<br>    <span class="hljs-builtin-name">info</span>[<span class="hljs-string">&#x27;tbody&#x27;</span>].append(tbodys)<br><br>return json.dumps(info, <span class="hljs-attribute">ensure_ascii</span>=<span class="hljs-literal">False</span>)<br><br><span class="hljs-variable">$function</span>$;<br>CREATE FUNCTION<br><span class="hljs-attribute">postgres</span>=# select get_weather_info(<span class="hljs-string">&#x27;putian&#x27;</span>);<br><br>                                                                          f1<br><br>--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------<br>--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------<br>------------------------------------------------------------------------------------------------------------------------------------------------------<br> &#123;<span class="hljs-string">&quot;tbody&quot;</span>: [[<span class="hljs-string">&quot;荔城区仓后路&quot;</span>, <span class="hljs-string">&quot;39&quot;</span>, <span class="hljs-string">&quot;优&quot;</span>, <span class="hljs-string">&quot;_&quot;</span>, <span class="hljs-string">&quot;20&quot;</span>, <span class="hljs-string">&quot;39&quot;</span>, <span class="hljs-string">&quot;0.5&quot;</span>, <span class="hljs-string">&quot;15&quot;</span>, <span class="hljs-string">&quot;122&quot;</span>, <span class="hljs-string">&quot;90&quot;</span>, <span class="hljs-string">&quot;5&quot;</span>], [<span class="hljs-string">&quot;莆田市监测站&quot;</span>, <span class="hljs-string">&quot;_&quot;</span>, <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-string">&quot;_&quot;</span>, <span class="hljs-string">&quot;20&quot;</span>, <span class="hljs-string">&quot;39&quot;</span>, <span class="hljs-string">&quot;_&quot;</span>, <span class="hljs-string">&quot;14&quot;</span>, <span class="hljs-string">&quot;126&quot;</span>, <span class="hljs-string">&quot;98&quot;</span>, <span class="hljs-string">&quot;4&quot;</span>], [<span class="hljs-string">&quot;涵江区六中&quot;</span>, <span class="hljs-string">&quot;_&quot;</span>, <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-string">&quot;_&quot;</span>, <span class="hljs-string">&quot;_&quot;</span>, <span class="hljs-string">&quot;_&quot;</span>, <span class="hljs-string">&quot;0.6&quot;</span>, <span class="hljs-string">&quot;19&quot;</span>, <span class="hljs-string">&quot;138&quot;</span>, <span class="hljs-string">&quot;88&quot;</span>, <span class="hljs-string">&quot;7&quot;</span>], [<span class="hljs-string">&quot;秀屿区政府&quot;</span>, <span class="hljs-string">&quot;51&quot;</span>,<br> <span class="hljs-string">&quot;良&quot;</span>, <span class="hljs-string">&quot;颗粒物(PM10)&quot;</span>, <span class="hljs-string">&quot;18&quot;</span>, <span class="hljs-string">&quot;52&quot;</span>, <span class="hljs-string">&quot;0.6&quot;</span>, <span class="hljs-string">&quot;10&quot;</span>, <span class="hljs-string">&quot;128&quot;</span>, <span class="hljs-string">&quot;83&quot;</span>, <span class="hljs-string">&quot;5&quot;</span>], [<span class="hljs-string">&quot;东圳水库&quot;</span>, <span class="hljs-string">&quot;19&quot;</span>, <span class="hljs-string">&quot;优&quot;</span>, <span class="hljs-string">&quot;_&quot;</span>, <span class="hljs-string">&quot;10&quot;</span>, <span class="hljs-string">&quot;10&quot;</span>, <span class="hljs-string">&quot;0.5&quot;</span>, <span class="hljs-string">&quot;10&quot;</span>, <span class="hljs-string">&quot;58&quot;</span>, <span class="hljs-string">&quot;58&quot;</span>, <span class="hljs-string">&quot;4&quot;</span>], [<span class="hljs-string">&quot;东圳水库(对照点)&quot;</span>, <span class="hljs-string">&quot;36&quot;</span>, <span class="hljs-string">&quot;优&quot;</span>, <span class="hljs-string">&quot;_&quot;</span>, <span class="hljs-string">&quot;19&quot;</span>, <span class="hljs-string">&quot;34&quot;</span>, <span class="hljs-string">&quot;0.5&quot;</span>, <span class="hljs-string">&quot;13&quot;</span>, <span class="hljs-string">&quot;114&quot;</span>, <span class="hljs-string">&quot;81&quot;</span>, <span class="hljs-string">&quot;3&quot;</span>]], <span class="hljs-string">&quot;thead&quot;</span>: [<span class="hljs-string">&quot;监测点&quot;</span>, <span class="hljs-string">&quot;AQI&quot;</span>, <span class="hljs-string">&quot;空</span><br><span class="hljs-string">质量指数类别&quot;</span>, <span class="hljs-string">&quot;首要污染物&quot;</span>, <span class="hljs-string">&quot;PM2.5细颗粒物&quot;</span>, <span class="hljs-string">&quot;PM10可吸入颗粒物&quot;</span>, <span class="hljs-string">&quot;CO一氧化碳&quot;</span>, <span class="hljs-string">&quot;NO2二氧化氮&quot;</span>, <span class="hljs-string">&quot;O3臭氧1小时平均&quot;</span>, <span class="hljs-string">&quot;O3臭氧8小时平均&quot;</span>, <span class="hljs-string">&quot;SO2二氧化硫&quot;</span>]&#125;<br>(1 row)<br><br></code></pre></td></tr></table></figure>
<h1 id="plpgsql函数获取Server磁盘空间信息"><a href="#plpgsql函数获取Server磁盘空间信息" class="headerlink" title="plpgsql函数获取Server磁盘空间信息"></a>plpgsql函数获取Server磁盘空间信息</h1><figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">REPLACE</span> <span class="hljs-keyword">FUNCTION</span> public.get_disk_size()<br> <span class="hljs-keyword">RETURNS</span> jsonb<br> <span class="hljs-keyword">LANGUAGE</span> plpgsql<br><span class="hljs-keyword">AS</span> $<span class="hljs-keyword">function</span>$<br><span class="hljs-keyword">declare</span><br>    sqlstring <span class="hljs-built_in">text</span>;<br>    tablename text;<br>    result jsonb;<br><span class="hljs-keyword">begin</span><br>    <span class="hljs-comment">-- uuid_generate_v4() in pg12-， gen_random_uuid() in pg13+</span><br>    tablename = quote_ident( <span class="hljs-string">&#x27;get_disk_size_&#x27;</span> ||  uuid_generate_v4()::<span class="hljs-built_in">text</span>);<br>    sqlstring = format(&#x27;<span class="hljs-keyword">create</span> temp <span class="hljs-keyword">table</span> <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">exists</span> %s(Filesystem <span class="hljs-built_in">text</span>, <span class="hljs-keyword">type</span> <span class="hljs-built_in">text</span>, <span class="hljs-keyword">Size</span> <span class="hljs-built_in">int</span>, Used <span class="hljs-built_in">int</span>, Avail <span class="hljs-built_in">int</span>, <span class="hljs-string">&quot;useper&quot;</span> <span class="hljs-built_in">numeric</span>, <span class="hljs-string">&quot;mounted on&quot;</span> <span class="hljs-built_in">text</span>) <span class="hljs-keyword">ON</span> <span class="hljs-keyword">COMMIT</span> <span class="hljs-keyword">DROP</span><span class="hljs-string">&#x27;, tablename);</span><br><span class="hljs-string">    execute sqlstring;</span><br><span class="hljs-string">    --LC_ALL=C ignore OS language environment</span><br><span class="hljs-string">    sqlstring = format(&#x27;</span>copy %s <span class="hljs-keyword">from</span> program <span class="hljs-string">&#x27;&#x27;</span>LC_ALL=C /<span class="hljs-keyword">bin</span>/df -Tm | /<span class="hljs-keyword">bin</span>/grep -v <span class="hljs-string">&quot;Mounted&quot;</span> | /<span class="hljs-keyword">bin</span>/sed <span class="hljs-string">&quot;s/\s\+/|/g&quot;</span> | /<span class="hljs-keyword">bin</span>/sed <span class="hljs-string">&quot;s/%%//g&quot;</span><span class="hljs-string">&#x27;&#x27;</span> <span class="hljs-keyword">with</span> delimiter <span class="hljs-string">&#x27;&#x27;</span>|<span class="hljs-string">&#x27;&#x27;&#x27;, tablename);</span><br><span class="hljs-string">    execute sqlstring;</span><br><span class="hljs-string">    sqlstring = format(&#x27;</span><span class="hljs-keyword">select</span> json_agg(row_to_json(%s.*)) <span class="hljs-keyword">from</span> %s<span class="hljs-string">&#x27;, tablename, tablename);</span><br><span class="hljs-string">    execute sqlstring into result;</span><br><span class="hljs-string">    return result;</span><br><span class="hljs-string">end;</span><br><span class="hljs-string">$function$;</span><br><span class="hljs-string"></span><br></code></pre></td></tr></table></figure>
<h1 id="python函数获取Server磁盘空间信息"><a href="#python函数获取Server磁盘空间信息" class="headerlink" title="python函数获取Server磁盘空间信息"></a>python函数获取Server磁盘空间信息</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript">create or replace <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">get_disk_size</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"><span class="hljs-title">returns</span> <span class="hljs-title">jsonb</span> <span class="hljs-title">as</span></span><br><span class="hljs-function"><span class="hljs-title">$$</span></span><br><span class="hljs-function"><span class="hljs-title">import</span> <span class="hljs-title">psutil</span> <span class="hljs-title">as</span> <span class="hljs-title">ps</span></span><br><span class="hljs-function"><span class="hljs-title">import</span> <span class="hljs-title">json</span></span><br><span class="hljs-function"></span><br><span class="hljs-function"><span class="hljs-title">return</span> <span class="hljs-title">json</span>.<span class="hljs-title">dumps</span>(<span class="hljs-params">[&#123;</span></span><br><span class="hljs-function"><span class="hljs-params">    <span class="hljs-string">&quot;mounted on&quot;</span>: part.mountpoint,</span></span><br><span class="hljs-function"><span class="hljs-params">    <span class="hljs-string">&quot;filesystem&quot;</span>: part.device,</span></span><br><span class="hljs-function"><span class="hljs-params">    <span class="hljs-string">&quot;size&quot;</span>: round(ps.disk_usage(part.mountpoint).total <span class="hljs-regexp">/ 1024 /</span> <span class="hljs-number">1024</span>, <span class="hljs-number">2</span>),</span></span><br><span class="hljs-function"><span class="hljs-params">    <span class="hljs-string">&quot;avail&quot;</span>: round(ps.disk_usage(part.mountpoint).free <span class="hljs-regexp">/ 1024 /</span> <span class="hljs-number">1024</span>, <span class="hljs-number">2</span>),</span></span><br><span class="hljs-function"><span class="hljs-params">    <span class="hljs-string">&quot;used&quot;</span>: round(ps.disk_usage(part.mountpoint).used <span class="hljs-regexp">/ 1024 /</span> <span class="hljs-number">1024</span>, <span class="hljs-number">2</span>),</span></span><br><span class="hljs-function"><span class="hljs-params">    <span class="hljs-string">&quot;use%&quot;</span>: ps.disk_usage(part.mountpoint).percent,</span></span><br><span class="hljs-function"><span class="hljs-params">    <span class="hljs-string">&quot;type&quot;</span>: part.fstype,</span></span><br><span class="hljs-function"><span class="hljs-params">    <span class="hljs-string">&quot;opts&quot;</span>: part.opts&#125;</span></span><br><span class="hljs-function"><span class="hljs-params">    for part in ps.disk_partitions()]</span>)</span><br><span class="hljs-function"><span class="hljs-title">$$LANGUAGE</span> <span class="hljs-title">plpython3u</span>;</span><br></code></pre></td></tr></table></figure>
<h1 id="主库查询主从延迟"><a href="#主库查询主从延迟" class="headerlink" title="主库查询主从延迟"></a>主库查询主从延迟</h1><figure class="highlight pgsql"><table><tr><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">SELECT</span> pg_stat_replication.application_name,<br>   pg_size_pretty(pg_wal_lsn_diff(pg_current_wal_lsn(), pg_stat_replication.replay_lsn)) <span class="hljs-keyword">AS</span> diff<br>  <span class="hljs-keyword">FROM</span> pg_stat_replication;<br></code></pre></td></tr></table></figure>
<h1 id="从库查询主从延迟"><a href="#从库查询主从延迟" class="headerlink" title="从库查询主从延迟"></a>从库查询主从延迟</h1><figure class="highlight pgsql"><table><tr><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">SELECT</span><br>    <span class="hljs-keyword">CASE</span><br>        <span class="hljs-keyword">WHEN</span> pg_last_wal_receive_lsn() = pg_last_wal_replay_lsn() <span class="hljs-keyword">THEN</span> <span class="hljs-number">0</span>::<span class="hljs-type">double</span> <span class="hljs-type">precision</span><br>        <span class="hljs-keyword">ELSE</span> date_part(<span class="hljs-string">&#x27;epoch&#x27;</span>::<span class="hljs-type">text</span>, now() - pg_last_xact_replay_timestamp())<br>    <span class="hljs-keyword">END</span> <span class="hljs-keyword">AS</span> log_delay;<br></code></pre></td></tr></table></figure>
<h1 id="按query分组查询活跃SQL数量"><a href="#按query分组查询活跃SQL数量" class="headerlink" title="按query分组查询活跃SQL数量"></a>按query分组查询活跃SQL数量</h1><figure class="highlight pgsql"><table><tr><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">SELECT</span> pg_stat_activity.query,<br>   count(<span class="hljs-number">1</span>) <span class="hljs-keyword">AS</span> count<br>  <span class="hljs-keyword">FROM</span> pg_stat_activity<br> <span class="hljs-keyword">WHERE</span> pg_stat_activity.state &lt;&gt; <span class="hljs-string">&#x27;idle&#x27;</span>::<span class="hljs-type">text</span> <span class="hljs-keyword">AND</span> pg_stat_activity.pid &lt;&gt; pg_backend_pid() <span class="hljs-keyword">AND</span> pg_stat_activity.query &lt;&gt; <span class="hljs-string">&#x27;&#x27;</span>::<span class="hljs-type">text</span> <span class="hljs-keyword">AND</span> pg_stat_activity.query !~ <span class="hljs-string">&#x27;^DISCARD|^SET extra_float_digits = 3&#x27;</span>::<span class="hljs-type">text</span><br> <span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> pg_stat_activity.query<br><span class="hljs-keyword">HAVING</span> count(<span class="hljs-number">1</span>) &gt; <span class="hljs-number">1</span><br> <span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> (count(<span class="hljs-number">1</span>)) <span class="hljs-keyword">DESC</span><br><span class="hljs-keyword">LIMIT</span> <span class="hljs-number">10</span>;<br></code></pre></td></tr></table></figure>
<h1 id="查询锁"><a href="#查询锁" class="headerlink" title="查询锁"></a>查询锁</h1><figure class="highlight pgsql"><table><tr><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">select</span><br>      wait.pid,<br>      wait.state,<br>      wait.datname,<br>      (<span class="hljs-keyword">select</span> string_agg(<span class="hljs-keyword">distinct</span> transactionid::<span class="hljs-type">text</span>, <span class="hljs-string">&#x27;,&#x27;</span>) <span class="hljs-keyword">from</span> pg_locks <span class="hljs-keyword">where</span> pid = wait.pid <span class="hljs-keyword">and</span> locktype = <span class="hljs-string">&#x27;transactionid&#x27;</span> <span class="hljs-keyword">and</span> transactionid::<span class="hljs-type">text</span> &lt;&gt; wait.transactionid::<span class="hljs-type">text</span>),<br>      wait.virtualxid,<br>      wait.locktype,<br>      wait.usename,<br>      wait.application_name,<br>      wait.client_addr,<br>      wait.wait_event_type,<br>      wait.wait_event,<br>      wait.query_start,<br>      wait.query,<br><br>      wait.relation,<br>      wait.datname || <span class="hljs-string">&#x27;.&#x27;</span> || d.nspname || <span class="hljs-string">&#x27;.&#x27;</span> || c.relname <span class="hljs-keyword">as</span> relname,<br>      granted.relation,<br><br>      granted.pid              <span class="hljs-keyword">as</span> waitfor_pid,<br>      granted.state            <span class="hljs-keyword">as</span> waitfor_state,<br>      granted.transactionid    <span class="hljs-keyword">as</span> waitfor_transactionid,<br>      granted.virtualxid       <span class="hljs-keyword">as</span> waitfor_virtualxid,<br>      granted.locktype         <span class="hljs-keyword">as</span> waitfor_locktype,<br>      granted.usename          <span class="hljs-keyword">as</span> waitfor_usename,<br>      granted.client_addr      <span class="hljs-keyword">as</span> waitfor_client_addr,<br>      granted.application_name <span class="hljs-keyword">as</span> waitfor_application_name,<br>      granted.wait_event_type  <span class="hljs-keyword">as</span> waitfor_wait_event_type,<br>      granted.wait_event       <span class="hljs-keyword">as</span> waitfor_wait_event,<br>      granted.query_start      <span class="hljs-keyword">as</span> waitfor_query_start,<br>      granted.query            <span class="hljs-keyword">as</span> waitfor_query,<br>      now() - granted.query_start  <span class="hljs-keyword">as</span> waitfor_time<br><br><span class="hljs-keyword">from</span><br>    (<span class="hljs-keyword">select</span><br>          a.pid,<br>          a.state,<br>          b.transactionid,<br>          b.virtualxid,<br>          b.locktype,<br>          b.relation,<br>          b.page,<br>          b.tuple,<br>          a.usename,<br>          a.datname,<br>          a.application_name,<br>          a.client_addr,<br>          a.wait_event_type,<br>          a.wait_event,<br>          a.query_start,<br>          a.query<br>     <span class="hljs-keyword">from</span><br>          pg_stat_activity a,<br>          pg_locks b<br>     <span class="hljs-keyword">where</span><br>          a.wait_event_type <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span><br>          <span class="hljs-keyword">and</span> a.pid = b.pid<br>          <span class="hljs-keyword">and</span> granted = <span class="hljs-string">&#x27;f&#x27;</span><br>    ) wait<br><span class="hljs-keyword">join</span><br>    (<span class="hljs-keyword">select</span><br>          b.pid,<br>          b.state,<br>          a.transactionid,<br>          a.virtualxid,<br>          a.locktype,<br>          a.relation,<br>          a.page,<br>          a.tuple,<br>          b.usename,<br>          b.datname,<br>          b.application_name,<br>          b.client_addr,<br>          b.wait_event_type,<br>          b.wait_event,<br>          b.query_start,<br>          b.query<br>    <span class="hljs-keyword">from</span><br>        pg_locks a,<br>        pg_stat_activity b<br>    <span class="hljs-keyword">where</span><br>        a.pid = b.pid<br>        <span class="hljs-keyword">and</span> a.granted = <span class="hljs-string">&#x27;t&#x27;</span><br>    ) granted<br><span class="hljs-keyword">on</span> (<br>    ( wait.locktype = <span class="hljs-string">&#x27;transactionid&#x27;</span><br>    <span class="hljs-keyword">and</span> granted.locktype = <span class="hljs-string">&#x27;transactionid&#x27;</span><br>    <span class="hljs-keyword">and</span> wait.transactionid = granted.transactionid )<br>    <span class="hljs-keyword">or</span><br>    ( wait.locktype = <span class="hljs-string">&#x27;relation&#x27;</span><br>    <span class="hljs-keyword">and</span> granted.locktype = <span class="hljs-string">&#x27;relation&#x27;</span><br>    <span class="hljs-keyword">and</span> wait.relation = granted.relation<br>    )<br>    <span class="hljs-keyword">or</span><br>    ( wait.locktype = <span class="hljs-string">&#x27;virtualxid&#x27;</span><br>    <span class="hljs-keyword">and</span> granted.locktype = <span class="hljs-string">&#x27;virtualxid&#x27;</span><br>    <span class="hljs-keyword">and</span> wait.virtualxid = granted.virtualxid )<br>    <span class="hljs-keyword">or</span><br>    ( wait.locktype = <span class="hljs-string">&#x27;tuple&#x27;</span><br>    <span class="hljs-keyword">and</span> granted.locktype = <span class="hljs-string">&#x27;tuple&#x27;</span><br>    <span class="hljs-keyword">and</span> wait.relation = granted.relation<br>    <span class="hljs-keyword">and</span> wait.page = granted.page<br>    <span class="hljs-keyword">and</span> wait.tuple = granted.tuple )<br>)<br><span class="hljs-keyword">left join</span><br>    pg_class c<br><span class="hljs-keyword">on</span> ( c.relfilenode = wait.relation )<br><span class="hljs-keyword">left join</span><br>    pg_namespace d<br><span class="hljs-keyword">on</span> ( c.relnamespace = d.oid )<br><span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span><br>    granted.query_start<br>;<br></code></pre></td></tr></table></figure>
<h1 id="查询表大小-按占用大小排序"><a href="#查询表大小-按占用大小排序" class="headerlink" title="查询表大小, 按占用大小排序"></a>查询表大小, 按占用大小排序</h1><figure class="highlight pgsql"><table><tr><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">SELECT</span><br>    t.spcname,<br>    (n.nspname::<span class="hljs-type">text</span> || <span class="hljs-string">&#x27;.&#x27;</span>::<span class="hljs-type">text</span>) || c.relname::<span class="hljs-type">text</span> <span class="hljs-keyword">AS</span> relation,<br>    pg_size_pretty(pg_total_relation_size(c.oid::<span class="hljs-type">regclass</span>)) <span class="hljs-keyword">AS</span> total_table_size,<br>    pg_size_pretty(pg_relation_size(c.oid::<span class="hljs-type">regclass</span>)) <span class="hljs-keyword">AS</span> table_only_size,<br>    pg_size_pretty(pg_indexes_size(c.oid::<span class="hljs-type">regclass</span>)) <span class="hljs-keyword">AS</span> total_index_size<br><span class="hljs-keyword">FROM</span><br>    pg_class c<br>    <span class="hljs-keyword">LEFT JOIN</span> pg_tablespace t <span class="hljs-keyword">ON</span> c.reltablespace = t.oid<br>    <span class="hljs-keyword">LEFT JOIN</span> pg_namespace n <span class="hljs-keyword">ON</span> n.oid = c.relnamespace<br><span class="hljs-keyword">WHERE</span> (n.nspname &lt;&gt; <span class="hljs-keyword">ALL</span> (<span class="hljs-keyword">ARRAY</span>[<span class="hljs-string">&#x27;pg_catalog&#x27;</span>::<span class="hljs-type">name</span>, <span class="hljs-string">&#x27;information_schema&#x27;</span>::<span class="hljs-type">name</span>, <span class="hljs-string">&#x27;pg_toast&#x27;</span>::<span class="hljs-type">name</span>]))<br>    <span class="hljs-keyword">AND</span> c.relkind = <span class="hljs-string">&#x27;r&#x27;</span>::&quot;char&quot;<br><span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span><br>    (pg_total_relation_size(c.oid::<span class="hljs-type">regclass</span>)) <span class="hljs-keyword">DESC</span>;<br></code></pre></td></tr></table></figure>
<h1 id="找出重复的index"><a href="#找出重复的index" class="headerlink" title="找出重复的index"></a>找出重复的index</h1><figure class="highlight pgsql"><table><tr><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">SELECT</span><br>    relname,<br>    (array_agg(idx))[<span class="hljs-number">1</span>] idx1,<br>    pg_get_indexdef((array_agg(idx))[<span class="hljs-number">1</span>]) idx1_def,<br>    (array_agg(idx))[<span class="hljs-number">2</span>] idx2,<br>    pg_get_indexdef((array_agg(idx))[<span class="hljs-number">2</span>]) idx2_def,<br>    (array_agg(idx))[<span class="hljs-number">3</span>] idx3,<br>    pg_get_indexdef((array_agg(idx))[<span class="hljs-number">3</span>]) idx3_def<br><span class="hljs-keyword">FROM</span> (<br>    <span class="hljs-keyword">SELECT</span><br>        indrelid::<span class="hljs-type">regclass</span> <span class="hljs-keyword">AS</span> relname,<br>        indexrelid::<span class="hljs-type">regclass</span> <span class="hljs-keyword">AS</span> idx,<br>        (indrelid::<span class="hljs-type">text</span> || indclass::<span class="hljs-type">text</span> || indkey::<span class="hljs-type">text</span> || COALESCE(indexprs::<span class="hljs-type">text</span>, <span class="hljs-string">&#x27;&#x27;</span>) || COALESCE(indpred::<span class="hljs-type">text</span>, <span class="hljs-string">&#x27;&#x27;</span>)) <span class="hljs-keyword">AS</span> KEY<br>    <span class="hljs-keyword">FROM</span><br>        pg_index) sub<br><span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span><br>    relname,<br>    KEY<br><span class="hljs-keyword">HAVING</span><br>    count(*) &gt; <span class="hljs-number">1</span>;<br></code></pre></td></tr></table></figure>
<h1 id="自定义操作符兼容Oracle-varchar-int"><a href="#自定义操作符兼容Oracle-varchar-int" class="headerlink" title="自定义操作符兼容Oracle varchar = int"></a>自定义操作符兼容Oracle varchar = int</h1><figure class="highlight routeros"><table><tr><td class="code"><pre><code class="hljs routeros"><span class="hljs-attribute">mydb</span>=# create table test(<span class="hljs-builtin-name">info</span> varchar);<br>CREATE TABLE<br><span class="hljs-attribute">mydb</span>=# insert into test select <span class="hljs-string">&#x27;1&#x27;</span>;<br>INSERT 0 1<br><span class="hljs-attribute">mydb</span>=# insert into test select <span class="hljs-string">&#x27;2&#x27;</span>;<br>INSERT 0 1<br><span class="hljs-attribute">mydb</span>=# insert into test select <span class="hljs-string">&#x27;3&#x27;</span>;<br>INSERT 0 1<br><span class="hljs-attribute">mydb</span>=# select * <span class="hljs-keyword">from</span> test;<br> info<br>------<br> 1<br> 2<br> 3<br>(3 rows)<br><br><span class="hljs-attribute">mydb</span>=# select * <span class="hljs-keyword">from</span> test where <span class="hljs-builtin-name">info</span> = 1;<br>ERROR:  operator does <span class="hljs-keyword">not</span> exist: character varying = integer<br>LINE 1: select * <span class="hljs-keyword">from</span> test where <span class="hljs-builtin-name">info</span> = 1;<br>                                      ^<br>HINT:  <span class="hljs-literal">No</span> operator matches the given name <span class="hljs-keyword">and</span> argument types. You might need <span class="hljs-keyword">to</span> <span class="hljs-builtin-name">add</span> explicit<span class="hljs-built_in"> type </span>casts.<br><span class="hljs-attribute">mydb</span>=# CREATE <span class="hljs-keyword">OR</span> REPLACE FUNCTION equal(character varying, integer) RETURNS boolean AS <span class="hljs-variable">$function</span>$ select cast(<span class="hljs-variable">$1</span> as text) = cast(<span class="hljs-variable">$2</span> as text) <span class="hljs-variable">$function</span>$ LANGUAGE sql;<br>CREATE FUNCTION<br><span class="hljs-attribute">mydb</span>=# create operator = (leftarg = varchar, rightarg = int, procedure = equal, commutator = =);<br>CREATE OPERATOR<br><span class="hljs-attribute">mydb</span>=# select * <span class="hljs-keyword">from</span> test where <span class="hljs-builtin-name">info</span> = 1;<br> info<br>------<br> 1<br>(1 row)<br><br><span class="hljs-attribute">mydb</span>=#<br><br></code></pre></td></tr></table></figure>
<h1 id="兼容instr"><a href="#兼容instr" class="headerlink" title="兼容instr"></a>兼容instr</h1><figure class="highlight perl"><table><tr><td class="code"><pre><code class="hljs perl">mydb=<span class="hljs-comment"># select instr(&#x27;helloworld&#x27;, &#x27;l&#x27;, 2, 2);</span><br> instr<br>-------<br>     <span class="hljs-number">4</span><br>(<span class="hljs-number">1</span> row)<br><br>mydb=<span class="hljs-comment"># select instr(&#x27;helloworld&#x27;, &#x27;l&#x27;, 3, 2);</span><br> instr<br>-------<br>     <span class="hljs-number">4</span><br>(<span class="hljs-number">1</span> row)<br><br>mydb=<span class="hljs-comment"># select instr(&#x27;helloworld&#x27;, &#x27;l&#x27;, -1, 1);</span><br> instr<br>-------<br>     <span class="hljs-number">9</span><br>(<span class="hljs-number">1</span> row)<br><br>mydb=<span class="hljs-comment"># select instr(&#x27;helloworld&#x27;, &#x27;l&#x27;, -2, 1);</span><br> instr<br>-------<br>     <span class="hljs-number">9</span><br>(<span class="hljs-number">1</span> row)<br><br>mydb=<span class="hljs-comment"># \sf instr</span><br>CREATE OR REPLACE FUNCTION public.instr(str text, <span class="hljs-function"><span class="hljs-keyword">sub</span> <span class="hljs-title">text</span>, <span class="hljs-title">startpos</span> <span class="hljs-title">integer</span> <span class="hljs-title">DEFAULT</span> 1, <span class="hljs-title">occurrence</span> <span class="hljs-title">integer</span> <span class="hljs-title">DEFAULT</span> 1)</span><br><span class="hljs-function"> <span class="hljs-title">RETURNS</span> <span class="hljs-title">integer</span></span><br><span class="hljs-function"> <span class="hljs-title">LANGUAGE</span> <span class="hljs-title">plpgsql</span></span><br><span class="hljs-function"><span class="hljs-title">AS</span> $<span class="hljs-title">function</span>$</span><br><span class="hljs-function"><span class="hljs-title">declare</span></span><br><span class="hljs-function">    <span class="hljs-title">tail</span> <span class="hljs-title">text</span></span>;<br>    <span class="hljs-keyword">shift</span> <span class="hljs-keyword">int</span>;<br>    <span class="hljs-keyword">pos</span> <span class="hljs-keyword">int</span>;<br>    i <span class="hljs-keyword">int</span>;<br>begin<br>    <span class="hljs-keyword">shift</span>:= <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span> startpos = <span class="hljs-number">0</span> <span class="hljs-keyword">or</span> occurrence &lt;= <span class="hljs-number">0</span> then<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    end <span class="hljs-keyword">if</span>;<br>    <span class="hljs-keyword">if</span> startpos &lt; <span class="hljs-number">0</span> then<br>        str:= <span class="hljs-keyword">reverse</span>(str);<br>        <span class="hljs-function"><span class="hljs-keyword">sub</span>:= <span class="hljs-title">reverse</span></span>(<span class="hljs-keyword">sub</span>);<br>        <span class="hljs-keyword">pos</span>:= -startpos;<br>    <span class="hljs-keyword">else</span><br>        <span class="hljs-keyword">pos</span>:= startpos;<br>    end <span class="hljs-keyword">if</span>;<br>    <span class="hljs-keyword">for</span> i in <span class="hljs-number">1</span>..occurrence loop<br>        <span class="hljs-keyword">shift</span>:= <span class="hljs-keyword">shift</span>+ <span class="hljs-keyword">pos</span>;<br>        tail:= <span class="hljs-keyword">substr</span>(str, <span class="hljs-keyword">shift</span>);<br>        <span class="hljs-keyword">pos</span>:= strpos(tail, <span class="hljs-function"><span class="hljs-keyword">sub</span>)</span>;<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">pos</span> = <span class="hljs-number">0</span> then<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        end <span class="hljs-keyword">if</span>;<br>    end loop;<br>    <span class="hljs-keyword">if</span> startpos &gt; <span class="hljs-number">0</span> then<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">pos</span>+ <span class="hljs-keyword">shift</span>- <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">else</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">length</span>(str)- <span class="hljs-keyword">length</span>(<span class="hljs-function"><span class="hljs-keyword">sub</span>)- <span class="hljs-title">pos</span>- <span class="hljs-title">shift</span>+ 3</span>;<br>    end <span class="hljs-keyword">if</span>;<br>end $function$<br>mydb=<span class="hljs-comment">#</span><br><br></code></pre></td></tr></table></figure>
<h1 id="procedure-异常处理"><a href="#procedure-异常处理" class="headerlink" title="procedure 异常处理"></a>procedure 异常处理</h1><figure class="highlight cal"><table><tr><td class="code"><pre><code class="hljs cal">mydb=# CREATE <span class="hljs-keyword">OR</span> REPLACE <span class="hljs-function"><span class="hljs-keyword">PROCEDURE</span> <span class="hljs-title">f1</span><span class="hljs-params">()</span></span><br><span class="hljs-function"> <span class="hljs-title">LANGUAGE</span> <span class="hljs-title">plpgsql</span></span><br><span class="hljs-function"><span class="hljs-title">AS</span> $<span class="hljs-title">procedure</span>$</span><br><span class="hljs-function"><span class="hljs-title">declare</span></span><br><span class="hljs-function">  <span class="hljs-title">my_ex_state</span> <span class="hljs-title">text</span>;</span><br>  my_ex_message text;<br>  my_ex_detail text;<br>  my_ex_hint text;<br>  my_ex_ctx text;<br><span class="hljs-keyword">begin</span><br>  <span class="hljs-keyword">begin</span><br>    raise notice <span class="hljs-string">&#x27;A&#x27;</span>;<br>  exception when others <span class="hljs-keyword">then</span><br>    raise notice <span class="hljs-string">&#x27;C&#x27;</span>;<br>    GET STACKED DIAGNOSTICS<br>      my_ex_state   = RETURNED_SQLSTATE,<br>      my_ex_message = MESSAGE_TEXT,<br>      my_ex_detail  = PG_EXCEPTION_DETAIL,<br>      my_ex_hint    = PG_EXCEPTION_HINT,<br>      my_ex_ctx     = PG_EXCEPTION_CONTEXT<br>    ;<br>    raise notice <span class="hljs-string">&#x27;% % % % %&#x27;</span>, my_ex_state, my_ex_message, my_ex_detail, my_ex_hint, my_ex_ctx;<br>  <span class="hljs-keyword">end</span>;<br><br>  commit;<br><br>  <span class="hljs-keyword">begin</span><br>    raise notice <span class="hljs-string">&#x27;B&#x27;</span>;<br>  exception when others <span class="hljs-keyword">then</span><br>    raise notice <span class="hljs-string">&#x27;C&#x27;</span>;<br>    GET STACKED DIAGNOSTICS<br>      my_ex_state   = RETURNED_SQLSTATE,<br>      my_ex_message = MESSAGE_TEXT,<br>      my_ex_detail  = PG_EXCEPTION_DETAIL,<br>      my_ex_hint    = PG_EXCEPTION_HINT,<br>      my_ex_ctx     = PG_EXCEPTION_CONTEXT<br>    ;<br>    raise notice <span class="hljs-string">&#x27;% % % % %&#x27;</span>, my_ex_state, my_ex_message, my_ex_detail, my_ex_hint, my_ex_ctx;<br>  <span class="hljs-keyword">end</span>;<br><span class="hljs-keyword">end</span>;<br>$<span class="hljs-function"><span class="hljs-keyword">procedure</span>$</span><br><span class="hljs-function">;</span><br><br></code></pre></td></tr></table></figure>
<h1 id="找下一个周末"><a href="#找下一个周末" class="headerlink" title="找下一个周末"></a>找下一个周末</h1><figure class="highlight angelscript"><table><tr><td class="code"><pre><code class="hljs angelscript">postgres=# select next_day(<span class="hljs-string">&#x27;2020-12-22&#x27;</span>::date, <span class="hljs-number">7</span>);<br>  next_day<br>------------<br> <span class="hljs-number">2020</span><span class="hljs-number">-12</span><span class="hljs-number">-26</span><br>(<span class="hljs-number">1</span> row)<br><br>postgres=# select next_day(<span class="hljs-string">&#x27;2020-12-21&#x27;</span>::date, <span class="hljs-number">7</span>);<br>  next_day<br>------------<br> <span class="hljs-number">2020</span><span class="hljs-number">-12</span><span class="hljs-number">-26</span><br>(<span class="hljs-number">1</span> row)<br><br>postgres=# select next_day(<span class="hljs-string">&#x27;2020-12-20&#x27;</span>::date, <span class="hljs-number">7</span>);<br>  next_day<br>------------<br> <span class="hljs-number">2020</span><span class="hljs-number">-12</span><span class="hljs-number">-26</span><br>(<span class="hljs-number">1</span> row)<br><br></code></pre></td></tr></table></figure>
<h1 id="PostgreSQL只迁移FUNCTION"><a href="#PostgreSQL只迁移FUNCTION" class="headerlink" title="PostgreSQL只迁移FUNCTION"></a>PostgreSQL只迁移FUNCTION</h1><figure class="highlight pgsql"><table><tr><td class="code"><pre><code class="hljs pgsql">pg_dump -h localhost -U jintao -Fc -s -f db_dump mydb<br>more db_dump<br>pg_restore -l db_dump | grep <span class="hljs-keyword">FUNCTION</span> &gt; function_list<br>cat function_list<br>pg_restore -h localhost -U postgres -d postgres -L function_list db_dump<br></code></pre></td></tr></table></figure>
<h1 id="pageinspect-查看xmax的状态"><a href="#pageinspect-查看xmax的状态" class="headerlink" title="pageinspect 查看xmax的状态"></a>pageinspect 查看xmax的状态</h1><figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> lp,<br>       t_ctid <span class="hljs-keyword">AS</span> ctid,<br>       t_xmin <span class="hljs-keyword">AS</span> xmin,<br>       t_xmax <span class="hljs-keyword">AS</span> xmax,<br>       (t_infomask &amp; <span class="hljs-number">128</span>)::<span class="hljs-built_in">boolean</span> <span class="hljs-keyword">AS</span> xmax_is_lock,<br>       (t_infomask &amp; <span class="hljs-number">1024</span>)::<span class="hljs-built_in">boolean</span> <span class="hljs-keyword">AS</span> xmax_committed,<br>       (t_infomask &amp; <span class="hljs-number">2048</span>)::<span class="hljs-built_in">boolean</span> <span class="hljs-keyword">AS</span> xmax_rolled_back,<br>       (t_infomask &amp; <span class="hljs-number">4096</span>)::<span class="hljs-built_in">boolean</span> <span class="hljs-keyword">AS</span> xmax_multixact,<br>       t_attrs[<span class="hljs-number">1</span>] <span class="hljs-keyword">AS</span> p_id,<br>       t_attrs[<span class="hljs-number">2</span>] <span class="hljs-keyword">AS</span> p_val<br><span class="hljs-keyword">FROM</span> heap_page_item_attrs(<br>        get_raw_page(<span class="hljs-string">&#x27;parent&#x27;</span>, <span class="hljs-number">0</span>),<br>        <span class="hljs-string">&#x27;parent&#x27;</span><br>     );<br></code></pre></td></tr></table></figure>
<h1 id="PostgreSQL9-1主从延迟查询"><a href="#PostgreSQL9-1主从延迟查询" class="headerlink" title="PostgreSQL9.1主从延迟查询"></a>PostgreSQL9.1主从延迟查询</h1><figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">postgres=<span class="hljs-comment"># \sf pg_xlog_location_diff</span><br>CREATE OR REPLACE FUNCTION pg_catalog.pg_xlog_location_diff(text, text)<br> RETURNS numeric<br> LANGUAGE plpgsql<br>AS <span class="hljs-variable">$function</span>$<br>    DECLARE<br>       offset1 text;<br>       offset2 text;<br>       xlog1 text;<br>       xlog2 text;<br>       SQL text;<br>       diff text;<br>    <span class="hljs-keyword">BEGIN</span><br>       /* Extract the Offset and xlog from input <span class="hljs-keyword">in</span><br>          offset and xlog variables */<br><br>       offset1=split_part(<span class="hljs-variable">$1</span>,<span class="hljs-string">&#x27;/&#x27;</span>,<span class="hljs-number">2</span>);<br>         xlog1=split_part(<span class="hljs-variable">$1</span>,<span class="hljs-string">&#x27;/&#x27;</span>,<span class="hljs-number">1</span>);<br>       offset2=split_part(<span class="hljs-variable">$2</span>,<span class="hljs-string">&#x27;/&#x27;</span>,<span class="hljs-number">2</span>);<br>         xlog2=split_part(<span class="hljs-variable">$2</span>,<span class="hljs-string">&#x27;/&#x27;</span>,<span class="hljs-number">1</span>);<br><br>       /* Prepare SQL query <span class="hljs-keyword">for</span> calculation based on following formula<br>         (FF000000 * xlog + offset) - (FF000000 * xlog + offset)<br>         which gives value <span class="hljs-keyword">in</span> hexadecimal. Since, hexadecimal calculation is cumbersome<br>         so convert into decimal and then calculate the difference */<br><br>       SQL=<span class="hljs-string">&#x27;SELECT (x&#x27;</span><span class="hljs-string">&#x27;&#x27;</span>||<span class="hljs-string">&#x27;FF000000&#x27;</span>||<span class="hljs-string">&#x27;&#x27;&#x27;::bigint * x&#x27;&#x27;&#x27;</span>||xlog1||<span class="hljs-string">&#x27;&#x27;&#x27;::bigint</span><br><span class="hljs-string">                                +  x&#x27;&#x27;&#x27;</span>||offset1||<span class="hljs-string">&#x27;&#x27;&#x27;::bigint)&#x27;||&#x27;</span><br><span class="hljs-string">                -</span><br><span class="hljs-string">                   (x&#x27;&#x27;&#x27;</span>||<span class="hljs-string">&#x27;FF000000&#x27;</span>||<span class="hljs-string">&#x27;&#x27;&#x27;::bigint * x&#x27;&#x27;&#x27;</span>||xlog2||<span class="hljs-string">&#x27;&#x27;&#x27;::bigint</span><br><span class="hljs-string">                                +  x&#x27;&#x27;&#x27;</span>||offset2||<span class="hljs-string">&#x27;&#x27;&#x27;::bigint)&#x27;;</span><br><span class="hljs-string">       EXECUTE SQL into diff;</span><br><span class="hljs-string"></span><br><span class="hljs-string">       /* Return the value in numeric by explicit casting  */</span><br><span class="hljs-string"></span><br><span class="hljs-string">       RETURN diff::numeric;</span><br><span class="hljs-string">    END;</span><br><span class="hljs-string"> $function$</span><br><span class="hljs-string">postgres=# SELECT</span><br><span class="hljs-string">    application_name,</span><br><span class="hljs-string">    pg_xlog_location_diff(pg_current_xlog_location(), replay_location) as diff</span><br><span class="hljs-string">FROM</span><br><span class="hljs-string">    pg_stat_replication</span><br><span class="hljs-string">;</span><br><span class="hljs-string"> application_name | diff</span><br><span class="hljs-string">------------------+-------</span><br><span class="hljs-string"> walreceiver      | 18272</span><br><span class="hljs-string">(1 row)</span><br><span class="hljs-string"></span><br></code></pre></td></tr></table></figure>
<h1 id="获取cluster初始化的时间"><a href="#获取cluster初始化的时间" class="headerlink" title="获取cluster初始化的时间"></a>获取cluster初始化的时间</h1><figure class="highlight routeros"><table><tr><td class="code"><pre><code class="hljs routeros">$ pg_controldata |grep -i system<br>Database<span class="hljs-built_in"> system </span>identifier:           6888133981158752630<br>$ psql<br>psql (14devel)<br>Type <span class="hljs-string">&quot;help&quot;</span> <span class="hljs-keyword">for</span> help.<br><br><span class="hljs-attribute">mydb</span>=# SELECT to_timestamp(((6888133981158752630&gt;&gt;32) &amp; (2^32 -1)::bigint));<br>      to_timestamp<br>------------------------<br> 2020-10-27 11:17:48+08<br>(1 row)<br><br><span class="hljs-attribute">mydb</span>=#<br><br></code></pre></td></tr></table></figure>
<h1 id="tuple-internal详解"><a href="#tuple-internal详解" class="headerlink" title="tuple-internal详解"></a>tuple-internal详解</h1><figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">https:<span class="hljs-regexp">//</span>pgconf.ru<span class="hljs-regexp">/media/</span><span class="hljs-number">2016</span><span class="hljs-regexp">/05/</span><span class="hljs-number">13</span>/tuple-internals.pdf<br></code></pre></td></tr></table></figure>
<h1 id="PostgreSQL-clog最大大小"><a href="#PostgreSQL-clog最大大小" class="headerlink" title="PostgreSQL clog最大大小"></a>PostgreSQL clog最大大小</h1><figure class="highlight pgsql"><table><tr><td class="code"><pre><code class="hljs pgsql"><span class="hljs-meta">#define CLOG_BITS_PER_XACT      2   //2bit一个事物</span><br><span class="hljs-meta">#define CLOG_XACTS_PER_BYTE 4       //1Byte4个事物</span><br><span class="hljs-meta">#define CLOG_XACTS_PER_PAGE (BLCKSZ * CLOG_XACTS_PER_BYTE)</span><br><br><span class="hljs-number">500</span>M，内存中处理完全够效率, 想想要是<span class="hljs-number">64</span>位xid, 光clog大小就不一定多大了.<br><br>clog总大小约<span class="hljs-number">500</span>MB, 每个clog文件<span class="hljs-number">256</span>kb, 最多<span class="hljs-number">2097152</span>个clog文件.<br><br>mydb=# <span class="hljs-keyword">select</span> <span class="hljs-number">2</span>^<span class="hljs-number">31</span>/<span class="hljs-number">4</span>/<span class="hljs-number">256</span>;<br> ?<span class="hljs-keyword">column</span>?<br><span class="hljs-comment">----------</span><br>  <span class="hljs-number">2097152</span><br>(<span class="hljs-number">1</span> <span class="hljs-keyword">row</span>)<br><br>mydb=# <span class="hljs-keyword">select</span> pg_size_pretty((<span class="hljs-number">2</span>^<span class="hljs-number">31</span>/<span class="hljs-number">4</span>)::<span class="hljs-type">bigint</span>);<br> pg_size_pretty<br><span class="hljs-comment">----------------</span><br> <span class="hljs-number">512</span> MB<br>(<span class="hljs-number">1</span> <span class="hljs-keyword">row</span>)<br><br>mydb=#<br><br></code></pre></td></tr></table></figure>
<h1 id="bytea转为原始字符"><a href="#bytea转为原始字符" class="headerlink" title="bytea转为原始字符"></a>bytea转为原始字符</h1><figure class="highlight pgsql"><table><tr><td class="code"><pre><code class="hljs pgsql">postgres=# <span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> t_bytea(<span class="hljs-keyword">info</span> <span class="hljs-type">bytea</span>);<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span><br>postgres=# <span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> t_bytea <span class="hljs-keyword">select</span> <span class="hljs-string">&#x27;hello&#x27;</span>;<br><span class="hljs-keyword">INSERT</span> <span class="hljs-number">0</span> <span class="hljs-number">1</span><br>postgres=# <span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> t_bytea <span class="hljs-keyword">select</span> <span class="hljs-string">&#x27;我的家乡&#x27;</span>;<br><span class="hljs-keyword">INSERT</span> <span class="hljs-number">0</span> <span class="hljs-number">1</span><br>postgres=# <span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> t_bytea ;<br>            <span class="hljs-keyword">info</span><br><span class="hljs-comment">----------------------------</span><br> \x68656c6c6f<br> \xe68891e79a84e5aeb6e4b9a1<br>(<span class="hljs-number">2</span> <span class="hljs-keyword">rows</span>)<br><br>postgres=# <span class="hljs-keyword">select</span> encode(<span class="hljs-keyword">info</span>, <span class="hljs-string">&#x27;escape&#x27;</span>) <span class="hljs-keyword">from</span> t_bytea ;<br>                      encode<br><span class="hljs-comment">--------------------------------------------------</span><br> hello<br> \<span class="hljs-number">346</span>\<span class="hljs-number">210</span>\<span class="hljs-number">221</span>\<span class="hljs-number">347</span>\<span class="hljs-number">232</span>\<span class="hljs-number">204</span>\<span class="hljs-number">345</span>\<span class="hljs-number">256</span>\<span class="hljs-number">266</span>\<span class="hljs-number">344</span>\<span class="hljs-number">271</span>\<span class="hljs-number">241</span><br>(<span class="hljs-number">2</span> <span class="hljs-keyword">rows</span>)<br><br>postgres=# <span class="hljs-keyword">select</span> convert_from(<span class="hljs-keyword">info</span>, <span class="hljs-string">&#x27;UTF8&#x27;</span>) <span class="hljs-keyword">from</span> t_bytea ;<br> convert_from<br><span class="hljs-comment">--------------</span><br> hello<br> 我的家乡<br>(<span class="hljs-number">2</span> <span class="hljs-keyword">rows</span>)<br><br></code></pre></td></tr></table></figure>
<figure class="highlight n1ql"><table><tr><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">schema</span> dba;<br></code></pre></td></tr></table></figure>
<h1 id="tps"><a href="#tps" class="headerlink" title="tps"></a>tps</h1><figure class="highlight pgsql"><table><tr><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">or replace</span> <span class="hljs-keyword">procedure</span> dba.tps() <span class="hljs-keyword">as</span> $$<br><span class="pgsql"><span class="hljs-keyword">declare</span></span><br><span class="pgsql">  v1 <span class="hljs-type">int8</span>;</span><br><span class="pgsql">  v2 <span class="hljs-type">int8</span>;</span><br><span class="pgsql"><span class="hljs-keyword">begin</span></span><br><span class="pgsql">  <span class="hljs-keyword">select</span> txid_snapshot_xmax(txid_current_snapshot()) <span class="hljs-keyword">into</span> v1;</span><br><span class="pgsql">  <span class="hljs-keyword">commit</span>;</span><br><span class="pgsql">  <span class="hljs-keyword">perform</span> pg_sleep(<span class="hljs-number">1</span>);</span><br><span class="pgsql">  <span class="hljs-keyword">select</span> txid_snapshot_xmax(txid_current_snapshot()) <span class="hljs-keyword">into</span> v2;</span><br><span class="pgsql">  <span class="hljs-keyword">commit</span>;</span><br><span class="pgsql">  <span class="hljs-keyword">raise</span> <span class="hljs-keyword">notice</span> <span class="hljs-string">&#x27;tps: %&#x27;</span>, v2-v1;</span><br><span class="pgsql"><span class="hljs-keyword">end</span>;</span><br><span class="ruby">$$</span> <span class="hljs-keyword">language</span> plpgsql ;<br></code></pre></td></tr></table></figure>
<h1 id="qps"><a href="#qps" class="headerlink" title="qps"></a>qps</h1><p>用select sum(calls) s from pg_stat_statements(false) 而不用select sum(calls) s from pg_stat_statements<br>不需要具体的query, 查询效率好很多.<br><figure class="highlight pgsql"><table><tr><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">with</span><br>a <span class="hljs-keyword">as</span> (<span class="hljs-keyword">select</span> sum(calls) s <span class="hljs-keyword">from</span> pg_stat_statements(<span class="hljs-keyword">false</span>)),   <br>b <span class="hljs-keyword">as</span> (<span class="hljs-keyword">select</span> sum(calls) s <span class="hljs-keyword">from</span> pg_stat_statements(<span class="hljs-keyword">false</span>) , pg_sleep(<span class="hljs-number">1</span>))   <br><span class="hljs-keyword">select</span>   <br>b.s-a.s          <span class="hljs-comment">-- QPS  </span><br><span class="hljs-keyword">from</span> a,b;<br></code></pre></td></tr></table></figure></p>
<h1 id="查询没有使用过的大于1MB的索引-top-10"><a href="#查询没有使用过的大于1MB的索引-top-10" class="headerlink" title="查询没有使用过的大于1MB的索引 top 10"></a>查询没有使用过的大于1MB的索引 top 10</h1><figure class="highlight pgsql"><table><tr><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">VIEW</span> dba.top10notusedidx <span class="hljs-keyword">AS</span><br><span class="hljs-keyword">SELECT</span><br>    pg_size_pretty(pg_relation_size(indexrelid)),<br>    *<br><span class="hljs-keyword">FROM</span><br>    pg_stat_all_indexes<br><span class="hljs-keyword">WHERE</span><br>    pg_relation_size(indexrelid) &gt;= <span class="hljs-number">1024000</span><br>    <span class="hljs-keyword">AND</span> (idx_scan = <span class="hljs-number">0</span><br>        <span class="hljs-keyword">OR</span> idx_tup_read = <span class="hljs-number">0</span><br>        <span class="hljs-keyword">OR</span> idx_tup_fetch = <span class="hljs-number">0</span>)<br>    <span class="hljs-keyword">AND</span> schemaname <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">IN</span> (<span class="hljs-string">&#x27;pg_toast&#x27;</span>, <span class="hljs-string">&#x27;pg_catalog&#x27;</span>)<br><span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span><br>    pg_relation_size(indexrelid) <span class="hljs-keyword">DESC</span><br><span class="hljs-keyword">LIMIT</span> <span class="hljs-number">10</span>;<br></code></pre></td></tr></table></figure>
<p>注意, PK、UK如果只是用于约束, 可能不会被统计计数,但是不能删掉) </p>
<h1 id="查询没有使用过的大于1MB的表-top-10"><a href="#查询没有使用过的大于1MB的表-top-10" class="headerlink" title="查询没有使用过的大于1MB的表 top 10"></a>查询没有使用过的大于1MB的表 top 10</h1><figure class="highlight pgsql"><table><tr><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">VIEW</span> dba.top10notusedtab <span class="hljs-keyword">AS</span><br><span class="hljs-keyword">SELECT</span><br>    pg_size_pretty(pg_relation_size(relid)),<br>    *<br><span class="hljs-keyword">FROM</span><br>    pg_stat_all_tables<br><span class="hljs-keyword">WHERE</span><br>    pg_relation_size(relid) &gt;= <span class="hljs-number">1024000</span><br>    <span class="hljs-keyword">AND</span> seq_scan = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">AND</span> idx_scan = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">AND</span> schemaname <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">IN</span> (<span class="hljs-string">&#x27;pg_toast&#x27;</span>, <span class="hljs-string">&#x27;pg_catalog&#x27;</span>, <span class="hljs-string">&#x27;information_schema&#x27;</span>)<br><span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span><br>    pg_relation_size(relid) <span class="hljs-keyword">DESC</span><br><span class="hljs-keyword">LIMIT</span> <span class="hljs-number">10</span>;<br></code></pre></td></tr></table></figure>
<h1 id="查询热表top-10"><a href="#查询热表top-10" class="headerlink" title="查询热表top 10"></a>查询热表top 10</h1><figure class="highlight pgsql"><table><tr><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">VIEW</span> dba.top10hottab <span class="hljs-keyword">AS</span><br><span class="hljs-keyword">SELECT</span><br>    pg_size_pretty(pg_relation_size(relid)),<br>    *<br><span class="hljs-keyword">FROM</span><br>    pg_stat_all_tables<br><span class="hljs-keyword">WHERE</span><br>    schemaname <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">IN</span> (<span class="hljs-string">&#x27;pg_toast&#x27;</span>, <span class="hljs-string">&#x27;pg_catalog&#x27;</span>, <span class="hljs-string">&#x27;information_schema&#x27;</span>)<br><span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span><br>    seq_scan + idx_scan <span class="hljs-keyword">DESC</span>,<br>    pg_relation_size(relid) <span class="hljs-keyword">DESC</span><br><span class="hljs-keyword">LIMIT</span> <span class="hljs-number">10</span>;<br></code></pre></td></tr></table></figure>
<h1 id="在standby节点执行，-接收wal的速度。"><a href="#在standby节点执行，-接收wal的速度。" class="headerlink" title="在standby节点执行， 接收wal的速度。"></a>在standby节点执行， 接收wal的速度。</h1><figure class="highlight cal"><table><tr><td class="code"><pre><code class="hljs cal">CREATE <span class="hljs-keyword">OR</span> REPLACE <span class="hljs-function"><span class="hljs-keyword">PROCEDURE</span> <span class="hljs-title">dba</span>.<span class="hljs-title">wal_receive_bw</span><span class="hljs-params">()</span></span><br><span class="hljs-function"> <span class="hljs-title">LANGUAGE</span> <span class="hljs-title">plpgsql</span></span><br><span class="hljs-function"><span class="hljs-title">AS</span> $<span class="hljs-title">procedure</span>$</span><br><span class="hljs-function"><span class="hljs-title">declare</span></span><br><span class="hljs-function">  <span class="hljs-title">v1</span> <span class="hljs-title">pg_lsn</span>;</span><br>  v2 pg_lsn;<br><span class="hljs-keyword">begin</span><br>  select pg_last_wal_receive_lsn() into v1;<br>  commit;<br>  perform pg_sleep(<span class="hljs-number">1</span>);<br>  select pg_last_wal_receive_lsn() into v2;<br>  commit;<br>  raise notice <span class="hljs-string">&#x27;wal receive bw: %/s&#x27;</span>, pg_size_pretty(pg_wal_lsn_diff(v2,v1));<br><span class="hljs-keyword">end</span>;<br>$<span class="hljs-function"><span class="hljs-keyword">procedure</span>$;</span><br></code></pre></td></tr></table></figure>
<h1 id="在standby节点执行，-replay-wal的速度。"><a href="#在standby节点执行，-replay-wal的速度。" class="headerlink" title="在standby节点执行， replay wal的速度。"></a>在standby节点执行， replay wal的速度。</h1><figure class="highlight cal"><table><tr><td class="code"><pre><code class="hljs cal">CREATE <span class="hljs-keyword">OR</span> REPLACE <span class="hljs-function"><span class="hljs-keyword">PROCEDURE</span> <span class="hljs-title">dba</span>.<span class="hljs-title">wal_replay_bw</span><span class="hljs-params">()</span></span><br><span class="hljs-function"> <span class="hljs-title">LANGUAGE</span> <span class="hljs-title">plpgsql</span></span><br><span class="hljs-function"><span class="hljs-title">AS</span> $<span class="hljs-title">procedure</span>$</span><br><span class="hljs-function"><span class="hljs-title">declare</span></span><br><span class="hljs-function">  <span class="hljs-title">v1</span> <span class="hljs-title">pg_lsn</span>;</span><br>  v2 pg_lsn;<br><span class="hljs-keyword">begin</span><br>  select pg_last_wal_replay_lsn() into v1;<br>  commit;<br>  perform pg_sleep(<span class="hljs-number">1</span>);<br>  select pg_last_wal_replay_lsn() into v2;<br>  commit;<br>  raise notice <span class="hljs-string">&#x27;wal replay bw: %/s&#x27;</span>, pg_size_pretty(pg_wal_lsn_diff(v2,v1));<br><span class="hljs-keyword">end</span>;<br>$<span class="hljs-function"><span class="hljs-keyword">procedure</span>$;</span> <br></code></pre></td></tr></table></figure>
<h1 id="查询膨胀空间top-10的表"><a href="#查询膨胀空间top-10的表" class="headerlink" title="查询膨胀空间top 10的表"></a>查询膨胀空间top 10的表</h1><figure class="highlight pgsql"><table><tr><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">view</span> dba.top10bloatsizetable <span class="hljs-keyword">as</span>  <br><span class="hljs-keyword">SELECT</span>  <br>  current_database() <span class="hljs-keyword">AS</span> db, schemaname, tablename, reltuples::<span class="hljs-type">bigint</span> <span class="hljs-keyword">AS</span> tups, relpages::<span class="hljs-type">bigint</span> <span class="hljs-keyword">AS</span> pages, otta,  <br>  ROUND(<span class="hljs-keyword">CASE</span> <span class="hljs-keyword">WHEN</span> otta=<span class="hljs-number">0</span> <span class="hljs-keyword">OR</span> sml.relpages=<span class="hljs-number">0</span> <span class="hljs-keyword">OR</span> sml.relpages=otta <span class="hljs-keyword">THEN</span> <span class="hljs-number">0.0</span> <span class="hljs-keyword">ELSE</span> sml.relpages/otta::<span class="hljs-type">numeric</span> <span class="hljs-keyword">END</span>,<span class="hljs-number">1</span>) <span class="hljs-keyword">AS</span> tbloat,  <br>  <span class="hljs-keyword">CASE</span> <span class="hljs-keyword">WHEN</span> relpages &lt; otta <span class="hljs-keyword">THEN</span> <span class="hljs-number">0</span> <span class="hljs-keyword">ELSE</span> relpages::<span class="hljs-type">bigint</span> - otta <span class="hljs-keyword">END</span> <span class="hljs-keyword">AS</span> wastedpages,  <br>  <span class="hljs-keyword">CASE</span> <span class="hljs-keyword">WHEN</span> relpages &lt; otta <span class="hljs-keyword">THEN</span> <span class="hljs-number">0</span> <span class="hljs-keyword">ELSE</span> bs*(sml.relpages-otta)::<span class="hljs-type">bigint</span> <span class="hljs-keyword">END</span> <span class="hljs-keyword">AS</span> wastedbytes,  <br>  <span class="hljs-keyword">CASE</span> <span class="hljs-keyword">WHEN</span> relpages &lt; otta <span class="hljs-keyword">THEN</span> <span class="hljs-string">&#x27;0 bytes&#x27;</span>::<span class="hljs-type">text</span> <span class="hljs-keyword">ELSE</span> pg_size_pretty((bs*(relpages-otta))::<span class="hljs-type">bigint</span>) <span class="hljs-keyword">END</span> <span class="hljs-keyword">AS</span> wastedsize,  <br>  iname, ituples::<span class="hljs-type">bigint</span> <span class="hljs-keyword">AS</span> itups, ipages::<span class="hljs-type">bigint</span> <span class="hljs-keyword">AS</span> ipages, iotta,  <br>  ROUND(<span class="hljs-keyword">CASE</span> <span class="hljs-keyword">WHEN</span> iotta=<span class="hljs-number">0</span> <span class="hljs-keyword">OR</span> ipages=<span class="hljs-number">0</span> <span class="hljs-keyword">OR</span> ipages=iotta <span class="hljs-keyword">THEN</span> <span class="hljs-number">0.0</span> <span class="hljs-keyword">ELSE</span> ipages/iotta::<span class="hljs-type">numeric</span> <span class="hljs-keyword">END</span>,<span class="hljs-number">1</span>) <span class="hljs-keyword">AS</span> ibloat,  <br>  <span class="hljs-keyword">CASE</span> <span class="hljs-keyword">WHEN</span> ipages &lt; iotta <span class="hljs-keyword">THEN</span> <span class="hljs-number">0</span> <span class="hljs-keyword">ELSE</span> ipages::<span class="hljs-type">bigint</span> - iotta <span class="hljs-keyword">END</span> <span class="hljs-keyword">AS</span> wastedipages,  <br>  <span class="hljs-keyword">CASE</span> <span class="hljs-keyword">WHEN</span> ipages &lt; iotta <span class="hljs-keyword">THEN</span> <span class="hljs-number">0</span> <span class="hljs-keyword">ELSE</span> bs*(ipages-iotta) <span class="hljs-keyword">END</span> <span class="hljs-keyword">AS</span> wastedibytes,  <br>  <span class="hljs-keyword">CASE</span> <span class="hljs-keyword">WHEN</span> ipages &lt; iotta <span class="hljs-keyword">THEN</span> <span class="hljs-string">&#x27;0 bytes&#x27;</span> <span class="hljs-keyword">ELSE</span> pg_size_pretty((bs*(ipages-iotta))::<span class="hljs-type">bigint</span>) <span class="hljs-keyword">END</span> <span class="hljs-keyword">AS</span> wastedisize,  <br>  pg_size_pretty(<span class="hljs-keyword">CASE</span> <span class="hljs-keyword">WHEN</span> relpages &lt; otta <span class="hljs-keyword">THEN</span>  <br>    <span class="hljs-keyword">CASE</span> <span class="hljs-keyword">WHEN</span> ipages &lt; iotta <span class="hljs-keyword">THEN</span> <span class="hljs-number">0</span> <span class="hljs-keyword">ELSE</span> bs*(ipages-iotta::<span class="hljs-type">bigint</span>) <span class="hljs-keyword">END</span>  <br>    <span class="hljs-keyword">ELSE</span> <span class="hljs-keyword">CASE</span> <span class="hljs-keyword">WHEN</span> ipages &lt; iotta <span class="hljs-keyword">THEN</span> bs*(relpages-otta::<span class="hljs-type">bigint</span>)  <br>      <span class="hljs-keyword">ELSE</span> bs*(relpages-otta::<span class="hljs-type">bigint</span> + ipages-iotta::<span class="hljs-type">bigint</span>) <span class="hljs-keyword">END</span>  <br>  <span class="hljs-keyword">END</span>) <span class="hljs-keyword">AS</span> totalwastedbytes  <br><span class="hljs-keyword">FROM</span> (  <br>  <span class="hljs-keyword">SELECT</span>  <br>    nn.nspname <span class="hljs-keyword">AS</span> schemaname,  <br>    cc.relname <span class="hljs-keyword">AS</span> tablename,  <br>    COALESCE(cc.reltuples,<span class="hljs-number">0</span>) <span class="hljs-keyword">AS</span> reltuples,  <br>    COALESCE(cc.relpages,<span class="hljs-number">0</span>) <span class="hljs-keyword">AS</span> relpages,  <br>    COALESCE(bs,<span class="hljs-number">0</span>) <span class="hljs-keyword">AS</span> bs,  <br>    COALESCE(CEIL((cc.reltuples*((datahdr+ma-  <br>      (<span class="hljs-keyword">CASE</span> <span class="hljs-keyword">WHEN</span> datahdr%ma=<span class="hljs-number">0</span> <span class="hljs-keyword">THEN</span> ma <span class="hljs-keyword">ELSE</span> datahdr%ma <span class="hljs-keyword">END</span>))+nullhdr2+<span class="hljs-number">4</span>))/(bs<span class="hljs-number">-20</span>::<span class="hljs-type">float</span>)),<span class="hljs-number">0</span>) <span class="hljs-keyword">AS</span> otta,  <br>    COALESCE(c2.relname,<span class="hljs-string">&#x27;?&#x27;</span>) <span class="hljs-keyword">AS</span> iname, COALESCE(c2.reltuples,<span class="hljs-number">0</span>) <span class="hljs-keyword">AS</span> ituples, COALESCE(c2.relpages,<span class="hljs-number">0</span>) <span class="hljs-keyword">AS</span> ipages,  <br>    COALESCE(CEIL((c2.reltuples*(datahdr<span class="hljs-number">-12</span>))/(bs<span class="hljs-number">-20</span>::<span class="hljs-type">float</span>)),<span class="hljs-number">0</span>) <span class="hljs-keyword">AS</span> iotta <span class="hljs-comment">-- very rough approximation, assumes all cols  </span><br>  <span class="hljs-keyword">FROM</span>  <br>     pg_class cc  <br>  <span class="hljs-keyword">JOIN</span> pg_namespace nn <span class="hljs-keyword">ON</span> cc.relnamespace = nn.oid <span class="hljs-keyword">AND</span> nn.nspname &lt;&gt; <span class="hljs-string">&#x27;information_schema&#x27;</span>  <br>  <span class="hljs-keyword">LEFT JOIN</span>  <br>  (  <br>    <span class="hljs-keyword">SELECT</span>  <br>      ma,bs,foo.nspname,foo.relname,  <br>      (datawidth+(hdr+ma-(<span class="hljs-keyword">case</span> <span class="hljs-keyword">when</span> hdr%ma=<span class="hljs-number">0</span> <span class="hljs-keyword">THEN</span> ma <span class="hljs-keyword">ELSE</span> hdr%ma <span class="hljs-keyword">END</span>)))::<span class="hljs-type">numeric</span> <span class="hljs-keyword">AS</span> datahdr,  <br>      (maxfracsum*(nullhdr+ma-(<span class="hljs-keyword">case</span> <span class="hljs-keyword">when</span> nullhdr%ma=<span class="hljs-number">0</span> <span class="hljs-keyword">THEN</span> ma <span class="hljs-keyword">ELSE</span> nullhdr%ma <span class="hljs-keyword">END</span>))) <span class="hljs-keyword">AS</span> nullhdr2  <br>    <span class="hljs-keyword">FROM</span> (  <br>      <span class="hljs-keyword">SELECT</span>  <br>        ns.nspname, tbl.relname, hdr, ma, bs,  <br>        SUM((<span class="hljs-number">1</span>-coalesce(null_frac,<span class="hljs-number">0</span>))*coalesce(avg_width, <span class="hljs-number">2048</span>)) <span class="hljs-keyword">AS</span> datawidth,  <br>        MAX(coalesce(null_frac,<span class="hljs-number">0</span>)) <span class="hljs-keyword">AS</span> maxfracsum,  <br>        hdr+(  <br>          <span class="hljs-keyword">SELECT</span> <span class="hljs-number">1</span>+count(*)/<span class="hljs-number">8</span>  <br>          <span class="hljs-keyword">FROM</span> pg_stats s2  <br>          <span class="hljs-keyword">WHERE</span> null_frac&lt;&gt;<span class="hljs-number">0</span> <span class="hljs-keyword">AND</span> s2.schemaname = ns.nspname <span class="hljs-keyword">AND</span> s2.tablename = tbl.relname  <br>        ) <span class="hljs-keyword">AS</span> nullhdr  <br>      <span class="hljs-keyword">FROM</span> pg_attribute att  <br>      <span class="hljs-keyword">JOIN</span> pg_class tbl <span class="hljs-keyword">ON</span> att.attrelid = tbl.oid  <br>      <span class="hljs-keyword">JOIN</span> pg_namespace ns <span class="hljs-keyword">ON</span> ns.oid = tbl.relnamespace  <br>      <span class="hljs-keyword">LEFT JOIN</span> pg_stats s <span class="hljs-keyword">ON</span> s.schemaname=ns.nspname  <br>      <span class="hljs-keyword">AND</span> s.tablename = tbl.relname  <br>      <span class="hljs-keyword">AND</span> s.inherited=<span class="hljs-keyword">false</span>  <br>      <span class="hljs-keyword">AND</span> s.attname=att.attname,  <br>      (  <br>        <span class="hljs-keyword">SELECT</span>  <br>          (<span class="hljs-keyword">SELECT</span> current_setting(<span class="hljs-string">&#x27;block_size&#x27;</span>)::<span class="hljs-type">numeric</span>) <span class="hljs-keyword">AS</span> bs,  <br>            <span class="hljs-keyword">CASE</span> <span class="hljs-keyword">WHEN</span> SUBSTRING(SPLIT_PART(v, <span class="hljs-string">&#x27; &#x27;</span>, <span class="hljs-number">2</span>) <span class="hljs-keyword">FROM</span> <span class="hljs-string">&#x27;#&quot;[0-9]+.[0-9]+#&quot;%&#x27;</span> <span class="hljs-keyword">for</span> <span class="hljs-string">&#x27;#&#x27;</span>)  <br>              <span class="hljs-keyword">IN</span> (<span class="hljs-string">&#x27;8.0&#x27;</span>,<span class="hljs-string">&#x27;8.1&#x27;</span>,<span class="hljs-string">&#x27;8.2&#x27;</span>) <span class="hljs-keyword">THEN</span> <span class="hljs-number">27</span> <span class="hljs-keyword">ELSE</span> <span class="hljs-number">23</span> <span class="hljs-keyword">END</span> <span class="hljs-keyword">AS</span> hdr,  <br>          <span class="hljs-keyword">CASE</span> <span class="hljs-keyword">WHEN</span> v ~ <span class="hljs-string">&#x27;mingw32&#x27;</span> <span class="hljs-keyword">OR</span> v ~ <span class="hljs-string">&#x27;64-bit&#x27;</span> <span class="hljs-keyword">THEN</span> <span class="hljs-number">8</span> <span class="hljs-keyword">ELSE</span> <span class="hljs-number">4</span> <span class="hljs-keyword">END</span> <span class="hljs-keyword">AS</span> ma  <br>        <span class="hljs-keyword">FROM</span> (<span class="hljs-keyword">SELECT</span> version() <span class="hljs-keyword">AS</span> v) <span class="hljs-keyword">AS</span> foo  <br>      ) <span class="hljs-keyword">AS</span> constants  <br>      <span class="hljs-keyword">WHERE</span> att.attnum &gt; <span class="hljs-number">0</span> <span class="hljs-keyword">AND</span> tbl.relkind=<span class="hljs-string">&#x27;r&#x27;</span>  <br>      <span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>  <br>    ) <span class="hljs-keyword">AS</span> foo  <br>  ) <span class="hljs-keyword">AS</span> rs  <br>  <span class="hljs-keyword">ON</span> cc.relname = rs.relname <span class="hljs-keyword">AND</span> nn.nspname = rs.nspname  <br>  <span class="hljs-keyword">LEFT JOIN</span> pg_index i <span class="hljs-keyword">ON</span> indrelid = cc.oid  <br>  <span class="hljs-keyword">LEFT JOIN</span> pg_class c2 <span class="hljs-keyword">ON</span> c2.oid = i.indexrelid  <br>) <span class="hljs-keyword">AS</span> sml <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> wastedbytes <span class="hljs-keyword">desc</span> <span class="hljs-keyword">limit</span> <span class="hljs-number">5</span>;  <br></code></pre></td></tr></table></figure>
<h1 id="查询膨胀空间top-10的索引"><a href="#查询膨胀空间top-10的索引" class="headerlink" title="查询膨胀空间top 10的索引"></a>查询膨胀空间top 10的索引</h1><figure class="highlight pgsql"><table><tr><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">view</span> dba.top10bloatsizeindex <span class="hljs-keyword">as</span>  <br><span class="hljs-keyword">SELECT</span>  <br>  current_database() <span class="hljs-keyword">AS</span> db, schemaname, tablename, reltuples::<span class="hljs-type">bigint</span> <span class="hljs-keyword">AS</span> tups, relpages::<span class="hljs-type">bigint</span> <span class="hljs-keyword">AS</span> pages, otta,  <br>  ROUND(<span class="hljs-keyword">CASE</span> <span class="hljs-keyword">WHEN</span> otta=<span class="hljs-number">0</span> <span class="hljs-keyword">OR</span> sml.relpages=<span class="hljs-number">0</span> <span class="hljs-keyword">OR</span> sml.relpages=otta <span class="hljs-keyword">THEN</span> <span class="hljs-number">0.0</span> <span class="hljs-keyword">ELSE</span> sml.relpages/otta::<span class="hljs-type">numeric</span> <span class="hljs-keyword">END</span>,<span class="hljs-number">1</span>) <span class="hljs-keyword">AS</span> tbloat,  <br>  <span class="hljs-keyword">CASE</span> <span class="hljs-keyword">WHEN</span> relpages &lt; otta <span class="hljs-keyword">THEN</span> <span class="hljs-number">0</span> <span class="hljs-keyword">ELSE</span> relpages::<span class="hljs-type">bigint</span> - otta <span class="hljs-keyword">END</span> <span class="hljs-keyword">AS</span> wastedpages,  <br>  <span class="hljs-keyword">CASE</span> <span class="hljs-keyword">WHEN</span> relpages &lt; otta <span class="hljs-keyword">THEN</span> <span class="hljs-number">0</span> <span class="hljs-keyword">ELSE</span> bs*(sml.relpages-otta)::<span class="hljs-type">bigint</span> <span class="hljs-keyword">END</span> <span class="hljs-keyword">AS</span> wastedbytes,  <br>  <span class="hljs-keyword">CASE</span> <span class="hljs-keyword">WHEN</span> relpages &lt; otta <span class="hljs-keyword">THEN</span> <span class="hljs-string">&#x27;0 bytes&#x27;</span>::<span class="hljs-type">text</span> <span class="hljs-keyword">ELSE</span> pg_size_pretty((bs*(relpages-otta))::<span class="hljs-type">bigint</span>) <span class="hljs-keyword">END</span> <span class="hljs-keyword">AS</span> wastedsize,  <br>  iname, ituples::<span class="hljs-type">bigint</span> <span class="hljs-keyword">AS</span> itups, ipages::<span class="hljs-type">bigint</span> <span class="hljs-keyword">AS</span> ipages, iotta,  <br>  ROUND(<span class="hljs-keyword">CASE</span> <span class="hljs-keyword">WHEN</span> iotta=<span class="hljs-number">0</span> <span class="hljs-keyword">OR</span> ipages=<span class="hljs-number">0</span> <span class="hljs-keyword">OR</span> ipages=iotta <span class="hljs-keyword">THEN</span> <span class="hljs-number">0.0</span> <span class="hljs-keyword">ELSE</span> ipages/iotta::<span class="hljs-type">numeric</span> <span class="hljs-keyword">END</span>,<span class="hljs-number">1</span>) <span class="hljs-keyword">AS</span> ibloat,  <br>  <span class="hljs-keyword">CASE</span> <span class="hljs-keyword">WHEN</span> ipages &lt; iotta <span class="hljs-keyword">THEN</span> <span class="hljs-number">0</span> <span class="hljs-keyword">ELSE</span> ipages::<span class="hljs-type">bigint</span> - iotta <span class="hljs-keyword">END</span> <span class="hljs-keyword">AS</span> wastedipages,  <br>  <span class="hljs-keyword">CASE</span> <span class="hljs-keyword">WHEN</span> ipages &lt; iotta <span class="hljs-keyword">THEN</span> <span class="hljs-number">0</span> <span class="hljs-keyword">ELSE</span> bs*(ipages-iotta) <span class="hljs-keyword">END</span> <span class="hljs-keyword">AS</span> wastedibytes,  <br>  <span class="hljs-keyword">CASE</span> <span class="hljs-keyword">WHEN</span> ipages &lt; iotta <span class="hljs-keyword">THEN</span> <span class="hljs-string">&#x27;0 bytes&#x27;</span> <span class="hljs-keyword">ELSE</span> pg_size_pretty((bs*(ipages-iotta))::<span class="hljs-type">bigint</span>) <span class="hljs-keyword">END</span> <span class="hljs-keyword">AS</span> wastedisize,  <br>  pg_size_pretty(<span class="hljs-keyword">CASE</span> <span class="hljs-keyword">WHEN</span> relpages &lt; otta <span class="hljs-keyword">THEN</span>  <br>    <span class="hljs-keyword">CASE</span> <span class="hljs-keyword">WHEN</span> ipages &lt; iotta <span class="hljs-keyword">THEN</span> <span class="hljs-number">0</span> <span class="hljs-keyword">ELSE</span> bs*(ipages-iotta::<span class="hljs-type">bigint</span>) <span class="hljs-keyword">END</span>  <br>    <span class="hljs-keyword">ELSE</span> <span class="hljs-keyword">CASE</span> <span class="hljs-keyword">WHEN</span> ipages &lt; iotta <span class="hljs-keyword">THEN</span> bs*(relpages-otta::<span class="hljs-type">bigint</span>)  <br>      <span class="hljs-keyword">ELSE</span> bs*(relpages-otta::<span class="hljs-type">bigint</span> + ipages-iotta::<span class="hljs-type">bigint</span>) <span class="hljs-keyword">END</span>  <br>  <span class="hljs-keyword">END</span>) <span class="hljs-keyword">AS</span> totalwastedbytes  <br><span class="hljs-keyword">FROM</span> (  <br>  <span class="hljs-keyword">SELECT</span>  <br>    nn.nspname <span class="hljs-keyword">AS</span> schemaname,  <br>    cc.relname <span class="hljs-keyword">AS</span> tablename,  <br>    COALESCE(cc.reltuples,<span class="hljs-number">0</span>) <span class="hljs-keyword">AS</span> reltuples,  <br>    COALESCE(cc.relpages,<span class="hljs-number">0</span>) <span class="hljs-keyword">AS</span> relpages,  <br>    COALESCE(bs,<span class="hljs-number">0</span>) <span class="hljs-keyword">AS</span> bs,  <br>    COALESCE(CEIL((cc.reltuples*((datahdr+ma-  <br>      (<span class="hljs-keyword">CASE</span> <span class="hljs-keyword">WHEN</span> datahdr%ma=<span class="hljs-number">0</span> <span class="hljs-keyword">THEN</span> ma <span class="hljs-keyword">ELSE</span> datahdr%ma <span class="hljs-keyword">END</span>))+nullhdr2+<span class="hljs-number">4</span>))/(bs<span class="hljs-number">-20</span>::<span class="hljs-type">float</span>)),<span class="hljs-number">0</span>) <span class="hljs-keyword">AS</span> otta,  <br>    COALESCE(c2.relname,<span class="hljs-string">&#x27;?&#x27;</span>) <span class="hljs-keyword">AS</span> iname, COALESCE(c2.reltuples,<span class="hljs-number">0</span>) <span class="hljs-keyword">AS</span> ituples, COALESCE(c2.relpages,<span class="hljs-number">0</span>) <span class="hljs-keyword">AS</span> ipages,  <br>    COALESCE(CEIL((c2.reltuples*(datahdr<span class="hljs-number">-12</span>))/(bs<span class="hljs-number">-20</span>::<span class="hljs-type">float</span>)),<span class="hljs-number">0</span>) <span class="hljs-keyword">AS</span> iotta <span class="hljs-comment">-- very rough approximation, assumes all cols  </span><br>  <span class="hljs-keyword">FROM</span>  <br>     pg_class cc  <br>  <span class="hljs-keyword">JOIN</span> pg_namespace nn <span class="hljs-keyword">ON</span> cc.relnamespace = nn.oid <span class="hljs-keyword">AND</span> nn.nspname &lt;&gt; <span class="hljs-string">&#x27;information_schema&#x27;</span>  <br>  <span class="hljs-keyword">LEFT JOIN</span>  <br>  (  <br>    <span class="hljs-keyword">SELECT</span>  <br>      ma,bs,foo.nspname,foo.relname,  <br>      (datawidth+(hdr+ma-(<span class="hljs-keyword">case</span> <span class="hljs-keyword">when</span> hdr%ma=<span class="hljs-number">0</span> <span class="hljs-keyword">THEN</span> ma <span class="hljs-keyword">ELSE</span> hdr%ma <span class="hljs-keyword">END</span>)))::<span class="hljs-type">numeric</span> <span class="hljs-keyword">AS</span> datahdr,  <br>      (maxfracsum*(nullhdr+ma-(<span class="hljs-keyword">case</span> <span class="hljs-keyword">when</span> nullhdr%ma=<span class="hljs-number">0</span> <span class="hljs-keyword">THEN</span> ma <span class="hljs-keyword">ELSE</span> nullhdr%ma <span class="hljs-keyword">END</span>))) <span class="hljs-keyword">AS</span> nullhdr2  <br>    <span class="hljs-keyword">FROM</span> (  <br>      <span class="hljs-keyword">SELECT</span>  <br>        ns.nspname, tbl.relname, hdr, ma, bs,  <br>        SUM((<span class="hljs-number">1</span>-coalesce(null_frac,<span class="hljs-number">0</span>))*coalesce(avg_width, <span class="hljs-number">2048</span>)) <span class="hljs-keyword">AS</span> datawidth,  <br>        MAX(coalesce(null_frac,<span class="hljs-number">0</span>)) <span class="hljs-keyword">AS</span> maxfracsum,  <br>        hdr+(  <br>          <span class="hljs-keyword">SELECT</span> <span class="hljs-number">1</span>+count(*)/<span class="hljs-number">8</span>  <br>          <span class="hljs-keyword">FROM</span> pg_stats s2  <br>          <span class="hljs-keyword">WHERE</span> null_frac&lt;&gt;<span class="hljs-number">0</span> <span class="hljs-keyword">AND</span> s2.schemaname = ns.nspname <span class="hljs-keyword">AND</span> s2.tablename = tbl.relname  <br>        ) <span class="hljs-keyword">AS</span> nullhdr  <br>      <span class="hljs-keyword">FROM</span> pg_attribute att  <br>      <span class="hljs-keyword">JOIN</span> pg_class tbl <span class="hljs-keyword">ON</span> att.attrelid = tbl.oid  <br>      <span class="hljs-keyword">JOIN</span> pg_namespace ns <span class="hljs-keyword">ON</span> ns.oid = tbl.relnamespace  <br>      <span class="hljs-keyword">LEFT JOIN</span> pg_stats s <span class="hljs-keyword">ON</span> s.schemaname=ns.nspname  <br>      <span class="hljs-keyword">AND</span> s.tablename = tbl.relname  <br>      <span class="hljs-keyword">AND</span> s.inherited=<span class="hljs-keyword">false</span>  <br>      <span class="hljs-keyword">AND</span> s.attname=att.attname,  <br>      (  <br>        <span class="hljs-keyword">SELECT</span>  <br>          (<span class="hljs-keyword">SELECT</span> current_setting(<span class="hljs-string">&#x27;block_size&#x27;</span>)::<span class="hljs-type">numeric</span>) <span class="hljs-keyword">AS</span> bs,  <br>            <span class="hljs-keyword">CASE</span> <span class="hljs-keyword">WHEN</span> SUBSTRING(SPLIT_PART(v, <span class="hljs-string">&#x27; &#x27;</span>, <span class="hljs-number">2</span>) <span class="hljs-keyword">FROM</span> <span class="hljs-string">&#x27;#&quot;[0-9]+.[0-9]+#&quot;%&#x27;</span> <span class="hljs-keyword">for</span> <span class="hljs-string">&#x27;#&#x27;</span>)  <br>              <span class="hljs-keyword">IN</span> (<span class="hljs-string">&#x27;8.0&#x27;</span>,<span class="hljs-string">&#x27;8.1&#x27;</span>,<span class="hljs-string">&#x27;8.2&#x27;</span>) <span class="hljs-keyword">THEN</span> <span class="hljs-number">27</span> <span class="hljs-keyword">ELSE</span> <span class="hljs-number">23</span> <span class="hljs-keyword">END</span> <span class="hljs-keyword">AS</span> hdr,  <br>          <span class="hljs-keyword">CASE</span> <span class="hljs-keyword">WHEN</span> v ~ <span class="hljs-string">&#x27;mingw32&#x27;</span> <span class="hljs-keyword">OR</span> v ~ <span class="hljs-string">&#x27;64-bit&#x27;</span> <span class="hljs-keyword">THEN</span> <span class="hljs-number">8</span> <span class="hljs-keyword">ELSE</span> <span class="hljs-number">4</span> <span class="hljs-keyword">END</span> <span class="hljs-keyword">AS</span> ma  <br>        <span class="hljs-keyword">FROM</span> (<span class="hljs-keyword">SELECT</span> version() <span class="hljs-keyword">AS</span> v) <span class="hljs-keyword">AS</span> foo  <br>      ) <span class="hljs-keyword">AS</span> constants  <br>      <span class="hljs-keyword">WHERE</span> att.attnum &gt; <span class="hljs-number">0</span> <span class="hljs-keyword">AND</span> tbl.relkind=<span class="hljs-string">&#x27;r&#x27;</span>  <br>      <span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>  <br>    ) <span class="hljs-keyword">AS</span> foo  <br>  ) <span class="hljs-keyword">AS</span> rs  <br>  <span class="hljs-keyword">ON</span> cc.relname = rs.relname <span class="hljs-keyword">AND</span> nn.nspname = rs.nspname  <br>  <span class="hljs-keyword">LEFT JOIN</span> pg_index i <span class="hljs-keyword">ON</span> indrelid = cc.oid  <br>  <span class="hljs-keyword">LEFT JOIN</span> pg_class c2 <span class="hljs-keyword">ON</span> c2.oid = i.indexrelid  <br>) <span class="hljs-keyword">AS</span> sml <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> wastedibytes <span class="hljs-keyword">desc</span> <span class="hljs-keyword">limit</span> <span class="hljs-number">5</span>;  <br></code></pre></td></tr></table></figure>
<h1 id="查询膨胀比例top-10的表-浪费空间大于10MB的表"><a href="#查询膨胀比例top-10的表-浪费空间大于10MB的表" class="headerlink" title="查询膨胀比例top 10的表(浪费空间大于10MB的表)"></a>查询膨胀比例top 10的表(浪费空间大于10MB的表)</h1><figure class="highlight pgsql"><table><tr><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">view</span> dba.top10bloatratiotable <span class="hljs-keyword">as</span>  <br><span class="hljs-keyword">SELECT</span>  <br>  current_database() <span class="hljs-keyword">AS</span> db, schemaname, tablename, reltuples::<span class="hljs-type">bigint</span> <span class="hljs-keyword">AS</span> tups, relpages::<span class="hljs-type">bigint</span> <span class="hljs-keyword">AS</span> pages, otta,  <br>  ROUND(<span class="hljs-keyword">CASE</span> <span class="hljs-keyword">WHEN</span> otta=<span class="hljs-number">0</span> <span class="hljs-keyword">OR</span> sml.relpages=<span class="hljs-number">0</span> <span class="hljs-keyword">OR</span> sml.relpages=otta <span class="hljs-keyword">THEN</span> <span class="hljs-number">0.0</span> <span class="hljs-keyword">ELSE</span> sml.relpages/otta::<span class="hljs-type">numeric</span> <span class="hljs-keyword">END</span>,<span class="hljs-number">1</span>) <span class="hljs-keyword">AS</span> tbloat,  <br>  <span class="hljs-keyword">CASE</span> <span class="hljs-keyword">WHEN</span> relpages &lt; otta <span class="hljs-keyword">THEN</span> <span class="hljs-number">0</span> <span class="hljs-keyword">ELSE</span> relpages::<span class="hljs-type">bigint</span> - otta <span class="hljs-keyword">END</span> <span class="hljs-keyword">AS</span> wastedpages,  <br>  <span class="hljs-keyword">CASE</span> <span class="hljs-keyword">WHEN</span> relpages &lt; otta <span class="hljs-keyword">THEN</span> <span class="hljs-number">0</span> <span class="hljs-keyword">ELSE</span> bs*(sml.relpages-otta)::<span class="hljs-type">bigint</span> <span class="hljs-keyword">END</span> <span class="hljs-keyword">AS</span> wastedbytes,  <br>  <span class="hljs-keyword">CASE</span> <span class="hljs-keyword">WHEN</span> relpages &lt; otta <span class="hljs-keyword">THEN</span> <span class="hljs-string">&#x27;0 bytes&#x27;</span>::<span class="hljs-type">text</span> <span class="hljs-keyword">ELSE</span> pg_size_pretty((bs*(relpages-otta))::<span class="hljs-type">bigint</span>) <span class="hljs-keyword">END</span> <span class="hljs-keyword">AS</span> wastedsize,  <br>  iname, ituples::<span class="hljs-type">bigint</span> <span class="hljs-keyword">AS</span> itups, ipages::<span class="hljs-type">bigint</span> <span class="hljs-keyword">AS</span> ipages, iotta,  <br>  ROUND(<span class="hljs-keyword">CASE</span> <span class="hljs-keyword">WHEN</span> iotta=<span class="hljs-number">0</span> <span class="hljs-keyword">OR</span> ipages=<span class="hljs-number">0</span> <span class="hljs-keyword">OR</span> ipages=iotta <span class="hljs-keyword">THEN</span> <span class="hljs-number">0.0</span> <span class="hljs-keyword">ELSE</span> ipages/iotta::<span class="hljs-type">numeric</span> <span class="hljs-keyword">END</span>,<span class="hljs-number">1</span>) <span class="hljs-keyword">AS</span> ibloat,  <br>  <span class="hljs-keyword">CASE</span> <span class="hljs-keyword">WHEN</span> ipages &lt; iotta <span class="hljs-keyword">THEN</span> <span class="hljs-number">0</span> <span class="hljs-keyword">ELSE</span> ipages::<span class="hljs-type">bigint</span> - iotta <span class="hljs-keyword">END</span> <span class="hljs-keyword">AS</span> wastedipages,  <br>  <span class="hljs-keyword">CASE</span> <span class="hljs-keyword">WHEN</span> ipages &lt; iotta <span class="hljs-keyword">THEN</span> <span class="hljs-number">0</span> <span class="hljs-keyword">ELSE</span> bs*(ipages-iotta) <span class="hljs-keyword">END</span> <span class="hljs-keyword">AS</span> wastedibytes,  <br>  <span class="hljs-keyword">CASE</span> <span class="hljs-keyword">WHEN</span> ipages &lt; iotta <span class="hljs-keyword">THEN</span> <span class="hljs-string">&#x27;0 bytes&#x27;</span> <span class="hljs-keyword">ELSE</span> pg_size_pretty((bs*(ipages-iotta))::<span class="hljs-type">bigint</span>) <span class="hljs-keyword">END</span> <span class="hljs-keyword">AS</span> wastedisize,  <br>  pg_size_pretty(<span class="hljs-keyword">CASE</span> <span class="hljs-keyword">WHEN</span> relpages &lt; otta <span class="hljs-keyword">THEN</span>  <br>    <span class="hljs-keyword">CASE</span> <span class="hljs-keyword">WHEN</span> ipages &lt; iotta <span class="hljs-keyword">THEN</span> <span class="hljs-number">0</span> <span class="hljs-keyword">ELSE</span> bs*(ipages-iotta::<span class="hljs-type">bigint</span>) <span class="hljs-keyword">END</span>  <br>    <span class="hljs-keyword">ELSE</span> <span class="hljs-keyword">CASE</span> <span class="hljs-keyword">WHEN</span> ipages &lt; iotta <span class="hljs-keyword">THEN</span> bs*(relpages-otta::<span class="hljs-type">bigint</span>)  <br>      <span class="hljs-keyword">ELSE</span> bs*(relpages-otta::<span class="hljs-type">bigint</span> + ipages-iotta::<span class="hljs-type">bigint</span>) <span class="hljs-keyword">END</span>  <br>  <span class="hljs-keyword">END</span>) <span class="hljs-keyword">AS</span> totalwastedbytes  <br><span class="hljs-keyword">FROM</span> (  <br>  <span class="hljs-keyword">SELECT</span>  <br>    nn.nspname <span class="hljs-keyword">AS</span> schemaname,  <br>    cc.relname <span class="hljs-keyword">AS</span> tablename,  <br>    COALESCE(cc.reltuples,<span class="hljs-number">0</span>) <span class="hljs-keyword">AS</span> reltuples,  <br>    COALESCE(cc.relpages,<span class="hljs-number">0</span>) <span class="hljs-keyword">AS</span> relpages,  <br>    COALESCE(bs,<span class="hljs-number">0</span>) <span class="hljs-keyword">AS</span> bs,  <br>    COALESCE(CEIL((cc.reltuples*((datahdr+ma-  <br>      (<span class="hljs-keyword">CASE</span> <span class="hljs-keyword">WHEN</span> datahdr%ma=<span class="hljs-number">0</span> <span class="hljs-keyword">THEN</span> ma <span class="hljs-keyword">ELSE</span> datahdr%ma <span class="hljs-keyword">END</span>))+nullhdr2+<span class="hljs-number">4</span>))/(bs<span class="hljs-number">-20</span>::<span class="hljs-type">float</span>)),<span class="hljs-number">0</span>) <span class="hljs-keyword">AS</span> otta,  <br>    COALESCE(c2.relname,<span class="hljs-string">&#x27;?&#x27;</span>) <span class="hljs-keyword">AS</span> iname, COALESCE(c2.reltuples,<span class="hljs-number">0</span>) <span class="hljs-keyword">AS</span> ituples, COALESCE(c2.relpages,<span class="hljs-number">0</span>) <span class="hljs-keyword">AS</span> ipages,  <br>    COALESCE(CEIL((c2.reltuples*(datahdr<span class="hljs-number">-12</span>))/(bs<span class="hljs-number">-20</span>::<span class="hljs-type">float</span>)),<span class="hljs-number">0</span>) <span class="hljs-keyword">AS</span> iotta <span class="hljs-comment">-- very rough approximation, assumes all cols  </span><br>  <span class="hljs-keyword">FROM</span>  <br>     pg_class cc  <br>  <span class="hljs-keyword">JOIN</span> pg_namespace nn <span class="hljs-keyword">ON</span> cc.relnamespace = nn.oid <span class="hljs-keyword">AND</span> nn.nspname &lt;&gt; <span class="hljs-string">&#x27;information_schema&#x27;</span>  <br>  <span class="hljs-keyword">LEFT JOIN</span>  <br>  (  <br>    <span class="hljs-keyword">SELECT</span>  <br>      ma,bs,foo.nspname,foo.relname,  <br>      (datawidth+(hdr+ma-(<span class="hljs-keyword">case</span> <span class="hljs-keyword">when</span> hdr%ma=<span class="hljs-number">0</span> <span class="hljs-keyword">THEN</span> ma <span class="hljs-keyword">ELSE</span> hdr%ma <span class="hljs-keyword">END</span>)))::<span class="hljs-type">numeric</span> <span class="hljs-keyword">AS</span> datahdr,  <br>      (maxfracsum*(nullhdr+ma-(<span class="hljs-keyword">case</span> <span class="hljs-keyword">when</span> nullhdr%ma=<span class="hljs-number">0</span> <span class="hljs-keyword">THEN</span> ma <span class="hljs-keyword">ELSE</span> nullhdr%ma <span class="hljs-keyword">END</span>))) <span class="hljs-keyword">AS</span> nullhdr2  <br>    <span class="hljs-keyword">FROM</span> (  <br>      <span class="hljs-keyword">SELECT</span>  <br>        ns.nspname, tbl.relname, hdr, ma, bs,  <br>        SUM((<span class="hljs-number">1</span>-coalesce(null_frac,<span class="hljs-number">0</span>))*coalesce(avg_width, <span class="hljs-number">2048</span>)) <span class="hljs-keyword">AS</span> datawidth,  <br>        MAX(coalesce(null_frac,<span class="hljs-number">0</span>)) <span class="hljs-keyword">AS</span> maxfracsum,  <br>        hdr+(  <br>          <span class="hljs-keyword">SELECT</span> <span class="hljs-number">1</span>+count(*)/<span class="hljs-number">8</span>  <br>          <span class="hljs-keyword">FROM</span> pg_stats s2  <br>          <span class="hljs-keyword">WHERE</span> null_frac&lt;&gt;<span class="hljs-number">0</span> <span class="hljs-keyword">AND</span> s2.schemaname = ns.nspname <span class="hljs-keyword">AND</span> s2.tablename = tbl.relname  <br>        ) <span class="hljs-keyword">AS</span> nullhdr  <br>      <span class="hljs-keyword">FROM</span> pg_attribute att  <br>      <span class="hljs-keyword">JOIN</span> pg_class tbl <span class="hljs-keyword">ON</span> att.attrelid = tbl.oid  <br>      <span class="hljs-keyword">JOIN</span> pg_namespace ns <span class="hljs-keyword">ON</span> ns.oid = tbl.relnamespace  <br>      <span class="hljs-keyword">LEFT JOIN</span> pg_stats s <span class="hljs-keyword">ON</span> s.schemaname=ns.nspname  <br>      <span class="hljs-keyword">AND</span> s.tablename = tbl.relname  <br>      <span class="hljs-keyword">AND</span> s.inherited=<span class="hljs-keyword">false</span>  <br>      <span class="hljs-keyword">AND</span> s.attname=att.attname,  <br>      (  <br>        <span class="hljs-keyword">SELECT</span>  <br>          (<span class="hljs-keyword">SELECT</span> current_setting(<span class="hljs-string">&#x27;block_size&#x27;</span>)::<span class="hljs-type">numeric</span>) <span class="hljs-keyword">AS</span> bs,  <br>            <span class="hljs-keyword">CASE</span> <span class="hljs-keyword">WHEN</span> SUBSTRING(SPLIT_PART(v, <span class="hljs-string">&#x27; &#x27;</span>, <span class="hljs-number">2</span>) <span class="hljs-keyword">FROM</span> <span class="hljs-string">&#x27;#&quot;[0-9]+.[0-9]+#&quot;%&#x27;</span> <span class="hljs-keyword">for</span> <span class="hljs-string">&#x27;#&#x27;</span>)  <br>              <span class="hljs-keyword">IN</span> (<span class="hljs-string">&#x27;8.0&#x27;</span>,<span class="hljs-string">&#x27;8.1&#x27;</span>,<span class="hljs-string">&#x27;8.2&#x27;</span>) <span class="hljs-keyword">THEN</span> <span class="hljs-number">27</span> <span class="hljs-keyword">ELSE</span> <span class="hljs-number">23</span> <span class="hljs-keyword">END</span> <span class="hljs-keyword">AS</span> hdr,  <br>          <span class="hljs-keyword">CASE</span> <span class="hljs-keyword">WHEN</span> v ~ <span class="hljs-string">&#x27;mingw32&#x27;</span> <span class="hljs-keyword">OR</span> v ~ <span class="hljs-string">&#x27;64-bit&#x27;</span> <span class="hljs-keyword">THEN</span> <span class="hljs-number">8</span> <span class="hljs-keyword">ELSE</span> <span class="hljs-number">4</span> <span class="hljs-keyword">END</span> <span class="hljs-keyword">AS</span> ma  <br>        <span class="hljs-keyword">FROM</span> (<span class="hljs-keyword">SELECT</span> version() <span class="hljs-keyword">AS</span> v) <span class="hljs-keyword">AS</span> foo  <br>      ) <span class="hljs-keyword">AS</span> constants  <br>      <span class="hljs-keyword">WHERE</span> att.attnum &gt; <span class="hljs-number">0</span> <span class="hljs-keyword">AND</span> tbl.relkind=<span class="hljs-string">&#x27;r&#x27;</span>  <br>      <span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>  <br>    ) <span class="hljs-keyword">AS</span> foo  <br>  ) <span class="hljs-keyword">AS</span> rs  <br>  <span class="hljs-keyword">ON</span> cc.relname = rs.relname <span class="hljs-keyword">AND</span> nn.nspname = rs.nspname  <br>  <span class="hljs-keyword">LEFT JOIN</span> pg_index i <span class="hljs-keyword">ON</span> indrelid = cc.oid  <br>  <span class="hljs-keyword">LEFT JOIN</span> pg_class c2 <span class="hljs-keyword">ON</span> c2.oid = i.indexrelid  <br>) <span class="hljs-keyword">AS</span> sml   <br><span class="hljs-keyword">where</span> (<span class="hljs-keyword">CASE</span> <span class="hljs-keyword">WHEN</span> relpages &lt; otta <span class="hljs-keyword">THEN</span> <span class="hljs-number">0</span> <span class="hljs-keyword">ELSE</span> bs*(sml.relpages-otta)::<span class="hljs-type">bigint</span> <span class="hljs-keyword">END</span>) &gt;= <span class="hljs-number">10240000</span>  <br><span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> tbloat <span class="hljs-keyword">desc</span>,wastedbytes <span class="hljs-keyword">desc</span> <span class="hljs-keyword">limit</span> <span class="hljs-number">5</span>;  <br></code></pre></td></tr></table></figure>
<h1 id="查询膨胀比例top-10的索引-浪费空间大于10MB的索引"><a href="#查询膨胀比例top-10的索引-浪费空间大于10MB的索引" class="headerlink" title="查询膨胀比例top 10的索引(浪费空间大于10MB的索引)"></a>查询膨胀比例top 10的索引(浪费空间大于10MB的索引)</h1><figure class="highlight pgsql"><table><tr><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">view</span> dba.top10bloatratioindex <span class="hljs-keyword">as</span>  <br><span class="hljs-keyword">SELECT</span>  <br>  current_database() <span class="hljs-keyword">AS</span> db, schemaname, tablename, reltuples::<span class="hljs-type">bigint</span> <span class="hljs-keyword">AS</span> tups, relpages::<span class="hljs-type">bigint</span> <span class="hljs-keyword">AS</span> pages, otta,  <br>  ROUND(<span class="hljs-keyword">CASE</span> <span class="hljs-keyword">WHEN</span> otta=<span class="hljs-number">0</span> <span class="hljs-keyword">OR</span> sml.relpages=<span class="hljs-number">0</span> <span class="hljs-keyword">OR</span> sml.relpages=otta <span class="hljs-keyword">THEN</span> <span class="hljs-number">0.0</span> <span class="hljs-keyword">ELSE</span> sml.relpages/otta::<span class="hljs-type">numeric</span> <span class="hljs-keyword">END</span>,<span class="hljs-number">1</span>) <span class="hljs-keyword">AS</span> tbloat,  <br>  <span class="hljs-keyword">CASE</span> <span class="hljs-keyword">WHEN</span> relpages &lt; otta <span class="hljs-keyword">THEN</span> <span class="hljs-number">0</span> <span class="hljs-keyword">ELSE</span> relpages::<span class="hljs-type">bigint</span> - otta <span class="hljs-keyword">END</span> <span class="hljs-keyword">AS</span> wastedpages,  <br>  <span class="hljs-keyword">CASE</span> <span class="hljs-keyword">WHEN</span> relpages &lt; otta <span class="hljs-keyword">THEN</span> <span class="hljs-number">0</span> <span class="hljs-keyword">ELSE</span> bs*(sml.relpages-otta)::<span class="hljs-type">bigint</span> <span class="hljs-keyword">END</span> <span class="hljs-keyword">AS</span> wastedbytes,  <br>  <span class="hljs-keyword">CASE</span> <span class="hljs-keyword">WHEN</span> relpages &lt; otta <span class="hljs-keyword">THEN</span> <span class="hljs-string">&#x27;0 bytes&#x27;</span>::<span class="hljs-type">text</span> <span class="hljs-keyword">ELSE</span> pg_size_pretty((bs*(relpages-otta))::<span class="hljs-type">bigint</span>) <span class="hljs-keyword">END</span> <span class="hljs-keyword">AS</span> wastedsize,  <br>  iname, ituples::<span class="hljs-type">bigint</span> <span class="hljs-keyword">AS</span> itups, ipages::<span class="hljs-type">bigint</span> <span class="hljs-keyword">AS</span> ipages, iotta,  <br>  ROUND(<span class="hljs-keyword">CASE</span> <span class="hljs-keyword">WHEN</span> iotta=<span class="hljs-number">0</span> <span class="hljs-keyword">OR</span> ipages=<span class="hljs-number">0</span> <span class="hljs-keyword">OR</span> ipages=iotta <span class="hljs-keyword">THEN</span> <span class="hljs-number">0.0</span> <span class="hljs-keyword">ELSE</span> ipages/iotta::<span class="hljs-type">numeric</span> <span class="hljs-keyword">END</span>,<span class="hljs-number">1</span>) <span class="hljs-keyword">AS</span> ibloat,  <br>  <span class="hljs-keyword">CASE</span> <span class="hljs-keyword">WHEN</span> ipages &lt; iotta <span class="hljs-keyword">THEN</span> <span class="hljs-number">0</span> <span class="hljs-keyword">ELSE</span> ipages::<span class="hljs-type">bigint</span> - iotta <span class="hljs-keyword">END</span> <span class="hljs-keyword">AS</span> wastedipages,  <br>  <span class="hljs-keyword">CASE</span> <span class="hljs-keyword">WHEN</span> ipages &lt; iotta <span class="hljs-keyword">THEN</span> <span class="hljs-number">0</span> <span class="hljs-keyword">ELSE</span> bs*(ipages-iotta) <span class="hljs-keyword">END</span> <span class="hljs-keyword">AS</span> wastedibytes,  <br>  <span class="hljs-keyword">CASE</span> <span class="hljs-keyword">WHEN</span> ipages &lt; iotta <span class="hljs-keyword">THEN</span> <span class="hljs-string">&#x27;0 bytes&#x27;</span> <span class="hljs-keyword">ELSE</span> pg_size_pretty((bs*(ipages-iotta))::<span class="hljs-type">bigint</span>) <span class="hljs-keyword">END</span> <span class="hljs-keyword">AS</span> wastedisize,  <br>  pg_size_pretty(<span class="hljs-keyword">CASE</span> <span class="hljs-keyword">WHEN</span> relpages &lt; otta <span class="hljs-keyword">THEN</span>  <br>    <span class="hljs-keyword">CASE</span> <span class="hljs-keyword">WHEN</span> ipages &lt; iotta <span class="hljs-keyword">THEN</span> <span class="hljs-number">0</span> <span class="hljs-keyword">ELSE</span> bs*(ipages-iotta::<span class="hljs-type">bigint</span>) <span class="hljs-keyword">END</span>  <br>    <span class="hljs-keyword">ELSE</span> <span class="hljs-keyword">CASE</span> <span class="hljs-keyword">WHEN</span> ipages &lt; iotta <span class="hljs-keyword">THEN</span> bs*(relpages-otta::<span class="hljs-type">bigint</span>)  <br>      <span class="hljs-keyword">ELSE</span> bs*(relpages-otta::<span class="hljs-type">bigint</span> + ipages-iotta::<span class="hljs-type">bigint</span>) <span class="hljs-keyword">END</span>  <br>  <span class="hljs-keyword">END</span>) <span class="hljs-keyword">AS</span> totalwastedbytes  <br><span class="hljs-keyword">FROM</span> (  <br>  <span class="hljs-keyword">SELECT</span>  <br>    nn.nspname <span class="hljs-keyword">AS</span> schemaname,  <br>    cc.relname <span class="hljs-keyword">AS</span> tablename,  <br>    COALESCE(cc.reltuples,<span class="hljs-number">0</span>) <span class="hljs-keyword">AS</span> reltuples,  <br>    COALESCE(cc.relpages,<span class="hljs-number">0</span>) <span class="hljs-keyword">AS</span> relpages,  <br>    COALESCE(bs,<span class="hljs-number">0</span>) <span class="hljs-keyword">AS</span> bs,  <br>    COALESCE(CEIL((cc.reltuples*((datahdr+ma-  <br>      (<span class="hljs-keyword">CASE</span> <span class="hljs-keyword">WHEN</span> datahdr%ma=<span class="hljs-number">0</span> <span class="hljs-keyword">THEN</span> ma <span class="hljs-keyword">ELSE</span> datahdr%ma <span class="hljs-keyword">END</span>))+nullhdr2+<span class="hljs-number">4</span>))/(bs<span class="hljs-number">-20</span>::<span class="hljs-type">float</span>)),<span class="hljs-number">0</span>) <span class="hljs-keyword">AS</span> otta,  <br>    COALESCE(c2.relname,<span class="hljs-string">&#x27;?&#x27;</span>) <span class="hljs-keyword">AS</span> iname, COALESCE(c2.reltuples,<span class="hljs-number">0</span>) <span class="hljs-keyword">AS</span> ituples, COALESCE(c2.relpages,<span class="hljs-number">0</span>) <span class="hljs-keyword">AS</span> ipages,  <br>    COALESCE(CEIL((c2.reltuples*(datahdr<span class="hljs-number">-12</span>))/(bs<span class="hljs-number">-20</span>::<span class="hljs-type">float</span>)),<span class="hljs-number">0</span>) <span class="hljs-keyword">AS</span> iotta <span class="hljs-comment">-- very rough approximation, assumes all cols  </span><br>  <span class="hljs-keyword">FROM</span>  <br>     pg_class cc  <br>  <span class="hljs-keyword">JOIN</span> pg_namespace nn <span class="hljs-keyword">ON</span> cc.relnamespace = nn.oid <span class="hljs-keyword">AND</span> nn.nspname &lt;&gt; <span class="hljs-string">&#x27;information_schema&#x27;</span>  <br>  <span class="hljs-keyword">LEFT JOIN</span>  <br>  (  <br>    <span class="hljs-keyword">SELECT</span>  <br>      ma,bs,foo.nspname,foo.relname,  <br>      (datawidth+(hdr+ma-(<span class="hljs-keyword">case</span> <span class="hljs-keyword">when</span> hdr%ma=<span class="hljs-number">0</span> <span class="hljs-keyword">THEN</span> ma <span class="hljs-keyword">ELSE</span> hdr%ma <span class="hljs-keyword">END</span>)))::<span class="hljs-type">numeric</span> <span class="hljs-keyword">AS</span> datahdr,  <br>      (maxfracsum*(nullhdr+ma-(<span class="hljs-keyword">case</span> <span class="hljs-keyword">when</span> nullhdr%ma=<span class="hljs-number">0</span> <span class="hljs-keyword">THEN</span> ma <span class="hljs-keyword">ELSE</span> nullhdr%ma <span class="hljs-keyword">END</span>))) <span class="hljs-keyword">AS</span> nullhdr2  <br>    <span class="hljs-keyword">FROM</span> (  <br>      <span class="hljs-keyword">SELECT</span>  <br>        ns.nspname, tbl.relname, hdr, ma, bs,  <br>        SUM((<span class="hljs-number">1</span>-coalesce(null_frac,<span class="hljs-number">0</span>))*coalesce(avg_width, <span class="hljs-number">2048</span>)) <span class="hljs-keyword">AS</span> datawidth,  <br>        MAX(coalesce(null_frac,<span class="hljs-number">0</span>)) <span class="hljs-keyword">AS</span> maxfracsum,  <br>        hdr+(  <br>          <span class="hljs-keyword">SELECT</span> <span class="hljs-number">1</span>+count(*)/<span class="hljs-number">8</span>  <br>          <span class="hljs-keyword">FROM</span> pg_stats s2  <br>          <span class="hljs-keyword">WHERE</span> null_frac&lt;&gt;<span class="hljs-number">0</span> <span class="hljs-keyword">AND</span> s2.schemaname = ns.nspname <span class="hljs-keyword">AND</span> s2.tablename = tbl.relname  <br>        ) <span class="hljs-keyword">AS</span> nullhdr  <br>      <span class="hljs-keyword">FROM</span> pg_attribute att  <br>      <span class="hljs-keyword">JOIN</span> pg_class tbl <span class="hljs-keyword">ON</span> att.attrelid = tbl.oid  <br>      <span class="hljs-keyword">JOIN</span> pg_namespace ns <span class="hljs-keyword">ON</span> ns.oid = tbl.relnamespace  <br>      <span class="hljs-keyword">LEFT JOIN</span> pg_stats s <span class="hljs-keyword">ON</span> s.schemaname=ns.nspname  <br>      <span class="hljs-keyword">AND</span> s.tablename = tbl.relname  <br>      <span class="hljs-keyword">AND</span> s.inherited=<span class="hljs-keyword">false</span>  <br>      <span class="hljs-keyword">AND</span> s.attname=att.attname,  <br>      (  <br>        <span class="hljs-keyword">SELECT</span>  <br>          (<span class="hljs-keyword">SELECT</span> current_setting(<span class="hljs-string">&#x27;block_size&#x27;</span>)::<span class="hljs-type">numeric</span>) <span class="hljs-keyword">AS</span> bs,  <br>            <span class="hljs-keyword">CASE</span> <span class="hljs-keyword">WHEN</span> SUBSTRING(SPLIT_PART(v, <span class="hljs-string">&#x27; &#x27;</span>, <span class="hljs-number">2</span>) <span class="hljs-keyword">FROM</span> <span class="hljs-string">&#x27;#&quot;[0-9]+.[0-9]+#&quot;%&#x27;</span> <span class="hljs-keyword">for</span> <span class="hljs-string">&#x27;#&#x27;</span>)  <br>              <span class="hljs-keyword">IN</span> (<span class="hljs-string">&#x27;8.0&#x27;</span>,<span class="hljs-string">&#x27;8.1&#x27;</span>,<span class="hljs-string">&#x27;8.2&#x27;</span>) <span class="hljs-keyword">THEN</span> <span class="hljs-number">27</span> <span class="hljs-keyword">ELSE</span> <span class="hljs-number">23</span> <span class="hljs-keyword">END</span> <span class="hljs-keyword">AS</span> hdr,  <br>          <span class="hljs-keyword">CASE</span> <span class="hljs-keyword">WHEN</span> v ~ <span class="hljs-string">&#x27;mingw32&#x27;</span> <span class="hljs-keyword">OR</span> v ~ <span class="hljs-string">&#x27;64-bit&#x27;</span> <span class="hljs-keyword">THEN</span> <span class="hljs-number">8</span> <span class="hljs-keyword">ELSE</span> <span class="hljs-number">4</span> <span class="hljs-keyword">END</span> <span class="hljs-keyword">AS</span> ma  <br>        <span class="hljs-keyword">FROM</span> (<span class="hljs-keyword">SELECT</span> version() <span class="hljs-keyword">AS</span> v) <span class="hljs-keyword">AS</span> foo  <br>      ) <span class="hljs-keyword">AS</span> constants  <br>      <span class="hljs-keyword">WHERE</span> att.attnum &gt; <span class="hljs-number">0</span> <span class="hljs-keyword">AND</span> tbl.relkind=<span class="hljs-string">&#x27;r&#x27;</span>  <br>      <span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>  <br>    ) <span class="hljs-keyword">AS</span> foo  <br>  ) <span class="hljs-keyword">AS</span> rs  <br>  <span class="hljs-keyword">ON</span> cc.relname = rs.relname <span class="hljs-keyword">AND</span> nn.nspname = rs.nspname  <br>  <span class="hljs-keyword">LEFT JOIN</span> pg_index i <span class="hljs-keyword">ON</span> indrelid = cc.oid  <br>  <span class="hljs-keyword">LEFT JOIN</span> pg_class c2 <span class="hljs-keyword">ON</span> c2.oid = i.indexrelid  <br>) <span class="hljs-keyword">AS</span> sml   <br><span class="hljs-keyword">where</span> (<span class="hljs-keyword">CASE</span> <span class="hljs-keyword">WHEN</span> ipages &lt; iotta <span class="hljs-keyword">THEN</span> <span class="hljs-number">0</span> <span class="hljs-keyword">ELSE</span> bs*(ipages-iotta) <span class="hljs-keyword">END</span>) &gt;= <span class="hljs-number">10240000</span>  <br><span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> ibloat <span class="hljs-keyword">desc</span>,wastedibytes <span class="hljs-keyword">desc</span> <span class="hljs-keyword">limit</span> <span class="hljs-number">5</span>; <br></code></pre></td></tr></table></figure>
<h1 id="查询序列距离最大值的范围"><a href="#查询序列距离最大值的范围" class="headerlink" title="查询序列距离最大值的范围"></a>查询序列距离最大值的范围</h1><figure class="highlight pgsql"><table><tr><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">view</span> dba.seqs <span class="hljs-keyword">as</span> <span class="hljs-keyword">select</span> max_value-last_value,* <span class="hljs-keyword">from</span> pg_sequences <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> max_value-last_value ;<br></code></pre></td></tr></table></figure>
<h1 id="freeze风暴预测相关的3个视图"><a href="#freeze风暴预测相关的3个视图" class="headerlink" title="freeze风暴预测相关的3个视图"></a>freeze风暴预测相关的3个视图</h1><figure class="highlight pgsql"><table><tr><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">view</span> dba.v_freeze <span class="hljs-keyword">as</span>    <br><span class="hljs-keyword">select</span>     <br>  e.*,     <br>  a.*     <br><span class="hljs-keyword">from</span>    <br>(<span class="hljs-keyword">select</span>     <br>  current_setting(<span class="hljs-string">&#x27;autovacuum_freeze_max_age&#x27;</span>)::<span class="hljs-type">int</span> <span class="hljs-keyword">as</span> v1,            <span class="hljs-comment">-- 如果表的事务ID年龄大于该值, 即使未开启autovacuum也会强制触发FREEZE, 并告警Preventing Transaction ID Wraparound Failures    </span><br>  current_setting(<span class="hljs-string">&#x27;autovacuum_multixact_freeze_max_age&#x27;</span>)::<span class="hljs-type">int</span> <span class="hljs-keyword">as</span> v2,  <span class="hljs-comment">-- 如果表的并行事务ID年龄大于该值, 即使未开启autovacuum也会强制触发FREEZE, 并告警Preventing Transaction ID Wraparound Failures    </span><br>  current_setting(<span class="hljs-string">&#x27;vacuum_freeze_min_age&#x27;</span>)::<span class="hljs-type">int</span> <span class="hljs-keyword">as</span> v3,                <span class="hljs-comment">-- 手动或自动垃圾回收时, 如果记录的事务ID年龄大于该值, 将被FREEZE    </span><br>  current_setting(<span class="hljs-string">&#x27;vacuum_multixact_freeze_min_age&#x27;</span>)::<span class="hljs-type">int</span> <span class="hljs-keyword">as</span> v4,      <span class="hljs-comment">-- 手动或自动垃圾回收时, 如果记录的并行事务ID年龄大于该值, 将被FREEZE    </span><br>  current_setting(<span class="hljs-string">&#x27;vacuum_freeze_table_age&#x27;</span>)::<span class="hljs-type">int</span> <span class="hljs-keyword">as</span> v5,              <span class="hljs-comment">-- 手动垃圾回收时, 如果表的事务ID年龄大于该值, 将触发FREEZE. 该参数的上限值为 %95 autovacuum_freeze_max_age    </span><br>  current_setting(<span class="hljs-string">&#x27;vacuum_multixact_freeze_table_age&#x27;</span>)::<span class="hljs-type">int</span> <span class="hljs-keyword">as</span> v6,    <span class="hljs-comment">-- 手动垃圾回收时, 如果表的并行事务ID年龄大于该值, 将触发FREEZE. 该参数的上限值为 %95 autovacuum_multixact_freeze_max_age    </span><br>  current_setting(<span class="hljs-string">&#x27;autovacuum_vacuum_cost_delay&#x27;</span>) <span class="hljs-keyword">as</span> v7,              <span class="hljs-comment">-- 自动垃圾回收时, 每轮回收周期后的一个休息时间, 主要防止垃圾回收太耗资源. -1 表示沿用vacuum_cost_delay的设置    </span><br>  current_setting(<span class="hljs-string">&#x27;autovacuum_vacuum_cost_limit&#x27;</span>) <span class="hljs-keyword">as</span> v8,              <span class="hljs-comment">-- 自动垃圾回收时, 每轮回收周期设多大限制, 限制由vacuum_cost_page_hit,vacuum_cost_page_missvacuum_cost_page_dirty参数以及周期内的操作决定. -1 表示沿用vacuum_cost_limit的设置    </span><br>  current_setting(<span class="hljs-string">&#x27;vacuum_cost_delay&#x27;</span>) <span class="hljs-keyword">as</span> v9,                         <span class="hljs-comment">-- 手动垃圾回收时, 每轮回收周期后的一个休息时间, 主要防止垃圾回收太耗资源.    </span><br>  current_setting(<span class="hljs-string">&#x27;vacuum_cost_limit&#x27;</span>) <span class="hljs-keyword">as</span> v10,                        <span class="hljs-comment">-- 手动垃圾回收时, 每轮回收周期设多大限制, 限制由vacuum_cost_page_hit,vacuum_cost_page_missvacuum_cost_page_dirty参数以及周期内的操作决定.    </span><br>  current_setting(<span class="hljs-string">&#x27;autovacuum&#x27;</span>) <span class="hljs-keyword">as</span> autovacuum                         <span class="hljs-comment">-- 是否开启自动垃圾回收    </span><br>) a,     <br><span class="hljs-keyword">LATERAL</span> (   <span class="hljs-comment">-- LATERAL 允许你在这个SUBQUERY中直接引用前面的table, subquery中的column     </span><br><span class="hljs-keyword">select</span>     <br>pg_size_pretty(pg_total_relation_size(<span class="hljs-type">oid</span>)) sz,   <span class="hljs-comment">-- 表的大小(含TOAST, 索引)    </span><br><span class="hljs-type">oid</span>::<span class="hljs-type">regclass</span> <span class="hljs-keyword">as</span> reloid,    <span class="hljs-comment">-- 表名(物化视图)    </span><br>relkind,                    <span class="hljs-comment">-- r=表, m=物化视图    </span><br>coalesce(    <br>  least(    <br>    substring(reloptions::<span class="hljs-type">text</span>, <span class="hljs-string">&#x27;autovacuum_freeze_max_age=(\d+)&#x27;</span>)::<span class="hljs-type">int</span>,     <br>    substring(reloptions::<span class="hljs-type">text</span>, <span class="hljs-string">&#x27;autovacuum_freeze_table_age=(\d+)&#x27;</span>)::<span class="hljs-type">int</span>     <br>  ),    <br>  a.v1    <br>)    <br>-    <br>age(<span class="hljs-keyword">case</span> <span class="hljs-keyword">when</span> relfrozenxid::<span class="hljs-type">text</span>::<span class="hljs-type">int</span>&lt;<span class="hljs-number">3</span> <span class="hljs-keyword">then</span> <span class="hljs-keyword">null</span> <span class="hljs-keyword">else</span> relfrozenxid <span class="hljs-keyword">end</span>)     <br><span class="hljs-keyword">as</span> remain_ages_xid,   <span class="hljs-comment">-- 再产生多少个事务后, 自动垃圾回收会触发FREEZE, 起因为事务ID    </span><br>coalesce(    <br>  least(    <br>    substring(reloptions::<span class="hljs-type">text</span>, <span class="hljs-string">&#x27;autovacuum_multixact_freeze_max_age=(\d+)&#x27;</span>)::<span class="hljs-type">int</span>,     <br>    substring(reloptions::<span class="hljs-type">text</span>, <span class="hljs-string">&#x27;autovacuum_multixact_freeze_table_age=(\d+)&#x27;</span>)::<span class="hljs-type">int</span>     <br>  ),    <br>  a.v2    <br>)    <br>-    <br>age(<span class="hljs-keyword">case</span> <span class="hljs-keyword">when</span> relminmxid::<span class="hljs-type">text</span>::<span class="hljs-type">int</span>&lt;<span class="hljs-number">3</span> <span class="hljs-keyword">then</span> <span class="hljs-keyword">null</span> <span class="hljs-keyword">else</span> relminmxid <span class="hljs-keyword">end</span>)     <br><span class="hljs-keyword">as</span> remain_ages_mxid,  <span class="hljs-comment">-- 再产生多少个事务后, 自动垃圾回收会触发FREEZE, 起因为并发事务ID    </span><br>coalesce(    <br>  least(    <br>    substring(reloptions::<span class="hljs-type">text</span>, <span class="hljs-string">&#x27;autovacuum_freeze_min_age=(\d+)&#x27;</span>)::<span class="hljs-type">int</span>    <br>  ),    <br>  a.v3    <br>) <span class="hljs-keyword">as</span> xid_lower_to_minage,    <span class="hljs-comment">-- 如果触发FREEZE, 该表的事务ID年龄会降到多少    </span><br>coalesce(    <br>  least(    <br>    substring(reloptions::<span class="hljs-type">text</span>, <span class="hljs-string">&#x27;autovacuum_multixact_freeze_min_age=(\d+)&#x27;</span>)::<span class="hljs-type">int</span>    <br>  ),    <br>  a.v4    <br>) <span class="hljs-keyword">as</span> mxid_lower_to_minage,   <span class="hljs-comment">-- 如果触发FREEZE, 该表的并行事务ID年龄会降到多少    </span><br><span class="hljs-keyword">case</span>     <br>  <span class="hljs-keyword">when</span> v5 &lt;= age(<span class="hljs-keyword">case</span> <span class="hljs-keyword">when</span> relfrozenxid::<span class="hljs-type">text</span>::<span class="hljs-type">int</span>&lt;<span class="hljs-number">3</span> <span class="hljs-keyword">then</span> <span class="hljs-keyword">null</span> <span class="hljs-keyword">else</span> relfrozenxid <span class="hljs-keyword">end</span>) <span class="hljs-keyword">then</span> <span class="hljs-string">&#x27;YES&#x27;</span>    <br>  <span class="hljs-keyword">else</span> <span class="hljs-string">&#x27;NOT&#x27;</span>    <br><span class="hljs-keyword">end</span> <span class="hljs-keyword">as</span> vacuum_trigger_freeze1,    <span class="hljs-comment">-- 如果手工执行VACUUM, 是否会触发FREEZE, 触发起因(事务ID年龄达到阈值)    </span><br><span class="hljs-keyword">case</span>     <br>  <span class="hljs-keyword">when</span> v6 &lt;= age(<span class="hljs-keyword">case</span> <span class="hljs-keyword">when</span> relminmxid::<span class="hljs-type">text</span>::<span class="hljs-type">int</span>&lt;<span class="hljs-number">3</span> <span class="hljs-keyword">then</span> <span class="hljs-keyword">null</span> <span class="hljs-keyword">else</span> relminmxid <span class="hljs-keyword">end</span>) <span class="hljs-keyword">then</span> <span class="hljs-string">&#x27;YES&#x27;</span>    <br>  <span class="hljs-keyword">else</span> <span class="hljs-string">&#x27;NOT&#x27;</span>    <br><span class="hljs-keyword">end</span> <span class="hljs-keyword">as</span> vacuum_trigger_freeze2,    <span class="hljs-comment">-- 如果手工执行VACUUM, 是否会触发FREEZE, 触发起因(并行事务ID年龄达到阈值)    </span><br>reloptions                        <span class="hljs-comment">-- 表级参数, 优先. 例如是否开启自动垃圾回收, autovacuum_freeze_max_age, autovacuum_freeze_table_age, autovacuum_multixact_freeze_max_age, autovacuum_multixact_freeze_table_age    </span><br><span class="hljs-keyword">from</span> pg_class     <br>  <span class="hljs-keyword">where</span> relkind <span class="hljs-keyword">in</span> (<span class="hljs-string">&#x27;r&#x27;</span>,<span class="hljs-string">&#x27;m&#x27;</span>)    <br>) e     <br><span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span>     <br>  least(e.remain_ages_xid , e.remain_ages_mxid),  <span class="hljs-comment">-- 排在越前, 越先触发自动FREEZE, 即风暴来临的预测    </span><br>  pg_total_relation_size(reloid) <span class="hljs-keyword">desc</span>   <span class="hljs-comment">-- 同样剩余年龄, 表越大, 排越前    </span><br>;    <br><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">view</span> dba.v_freeze_stat <span class="hljs-keyword">as</span>    <br><span class="hljs-keyword">select</span>     <br>wb,                                                     <span class="hljs-comment">-- 第几个BATCH, 每个batch代表流逝100万个事务     </span><br>cnt,                                                    <span class="hljs-comment">-- 这个batch 有多少表    </span><br>pg_size_pretty(ssz) <span class="hljs-keyword">as</span> ssz1,                            <span class="hljs-comment">-- 这个batch 这些 表+TOAST+索引 有多少容量    </span><br>pg_size_pretty(ssz) <span class="hljs-keyword">as</span> ssz2,                            <span class="hljs-comment">-- 这个batch FREEZE 会导致多少读IO    </span><br>pg_size_pretty(ssz*<span class="hljs-number">3</span>) <span class="hljs-keyword">as</span> ssz3,                          <span class="hljs-comment">-- 这个batch FREEZE 最多可能会导致多少写IO (通常三份 : 数据文件, WAL FULL PAGE, WAL)    </span><br>pg_size_pretty(min_sz) <span class="hljs-keyword">as</span> ssz4,                         <span class="hljs-comment">-- 这个batch 最小的表多大    </span><br>pg_size_pretty(max_sz) <span class="hljs-keyword">as</span> ssz5,                         <span class="hljs-comment">-- 这个batch 最大的表多大    </span><br>pg_size_pretty(avg_sz) <span class="hljs-keyword">as</span> ssz6,                         <span class="hljs-comment">-- 这个batch 平均表多大    </span><br>pg_size_pretty(stddev_sz) <span class="hljs-keyword">as</span> ssz7,                      <span class="hljs-comment">-- 这个batch 表大小的方差, 越大, 说明表大小差异化明显    </span><br>min_rest_age,                                           <span class="hljs-comment">-- 这个batch 距离自动FREEZE最低剩余事务数    </span><br>max_rest_age,                                           <span class="hljs-comment">-- 这个batch 距离自动FREEZE最高剩余事务数    </span><br>stddev_rest_age,                                        <span class="hljs-comment">-- 这个batch 距离自动FREEZE剩余事务数的方差, 越小，说明这个batch触发freeze将越平缓, 越大, 说明这个batch将有可能在某些点集中触发freeze (但是可能集中触发的都是小表)    </span><br>corr_rest_age_sz,                                       <span class="hljs-comment">-- 表大小与距离自动freeze剩余事务数的相关性，相关性越强(值趋向1或-1) stddev_rest_age 与 sz7 说明的问题越有价值    </span><br>round(<span class="hljs-number">100</span>*(ssz/(sum(ssz) <span class="hljs-keyword">over</span> ())), <span class="hljs-number">2</span>)||<span class="hljs-string">&#x27; %&#x27;</span> <span class="hljs-keyword">as</span> ratio   <span class="hljs-comment">-- 这个BATCH的容量占比，占比如果非常不均匀，说明有必要调整表级FREEZE参数，让占比均匀化    </span><br><span class="hljs-keyword">from</span>         <br>(    <br><span class="hljs-keyword">select</span> a.*, b.* <span class="hljs-keyword">from</span>     <br>(    <br><span class="hljs-keyword">select</span>     <br>  min(least(remain_ages_xid, remain_ages_mxid)) <span class="hljs-keyword">as</span> v_min,   <span class="hljs-comment">-- 整个数据库中离自动FREEZE的 最小 剩余事务ID数    </span><br>  max(least(remain_ages_xid, remain_ages_mxid)) <span class="hljs-keyword">as</span> v_max    <span class="hljs-comment">-- 整个数据库中离自动FREEZE的 最大 剩余事务ID数    </span><br><span class="hljs-keyword">from</span> v_freeze    <br>) <span class="hljs-keyword">as</span> a,    <br><span class="hljs-keyword">LATERAL</span> (  <span class="hljs-comment">-- 高级SQL    </span><br><span class="hljs-keyword">select</span>     <br>width_bucket(    <br>  least(remain_ages_xid, remain_ages_mxid),     <br>  a.v_min,    <br>  a.v_max,    <br>  greatest((a.v_max-a.v_min)/<span class="hljs-number">1000000</span>, <span class="hljs-number">1</span>)   <span class="hljs-comment">-- 100万个事务, 如果要更改统计例如，修改这个值即可    </span><br>) <span class="hljs-keyword">as</span> wb,      <br>count(*) <span class="hljs-keyword">as</span> cnt,     <br>sum(pg_total_relation_size(reloid)) <span class="hljs-keyword">as</span> ssz,     <br>stddev_samp(pg_total_relation_size(reloid) <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> least(remain_ages_xid, remain_ages_mxid)) <span class="hljs-keyword">as</span> stddev_sz,     <br>min(pg_total_relation_size(reloid)) <span class="hljs-keyword">as</span> min_sz,     <br>max(pg_total_relation_size(reloid)) <span class="hljs-keyword">as</span> max_sz,     <br>avg(pg_total_relation_size(reloid)) <span class="hljs-keyword">as</span> avg_sz,     <br>min(least(remain_ages_xid, remain_ages_mxid)) <span class="hljs-keyword">as</span> min_rest_age,     <br>max(least(remain_ages_xid, remain_ages_mxid)) <span class="hljs-keyword">as</span> max_rest_age,     <br>stddev_samp(least(remain_ages_xid, remain_ages_mxid) <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> least(remain_ages_xid, remain_ages_mxid)) <span class="hljs-keyword">as</span> stddev_rest_age,     <br>corr(least(remain_ages_xid, remain_ages_mxid), pg_total_relation_size(reloid)) <span class="hljs-keyword">as</span> corr_rest_age_sz     <br><span class="hljs-keyword">from</span> v_freeze     <br><span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> wb     <br>) <span class="hljs-keyword">as</span> b     <br>) t     <br><span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> wb; <br><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">view</span> dba.v_freeze_stat_detail <span class="hljs-keyword">as</span>      <br><span class="hljs-keyword">select</span>     <br>pg_size_pretty(t.ssz) <span class="hljs-keyword">as</span> ssz2,     <span class="hljs-comment">-- 这个batch FREEZE 会导致多少读IO (表+TOAST+索引)    </span><br>pg_size_pretty(t.ssz*<span class="hljs-number">3</span>) <span class="hljs-keyword">as</span> ssz3,   <span class="hljs-comment">-- 这个batch FREEZE 最多可能会导致多少写IO (通常三份 : 数据文件, WAL FULL PAGE, WAL)    </span><br>pg_size_pretty(t.ssz_sum) <span class="hljs-keyword">as</span> ssz4, <span class="hljs-comment">-- 所有batch 所有表的总大小  (表+TOAST+索引)    </span><br>round(<span class="hljs-number">100</span>*(t.ssz/t.ssz_sum), <span class="hljs-number">2</span>)||<span class="hljs-string">&#x27; %&#x27;</span> <span class="hljs-keyword">as</span> ratio_batch,     <span class="hljs-comment">-- 这个BATCH的容量占比，目标是让所有BATCH占比尽量一致    </span><br>round(<span class="hljs-number">100</span>*(pg_total_relation_size(t.reloid)/t.ssz), <span class="hljs-number">2</span>)||<span class="hljs-string">&#x27; %&#x27;</span> <span class="hljs-keyword">as</span> ratio_table,     <span class="hljs-comment">-- 这个表占整个batch的容量占比，大表尽量错开freeze    </span><br>t.*      <br><span class="hljs-keyword">from</span>         <br>(    <br><span class="hljs-keyword">select</span> a.*, b.* <span class="hljs-keyword">from</span>       <br>(    <br>  <span class="hljs-keyword">select</span>     <br>    min(least(remain_ages_xid, remain_ages_mxid)) <span class="hljs-keyword">as</span> v_min,   <span class="hljs-comment">-- 整个数据库中离自动FREEZE的 最小 剩余事务ID数    </span><br>    max(least(remain_ages_xid, remain_ages_mxid)) <span class="hljs-keyword">as</span> v_max    <span class="hljs-comment">-- 整个数据库中离自动FREEZE的 最大 剩余事务ID数    </span><br>  <span class="hljs-keyword">from</span> v_freeze     <br>) <span class="hljs-keyword">as</span> a,     <br><span class="hljs-keyword">LATERAL</span> (     <span class="hljs-comment">-- 高级SQL    </span><br><span class="hljs-keyword">select</span>     <br>  count(*) <span class="hljs-keyword">over</span> w <span class="hljs-keyword">as</span> cnt,                                                <span class="hljs-comment">-- 这个batch 有多少表      </span><br>  sum(pg_total_relation_size(reloid)) <span class="hljs-keyword">over</span> () <span class="hljs-keyword">as</span> ssz_sum,                <span class="hljs-comment">-- 所有batch 所有表的总大小  (表+TOAST+索引)    </span><br>  sum(pg_total_relation_size(reloid)) <span class="hljs-keyword">over</span> w <span class="hljs-keyword">as</span> ssz,                     <span class="hljs-comment">-- 这个batch 的表大小总和 (表+TOAST+索引)    </span><br>  pg_size_pretty(min(pg_total_relation_size(reloid)) <span class="hljs-keyword">over</span> w) <span class="hljs-keyword">as</span> min_sz,  <span class="hljs-comment">-- 这个batch 最小的表多大    </span><br>  pg_size_pretty(max(pg_total_relation_size(reloid)) <span class="hljs-keyword">over</span> w) <span class="hljs-keyword">as</span> max_sz,  <span class="hljs-comment">-- 这个batch 最大的表多大    </span><br>  pg_size_pretty(avg(pg_total_relation_size(reloid)) <span class="hljs-keyword">over</span> w) <span class="hljs-keyword">as</span> avg_sz,  <span class="hljs-comment">-- 这个batch 平均表多大    </span><br>  pg_size_pretty(stddev_samp(pg_total_relation_size(reloid)) <span class="hljs-keyword">over</span> w) <span class="hljs-keyword">as</span> stddev_sz,  <span class="hljs-comment">-- 这个batch 表大小的方差, 越大, 说明表大小差异化明显                                                                                                                 </span><br>  min(least(remain_ages_xid, remain_ages_mxid)) <span class="hljs-keyword">over</span> w <span class="hljs-keyword">as</span> min_rest_age,             <span class="hljs-comment">-- 这个batch 距离自动FREEZE最低剩余事务数                                                                                                                             </span><br>  max(least(remain_ages_xid, remain_ages_mxid)) <span class="hljs-keyword">over</span> w <span class="hljs-keyword">as</span> max_rest_age,             <span class="hljs-comment">-- 这个batch 距离自动FREEZE最高剩余事务数                                                                                                                             </span><br>  stddev_samp(least(remain_ages_xid, remain_ages_mxid)) <span class="hljs-keyword">over</span> w <span class="hljs-keyword">as</span> stddev_rest_age,  <span class="hljs-comment">-- 这个batch 距离自动FREEZE剩余事务数的方差, 越小，说明这个batch触发freeze将越平缓, 越大, 说明这个batch将有可能在某些点集中触发freeze (但是可能集中触发的都是小表)    </span><br>  corr(least(remain_ages_xid, remain_ages_mxid), pg_total_relation_size(reloid)) <span class="hljs-keyword">over</span> w <span class="hljs-keyword">as</span> corr_rest_age_sz,  <span class="hljs-comment">-- 表大小与距离自动freeze剩余事务数的相关性，相关性越强(值趋向1或-1) stddev_rest_age 与 stddev_sz 说明的问题越有价值    </span><br>  t1.*     <br><span class="hljs-keyword">from</span>     <br>  (    <br>  <span class="hljs-keyword">select</span>     <br>    width_bucket(    <br>      least(tt.remain_ages_xid, tt.remain_ages_mxid),     <br>      a.v_min,    <br>      a.v_max,    <br>      greatest((a.v_max-a.v_min)/<span class="hljs-number">1000000</span>, <span class="hljs-number">1</span>)         <span class="hljs-comment">-- 100万个事务, 如果要更改统计例如，修改这个值即可    </span><br>    )     <br>    <span class="hljs-keyword">as</span> wb,                                           <span class="hljs-comment">-- 第几个BATCH, 每个batch代表流逝100万个事务      </span><br>    * <span class="hljs-keyword">from</span> v_freeze tt    <br>  ) <span class="hljs-keyword">as</span> t1      <br>  <span class="hljs-keyword">window</span> w <span class="hljs-keyword">as</span>     <br>  (    <br>    <span class="hljs-keyword">partition</span> <span class="hljs-keyword">by</span> t1.wb     <br>  )     <br>) <span class="hljs-keyword">as</span> b    <br>) t    <br><span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span>     <br>  t.wb,      <br>  least(t.remain_ages_xid, t.remain_ages_mxid),       <br>  pg_total_relation_size(t.reloid) <span class="hljs-keyword">desc</span>       <br>;      <br>  <br><span class="hljs-keyword">create</span> <span class="hljs-keyword">view</span> dba.top20freezebigtable <span class="hljs-keyword">as</span> <br><span class="hljs-keyword">select</span> relowner::<span class="hljs-type">regrole</span>, relnamespace::<span class="hljs-type">regnamespace</span>, relname, <br>age(relfrozenxid),pg_size_pretty(pg_total_relation_size(<span class="hljs-type">oid</span>)) , <span class="hljs-comment">-- 当前年龄 </span><br>coalesce(    <br>  least(    <br>    substring(reloptions::<span class="hljs-type">text</span>, <span class="hljs-string">&#x27;autovacuum_freeze_max_age=(\d+)&#x27;</span>)::<span class="hljs-type">int</span>,     <br>    substring(reloptions::<span class="hljs-type">text</span>, <span class="hljs-string">&#x27;autovacuum_freeze_table_age=(\d+)&#x27;</span>)::<span class="hljs-type">int</span>     <br>  ),    <br>  current_setting(<span class="hljs-string">&#x27;autovacuum_freeze_max_age&#x27;</span>)::<span class="hljs-type">int</span>   <br>)    <br>-    <br>age(<span class="hljs-keyword">case</span> <span class="hljs-keyword">when</span> relfrozenxid::<span class="hljs-type">text</span>::<span class="hljs-type">int</span>&lt;<span class="hljs-number">3</span> <span class="hljs-keyword">then</span> <span class="hljs-keyword">null</span> <span class="hljs-keyword">else</span> relfrozenxid <span class="hljs-keyword">end</span>)     <br><span class="hljs-keyword">as</span> remain_ages_xid,  <span class="hljs-comment">-- 再产生多少个事务后, 自动垃圾回收会触发FREEZE, 起因为事务ID</span><br>coalesce(    <br>  least(    <br>    substring(reloptions::<span class="hljs-type">text</span>, <span class="hljs-string">&#x27;autovacuum_freeze_min_age=(\d+)&#x27;</span>)::<span class="hljs-type">int</span>    <br>  ),    <br>  current_setting(<span class="hljs-string">&#x27;vacuum_freeze_min_age&#x27;</span>)::<span class="hljs-type">int</span>   <br>) <span class="hljs-keyword">as</span> xid_lower_to_minage    <span class="hljs-comment">-- 如果触发FREEZE, 该表的事务ID年龄会降到多少  </span><br><span class="hljs-keyword">from</span> pg_class <span class="hljs-keyword">where</span> relkind=<span class="hljs-string">&#x27;r&#x27;</span> <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> pg_total_relation_size(<span class="hljs-type">oid</span>) <span class="hljs-keyword">desc</span> <span class="hljs-keyword">limit</span> <span class="hljs-number">20</span>; <br></code></pre></td></tr></table></figure>
<h1 id="未归档wal文件"><a href="#未归档wal文件" class="headerlink" title="未归档wal文件"></a>未归档wal文件</h1><figure class="highlight pgsql"><table><tr><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">view</span> dba.arch_undone <span class="hljs-keyword">as</span> <br><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> pg_ls_archive_statusdir() <span class="hljs-keyword">where</span> <span class="hljs-type">name</span> !~ <span class="hljs-string">&#x27;done$&#x27;</span>;<br></code></pre></td></tr></table></figure>
<h1 id="归档任务状态"><a href="#归档任务状态" class="headerlink" title="归档任务状态"></a>归档任务状态</h1><figure class="highlight pgsql"><table><tr><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">view</span> dba.arch_status <span class="hljs-keyword">as</span><br><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> pg_stat_get_archiver();<br></code></pre></td></tr></table></figure>
<h1 id="wal空间占用"><a href="#wal空间占用" class="headerlink" title="wal空间占用"></a>wal空间占用</h1><figure class="highlight pgsql"><table><tr><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">view</span> dba.walsize <span class="hljs-keyword">as</span> <br><span class="hljs-keyword">select</span> pg_size_pretty(sum(size)) <span class="hljs-keyword">from</span> pg_ls_waldir();<br></code></pre></td></tr></table></figure>
<h1 id="系统强制保留wal大小"><a href="#系统强制保留wal大小" class="headerlink" title="系统强制保留wal大小"></a>系统强制保留wal大小</h1><figure class="highlight pgsql"><table><tr><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">view</span> dba.wal_keep_size <span class="hljs-keyword">as</span><br><span class="hljs-keyword">with</span> a <span class="hljs-keyword">as</span> (<span class="hljs-keyword">select</span> setting <span class="hljs-keyword">from</span> pg_settings <span class="hljs-keyword">where</span> <span class="hljs-type">name</span>=<span class="hljs-string">&#x27;wal_keep_segments&#x27;</span>) , b <span class="hljs-keyword">as</span> (<span class="hljs-keyword">select</span> setting,unit <span class="hljs-keyword">from</span> pg_settings <span class="hljs-keyword">where</span> <span class="hljs-type">name</span>=<span class="hljs-string">&#x27;wal_segment_size&#x27;</span>) <span class="hljs-keyword">select</span> pg_size_pretty(a.setting::<span class="hljs-type">int8</span>*b.setting::<span class="hljs-type">int8</span>) <span class="hljs-keyword">from</span> a,b;<br></code></pre></td></tr></table></figure>
<h1 id="长事务、prepared-statement"><a href="#长事务、prepared-statement" class="headerlink" title="长事务、prepared statement"></a>长事务、prepared statement</h1><figure class="highlight pgsql"><table><tr><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">view</span> dba.long_snapshot <span class="hljs-keyword">as</span> <br><span class="hljs-keyword">with</span> a <span class="hljs-keyword">as</span> (<span class="hljs-keyword">select</span> min(<span class="hljs-keyword">transaction</span>::<span class="hljs-type">Text</span>::<span class="hljs-type">int8</span>) m <span class="hljs-keyword">from</span> pg_prepared_xacts ),<br>b <span class="hljs-keyword">as</span> (<span class="hljs-keyword">select</span> txid_snapshot_xmin(txid_current_snapshot())::<span class="hljs-type">text</span>::<span class="hljs-type">int8</span> <span class="hljs-keyword">as</span> m),<br>c <span class="hljs-keyword">as</span> (<span class="hljs-keyword">select</span> min(least(backend_xid::<span class="hljs-type">text</span>::<span class="hljs-type">int8</span>,backend_xmin::<span class="hljs-type">text</span>::<span class="hljs-type">int8</span>)) m <span class="hljs-keyword">from</span> pg_stat_activity ),<br>d <span class="hljs-keyword">as</span> (<span class="hljs-keyword">select</span> datname,usename,pid,query_start,xact_start,now(),wait_event,query <span class="hljs-keyword">from</span> pg_stat_activity <span class="hljs-keyword">where</span> backend_xid <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> <span class="hljs-keyword">or</span> backend_xmin <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span><br><span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> least(backend_xid::<span class="hljs-type">text</span>::<span class="hljs-type">int8</span>,backend_xmin::<span class="hljs-type">text</span>::<span class="hljs-type">int8</span>) <span class="hljs-keyword">limit</span> <span class="hljs-number">1</span>),<br>e <span class="hljs-keyword">as</span> (<span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> pg_prepared_xacts <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> <span class="hljs-keyword">transaction</span>::<span class="hljs-type">Text</span>::<span class="hljs-type">int8</span> <span class="hljs-keyword">limit</span> <span class="hljs-number">1</span>)<br><span class="hljs-keyword">select</span> b.m-least(a.m,c.m),d.*,e.* <span class="hljs-keyword">from</span> a,b,c,d <span class="hljs-keyword">left join</span> e <span class="hljs-keyword">on</span> (<span class="hljs-number">1</span>=<span class="hljs-number">1</span>);<br></code></pre></td></tr></table></figure>
<h1 id="重置top-query统计计数器-通常在高峰期来临前可以重置-防止结果干扰"><a href="#重置top-query统计计数器-通常在高峰期来临前可以重置-防止结果干扰" class="headerlink" title="重置top query统计计数器(通常在高峰期来临前可以重置,防止结果干扰)"></a>重置top query统计计数器(通常在高峰期来临前可以重置,防止结果干扰)</h1><figure class="highlight pgsql"><table><tr><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">select</span> pg_stat_statements_reset();<br></code></pre></td></tr></table></figure>
<h1 id="查询活跃会话数-如果超过CPU核数-说明数据库非常非常繁忙-需要注意优化"><a href="#查询活跃会话数-如果超过CPU核数-说明数据库非常非常繁忙-需要注意优化" class="headerlink" title="查询活跃会话数, 如果超过CPU核数, 说明数据库非常非常繁忙, 需要注意优化"></a>查询活跃会话数, 如果超过CPU核数, 说明数据库非常非常繁忙, 需要注意优化</h1><figure class="highlight pgsql"><table><tr><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">view</span> dba.session_acting_cnt <span class="hljs-keyword">as</span> <span class="hljs-keyword">select</span> count(*) <span class="hljs-keyword">from</span> pg_stat_activity <span class="hljs-keyword">where</span> wait_event <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> <span class="hljs-keyword">and</span> (backend_xid <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> <span class="hljs-keyword">or</span> backend_xmin <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span>); <br></code></pre></td></tr></table></figure>
<h1 id="当前活跃会话"><a href="#当前活跃会话" class="headerlink" title="当前活跃会话"></a>当前活跃会话</h1><figure class="highlight pgsql"><table><tr><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">view</span> dba.sessions <span class="hljs-keyword">as</span> <span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> pg_stat_activity <span class="hljs-keyword">where</span> wait_event <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> <span class="hljs-keyword">and</span> (backend_xid <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> <span class="hljs-keyword">or</span> backend_xmin <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span>);  <br></code></pre></td></tr></table></figure>
<h1 id="查看锁等待"><a href="#查看锁等待" class="headerlink" title="查看锁等待"></a>查看锁等待</h1><figure class="highlight pgsql"><table><tr><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">view</span> dba.locks <span class="hljs-keyword">as</span> <span class="hljs-keyword">with</span>      <br>t_wait <span class="hljs-keyword">as</span>      <br>(      <br>  <span class="hljs-keyword">select</span> a.mode,a.locktype,a.<span class="hljs-keyword">database</span>,a.relation,a.page,a.tuple,a.classid,a.granted,     <br>  a.objid,a.objsubid,a.pid,a.virtualtransaction,a.virtualxid,a.transactionid,a.fastpath,      <br>  b.state,b.query,b.xact_start,b.query_start,b.usename,b.datname,b.client_addr,b.client_port,b.application_name     <br>    <span class="hljs-keyword">from</span> pg_locks a,pg_stat_activity b <span class="hljs-keyword">where</span> a.pid=b.pid <span class="hljs-keyword">and</span> <span class="hljs-keyword">not</span> a.granted     <br>),     <br>t_run <span class="hljs-keyword">as</span>     <br>(     <br>  <span class="hljs-keyword">select</span> a.mode,a.locktype,a.<span class="hljs-keyword">database</span>,a.relation,a.page,a.tuple,a.classid,a.granted,     <br>  a.objid,a.objsubid,a.pid,a.virtualtransaction,a.virtualxid,a.transactionid,a.fastpath,     <br>  b.state,b.query,b.xact_start,b.query_start,b.usename,b.datname,b.client_addr,b.client_port,b.application_name     <br>    <span class="hljs-keyword">from</span> pg_locks a,pg_stat_activity b <span class="hljs-keyword">where</span> a.pid=b.pid <span class="hljs-keyword">and</span> a.granted     <br>),     <br>t_overlap <span class="hljs-keyword">as</span>     <br>(     <br>  <span class="hljs-keyword">select</span> r.* <span class="hljs-keyword">from</span> t_wait w <span class="hljs-keyword">join</span> t_run r <span class="hljs-keyword">on</span>     <br>  (     <br>    r.locktype <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">distinct</span> <span class="hljs-keyword">from</span> w.locktype <span class="hljs-keyword">and</span>     <br>    r.<span class="hljs-keyword">database</span> <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">distinct</span> <span class="hljs-keyword">from</span> w.<span class="hljs-keyword">database</span> <span class="hljs-keyword">and</span>     <br>    r.relation <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">distinct</span> <span class="hljs-keyword">from</span> w.relation <span class="hljs-keyword">and</span>     <br>    r.page <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">distinct</span> <span class="hljs-keyword">from</span> w.page <span class="hljs-keyword">and</span>     <br>    r.tuple <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">distinct</span> <span class="hljs-keyword">from</span> w.tuple <span class="hljs-keyword">and</span>     <br>    r.virtualxid <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">distinct</span> <span class="hljs-keyword">from</span> w.virtualxid <span class="hljs-keyword">and</span>     <br>    r.transactionid <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">distinct</span> <span class="hljs-keyword">from</span> w.transactionid <span class="hljs-keyword">and</span>     <br>    r.classid <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">distinct</span> <span class="hljs-keyword">from</span> w.classid <span class="hljs-keyword">and</span>     <br>    r.objid <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">distinct</span> <span class="hljs-keyword">from</span> w.objid <span class="hljs-keyword">and</span>     <br>    r.objsubid <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">distinct</span> <span class="hljs-keyword">from</span> w.objsubid <span class="hljs-keyword">and</span>     <br>    r.pid &lt;&gt; w.pid     <br>  )      <br>),      <br>t_unionall <span class="hljs-keyword">as</span>      <br>(      <br>  <span class="hljs-keyword">select</span> r.* <span class="hljs-keyword">from</span> t_overlap r      <br>  <span class="hljs-keyword">union</span> <span class="hljs-keyword">all</span>      <br>  <span class="hljs-keyword">select</span> w.* <span class="hljs-keyword">from</span> t_wait w      <br>)      <br><span class="hljs-keyword">select</span> locktype,datname,relation::<span class="hljs-type">regclass</span>,page,tuple,virtualxid,transactionid::<span class="hljs-type">text</span>,classid::<span class="hljs-type">regclass</span>,objid,objsubid,     <br>string_agg(     <br><span class="hljs-string">&#x27;Pid: &#x27;</span>||<span class="hljs-keyword">case</span> <span class="hljs-keyword">when</span> pid <span class="hljs-keyword">is</span> <span class="hljs-keyword">null</span> <span class="hljs-keyword">then</span> <span class="hljs-string">&#x27;NULL&#x27;</span> <span class="hljs-keyword">else</span> pid::<span class="hljs-type">text</span> <span class="hljs-keyword">end</span>||chr(<span class="hljs-number">10</span>)||     <br><span class="hljs-string">&#x27;Lock_Granted: &#x27;</span>||<span class="hljs-keyword">case</span> <span class="hljs-keyword">when</span> granted <span class="hljs-keyword">is</span> <span class="hljs-keyword">null</span> <span class="hljs-keyword">then</span> <span class="hljs-string">&#x27;NULL&#x27;</span> <span class="hljs-keyword">else</span> granted::<span class="hljs-type">text</span> <span class="hljs-keyword">end</span>||<span class="hljs-string">&#x27; , Mode: &#x27;</span>||<span class="hljs-keyword">case</span> <span class="hljs-keyword">when</span> mode <span class="hljs-keyword">is</span> <span class="hljs-keyword">null</span> <span class="hljs-keyword">then</span> <span class="hljs-string">&#x27;NULL&#x27;</span> <span class="hljs-keyword">else</span> mode::<span class="hljs-type">text</span> <span class="hljs-keyword">end</span>||<span class="hljs-string">&#x27; , FastPath: &#x27;</span>||<span class="hljs-keyword">case</span> <span class="hljs-keyword">when</span> fastpath <span class="hljs-keyword">is</span> <span class="hljs-keyword">null</span> <span class="hljs-keyword">then</span> <span class="hljs-string">&#x27;NULL&#x27;</span> <span class="hljs-keyword">else</span> fastpath::<span class="hljs-type">text</span> <span class="hljs-keyword">end</span>||<span class="hljs-string">&#x27; , VirtualTransaction: &#x27;</span>||<span class="hljs-keyword">case</span> <span class="hljs-keyword">when</span> virtualtransaction <span class="hljs-keyword">is</span> <span class="hljs-keyword">null</span> <span class="hljs-keyword">then</span> <span class="hljs-string">&#x27;NULL&#x27;</span> <span class="hljs-keyword">else</span> virtualtransaction::<span class="hljs-type">text</span> <span class="hljs-keyword">end</span>||<span class="hljs-string">&#x27; , Session_State: &#x27;</span>||<span class="hljs-keyword">case</span> <span class="hljs-keyword">when</span> state <span class="hljs-keyword">is</span> <span class="hljs-keyword">null</span> <span class="hljs-keyword">then</span> <span class="hljs-string">&#x27;NULL&#x27;</span> <span class="hljs-keyword">else</span> state::<span class="hljs-type">text</span> <span class="hljs-keyword">end</span>||chr(<span class="hljs-number">10</span>)||     <br><span class="hljs-string">&#x27;Username: &#x27;</span>||<span class="hljs-keyword">case</span> <span class="hljs-keyword">when</span> usename <span class="hljs-keyword">is</span> <span class="hljs-keyword">null</span> <span class="hljs-keyword">then</span> <span class="hljs-string">&#x27;NULL&#x27;</span> <span class="hljs-keyword">else</span> usename::<span class="hljs-type">text</span> <span class="hljs-keyword">end</span>||<span class="hljs-string">&#x27; , Database: &#x27;</span>||<span class="hljs-keyword">case</span> <span class="hljs-keyword">when</span> datname <span class="hljs-keyword">is</span> <span class="hljs-keyword">null</span> <span class="hljs-keyword">then</span> <span class="hljs-string">&#x27;NULL&#x27;</span> <span class="hljs-keyword">else</span> datname::<span class="hljs-type">text</span> <span class="hljs-keyword">end</span>||<span class="hljs-string">&#x27; , Client_Addr: &#x27;</span>||<span class="hljs-keyword">case</span> <span class="hljs-keyword">when</span> client_addr <span class="hljs-keyword">is</span> <span class="hljs-keyword">null</span> <span class="hljs-keyword">then</span> <span class="hljs-string">&#x27;NULL&#x27;</span> <span class="hljs-keyword">else</span> client_addr::<span class="hljs-type">text</span> <span class="hljs-keyword">end</span>||<span class="hljs-string">&#x27; , Client_Port: &#x27;</span>||<span class="hljs-keyword">case</span> <span class="hljs-keyword">when</span> client_port <span class="hljs-keyword">is</span> <span class="hljs-keyword">null</span> <span class="hljs-keyword">then</span> <span class="hljs-string">&#x27;NULL&#x27;</span> <span class="hljs-keyword">else</span> client_port::<span class="hljs-type">text</span> <span class="hljs-keyword">end</span>||<span class="hljs-string">&#x27; , Application_Name: &#x27;</span>||<span class="hljs-keyword">case</span> <span class="hljs-keyword">when</span> application_name <span class="hljs-keyword">is</span> <span class="hljs-keyword">null</span> <span class="hljs-keyword">then</span> <span class="hljs-string">&#x27;NULL&#x27;</span> <span class="hljs-keyword">else</span> application_name::<span class="hljs-type">text</span> <span class="hljs-keyword">end</span>||chr(<span class="hljs-number">10</span>)||      <br><span class="hljs-string">&#x27;Xact_Start: &#x27;</span>||<span class="hljs-keyword">case</span> <span class="hljs-keyword">when</span> xact_start <span class="hljs-keyword">is</span> <span class="hljs-keyword">null</span> <span class="hljs-keyword">then</span> <span class="hljs-string">&#x27;NULL&#x27;</span> <span class="hljs-keyword">else</span> xact_start::<span class="hljs-type">text</span> <span class="hljs-keyword">end</span>||<span class="hljs-string">&#x27; , Query_Start: &#x27;</span>||<span class="hljs-keyword">case</span> <span class="hljs-keyword">when</span> query_start <span class="hljs-keyword">is</span> <span class="hljs-keyword">null</span> <span class="hljs-keyword">then</span> <span class="hljs-string">&#x27;NULL&#x27;</span> <span class="hljs-keyword">else</span> query_start::<span class="hljs-type">text</span> <span class="hljs-keyword">end</span>||<span class="hljs-string">&#x27; , Xact_Elapse: &#x27;</span>||<span class="hljs-keyword">case</span> <span class="hljs-keyword">when</span> (now()-xact_start) <span class="hljs-keyword">is</span> <span class="hljs-keyword">null</span> <span class="hljs-keyword">then</span> <span class="hljs-string">&#x27;NULL&#x27;</span> <span class="hljs-keyword">else</span> (now()-xact_start)::<span class="hljs-type">text</span> <span class="hljs-keyword">end</span>||<span class="hljs-string">&#x27; , Query_Elapse: &#x27;</span>||<span class="hljs-keyword">case</span> <span class="hljs-keyword">when</span> (now()-query_start) <span class="hljs-keyword">is</span> <span class="hljs-keyword">null</span> <span class="hljs-keyword">then</span> <span class="hljs-string">&#x27;NULL&#x27;</span> <span class="hljs-keyword">else</span> (now()-query_start)::<span class="hljs-type">text</span> <span class="hljs-keyword">end</span>||chr(<span class="hljs-number">10</span>)||      <br><span class="hljs-string">&#x27;SQL (Current SQL in Transaction): &#x27;</span>||chr(<span class="hljs-number">10</span>)||    <br><span class="hljs-keyword">case</span> <span class="hljs-keyword">when</span> query <span class="hljs-keyword">is</span> <span class="hljs-keyword">null</span> <span class="hljs-keyword">then</span> <span class="hljs-string">&#x27;NULL&#x27;</span> <span class="hljs-keyword">else</span> query::<span class="hljs-type">text</span> <span class="hljs-keyword">end</span>,      <br>chr(<span class="hljs-number">10</span>)||<span class="hljs-string">&#x27;--------&#x27;</span>||chr(<span class="hljs-number">10</span>)      <br><span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span>      <br>  (  <span class="hljs-keyword">case</span> mode      <br>    <span class="hljs-keyword">when</span> <span class="hljs-string">&#x27;INVALID&#x27;</span> <span class="hljs-keyword">then</span> <span class="hljs-number">0</span>     <br>    <span class="hljs-keyword">when</span> <span class="hljs-string">&#x27;AccessShareLock&#x27;</span> <span class="hljs-keyword">then</span> <span class="hljs-number">1</span>     <br>    <span class="hljs-keyword">when</span> <span class="hljs-string">&#x27;RowShareLock&#x27;</span> <span class="hljs-keyword">then</span> <span class="hljs-number">2</span>     <br>    <span class="hljs-keyword">when</span> <span class="hljs-string">&#x27;RowExclusiveLock&#x27;</span> <span class="hljs-keyword">then</span> <span class="hljs-number">3</span>     <br>    <span class="hljs-keyword">when</span> <span class="hljs-string">&#x27;ShareUpdateExclusiveLock&#x27;</span> <span class="hljs-keyword">then</span> <span class="hljs-number">4</span>     <br>    <span class="hljs-keyword">when</span> <span class="hljs-string">&#x27;ShareLock&#x27;</span> <span class="hljs-keyword">then</span> <span class="hljs-number">5</span>     <br>    <span class="hljs-keyword">when</span> <span class="hljs-string">&#x27;ShareRowExclusiveLock&#x27;</span> <span class="hljs-keyword">then</span> <span class="hljs-number">6</span>     <br>    <span class="hljs-keyword">when</span> <span class="hljs-string">&#x27;ExclusiveLock&#x27;</span> <span class="hljs-keyword">then</span> <span class="hljs-number">7</span>     <br>    <span class="hljs-keyword">when</span> <span class="hljs-string">&#x27;AccessExclusiveLock&#x27;</span> <span class="hljs-keyword">then</span> <span class="hljs-number">8</span>     <br>    <span class="hljs-keyword">else</span> <span class="hljs-number">0</span>     <br>  <span class="hljs-keyword">end</span>  ) <span class="hljs-keyword">desc</span>,     <br>  (<span class="hljs-keyword">case</span> <span class="hljs-keyword">when</span> granted <span class="hljs-keyword">then</span> <span class="hljs-number">0</span> <span class="hljs-keyword">else</span> <span class="hljs-number">1</span> <span class="hljs-keyword">end</span>)    <br>) <span class="hljs-keyword">as</span> lock_conflict    <br><span class="hljs-keyword">from</span> t_unionall     <br><span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span>     <br>locktype,datname,relation,page,tuple,virtualxid,transactionid::<span class="hljs-type">text</span>,classid,objid,objsubid ;<br></code></pre></td></tr></table></figure>
<h1 id="查看索引支持类型"><a href="#查看索引支持类型" class="headerlink" title="查看索引支持类型"></a>查看索引支持类型</h1><figure class="highlight pgsql"><table><tr><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">SELECT</span><br>    am.amname <span class="hljs-keyword">AS</span> index_method,<br>    opc.opcname <span class="hljs-keyword">AS</span> opclass_name,<br>    opc.opcintype::<span class="hljs-type">regtype</span> <span class="hljs-keyword">AS</span> indexed_type,<br>    opc.opcdefault <span class="hljs-keyword">AS</span> is_default<br><span class="hljs-keyword">FROM</span><br>    pg_am am,<br>    pg_opclass opc<br><span class="hljs-keyword">WHERE</span><br>    opc.opcmethod = am.oid<br><span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span><br>    index_method,<br>    opclass_name;<br><span class="hljs-keyword">SELECT</span><br>    amname,<br>    opcname,<br>    opcintype::<span class="hljs-type">regtype</span>,<br>    opckeytype::<span class="hljs-type">regtype</span>,<br>    opcdefault<br><span class="hljs-keyword">FROM</span><br>    pg_am am,<br>    pg_opclass opc<br><span class="hljs-keyword">WHERE</span><br>    am.oid = opc.opcmethod<br>    <span class="hljs-keyword">AND</span> amname = <span class="hljs-string">&#x27;gin&#x27;</span>;<br><br><span class="hljs-keyword">SELECT</span><br>    <span class="hljs-type">oid</span>,<br>    oprnegate,<br>    oprname,<br>    oprcode,<br>    oprresult::<span class="hljs-type">regtype</span>,<br>    oprleft::<span class="hljs-type">regtype</span>,<br>    oprright::<span class="hljs-type">regtype</span>,<br>    oprcanmerge<br><span class="hljs-keyword">FROM</span><br>    pg_operator;<br><br></code></pre></td></tr></table></figure>
<h1 id="判断ip是否在某一网段内"><a href="#判断ip是否在某一网段内" class="headerlink" title="判断ip是否在某一网段内"></a>判断ip是否在某一网段内</h1><figure class="highlight pgsql"><table><tr><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">OR REPLACE</span> <span class="hljs-keyword">FUNCTION</span> <span class="hljs-built_in">public</span>.is_same_network (ip1 ip4, ip2 ip4, mask <span class="hljs-type">integer</span>)<br>    <span class="hljs-keyword">RETURNS</span> <span class="hljs-type">boolean</span><br><span class="hljs-keyword">AS</span><br>$$<br><span class="pgsql"><span class="hljs-keyword">DECLARE</span></span><br><span class="pgsql">    is_same_network <span class="hljs-type">boolean</span>;</span><br><span class="pgsql"><span class="hljs-keyword">BEGIN</span></span><br>    IF mask &gt; 32 OR mask &lt; 0 THEN<br><span class="pgsql">        <span class="hljs-keyword">raise</span></span><br><span class="pgsql">        <span class="hljs-keyword">exception</span> <span class="hljs-string">&#x27;The mask must be between 0 and 32&#x27;</span>;</span><br><span class="pgsql">    <span class="hljs-keyword">END</span> <span class="hljs-keyword">IF</span>;</span><br> <br><span class="pgsql">    <span class="hljs-keyword">EXECUTE</span> format(<span class="hljs-string">&#x27;select (~($1 # $2))::bigint::bit(32)::bit(%I)::text ~ &#x27;&#x27;^1+$&#x27;&#x27;&#x27;</span>, mask) <span class="hljs-keyword">using</span> ip1, ip2 <span class="hljs-keyword">into</span> is_same_network;</span><br><span class="pgsql">    <span class="hljs-keyword">RETURN</span> is_same_network;</span><br><span class="pgsql"><span class="hljs-keyword">exception</span></span><br><span class="pgsql">    <span class="hljs-keyword">WHEN</span> OTHERS <span class="hljs-keyword">THEN</span></span><br><span class="pgsql">        <span class="hljs-keyword">raise</span> <span class="hljs-keyword">NOTICE</span> <span class="hljs-string">&#x27;%&#x27;</span>, <span class="hljs-built_in">SQLERRM</span>;</span><br><span class="pgsql">    <span class="hljs-keyword">RETURN</span> <span class="hljs-keyword">FALSE</span>;</span><br><span class="pgsql"><span class="hljs-keyword">END</span>;</span><br><span class="ruby">$$</span> <span class="hljs-keyword">language</span> plpgsql;<br></code></pre></td></tr></table></figure>
<h1 id="指定字符替换"><a href="#指定字符替换" class="headerlink" title="指定字符替换"></a>指定字符替换</h1><figure class="highlight pgsql"><table><tr><td class="code"><pre><code class="hljs pgsql">postgres=# <span class="hljs-keyword">SELECT</span> regexp_replace(<span class="hljs-string">&#x27;foobarbaz&#x27;</span>, <span class="hljs-string">&#x27;b(..)&#x27;</span>, <span class="hljs-string">&#x27;X\1Y&#x27;</span>, <span class="hljs-string">&#x27;g&#x27;</span>);<br> regexp_replace <br><span class="hljs-comment">----------------</span><br> fooXarYXazY<br>(<span class="hljs-number">1</span> <span class="hljs-keyword">row</span>)<br><br></code></pre></td></tr></table></figure>
<h1 id="SQL实现圣诞树"><a href="#SQL实现圣诞树" class="headerlink" title="SQL实现圣诞树"></a>SQL实现圣诞树</h1><figure class="highlight pgsql"><table><tr><td class="code"><pre><code class="hljs pgsql">mydb=# <span class="hljs-keyword">WITH</span> leaf <span class="hljs-keyword">AS</span><br> (<span class="hljs-keyword">SELECT</span> lpad(rpad(<span class="hljs-string">&#x27;*&#x27;</span>, (id - <span class="hljs-number">1</span>) * <span class="hljs-number">2</span> + <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;*&#x27;</span>), id + <span class="hljs-number">20</span>) leaf,<br>         id<br>    <span class="hljs-keyword">FROM</span> generate_series(<span class="hljs-number">1</span>, <span class="hljs-number">3</span>) <span class="hljs-keyword">AS</span> t(id)),<br>lv <span class="hljs-keyword">AS</span><br> (<span class="hljs-keyword">SELECT</span> id lv <span class="hljs-keyword">FROM</span> generate_series(<span class="hljs-number">1</span>, <span class="hljs-number">5</span>) <span class="hljs-keyword">AS</span> t(id)),<br>leafs <span class="hljs-keyword">AS</span><br> (<span class="hljs-keyword">SELECT</span> lpad(rpad(<span class="hljs-string">&#x27;*&#x27;</span>, ((row_number() <span class="hljs-keyword">over</span>()) ::<span class="hljs-type">INT</span> - <span class="hljs-number">1</span>) * <span class="hljs-number">2</span> + <span class="hljs-number">1</span> + (lv - <span class="hljs-number">1</span>) * <span class="hljs-number">2</span>, <span class="hljs-string">&#x27;*&#x27;</span>), (row_number()<br>                <span class="hljs-keyword">over</span>())<br>               ::<span class="hljs-type">INT</span> + <span class="hljs-number">20</span> + lv) leaf<br>    <span class="hljs-keyword">FROM</span> leaf,<br>         lv),<br>root <span class="hljs-keyword">AS</span><br> (<span class="hljs-keyword">SELECT</span> lpad(rpad(<span class="hljs-string">&#x27;*&#x27;</span>, <span class="hljs-number">5</span>, <span class="hljs-string">&#x27;*&#x27;</span>), <span class="hljs-number">24</span>) <span class="hljs-keyword">FROM</span> generate_series(<span class="hljs-number">1</span>, <span class="hljs-number">4</span>) <span class="hljs-keyword">AS</span> t(id))<br><span class="hljs-keyword">SELECT</span> leaf<br>  <span class="hljs-keyword">FROM</span> leafs<br><span class="hljs-keyword">UNION</span> <span class="hljs-keyword">ALL</span><br><span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> root;<br>                   leaf                  <br><span class="hljs-comment">------------------------------------------</span><br>                      *<br>                    *****<br>                  *********<br>                *************<br>              *****************<br>                 ***********<br>               ***************<br>             *******************<br>           ***********************<br>         ***************************<br>            *********************<br>          *************************<br>        *****************************<br>      *********************************<br>    *************************************<br>                    *****<br>                    *****<br>                    *****<br>                    *****<br>(<span class="hljs-number">19</span> <span class="hljs-keyword">rows</span>)<br> <br>mydb=#<br><br></code></pre></td></tr></table></figure>
<h1 id="生成随机中文"><a href="#生成随机中文" class="headerlink" title="生成随机中文"></a>生成随机中文</h1><figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">or</span> <span class="hljs-keyword">replace</span> <span class="hljs-keyword">function</span> gen_hanzi(<span class="hljs-built_in">int</span>) <span class="hljs-keyword">returns</span> <span class="hljs-built_in">text</span> <span class="hljs-keyword">as</span> $$  <br><span class="hljs-keyword">declare</span>  <br>  res <span class="hljs-built_in">text</span>;  <br><span class="hljs-keyword">begin</span>  <br>  <span class="hljs-keyword">if</span> $<span class="hljs-number">1</span> &gt;=<span class="hljs-number">1</span> <span class="hljs-keyword">then</span>  <br>    <span class="hljs-keyword">select</span> string_agg(<span class="hljs-keyword">chr</span>(<span class="hljs-number">19968</span>+(random()*<span class="hljs-number">20901</span>)::<span class="hljs-built_in">int</span>), <span class="hljs-string">&#x27;&#x27;</span>) <span class="hljs-keyword">into</span> res <span class="hljs-keyword">from</span> generate_series(<span class="hljs-number">1</span>,$<span class="hljs-number">1</span>);  <br>    return res;  <br>  <span class="hljs-keyword">end</span> <span class="hljs-keyword">if</span>;  <br>  return null;  <br><span class="hljs-keyword">end</span>;  <br>$$ language plpgsql strict;<br></code></pre></td></tr></table></figure>
<h1 id="生成随机时间"><a href="#生成随机时间" class="headerlink" title="生成随机时间"></a>生成随机时间</h1><figure class="highlight pgsql"><table><tr><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">or replace</span> <span class="hljs-keyword">function</span> get_rand_ts() <span class="hljs-keyword">returns</span> <span class="hljs-type">timestamp</span> <span class="hljs-keyword">as</span> $$  <br><span class="pgsql">  <span class="hljs-keyword">select</span> now()::<span class="hljs-type">timestamp</span>  +  ((<span class="hljs-number">1000</span>*random())::<span class="hljs-type">int</span>::<span class="hljs-type">text</span>||<span class="hljs-string">&#x27; days&#x27;</span>)::<span class="hljs-type">interval</span>;            </span><br><span class="ruby">$$</span> <span class="hljs-keyword">language</span> <span class="hljs-keyword">sql</span> <span class="hljs-keyword">strict</span>;  <br></code></pre></td></tr></table></figure>
<h1 id="找出index-维护SQL"><a href="#找出index-维护SQL" class="headerlink" title="找出index 维护SQL"></a>找出index 维护SQL</h1><figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span><br>        <span class="hljs-keyword">CASE</span><br>                <span class="hljs-keyword">WHEN</span> flag = <span class="hljs-number">1</span> <span class="hljs-keyword">THEN</span><br>                        <span class="hljs-keyword">CASE</span><br>                        <span class="hljs-keyword">WHEN</span> indexdef !~ <span class="hljs-string">&#x27; WHERE &#x27;</span> <span class="hljs-keyword">THEN</span><br>                                regexp_replace(indexdef, E<span class="hljs-string">&#x27;(INDEX )(.+)( ON )(.+\\)\$)&#x27;</span>  ,E<span class="hljs-string">&#x27; \\1 CONCURRENTLY \\3 \\4 TABLESPACE  pg_default &#x27;</span>,<span class="hljs-string">&#x27;g&#x27;</span>) ||<span class="hljs-string">&#x27;; &#x27;</span><br>                        <span class="hljs-keyword">ELSE</span><br>                                regexp_replace(indexdef, E<span class="hljs-string">&#x27;(INDEX )(.+)( ON )(.+)( WHERE )&#x27;</span>  ,E<span class="hljs-string">&#x27; \\1 CONCURRENTLY \\3 \\4 TABLESPACE  pg_default \\5 &#x27;</span>,<span class="hljs-string">&#x27;g&#x27;</span>) ||<span class="hljs-string">&#x27;; &#x27;</span><br>                        <span class="hljs-keyword">END</span><br>                <span class="hljs-keyword">WHEN</span> flag = <span class="hljs-number">2</span> <span class="hljs-keyword">THEN</span><br>                                <span class="hljs-string">&#x27;ANALYZE VERBOSE &#x27;</span>||schemaname||<span class="hljs-string">&#x27;.&#x27;</span>||tablename||<span class="hljs-string">&#x27; ; select pg_sleep(600) ; DROP INDEX CONCURRENTLY IF EXISTS &#x27;</span>||schemaname||<span class="hljs-string">&#x27;.&#x27;</span>||indexname||<span class="hljs-string">&#x27;; &#x27;</span><br>        <span class="hljs-keyword">END</span><br><span class="hljs-keyword">from</span><br>        (<br>        <span class="hljs-keyword">select</span><br>                generate_series(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>) <span class="hljs-keyword">as</span> flag,<br>                indexdef,<br>                indexname,<br>                tablename,<br>                pi.schemaname<br>        <span class="hljs-keyword">from</span><br>                pg_indexes <span class="hljs-keyword">pi</span><br>        <span class="hljs-keyword">join</span><br>                pg_namespace n<br>          <span class="hljs-keyword">on</span><br>                pi.schemaname = n.nspname<br>        <span class="hljs-keyword">join</span><br>                pg_class pcl<br>          <span class="hljs-keyword">on</span><br>                pcl.relnamespace = n.oid<br>                <span class="hljs-keyword">and</span> pcl.relname = pi.tablename<br>        <span class="hljs-keyword">left</span> <span class="hljs-keyword">join</span><br>                pg_constraint pco<br>          <span class="hljs-keyword">on</span><br>                pco.conname = pi.indexname<br>                <span class="hljs-keyword">and</span> pco.conrelid = pcl.oid<br>        <span class="hljs-keyword">where</span><br>                (pi.schemaname, pi.tablename) = (<span class="hljs-string">&#x27;mirror&#x27;</span>,<span class="hljs-string">&#x27;b2c_order&#x27;</span>)<br>                <span class="hljs-keyword">and</span> pco.contype <span class="hljs-keyword">is</span> <span class="hljs-keyword">distinct</span> <span class="hljs-keyword">from</span>  <span class="hljs-string">&#x27;p&#x27;</span><br>                <span class="hljs-keyword">and</span> pco.contype <span class="hljs-keyword">is</span> <span class="hljs-keyword">distinct</span> <span class="hljs-keyword">from</span>  <span class="hljs-string">&#x27;u&#x27;</span><br>        <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span><br>                pi.schemaname, tablename, indexname, pg_table_size(schemaname||<span class="hljs-string">&#x27;.&#x27;</span>||indexname::<span class="hljs-built_in">text</span>) <span class="hljs-keyword">desc</span>, flag <span class="hljs-keyword">asc</span><br>        ) <span class="hljs-keyword">as</span> foo<br><span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span><br>       schemaname, tablename, indexname, pg_table_size(schemaname||<span class="hljs-string">&#x27;.&#x27;</span>||indexname::<span class="hljs-built_in">text</span>) <span class="hljs-keyword">desc</span>, flag <span class="hljs-keyword">asc</span><br>;<br></code></pre></td></tr></table></figure>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://github.com/digoal/blog/blob/master/202005/20200509_02.md">德哥</a></p>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>PostgreSQL</tag>
        <tag>DBA</tag>
        <tag>SQL</tag>
      </tags>
  </entry>
  <entry>
    <title>微信聊天自动回复机器人代码</title>
    <url>/python/%E5%BE%AE%E4%BF%A1%E8%81%8A%E5%A4%A9%E8%87%AA%E5%8A%A8%E5%9B%9E%E5%A4%8D%E6%9C%BA%E5%99%A8%E4%BA%BA/</url>
    <content><![CDATA[<p>微信聊天自动回复小程序, 输入指定内容控制开关，以及添加附加内容等小功能,</p>
<a id="more"></a>
<h1 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h1><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/python</span><br><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><br><span class="hljs-keyword">import</span> itchat<br><span class="hljs-keyword">import</span> re,requests<br><span class="hljs-keyword">from</span> urllib.parse <span class="hljs-keyword">import</span> quote,unquote<br><br>AUTO_REPLAY=<span class="hljs-number">0</span><br>BASEMSG = <span class="hljs-string">&#x27;&#x27;</span><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">robot</span>(<span class="hljs-params">data</span>):</span><br>    <span class="hljs-keyword">global</span> AUTO_REPLAY<br>    ini=<span class="hljs-string">&quot;&#123;&#x27;sessionId&#x27;:&#x27;09e2aca4d0a541f88eecc77c03a8b393&#x27;,&#x27;robotId&#x27;:&#x27;webbot&#x27;,&#x27;userId&#x27;:&#x27;462d49d3742745bb98f7538c42f9f874&#x27;,&#x27;body&#x27;:&#123;&#x27;content&#x27;:&#x27;&quot;</span> + data + <span class="hljs-string">&quot;&#x27;&#125;,&#x27;type&#x27;:&#x27;txt&#x27;&#125;&amp;ts=1529917589648&quot;</span><br>    url = <span class="hljs-string">&quot;http://i.xiaoi.com/robot/webrobot?&amp;callback=__webrobot_processMsg&amp;data=&quot;</span> + quote(ini)<br>    cookie = &#123;<span class="hljs-string">&quot;cnonce&quot;</span>: <span class="hljs-string">&quot;808116&quot;</span>, <span class="hljs-string">&quot;sig&quot;</span>: <span class="hljs-string">&quot;0c3021aa5552fe597bb55448b40ad2a90d2dead5&quot;</span>,<span class="hljs-string">&quot;XISESSIONID&quot;</span>: <span class="hljs-string">&quot;hlbnd1oiwar01dfje825gavcn&quot;</span>, <span class="hljs-string">&quot;nonce&quot;</span>: <span class="hljs-string">&quot;273765&quot;</span>, <span class="hljs-string">&quot;hibext_instdsigdip2&quot;</span>: <span class="hljs-string">&quot;1&quot;</span>&#125;<br>    r = requests.get(url, cookies=cookie)<br>    <span class="hljs-comment">#print(type(r))</span><br>    <span class="hljs-comment">#json_r = r.json()</span><br>    <span class="hljs-comment">#print(json_r)</span><br>    pattern = re.compile(<span class="hljs-string">r&#x27;\&quot;fontColor\&quot;:0,\&quot;content\&quot;:\&quot;(.*?)\&quot;&#x27;</span>)<br>    result = pattern.findall(r.text)<br>        <span class="hljs-comment">#return result[1].replace(&quot;\\r\\n&quot;,&#x27;&#x27;)</span><br>        <span class="hljs-comment">#return result[1].replace(&quot;\\n&quot;,&#x27;&#x27;)</span><br>    <span class="hljs-keyword">return</span> result[<span class="hljs-number">1</span>].replace(<span class="hljs-string">&quot;\\r\\n&quot;</span>,<span class="hljs-string">&#x27;&#x27;</span>)<br><br><span class="hljs-keyword">import</span> re,requests<br><span class="hljs-keyword">try</span>:<br>    <span class="hljs-keyword">from</span> urllib <span class="hljs-keyword">import</span> quote,unquote<br><span class="hljs-keyword">except</span> ImportError:<br>    <span class="hljs-keyword">from</span> urllib.parse <span class="hljs-keyword">import</span> quote,unquote<br><br><span class="hljs-keyword">import</span> json<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">qingke_robot</span>(<span class="hljs-params">msg</span>):</span><br>    <span class="hljs-comment">#ssl._create_default_https_context = ssl._create_unverified_context</span><br>    url = <span class="hljs-string">r&quot;http://api.qingyunke.com/api.php?key=free&amp;appid=0&amp;msg=%s&quot;</span> % (quote(msg))<br><br>    <span class="hljs-keyword">try</span>:<br>            <span class="hljs-keyword">from</span> urllib.request <span class="hljs-keyword">import</span> urlopen<br>    <span class="hljs-keyword">except</span> ImportError:<br>            <span class="hljs-keyword">from</span> urllib2 <span class="hljs-keyword">import</span> urlopen<br><br>    result = urlopen(url)<br>    response = json.loads(result.read().decode(<span class="hljs-string">&quot;utf-8&quot;</span>))<br>    code = response[<span class="hljs-string">&#x27;result&#x27;</span>]<br>    <span class="hljs-keyword">if</span> code != <span class="hljs-number">0</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;error&quot;</span><br>    content = response[<span class="hljs-string">&#x27;content&#x27;</span>].replace(<span class="hljs-string">&#x27;&#123;br&#125;&#x27;</span>,<span class="hljs-string">&#x27;\n&#x27;</span>)<br>    <span class="hljs-keyword">return</span> content<br><br><br><span class="hljs-comment"># 自动回复</span><br><span class="hljs-comment"># 封装好的装饰器，当接收到的消息是Text，即文字消息</span><br><span class="hljs-meta">@itchat.msg_register(&#x27;Text&#x27;)</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">text_reply</span>(<span class="hljs-params">msg</span>):</span><br>    <span class="hljs-keyword">global</span> BASEMSG<br>    <span class="hljs-keyword">global</span> AUTO_REPLAY<br>    <span class="hljs-comment"># 当消息不是由自己发出的时候</span><br>    <span class="hljs-comment">#return  u&quot;[主人暂时不在，我是周小秘]&#123;&#125;&quot;.format(tulin_robot(msg[&#x27;Text&#x27;]))</span><br>    <span class="hljs-comment">#return  u&quot;[主人暂时不在，我是周小秘]&#123;&#125;&quot;.format(robot(msg[&#x27;Text&#x27;]))</span><br><br>    <span class="hljs-keyword">if</span> msg[<span class="hljs-string">&#x27;Text&#x27;</span>].lower() == <span class="hljs-string">&quot;open&quot;</span>:<br>        AUTO_REPLAY=<span class="hljs-number">1</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;自动聊天功能已打开.&quot;</span><br>    <span class="hljs-keyword">elif</span> msg[<span class="hljs-string">&#x27;Text&#x27;</span>].lower() == <span class="hljs-string">&quot;close&quot;</span>:<br>        AUTO_REPLAY=<span class="hljs-number">0</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;自动聊天功能已关闭.&quot;</span><br>    <span class="hljs-keyword">elif</span> msg[<span class="hljs-string">&#x27;Text&#x27;</span>].lower() == <span class="hljs-string">&quot;add&quot;</span>:<br>        BASEMSG = <span class="hljs-string">&quot;[主人暂时不在，我是周小秘 ]:&quot;</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;添加附加内容成功&quot;</span><br>    <span class="hljs-keyword">elif</span> msg[<span class="hljs-string">&#x27;Text&#x27;</span>].lower() == <span class="hljs-string">&quot;del&quot;</span>:<br>        BASEMSG = <span class="hljs-string">&quot;&quot;</span><br>        AUTO_REPLAY=<span class="hljs-number">0</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;取消附加内容成功&quot;</span><br><br>    <span class="hljs-comment"># 回复给好友</span><br>    <span class="hljs-keyword">if</span> AUTO_REPLAY &gt; <span class="hljs-number">0</span> :<br>        <span class="hljs-keyword">if</span> BASEMSG != <span class="hljs-string">&quot;&quot;</span>:<br>            <span class="hljs-keyword">return</span> BASEMSG + qingke_robot(msg[<span class="hljs-string">&#x27;Text&#x27;</span>])<br>        <span class="hljs-keyword">return</span> qingke_robot(msg[<span class="hljs-string">&#x27;Text&#x27;</span>])<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    itchat.auto_login(enableCmdQR=<span class="hljs-number">2</span>)<br><br>    <span class="hljs-comment"># 获取自己的UserName</span><br>    myUserName = itchat.get_friends(update=<span class="hljs-literal">True</span>)[<span class="hljs-number">0</span>][<span class="hljs-string">&quot;UserName&quot;</span>]<br>    itchat.run(debug=<span class="hljs-literal">True</span>)<br>    <span class="hljs-comment">#print(qingke_robot(&quot;你好&quot;))</span><br><br></code></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>robot</tag>
        <tag>微信自动回复</tag>
      </tags>
  </entry>
  <entry>
    <title>PostgreSQL用户权限</title>
    <url>/PostgreSQL/PostgreSQL%E7%94%A8%E6%88%B7%E6%9D%83%E9%99%90/</url>
    <content><![CDATA[<p>PostgreSQL中role是权限的集合，没有区分用户和角色的概念，”CREATE USER” 为 “CREATE ROLE” 的别名，这两个命令几乎是完全相同的,唯一的区别是”CREATE USER” 命令创建的用户默认带有LOGIN属性，而”CREATE ROLE” 命令创建的用户默认不带LOGIN属性(CREATE USER is equivalent to CREATE ROLE except that CREATE USER assumes LOGIN by default, while CREATE ROLE does not)</p>
<p>为了方便用role的方式管理用户， 而不是每新建一个用户就授予权限一次.</p>
<a id="more"></a>
<h1 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h1><p>收回PUBLIC用户组对模式public的所有权限， 并创建测试用表</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><code class="hljs pgsql">jintao@jintao-ThinkPad-L490:~$ psql <br>psql (<span class="hljs-number">14</span>devel)<br><span class="hljs-keyword">Type</span> &quot;help&quot; <span class="hljs-keyword">for</span> help.<br><br>mydb=# <span class="hljs-keyword">revoke</span> <span class="hljs-keyword">ALL</span> <span class="hljs-keyword">on</span> <span class="hljs-keyword">SCHEMA</span> <span class="hljs-built_in">public</span> <span class="hljs-keyword">from</span> <span class="hljs-built_in">PUBLIC</span>;<br><span class="hljs-keyword">REVOKE</span><br>mydb=# <span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> test1(id <span class="hljs-type">int</span>);<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span><br>mydb=# <span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> test1 <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>;<br><span class="hljs-keyword">INSERT</span> <span class="hljs-number">0</span> <span class="hljs-number">1</span><br>mydb=# <span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> test1;<br> id <br><span class="hljs-comment">----</span><br>  <span class="hljs-number">1</span><br>(<span class="hljs-number">1</span> <span class="hljs-keyword">row</span>)<br><br>mydb=# <br><br></code></pre></td></tr></table></figure>
<h1 id="创建只读角色"><a href="#创建只读角色" class="headerlink" title="创建只读角色"></a>创建只读角色</h1><p>只对table, sequence, function 做了处理， 如type, procedure等类似<br><figure class="highlight routeros"><table><tr><td class="code"><pre><code class="hljs routeros"><span class="hljs-attribute">mydb</span>=# create role readonly;                                                 <br>CREATE ROLE<br><span class="hljs-attribute">mydb</span>=# grant SELECT on ALL tables <span class="hljs-keyword">in</span> schema public <span class="hljs-keyword">to</span> readonly ;    -- 赋予readonly对public模式下当前存在的表可读<br>GRANT<br><span class="hljs-attribute">mydb</span>=# grant EXECUTE on ALL functions <span class="hljs-keyword">in</span> schema public <span class="hljs-keyword">to</span> readonly ;    -- 赋予readonly对public模式下当前函数可执行<br>GRANT<br><span class="hljs-attribute">mydb</span>=# grant SELECT on ALL sequences <span class="hljs-keyword">in</span> schema public <span class="hljs-keyword">to</span> readonly ;      -- 赋予readonly对public模式下当前序列的可读<br>GRANT<br><span class="hljs-attribute">mydb</span>=# alter<span class="hljs-built_in"> default </span>privileges <span class="hljs-keyword">for</span> role postgres <span class="hljs-keyword">in</span> schema public grant select on tables <span class="hljs-keyword">to</span> readonly;   -- 赋予readonly对public模式下之后对postgres用户新建的表可读<br>ALTER<span class="hljs-built_in"> DEFAULT </span>PRIVILEGES<br><span class="hljs-attribute">mydb</span>=# alter<span class="hljs-built_in"> default </span>privileges <span class="hljs-keyword">for</span> role postgres  <span class="hljs-keyword">in</span> schema public grant execute on functions <span class="hljs-keyword">to</span> readonly;   -- 赋予readonly对public模式下之后对postgres用户新建的函数可执行<br>ALTER<span class="hljs-built_in"> DEFAULT </span>PRIVILEGES<br><span class="hljs-attribute">mydb</span>=# alter<span class="hljs-built_in"> default </span>privileges <span class="hljs-keyword">for</span> role postgres  <span class="hljs-keyword">in</span> schema public grant select on sequences <span class="hljs-keyword">to</span> readonly;    - 赋予readonly对public模式下之后对postgres用户新建的序列可读<br>ALTER<span class="hljs-built_in"> DEFAULT </span>PRIVILEGES<br></code></pre></td></tr></table></figure></p>
<h1 id="创建读写角色"><a href="#创建读写角色" class="headerlink" title="创建读写角色"></a>创建读写角色</h1><p>只对table, sequence, function 做了处理， 如type, procedure等类似<br><figure class="highlight routeros"><table><tr><td class="code"><pre><code class="hljs routeros"><span class="hljs-attribute">mydb</span>=# grant all on SCHEMA public <span class="hljs-keyword">to</span> readwrite ;            -- 赋予readwrite对public模式下当前存在的表可读写<br>GRANT<br><span class="hljs-attribute">mydb</span>=# grant ALL  on ALL tables <span class="hljs-keyword">in</span> schema public <span class="hljs-keyword">to</span> readwrite ;<br>GRANT<br><span class="hljs-attribute">mydb</span>=# grant ALL on ALL sequences <span class="hljs-keyword">in</span> schema public <span class="hljs-keyword">to</span> readwrite ;<br>GRANT<br><span class="hljs-attribute">mydb</span>=# grant ALL on ALL functions <span class="hljs-keyword">in</span> schema public <span class="hljs-keyword">to</span> readwrite ;<br>GRANT<br><span class="hljs-attribute">mydb</span>=# alter<span class="hljs-built_in"> default </span>privileges <span class="hljs-keyword">for</span> role postgres  <span class="hljs-keyword">in</span> schema public grant all on tables <span class="hljs-keyword">to</span> readwrite;<br>ALTER<span class="hljs-built_in"> DEFAULT </span>PRIVILEGES<br><span class="hljs-attribute">mydb</span>=# alter<span class="hljs-built_in"> default </span>privileges <span class="hljs-keyword">for</span> role postgres <span class="hljs-keyword">in</span> schema public grant all on sequences <span class="hljs-keyword">to</span> readwrite;<br>ALTER<span class="hljs-built_in"> DEFAULT </span>PRIVILEGES<br><span class="hljs-attribute">mydb</span>=# alter<span class="hljs-built_in"> default </span>privileges <span class="hljs-keyword">for</span> role postgres <span class="hljs-keyword">in</span> schema public grant all on functions <span class="hljs-keyword">to</span> readwrite;<br>ALTER<span class="hljs-built_in"> DEFAULT </span>PRIVILEGES<br><br></code></pre></td></tr></table></figure></p>
<h1 id="readonly-权限测试"><a href="#readonly-权限测试" class="headerlink" title="readonly 权限测试"></a>readonly 权限测试</h1><figure class="highlight pgsql"><table><tr><td class="code"><pre><code class="hljs pgsql">mydb=# <span class="hljs-keyword">create</span> <span class="hljs-keyword">user</span> user1;<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">ROLE</span><br>mydb=# <span class="hljs-keyword">set</span> <span class="hljs-keyword">role</span> user1;<br><span class="hljs-keyword">SET</span><br>mydb=&gt; <span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> <span class="hljs-built_in">public</span>.test1;<br>ERROR:  permission denied <span class="hljs-keyword">for</span> <span class="hljs-keyword">schema</span> <span class="hljs-built_in">public</span><br><span class="hljs-type">LINE</span> <span class="hljs-number">1</span>: <span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> <span class="hljs-built_in">public</span>.test1;<br>                      ^<br>mydb=&gt; <span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> <span class="hljs-built_in">public</span>.test1 <span class="hljs-keyword">select</span> <span class="hljs-number">2</span>;<br>ERROR:  permission denied <span class="hljs-keyword">for</span> <span class="hljs-keyword">schema</span> <span class="hljs-built_in">public</span><br><span class="hljs-type">LINE</span> <span class="hljs-number">1</span>: <span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> <span class="hljs-built_in">public</span>.test1 <span class="hljs-keyword">select</span> <span class="hljs-number">2</span>;<br>                    ^<br>mydb=&gt; <span class="hljs-keyword">set</span> <span class="hljs-keyword">role</span> postgres;<br><span class="hljs-keyword">SET</span><br>mydb=# <span class="hljs-keyword">grant</span> readonly <span class="hljs-keyword">to</span> user1 ;<br><span class="hljs-keyword">GRANT</span> <span class="hljs-keyword">ROLE</span><br>mydb=# <span class="hljs-keyword">set</span> <span class="hljs-keyword">role</span> user1;<br><span class="hljs-keyword">SET</span><br>mydb=&gt; <span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> <span class="hljs-built_in">public</span>.test1;<br> id <br><span class="hljs-comment">----</span><br>  <span class="hljs-number">1</span><br>(<span class="hljs-number">1</span> <span class="hljs-keyword">row</span>)<br><br>mydb=&gt; <span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> <span class="hljs-built_in">public</span>.test1 <span class="hljs-keyword">select</span> <span class="hljs-number">2</span>;<br>ERROR:  permission denied <span class="hljs-keyword">for</span> <span class="hljs-keyword">table</span> test1<br>mydb=&gt; <br>mydb=# <span class="hljs-keyword">select</span> <span class="hljs-number">2</span> <span class="hljs-keyword">into</span> test2;<br><span class="hljs-keyword">SELECT</span> <span class="hljs-number">1</span><br>mydb=# <span class="hljs-keyword">set</span> <span class="hljs-keyword">role</span> user1;<br><span class="hljs-keyword">SET</span><br>mydb=&gt; <span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> test2;<br> ?<span class="hljs-keyword">column</span>? <br><span class="hljs-comment">----------</span><br>        <span class="hljs-number">2</span><br>(<span class="hljs-number">1</span> <span class="hljs-keyword">row</span>)<br><br>mydb=&gt; <span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> test2 <span class="hljs-keyword">select</span> <span class="hljs-number">3</span>;<br>ERROR:  permission denied <span class="hljs-keyword">for</span> <span class="hljs-keyword">table</span> test2<br>mydb=&gt; <br><br></code></pre></td></tr></table></figure>
<h1 id="readwrite权限测试"><a href="#readwrite权限测试" class="headerlink" title="readwrite权限测试"></a>readwrite权限测试</h1><figure class="highlight pgsql"><table><tr><td class="code"><pre><code class="hljs pgsql">mydb=# <span class="hljs-keyword">create</span> <span class="hljs-keyword">user</span> user2;<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">ROLE</span><br>mydb=# <span class="hljs-keyword">set</span> <span class="hljs-keyword">role</span> user2;<br><span class="hljs-keyword">SET</span><br>mydb=&gt; <span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> <span class="hljs-built_in">public</span>.test1;<br>ERROR:  permission denied <span class="hljs-keyword">for</span> <span class="hljs-keyword">schema</span> <span class="hljs-built_in">public</span><br><span class="hljs-type">LINE</span> <span class="hljs-number">1</span>: <span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> <span class="hljs-built_in">public</span>.test1;<br>                      ^<br>mydb=&gt; <span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> <span class="hljs-built_in">public</span>.test2 <span class="hljs-keyword">select</span> <span class="hljs-number">2</span>;<br>ERROR:  permission denied <span class="hljs-keyword">for</span> <span class="hljs-keyword">schema</span> <span class="hljs-built_in">public</span><br><span class="hljs-type">LINE</span> <span class="hljs-number">1</span>: <span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> <span class="hljs-built_in">public</span>.test2 <span class="hljs-keyword">select</span> <span class="hljs-number">2</span>;<br>                    ^<br>mydb=&gt; <span class="hljs-keyword">set</span> <span class="hljs-keyword">role</span> postgres;<br><span class="hljs-keyword">SET</span><br>mydb=# <span class="hljs-keyword">grant</span> readwrite <span class="hljs-keyword">to</span> user2;<br><span class="hljs-keyword">GRANT</span> <span class="hljs-keyword">ROLE</span><br>mydb=# <span class="hljs-keyword">set</span> <span class="hljs-keyword">role</span> user2;<br><span class="hljs-keyword">SET</span><br>mydb=&gt; <span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> <span class="hljs-built_in">public</span>.test1;<br> id <br><span class="hljs-comment">----</span><br>  <span class="hljs-number">1</span><br>(<span class="hljs-number">1</span> <span class="hljs-keyword">row</span>)<br><br>mydb=&gt; <span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> <span class="hljs-built_in">public</span>.test2 <span class="hljs-keyword">select</span> <span class="hljs-number">2</span>;<br><span class="hljs-keyword">INSERT</span> <span class="hljs-number">0</span> <span class="hljs-number">1</span><br>mydb=&gt; <span class="hljs-keyword">set</span> <span class="hljs-keyword">role</span> postgres;<br><span class="hljs-keyword">SET</span><br>mydb=# <span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> test3(id <span class="hljs-type">int</span>);<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span><br>mydb=# <span class="hljs-keyword">set</span> <span class="hljs-keyword">role</span> user2;<br><span class="hljs-keyword">SET</span><br>mydb=&gt; <span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> test3;<br> id <br><span class="hljs-comment">----</span><br>(<span class="hljs-number">0</span> <span class="hljs-keyword">rows</span>)<br><br>mydb=&gt; <span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> test3 <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>;<br><span class="hljs-keyword">INSERT</span> <span class="hljs-number">0</span> <span class="hljs-number">1</span><br>mydb=&gt; <br><br></code></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>PostgreSQL</category>
      </categories>
      <tags>
        <tag>PostgreSQL</tag>
        <tag>role</tag>
        <tag>权限</tag>
      </tags>
  </entry>
  <entry>
    <title>postgresql.git log 阅读记录</title>
    <url>/PostgreSQL/pg14_git_log/</url>
    <content><![CDATA[<h1 id="psql增加-d-i-m-t"><a href="#psql增加-d-i-m-t" class="headerlink" title="psql增加\d[i|m|t]+"></a>psql增加\d[i|m|t]+</h1><figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">commit</span> <span class="hljs-number">07</span>f386ede026ae8c3f2adeba0c22139df19bf2ff<br>Author: Michael Paquier &lt;michael@paquier.xyz&gt;<br><span class="hljs-built_in">Date</span>:   Wed Sep <span class="hljs-number">2</span> <span class="hljs-number">16</span>:<span class="hljs-number">59</span>:<span class="hljs-number">22</span> <span class="hljs-number">2020</span> +<span class="hljs-number">0900</span><br><br>    <span class="hljs-keyword">Add</span> <span class="hljs-keyword">access</span> method <span class="hljs-keyword">names</span> <span class="hljs-keyword">to</span> \d[i|m|t]+ <span class="hljs-keyword">in</span> psql<br><br>    Listing a <span class="hljs-keyword">full</span> <span class="hljs-keyword">set</span> <span class="hljs-keyword">of</span> relations <span class="hljs-keyword">with</span> those psql meta-commands, <span class="hljs-keyword">without</span> a<br>    matching pattern, has <span class="hljs-keyword">never</span> showed the <span class="hljs-keyword">access</span> method associated <span class="hljs-keyword">with</span><br>    <span class="hljs-keyword">each</span> relation.  This <span class="hljs-keyword">commit</span> adds the <span class="hljs-keyword">access</span> method <span class="hljs-keyword">of</span> <span class="hljs-keyword">tables</span>, <span class="hljs-keyword">indexes</span><br>    <span class="hljs-keyword">and</span> matviews, masking it <span class="hljs-keyword">for</span> relation kinds <span class="hljs-keyword">where</span> it does <span class="hljs-keyword">not</span> apply.<br><br>    Note that <span class="hljs-keyword">when</span> HIDE_TABLEAM <span class="hljs-keyword">is</span> enabled, the information does <span class="hljs-keyword">not</span> <span class="hljs-keyword">show</span><br>    up.  This <span class="hljs-keyword">is</span> available <span class="hljs-keyword">when</span> connecting <span class="hljs-keyword">to</span> a backend <span class="hljs-keyword">version</span> <span class="hljs-keyword">of</span> <span class="hljs-keyword">at</span> <span class="hljs-keyword">least</span><br>    <span class="hljs-number">12</span>, <span class="hljs-keyword">where</span> <span class="hljs-keyword">table</span> AMs have been introduced.<br><br>    Author: Georgios Kokolatos<br>    Reviewed-<span class="hljs-keyword">by</span>: Vignesh C, Michael Paquier, Justin Pryzby<br>    Discussion: https://postgr.es/m/svaS1VTOEscES9CLKVTeKItjJP1EEJuBhTsA0ESOdlnbXeQSgycYwVlliL5zt8Jwcfo4ATYDXtEqsExxjkSkkhCSTCL8fnRgaCAJdr0unUg=@protonmail.com<br><br></code></pre></td></tr></table></figure>
<h1 id="新增函数string-to-table"><a href="#新增函数string-to-table" class="headerlink" title="新增函数string_to_table"></a>新增函数string_to_table</h1><figure class="highlight pgsql"><table><tr><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">Add</span> string_to_table() <span class="hljs-keyword">function</span>.<br>    This splits a string at occurrences <span class="hljs-keyword">of</span> a <span class="hljs-keyword">delimiter</span>.  It <span class="hljs-keyword">is</span> exactly <span class="hljs-keyword">like</span><br>    string_to_array() <span class="hljs-keyword">except</span> <span class="hljs-keyword">for</span> producing a <span class="hljs-keyword">set</span> <span class="hljs-keyword">of</span> <span class="hljs-keyword">values</span> <span class="hljs-keyword">instead</span> <span class="hljs-keyword">of</span> an<br>    <span class="hljs-keyword">array</span> <span class="hljs-keyword">of</span> <span class="hljs-keyword">values</span>.  Thus, the relationship <span class="hljs-keyword">of</span> these two <span class="hljs-keyword">functions</span> <span class="hljs-keyword">is</span><br>    the same <span class="hljs-keyword">as</span> <span class="hljs-keyword">between</span> regexp_split_to_table() <span class="hljs-keyword">and</span> regexp_split_to_array().<br><br>    Although the same results could be had <span class="hljs-keyword">from</span> unnest(string_to_array()),<br>    this <span class="hljs-keyword">is</span> somewhat faster than that, <span class="hljs-keyword">and</span> anyway it seems reasonable <span class="hljs-keyword">to</span><br>    have it <span class="hljs-keyword">for</span> symmetry <span class="hljs-keyword">with</span> the regexp <span class="hljs-keyword">functions</span>.<br><br>    Pavel Stehule, reviewed <span class="hljs-keyword">by</span> Peter Smith<br><br><br></code></pre></td></tr></table></figure>
<h1 id="逻辑复制增加正在处理的事物中的复制"><a href="#逻辑复制增加正在处理的事物中的复制" class="headerlink" title="逻辑复制增加正在处理的事物中的复制"></a>逻辑复制增加正在处理的事物中的复制</h1><figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">commit</span> <span class="hljs-number">464824323e57</span>dc4b397e8b05854d779908b55304<br>Author: Amit Kapila &lt;akapila@postgresql.org&gt;<br><span class="hljs-built_in">Date</span>:   Thu Sep <span class="hljs-number">3</span> <span class="hljs-number">07</span>:<span class="hljs-number">54</span>:<span class="hljs-number">07</span> <span class="hljs-number">2020</span> +<span class="hljs-number">0530</span><br><br>    <span class="hljs-keyword">Add</span> support <span class="hljs-keyword">for</span> streaming <span class="hljs-keyword">to</span> built-<span class="hljs-keyword">in</span> <span class="hljs-keyword">logical</span> replication.<br><br>    <span class="hljs-keyword">To</span> <span class="hljs-keyword">add</span> support <span class="hljs-keyword">for</span> streaming <span class="hljs-keyword">of</span> <span class="hljs-keyword">in</span>-progress transactions <span class="hljs-keyword">into</span> the<br>    built-<span class="hljs-keyword">in</span> <span class="hljs-keyword">logical</span> <span class="hljs-keyword">replication</span>, we need <span class="hljs-keyword">to</span> <span class="hljs-keyword">do</span> three things:<br><br>    * Extend the <span class="hljs-keyword">logical</span> <span class="hljs-keyword">replication</span> protocol, so identify <span class="hljs-keyword">in</span>-progress<br>    transactions, <span class="hljs-keyword">and</span> <span class="hljs-keyword">allow</span> adding additional bits <span class="hljs-keyword">of</span> information (e.g.<br>    XID <span class="hljs-keyword">of</span> subtransactions).<br><br>    * <span class="hljs-keyword">Modify</span> the <span class="hljs-keyword">output</span> <span class="hljs-keyword">plugin</span> (pgoutput) <span class="hljs-keyword">to</span> implement the <span class="hljs-keyword">new</span> stream<br>    API callbacks, <span class="hljs-keyword">by</span> leveraging the <span class="hljs-keyword">extended</span> <span class="hljs-keyword">replication</span> protocol.<br><br>    * <span class="hljs-keyword">Modify</span> the <span class="hljs-keyword">replication</span> <span class="hljs-keyword">apply</span> worker, <span class="hljs-keyword">to</span> properly handle streamed<br>    <span class="hljs-keyword">in</span>-progress <span class="hljs-keyword">transaction</span> <span class="hljs-keyword">by</span> spilling the <span class="hljs-keyword">data</span> <span class="hljs-keyword">to</span> disk <span class="hljs-keyword">and</span> <span class="hljs-keyword">then</span><br>    replaying them <span class="hljs-keyword">on</span> commit.<br><br>    We however must explicitly <span class="hljs-keyword">disable</span> streaming <span class="hljs-keyword">replication</span> during<br>    <span class="hljs-keyword">replication</span> slot <span class="hljs-keyword">creation</span>, even <span class="hljs-keyword">if</span> the <span class="hljs-keyword">plugin</span> supports it. We<br>    don<span class="hljs-string">&#x27;t need to replicate the changes accumulated during this phase,</span><br><span class="hljs-string">    and moreover we don&#x27;</span>t have a <span class="hljs-keyword">replication</span> <span class="hljs-keyword">connection</span> <span class="hljs-keyword">open</span> so we<br>    don<span class="hljs-string">&#x27;t have where to send the data anyway.</span><br><span class="hljs-string"></span><br><span class="hljs-string">    Author: Tomas Vondra, Dilip Kumar and Amit Kapila</span><br><span class="hljs-string">    Reviewed-by: Amit Kapila, Kuntal Ghosh and Ajin Cherian</span><br><span class="hljs-string">    Tested-by: Neha Sharma, Mahendra Singh Thalor and Ajin Cherian</span><br><span class="hljs-string">    Discussion: https://postgr.es/m/688b0b7f-2f6c-d827-c27b-216a8e3ea700@2ndquadrant.com</span><br><span class="hljs-string"></span><br></code></pre></td></tr></table></figure>
<h1 id="新增视图pg-backend-memory-contexts"><a href="#新增视图pg-backend-memory-contexts" class="headerlink" title="新增视图pg_backend_memory_contexts"></a>新增视图pg_backend_memory_contexts</h1><figure class="highlight pgsql"><table><tr><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">commit</span> <span class="hljs-number">3e98</span>c0bafb28de87ae095b341687dc082371af54 (HEAD -&gt; master, origin/master, origin/HEAD)<br>Author: Fujii Masao &lt;fujii@postgresql.org&gt;<br><span class="hljs-type">Date</span>:   Wed Aug <span class="hljs-number">19</span> <span class="hljs-number">15</span>:<span class="hljs-number">34</span>:<span class="hljs-number">43</span> <span class="hljs-number">2020</span> +<span class="hljs-number">0900</span><br><br>    <span class="hljs-keyword">Add</span> pg_backend_memory_contexts <span class="hljs-keyword">system</span> <span class="hljs-keyword">view</span>.<br><br>    This <span class="hljs-keyword">view</span> displays the usages <span class="hljs-keyword">of</span> <span class="hljs-keyword">all</span> the memory contexts <span class="hljs-keyword">of</span> the <span class="hljs-keyword">server</span><br>    process attached <span class="hljs-keyword">to</span> the <span class="hljs-keyword">current</span> <span class="hljs-keyword">session</span>. This information <span class="hljs-keyword">is</span> useful <span class="hljs-keyword">to</span><br>    investigate the cause <span class="hljs-keyword">of</span> backend-<span class="hljs-keyword">local</span> memory bloat.<br><br>    This information can be <span class="hljs-keyword">also</span> collected <span class="hljs-keyword">by</span> calling<br>    MemoryContextStats(TopMemoryContext) via a debugger. But this technique<br>    cannot be uesd <span class="hljs-keyword">in</span> <span class="hljs-keyword">some</span> environments because <span class="hljs-keyword">no</span> debugger <span class="hljs-keyword">is</span> available there.<br>    <span class="hljs-keyword">And</span> it outputs lots <span class="hljs-keyword">of</span> <span class="hljs-type">text</span> messages <span class="hljs-keyword">and</span> it<span class="hljs-string">&#x27;s not easy to analyze them.</span><br><span class="hljs-string">    So, pg_backend_memory_contexts view allows us to access to backend-local</span><br><span class="hljs-string">    memory contexts information more easily.</span><br><span class="hljs-string"></span><br><span class="hljs-string">    Bump catalog version.</span><br><span class="hljs-string"></span><br><span class="hljs-string">    Author: Atsushi Torikoshi, Fujii Masao</span><br><span class="hljs-string">    Reviewed-by: Tatsuhito Kasahara, Andres Freund, Daniel Gustafsson, Robert Haas, Michael Paquier</span><br><span class="hljs-string">    Discussion: https://postgr.es/m/72a656e0f71d0860161e0b3f67e4d771@oss.nttdata.com</span><br><span class="hljs-string"></span><br></code></pre></td></tr></table></figure>
<h1 id="log-line-prefix-增加-P-显示并行leader"><a href="#log-line-prefix-增加-P-显示并行leader" class="headerlink" title="log_line_prefix 增加 %P 显示并行leader"></a>log_line_prefix 增加 %P 显示并行leader</h1><figure class="highlight pgsql"><table><tr><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">commit</span> b8fdee7d0ca8bd2165d46fb1468f75571b706a01<br>Author: Michael Paquier &lt;michael@paquier.xyz&gt;<br><span class="hljs-type">Date</span>:   Mon Aug <span class="hljs-number">3</span> <span class="hljs-number">13</span>:<span class="hljs-number">38</span>:<span class="hljs-number">48</span> <span class="hljs-number">2020</span> +<span class="hljs-number">0900</span><br><br>    <span class="hljs-keyword">Add</span> %P <span class="hljs-keyword">to</span> log_line_prefix <span class="hljs-keyword">for</span> parallel <span class="hljs-keyword">group</span> leader<br><br>    This <span class="hljs-keyword">is</span> useful <span class="hljs-keyword">for</span> monitoring purposes <span class="hljs-keyword">with</span> <span class="hljs-keyword">log</span> parsing.  Similarly <span class="hljs-keyword">to</span><br>    pg_stat_activity, the leader<span class="hljs-string">&#x27;s PID is shown only for active parallel</span><br><span class="hljs-string">    workers, minimizing the log footprint for the leaders as the equivalent</span><br><span class="hljs-string">    shared memory field is set as long as a backend is alive.</span><br><span class="hljs-string"></span><br><span class="hljs-string">    Author: Justin Pryzby</span><br><span class="hljs-string">    Reviewed-by: Álvaro Herrera, Michael Paquier, Julien Rouhaud, Tom Lane</span><br><span class="hljs-string">    Discussion: https://postgr.es/m/20200315111831.GA21492@telsasoft.com</span><br><span class="hljs-string"></span><br></code></pre></td></tr></table></figure>
<a id="more"></a>
<h1 id="增加GUC-hash-mem-multiplier"><a href="#增加GUC-hash-mem-multiplier" class="headerlink" title="增加GUC hash_mem_multiplier"></a>增加GUC hash_mem_multiplier</h1><figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">commit</span> d6c08e29e7bc8bc3bf49764192c4a9c71fc0b097<br>Author: Peter Geoghegan &lt;pg@bowt.ie&gt;<br><span class="hljs-built_in">Date</span>:   Wed Jul <span class="hljs-number">29</span> <span class="hljs-number">14</span>:<span class="hljs-number">14</span>:<span class="hljs-number">58</span> <span class="hljs-number">2020</span> <span class="hljs-number">-0700</span><br><br>    <span class="hljs-keyword">Add</span> hash_mem_multiplier GUC.<br><br>    <span class="hljs-keyword">Add</span> a GUC that acts <span class="hljs-keyword">as</span> a multiplier <span class="hljs-keyword">on</span> work_mem.  It gets applied <span class="hljs-keyword">when</span><br>    sizing executor node <span class="hljs-keyword">hash</span> <span class="hljs-keyword">tables</span> that were previously <span class="hljs-keyword">size</span> constrained<br>    <span class="hljs-keyword">using</span> work_mem alone.<br><br>    The <span class="hljs-keyword">new</span> GUC can be used <span class="hljs-keyword">to</span> preferentially give <span class="hljs-keyword">hash</span>-based nodes more<br>    <span class="hljs-keyword">memory</span> <span class="hljs-keyword">than</span> the generic work_mem limit.  It <span class="hljs-keyword">is</span> intended <span class="hljs-keyword">to</span> <span class="hljs-keyword">enable</span> <span class="hljs-keyword">admin</span><br>    tuning <span class="hljs-keyword">of</span> the executor<span class="hljs-string">&#x27;s memory usage.  Overall system throughput and</span><br><span class="hljs-string">    system responsiveness can be improved by giving hash-based executor</span><br><span class="hljs-string">    nodes more memory (especially over sort-based alternatives, which are</span><br><span class="hljs-string">    often much less sensitive to being memory constrained).</span><br><span class="hljs-string"></span><br><span class="hljs-string">    The default value for hash_mem_multiplier is 1.0, which is also the</span><br><span class="hljs-string">    minimum valid value.  This means that hash-based nodes continue to apply</span><br><span class="hljs-string">    work_mem in the traditional way by default.</span><br><span class="hljs-string"></span><br><span class="hljs-string">    hash_mem_multiplier is generally useful.  However, it is being added now</span><br><span class="hljs-string">    due to concerns about hash aggregate performance stability for users</span><br><span class="hljs-string">    that upgrade to Postgres 13 (which added disk-based hash aggregation in</span><br><span class="hljs-string">    commit 1f39bce0).  While the old hash aggregate behavior risked</span><br><span class="hljs-string">    out-of-memory errors, it is nevertheless likely that many users actually</span><br><span class="hljs-string">    benefited.  Hash agg&#x27;</span>s previous indifference <span class="hljs-keyword">to</span> work_mem during <span class="hljs-keyword">query</span><br>    execution was <span class="hljs-keyword">not</span> just faster; it also accidentally made aggregation<br>    resilient to grouping estimate problems (at least in cases where this<br>    didn&#x27;t <span class="hljs-keyword">create</span> destabilizing <span class="hljs-keyword">memory</span> pressure).<br><br>    hash_mem_multiplier can provide a certain kind <span class="hljs-keyword">of</span> continuity <span class="hljs-keyword">with</span> the<br>    behavior <span class="hljs-keyword">of</span> Postgres <span class="hljs-number">12</span> <span class="hljs-keyword">hash</span> aggregates <span class="hljs-keyword">in</span> cases <span class="hljs-keyword">where</span> the planner<br>    incorrectly estimates that <span class="hljs-keyword">all</span> <span class="hljs-keyword">groups</span> (plus related allocations) will<br>    fit <span class="hljs-keyword">in</span> work_mem/hash_mem.  This seems necessary because <span class="hljs-keyword">hash</span>-based<br>    aggregation <span class="hljs-keyword">is</span> usually much slower <span class="hljs-keyword">when</span> <span class="hljs-keyword">only</span> a small fraction <span class="hljs-keyword">of</span> <span class="hljs-keyword">all</span><br>    <span class="hljs-keyword">groups</span> can fit.  Even <span class="hljs-keyword">when</span> it isn<span class="hljs-string">&#x27;t possible to totally avoid hash</span><br><span class="hljs-string">    aggregates that spill, giving hash aggregation more memory will reliably</span><br><span class="hljs-string">    improve performance (the same cannot be said for external sort</span><br><span class="hljs-string">    operations, which appear to be almost unaffected by memory availability</span><br><span class="hljs-string">    provided it&#x27;</span>s <span class="hljs-keyword">at</span> <span class="hljs-keyword">least</span> possible <span class="hljs-keyword">to</span> <span class="hljs-keyword">get</span> a single <span class="hljs-keyword">merge</span> pass).<br><br>    The PostgreSQL <span class="hljs-number">13</span> <span class="hljs-keyword">release</span> notes should <span class="hljs-keyword">advise</span> <span class="hljs-keyword">users</span> that increasing<br>    hash_mem_multiplier can <span class="hljs-keyword">help</span> <span class="hljs-keyword">with</span> <span class="hljs-keyword">performance</span> regressions associated<br>    <span class="hljs-keyword">with</span> <span class="hljs-keyword">hash</span> aggregation.  That can be taken care <span class="hljs-keyword">of</span> <span class="hljs-keyword">by</span> a later commit.<br><br>    Author: Peter Geoghegan<br>    Reviewed-<span class="hljs-keyword">By</span>: Álvaro Herrera, Jeff Davis<br>    Discussion: https://postgr.es/m/<span class="hljs-number">20200625203629.7</span>m6yvut7eqblgmfo@alap3.anarazel.de<br>    Discussion: https://postgr.es/m/CAH2-WzmD%<span class="hljs-number">2</span>Bi1pG6rc1%<span class="hljs-number">2</span>BCjc4V6EaFJ_qSuKCCHVnH%<span class="hljs-number">3</span>DoruqD-zqow%<span class="hljs-number">40</span>mail.gmail.com<br>    Backpatch: <span class="hljs-number">13</span>-, <span class="hljs-keyword">where</span> disk-based <span class="hljs-keyword">hash</span> aggregation was introduced.<br><br></code></pre></td></tr></table></figure>
<h1 id="pg-stat-statements-新增记录CREATE-TABLE-AS-SELECT-INTO-CREATE-MATERIALIZED-VIEW-and-FETCH-commands"><a href="#pg-stat-statements-新增记录CREATE-TABLE-AS-SELECT-INTO-CREATE-MATERIALIZED-VIEW-and-FETCH-commands" class="headerlink" title="pg_stat_statements 新增记录CREATE TABLE AS, SELECT INTO,CREATE MATERIALIZED VIEW and FETCH commands"></a>pg_stat_statements 新增记录CREATE TABLE AS, SELECT INTO,CREATE MATERIALIZED VIEW and FETCH commands</h1><figure class="highlight pgsql"><table><tr><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">commit</span> <span class="hljs-number">6023</span>b7ea717ca04cf1bd53709d9c862db07eaefb<br>Author: Fujii Masao &lt;fujii@postgresql.org&gt;<br><span class="hljs-type">Date</span>:   Wed Jul <span class="hljs-number">29</span> <span class="hljs-number">23</span>:<span class="hljs-number">21</span>:<span class="hljs-number">55</span> <span class="hljs-number">2020</span> +<span class="hljs-number">0900</span><br><br>    pg_stat_statements: track number <span class="hljs-keyword">of</span> <span class="hljs-keyword">rows</span> processed <span class="hljs-keyword">by</span> <span class="hljs-keyword">some</span> utility commands.<br><br>    This <span class="hljs-keyword">commit</span> makes pg_stat_statements track the total number<br>    <span class="hljs-keyword">of</span> <span class="hljs-keyword">rows</span> retrieved <span class="hljs-keyword">or</span> affected <span class="hljs-keyword">by</span> <span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> <span class="hljs-keyword">AS</span>, <span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">INTO</span>,<br>    <span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">MATERIALIZED</span> <span class="hljs-keyword">VIEW</span> <span class="hljs-keyword">and</span> <span class="hljs-keyword">FETCH</span> commands.<br><br>    Suggested-<span class="hljs-keyword">by</span>: Pascal Legrand<br>    Author: Fujii Masao<br>    Reviewed-<span class="hljs-keyword">by</span>: Asif Rehman<br>    Discussion: https://postgr.es/m/<span class="hljs-number">1584293755198</span><span class="hljs-number">-0.</span>post@n3.nabble.com<br><br></code></pre></td></tr></table></figure>
<h1 id="并行增强"><a href="#并行增强" class="headerlink" title="并行增强"></a>并行增强</h1><figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">commit</span> <span class="hljs-number">56788</span>d2156fc32bd5737e7ac716d70e6a269b7bc<br>Author: David Rowley &lt;drowley@postgresql.org&gt;<br><span class="hljs-built_in">Date</span>:   Sun Jul <span class="hljs-number">26</span> <span class="hljs-number">21</span>:<span class="hljs-number">02</span>:<span class="hljs-number">45</span> <span class="hljs-number">2020</span> +<span class="hljs-number">1200</span><br><br>    <span class="hljs-keyword">Allocate</span> consecutive blocks during <span class="hljs-keyword">parallel</span> seqscans<br><br>    Previously we would <span class="hljs-keyword">allocate</span> blocks <span class="hljs-keyword">to</span> <span class="hljs-keyword">parallel</span> workers during a <span class="hljs-keyword">parallel</span><br>    <span class="hljs-keyword">sequential</span> <span class="hljs-keyword">scan</span> <span class="hljs-number">1</span> <span class="hljs-keyword">block</span> <span class="hljs-keyword">at</span> a time.  Since other workers were likely <span class="hljs-keyword">to</span><br>    request a <span class="hljs-keyword">block</span> <span class="hljs-keyword">before</span> a worker <span class="hljs-keyword">returns</span> <span class="hljs-keyword">for</span> another <span class="hljs-keyword">block</span> <span class="hljs-built_in">number</span> <span class="hljs-keyword">to</span> <span class="hljs-keyword">work</span><br>    <span class="hljs-keyword">on</span>, this could <span class="hljs-keyword">lead</span> <span class="hljs-keyword">to</span> non-<span class="hljs-keyword">sequential</span> I/O patterns <span class="hljs-keyword">in</span> <span class="hljs-keyword">each</span> worker which<br>    could cause the operating <span class="hljs-keyword">system</span><span class="hljs-string">&#x27;s readahead to perform poorly or not at</span><br><span class="hljs-string">    all.</span><br><span class="hljs-string"></span><br><span class="hljs-string">    Here we change things so that we allocate consecutive &quot;chunks&quot; of blocks</span><br><span class="hljs-string">    to workers and have them work on those until they&#x27;</span>re done, <span class="hljs-keyword">at</span> which <span class="hljs-built_in">time</span><br>    we <span class="hljs-keyword">allocate</span> another <span class="hljs-keyword">chunk</span> <span class="hljs-keyword">for</span> the worker.  The <span class="hljs-keyword">size</span> <span class="hljs-keyword">of</span> these chunks <span class="hljs-keyword">is</span><br>    based <span class="hljs-keyword">on</span> the <span class="hljs-keyword">size</span> <span class="hljs-keyword">of</span> the relation.<br><br>    <span class="hljs-keyword">Initial</span> <span class="hljs-keyword">patch</span> here was <span class="hljs-keyword">by</span> Thomas Munro which showed <span class="hljs-keyword">some</span> good improvements<br>    just <span class="hljs-keyword">having</span> a <span class="hljs-keyword">fixed</span> <span class="hljs-keyword">chunk</span> <span class="hljs-keyword">size</span> <span class="hljs-keyword">of</span> <span class="hljs-number">64</span> blocks <span class="hljs-keyword">with</span> a simple ramp-down near<br>    the <span class="hljs-keyword">end</span> <span class="hljs-keyword">of</span> the scan. The revisions <span class="hljs-keyword">of</span> the <span class="hljs-keyword">patch</span> <span class="hljs-keyword">to</span> make the <span class="hljs-keyword">chunk</span> <span class="hljs-keyword">size</span><br>    based <span class="hljs-keyword">on</span> the relation <span class="hljs-keyword">size</span> <span class="hljs-keyword">and</span> the adjusted ramp-down <span class="hljs-keyword">in</span> powers <span class="hljs-keyword">of</span> two was<br>    done <span class="hljs-keyword">by</span> me, along <span class="hljs-keyword">with</span> quite extensive benchmarking <span class="hljs-keyword">to</span> determine the<br>    <span class="hljs-keyword">optimal</span> <span class="hljs-keyword">chunk</span> sizes.<br><br>    <span class="hljs-keyword">For</span> the most part, benchmarks have shown significant <span class="hljs-keyword">performance</span><br>    improvements <span class="hljs-keyword">for</span> <span class="hljs-keyword">large</span> <span class="hljs-keyword">parallel</span> <span class="hljs-keyword">sequential</span> scans <span class="hljs-keyword">on</span> Linux, FreeBSD <span class="hljs-keyword">and</span><br>    Windows <span class="hljs-keyword">using</span> SSDs.  It<span class="hljs-string">&#x27;s less clear how this affects the performance of</span><br><span class="hljs-string">    cloud providers.  Tests done so far are unable to obtain stable enough</span><br><span class="hljs-string">    performance to provide meaningful benchmark results.  It is possible that</span><br><span class="hljs-string">    this could cause some performance regressions on more obscure filesystems,</span><br><span class="hljs-string">    so we may need to later provide users with some ability to get something</span><br><span class="hljs-string">    closer to the old behavior.  For now, let&#x27;</span>s leave that <span class="hljs-keyword">until</span> we see that<br>    it<span class="hljs-string">&#x27;s really required.</span><br><span class="hljs-string"></span><br><span class="hljs-string">    Author: Thomas Munro, David Rowley</span><br><span class="hljs-string">    Reviewed-by: Ranier Vilela, Soumyadeep Chakraborty, Robert Haas</span><br><span class="hljs-string">    Reviewed-by: Amit Kapila, Kirk Jamison</span><br><span class="hljs-string">    Discussion: https://postgr.es/m/CA+hUKGJ_EErDv41YycXcbMbCBkztA34+z1ts9VQH+ACRuvpxig@mail.gmail.com</span><br><span class="hljs-string"></span><br></code></pre></td></tr></table></figure>
<h1 id="GUC-enable-hashagg-disk"><a href="#GUC-enable-hashagg-disk" class="headerlink" title="GUC enable_hashagg_disk"></a>GUC enable_hashagg_disk</h1><figure class="highlight apache"><table><tr><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">commit</span> bcbf<span class="hljs-number">9446</span>a<span class="hljs-number">2983</span>b<span class="hljs-number">6452</span>c<span class="hljs-number">19</span>cc<span class="hljs-number">50050456</span>be<span class="hljs-number">262</span>f<span class="hljs-number">7</span>c<span class="hljs-number">5</span><br><span class="hljs-attribute">Author</span>: Peter Geoghegan &lt;pg@bowt.ie&gt;<br><span class="hljs-attribute">Date</span>:   Mon Jul <span class="hljs-number">27</span> <span class="hljs-number">17</span>:<span class="hljs-number">53</span>:<span class="hljs-number">19</span> <span class="hljs-number">2020</span> -<span class="hljs-number">0700</span><br><br>    <span class="hljs-attribute">Remove</span> hashagg_avoid_disk_plan GUC.<br><br>    <span class="hljs-attribute">Note</span>: This GUC was originally named enable_hashagg_disk when it appeared<br>    <span class="hljs-attribute">in</span> commit <span class="hljs-number">1</span>f<span class="hljs-number">39</span>bce<span class="hljs-number">0</span>, which added disk-based hash aggregation.  It was<br>    <span class="hljs-attribute">subsequently</span> renamed in commit <span class="hljs-number">92</span>c<span class="hljs-number">58</span>fd<span class="hljs-number">9</span>.<br><br>    <span class="hljs-attribute">Author</span>: Peter Geoghegan<br>    <span class="hljs-attribute">Reviewed</span>-By: Jeff Davis, Álvaro Herrera<br>    <span class="hljs-attribute">Discussion</span>: https://postgr.es/m/<span class="hljs-number">9</span>d<span class="hljs-number">9</span>d<span class="hljs-number">1</span>e<span class="hljs-number">1252</span>a<span class="hljs-number">52</span>ea<span class="hljs-number">1</span>bad<span class="hljs-number">84</span>ea<span class="hljs-number">40</span>dbebfd<span class="hljs-number">54</span>e<span class="hljs-number">672</span>a<span class="hljs-number">0</span>f.camel%<span class="hljs-number">40</span>j-davis.com<br>    <span class="hljs-attribute">Backpatch</span>: <span class="hljs-number">13</span>-, where disk-based hash aggregation was introduced.<br><br></code></pre></td></tr></table></figure>
<h1 id="logical-decoding-output-plugin-API"><a href="#logical-decoding-output-plugin-API" class="headerlink" title="logical decoding output plugin API"></a>logical decoding output plugin API</h1><figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">commit</span> <span class="hljs-number">45</span>fdc9738b36d1068d3ad8fdb06436d6fd14436b<br>Author: Amit Kapila &lt;akapila@postgresql.org&gt;<br><span class="hljs-built_in">Date</span>:   Tue Jul <span class="hljs-number">28</span> <span class="hljs-number">08</span>:<span class="hljs-number">06</span>:<span class="hljs-number">44</span> <span class="hljs-number">2020</span> +<span class="hljs-number">0530</span><br><br>    Extend the <span class="hljs-keyword">logical</span> decoding <span class="hljs-keyword">output</span> <span class="hljs-keyword">plugin</span> API <span class="hljs-keyword">with</span> stream methods.<br><br>    This adds seven methods <span class="hljs-keyword">to</span> the <span class="hljs-keyword">output</span> <span class="hljs-keyword">plugin</span> API, adding support <span class="hljs-keyword">for</span><br>    streaming changes <span class="hljs-keyword">of</span> <span class="hljs-keyword">large</span> <span class="hljs-keyword">in</span>-progress transactions.<br><br>    * stream_start<br>    * stream_stop<br>    * stream_abort<br>    * stream_commit<br>    * stream_change<br>    * stream_message<br>    * stream_truncate<br><br>    Most <span class="hljs-keyword">of</span> this <span class="hljs-keyword">is</span> a simple extension <span class="hljs-keyword">of</span> the existing methods, <span class="hljs-keyword">with</span><br>    the semantic <span class="hljs-keyword">difference</span> that the <span class="hljs-keyword">transaction</span> (<span class="hljs-keyword">or</span> subtransaction)<br>    <span class="hljs-keyword">is</span> incomplete <span class="hljs-keyword">and</span> may be aborted later (which <span class="hljs-keyword">is</span> something the<br>    regular API does <span class="hljs-keyword">not</span> really need <span class="hljs-keyword">to</span> deal <span class="hljs-keyword">with</span>).<br><br>    This also extends the <span class="hljs-string">&#x27;test_decoding&#x27;</span> <span class="hljs-keyword">plugin</span>, implementing these<br>    <span class="hljs-keyword">new</span> stream methods.<br><br>    The stream_start/start_stop <span class="hljs-keyword">are</span> used <span class="hljs-keyword">to</span> demarcate a <span class="hljs-keyword">chunk</span> <span class="hljs-keyword">of</span> changes<br>    streamed <span class="hljs-keyword">for</span> a particular toplevel transaction.<br><br>    This <span class="hljs-keyword">commit</span> simply adds these <span class="hljs-keyword">new</span> APIs <span class="hljs-keyword">and</span> the upcoming <span class="hljs-keyword">patch</span> <span class="hljs-keyword">to</span> <span class="hljs-string">&quot;allow</span><br><span class="hljs-string">    the streaming mode in ReorderBuffer&quot;</span> will <span class="hljs-keyword">use</span> these APIs.<br><br>    Author: Tomas Vondra, Dilip Kumar, Amit Kapila<br>    Reviewed-<span class="hljs-keyword">by</span>: Amit Kapila<br>    Tested-<span class="hljs-keyword">by</span>: Neha Sharma <span class="hljs-keyword">and</span> Mahendra Singh Thalor<br>    Discussion: https://postgr.es/m/<span class="hljs-number">688</span>b0b7f<span class="hljs-number">-2</span>f6c-d827-c27b<span class="hljs-number">-216</span>a8e3ea700@<span class="hljs-number">2</span>ndquadrant.com<br><br></code></pre></td></tr></table></figure>
<h1 id="wal-keep-segments-改名为-wal-keep-size"><a href="#wal-keep-segments-改名为-wal-keep-size" class="headerlink" title="wal_keep_segments 改名为 wal_keep_size."></a>wal_keep_segments 改名为 wal_keep_size.</h1><figure class="highlight livecodeserver"><table><tr><td class="code"><pre><code class="hljs livecodeserver">commit c3fe108c025e4a080315562d4c15ecbe3f00405e<br>Author: Fujii Masao &lt;fujii@postgresql.org&gt;<br>Date:   Mon Jul <span class="hljs-number">20</span> <span class="hljs-number">13</span>:<span class="hljs-number">30</span>:<span class="hljs-number">18</span> <span class="hljs-number">2020</span> +<span class="hljs-number">0900</span><br><br>    Rename wal_keep_segments <span class="hljs-built_in">to</span> wal_keep_size.<br><br>    max_slot_wal_keep_size that was added <span class="hljs-keyword">in</span> v13 <span class="hljs-keyword">and</span> wal_keep_segments are<br>    <span class="hljs-keyword">the</span> GUC parameters <span class="hljs-built_in">to</span> specify how much WAL <span class="hljs-built_in">files</span> <span class="hljs-built_in">to</span> retain <span class="hljs-keyword">for</span><br>    <span class="hljs-keyword">the</span> standby servers. While max_slot_wal_keep_size accepts <span class="hljs-keyword">the</span> <span class="hljs-built_in">number</span> <span class="hljs-keyword">of</span><br>    <span class="hljs-keyword">bytes</span> <span class="hljs-keyword">of</span> WAL <span class="hljs-built_in">files</span>, wal_keep_segments accepts <span class="hljs-keyword">the</span> <span class="hljs-built_in">number</span> <span class="hljs-keyword">of</span> WAL <span class="hljs-built_in">files</span>.<br>    This <span class="hljs-built_in">difference</span> <span class="hljs-keyword">of</span> setting units between those similar parameters could<br>    be confusing <span class="hljs-built_in">to</span> users.<br><br>    To alleviate this situation, this commit renames wal_keep_segments <span class="hljs-built_in">to</span><br>    wal_keep_size, <span class="hljs-keyword">and</span> make users specify <span class="hljs-keyword">the</span> WAL size <span class="hljs-keyword">in</span> <span class="hljs-keyword">it</span> instead <span class="hljs-keyword">of</span><br>    <span class="hljs-keyword">the</span> <span class="hljs-built_in">number</span> <span class="hljs-keyword">of</span> WAL <span class="hljs-built_in">files</span>.<br><br>    There was also <span class="hljs-keyword">the</span> idea <span class="hljs-built_in">to</span> <span class="hljs-built_in">rename</span> max_slot_wal_keep_size <span class="hljs-built_in">to</span><br>    max_slot_wal_keep_segments, <span class="hljs-keyword">in</span> <span class="hljs-keyword">the</span> discussion. But we have been moving<br>    away <span class="hljs-built_in">from</span> measuring <span class="hljs-keyword">in</span> <span class="hljs-keyword">segments</span>, <span class="hljs-keyword">for</span> example, checkpoint_segments was<br>    replaced <span class="hljs-keyword">by</span> max_wal_size. So we concluded <span class="hljs-built_in">to</span> <span class="hljs-built_in">rename</span> wal_keep_segments<br>    <span class="hljs-built_in">to</span> wal_keep_size.<br><br>    Back-patch <span class="hljs-built_in">to</span> v13 where max_slot_wal_keep_size was added.<br><br>    Author: Fujii Masao<br>    Reviewed-<span class="hljs-keyword">by</span>: Álvaro Herrera, Kyotaro Horiguchi, David Steele<br>    Discussion: <span class="hljs-keyword">https</span>://postgr.es/m/<span class="hljs-number">574</span>b4ea3-e0f9-b175-ead2-ebea7faea855@oss.nttdata.com<br></code></pre></td></tr></table></figure>
<h1 id="增加-generic-plans-and-custom-plans-域到pg-prepared-statements"><a href="#增加-generic-plans-and-custom-plans-域到pg-prepared-statements" class="headerlink" title="增加 generic_plans and custom_plans 域到pg_prepared_statements"></a>增加 generic_plans and custom_plans 域到pg_prepared_statements</h1><figure class="highlight pgsql"><table><tr><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">commit</span> d05b172a760e0ccb3008a2144f96053720000b12<br>Author: Fujii Masao &lt;fujii@postgresql.org&gt;<br><span class="hljs-type">Date</span>:   Mon Jul <span class="hljs-number">20</span> <span class="hljs-number">11</span>:<span class="hljs-number">55</span>:<span class="hljs-number">50</span> <span class="hljs-number">2020</span> +<span class="hljs-number">0900</span><br><br>    <span class="hljs-keyword">Add</span> generic_plans <span class="hljs-keyword">and</span> custom_plans fields <span class="hljs-keyword">into</span> pg_prepared_statements.<br><br>    There was <span class="hljs-keyword">no</span> easy way <span class="hljs-keyword">to</span> find how many times generic <span class="hljs-keyword">and</span> custom plans<br>    have been executed <span class="hljs-keyword">for</span> a <span class="hljs-keyword">prepared</span> <span class="hljs-keyword">statement</span>. This <span class="hljs-keyword">commit</span> exposes those<br>    numbers <span class="hljs-keyword">of</span> times <span class="hljs-keyword">in</span> pg_prepared_statements <span class="hljs-keyword">view</span>.<br><br>    Author: Atsushi Torikoshi, Kyotaro Horiguchi<br>    Reviewed-<span class="hljs-keyword">by</span>: Tatsuro Yamada, Masahiro Ikeda, Fujii Masao<br>    Discussion: https://postgr.es/m/CACZ0uYHZ4M=NZpofH6JuPHeX=__5xcDELF8hT8_2T+R55w4RQw@mail.gmail.com<br></code></pre></td></tr></table></figure>
<h1 id="逻辑复制增强，-允许二进制传输数据"><a href="#逻辑复制增强，-允许二进制传输数据" class="headerlink" title="逻辑复制增强， 允许二进制传输数据."></a>逻辑复制增强， 允许二进制传输数据.</h1><figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">commit</span> <span class="hljs-number">9</span>de77b5453130242654ff0b30a551c9c862ed661<br>Author: Tom Lane &lt;tgl@sss.pgh.pa.us&gt;<br><span class="hljs-built_in">Date</span>:   Sat Jul <span class="hljs-number">18</span> <span class="hljs-number">12</span>:<span class="hljs-number">44</span>:<span class="hljs-number">51</span> <span class="hljs-number">2020</span> <span class="hljs-number">-0400</span><br><br>    <span class="hljs-keyword">Allow</span> <span class="hljs-keyword">logical</span> <span class="hljs-keyword">replication</span> <span class="hljs-keyword">to</span> transfer <span class="hljs-keyword">data</span> <span class="hljs-keyword">in</span> <span class="hljs-built_in">binary</span> format.<br><br>    This <span class="hljs-keyword">patch</span> adds a <span class="hljs-string">&quot;binary&quot;</span> <span class="hljs-keyword">option</span> <span class="hljs-keyword">to</span> <span class="hljs-keyword">CREATE</span>/<span class="hljs-keyword">ALTER</span> SUBSCRIPTION.<br>    <span class="hljs-keyword">When</span> that<span class="hljs-string">&#x27;s set, the publisher will send data using the data type&#x27;</span>s<br>    typsend <span class="hljs-keyword">function</span> <span class="hljs-keyword">if</span> <span class="hljs-keyword">any</span>, rather <span class="hljs-keyword">than</span> typoutput.  This <span class="hljs-keyword">is</span> generally<br>    faster, <span class="hljs-keyword">if</span> slightly <span class="hljs-keyword">less</span> robust.<br><br>    <span class="hljs-keyword">As</span> committed, we won<span class="hljs-string">&#x27;t try to transfer user-defined array or composite</span><br><span class="hljs-string">    types in binary, for fear that type OIDs won&#x27;</span>t <span class="hljs-keyword">match</span> <span class="hljs-keyword">at</span> the subscriber.<br>    This might be <span class="hljs-keyword">changed</span> later, but it seems <span class="hljs-keyword">like</span> fit material <span class="hljs-keyword">for</span> a<br>    follow-<span class="hljs-keyword">on</span> patch.<br><br>    Dave Cramer, reviewed <span class="hljs-keyword">by</span> Daniel Gustafsson, Petr Jelinek, <span class="hljs-keyword">and</span> others;<br>    adjusted some by me<br><br>    Discussion: https://postgr.es/m/CADK3HH+R3xMn=8t3Ct+uD+qJ1KD=Hbif5NFMJ+d5DkoCzp6Vgw@mail.gmail.com<br></code></pre></td></tr></table></figure>
<h1 id="huge-page-size"><a href="#huge-page-size" class="headerlink" title="huge_page_size"></a>huge_page_size</h1><figure class="highlight apache"><table><tr><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">commit</span> d<span class="hljs-number">2</span>bddc<span class="hljs-number">2500</span>fb<span class="hljs-number">74</span>d<span class="hljs-number">56</span>e<span class="hljs-number">5</span>bc<span class="hljs-number">53</span>a<span class="hljs-number">1</span>cfa<span class="hljs-number">269</span>e<span class="hljs-number">2</span>e<span class="hljs-number">846510</span><br><span class="hljs-attribute">Author</span>: Thomas Munro &lt;tmunro@postgresql.org&gt;<br><span class="hljs-attribute">Date</span>:   Fri Jul <span class="hljs-number">17</span> <span class="hljs-number">14</span>:<span class="hljs-number">33</span>:<span class="hljs-number">00</span> <span class="hljs-number">2020</span> +<span class="hljs-number">1200</span><br><br>    <span class="hljs-attribute">Add</span> huge_page_size setting for use <span class="hljs-literal">on</span> Linux.<br><br>    <span class="hljs-attribute">This</span> allows the huge page size to be set explicitly.  The default is <span class="hljs-number">0</span>,<br>    <span class="hljs-attribute">meaning</span> it will use the system default, as before.<br><br>    <span class="hljs-attribute">Author</span>: Odin Ugedal &lt;odin@ugedal.com&gt;<br>    <span class="hljs-attribute">Discussion</span>: https://postgr.es/m/<span class="hljs-number">20200608154639</span>.<span class="hljs-number">20254</span>-<span class="hljs-number">1</span>-odin%<span class="hljs-number">40</span>ugedal.com<br><br></code></pre></td></tr></table></figure>
<h1 id="jsonpath-不允许NaN"><a href="#jsonpath-不允许NaN" class="headerlink" title="jsonpath 不允许NaN"></a>jsonpath 不允许NaN</h1><figure class="highlight apache"><table><tr><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">commit</span> df<span class="hljs-number">646509</span>f<span class="hljs-number">371069</span>c<span class="hljs-number">65</span>f<span class="hljs-number">84309</span>eb<span class="hljs-number">5749642</span>e<span class="hljs-number">8650</span>b<span class="hljs-number">3</span><br><span class="hljs-attribute">Author</span>: Alexander Korotkov &lt;akorotkov@postgresql.org&gt;<br><span class="hljs-attribute">Date</span>:   Sat Jul <span class="hljs-number">11</span> <span class="hljs-number">03</span>:<span class="hljs-number">21</span>:<span class="hljs-number">00</span> <span class="hljs-number">2020</span> +<span class="hljs-number">0300</span><br><br>    <span class="hljs-attribute">Forbid</span> numeric NaN in jsonpath<br><br>    <span class="hljs-attribute">SQL</span> standard doesn&#x27;t define numeric Inf or NaN values.  It appears even more<br>    <span class="hljs-attribute">ridiculous</span> to support then in jsonpath assuming JSON doesn&#x27;t support these<br>    <span class="hljs-attribute">values</span> as well.  This commit forbids returning NaN from .double(), which was<br>    <span class="hljs-attribute">previously</span> allowed.  NaN can&#x27;t be result of inner-jsonpath computation over<br>    <span class="hljs-attribute">non</span>-NaNs.  So, we can not expect NaN in the jsonpath output.<br><br>    <span class="hljs-attribute">Reported</span>-by: Tom Lane<br>    <span class="hljs-attribute">Discussion</span>: https://postgr.es/m/<span class="hljs-number">203949</span>.<span class="hljs-number">1591879542</span>%<span class="hljs-number">40</span>sss.pgh.pa.us<br>    <span class="hljs-attribute">Author</span>: Alexander Korotkov<br>    <span class="hljs-attribute">Reviewed</span>-by: Tom Lane<br>    <span class="hljs-attribute">Backpatch</span>-through: <span class="hljs-number">12</span><br><br></code></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>PostgreSQL</category>
      </categories>
      <tags>
        <tag>PostgreSQL</tag>
        <tag>git</tag>
        <tag>postgresql.git</tag>
      </tags>
  </entry>
  <entry>
    <title>python3 ldap3 NTLM验证用户</title>
    <url>/python/python3_ldap%E9%AA%8C%E8%AF%81/</url>
    <content><![CDATA[<figure class="highlight routeros"><table><tr><td class="code"><pre><code class="hljs routeros"><span class="hljs-keyword">from</span> ldap3 import Server, Connection, NTLM, ALL<br><br>server = Server(<span class="hljs-string">&quot;xxx.xxx.xxx.xxx&quot;</span>, 389, <span class="hljs-attribute">use_ssl</span>=<span class="hljs-literal">False</span>, <span class="hljs-attribute">get_info</span>=ALL)<br><span class="hljs-builtin-name">print</span>(server)<br>conn = Connection(server, <span class="hljs-attribute">user</span>=<span class="hljs-string">&quot;Domain\\username&quot;</span>, <span class="hljs-attribute">password</span>=<span class="hljs-string">&quot;password&quot;</span>, <span class="hljs-attribute">authentication</span>=NTLM)<br><span class="hljs-builtin-name">print</span>(conn.bind())<br><span class="hljs-builtin-name">print</span>(conn.extend.standard.who_am_i())<br><br></code></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python3</tag>
        <tag>ldap</tag>
      </tags>
  </entry>
  <entry>
    <title>Zabbix编译安装</title>
    <url>/zabbix/zabbix%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<h1 id="新建帐号"><a href="#新建帐号" class="headerlink" title="新建帐号"></a>新建帐号</h1><figure class="highlight properties"><table><tr><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">groupadd</span> <span class="hljs-string">zabbix</span><br><span class="hljs-attr">useradd</span> <span class="hljs-string">-g zabbix zabbix</span><br></code></pre></td></tr></table></figure>
<a id="more"></a>
<h1 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h1><figure class="highlight apache"><table><tr><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">sudo</span> apt install libsnmp-dev<br><span class="hljs-attribute">sudo</span> apt install libssh<span class="hljs-number">2</span>-<span class="hljs-number">1</span>*<br><span class="hljs-attribute">sudo</span> apt install libopenipmi-dev<br><span class="hljs-attribute">sudo</span> apt install libldap<span class="hljs-number">2</span>-dev<br><span class="hljs-attribute">sudo</span> apt install libevent-dev<br><span class="hljs-attribute">sudo</span> apt install curl<br><span class="hljs-attribute">sudo</span> apt install php-pgsql<br><span class="hljs-attribute">sudo</span> apt install php<span class="hljs-number">7</span>.<span class="hljs-number">2</span>-xml<br><span class="hljs-attribute">sudo</span> apt install apache<span class="hljs-number">2</span><br><span class="hljs-attribute">sudo</span> apt install php<span class="hljs-number">7</span>.<span class="hljs-number">2</span>-bcmath<br><span class="hljs-attribute">sudo</span> apt install php<span class="hljs-number">7</span>.<span class="hljs-number">2</span>-mbstring<br><span class="hljs-attribute">sudo</span> apt install php<span class="hljs-number">7</span>.<span class="hljs-number">2</span>-ldap<br><span class="hljs-attribute">sudo</span> apt install php<span class="hljs-number">7</span>.<span class="hljs-number">0</span>-snmp<br></code></pre></td></tr></table></figure>
<h1 id="下载-amp-amp-编译-amp-amp-安装"><a href="#下载-amp-amp-编译-amp-amp-安装" class="headerlink" title="下载  &amp;&amp; 编译 &amp;&amp; 安装"></a>下载  &amp;&amp; 编译 &amp;&amp; 安装</h1><figure class="highlight jboss-cli"><table><tr><td class="code"><pre><code class="hljs jboss-cli">useradd -m zabbix -d <span class="hljs-string">/home/zabbix</span><br>su - zabbix<br>wget https:<span class="hljs-string">//cdn.zabbix.com/zabbix/sources/stable/4.0/zabbix-4.0.2.tar.gz</span><br>tar -zxvf zabbix-4.0.2.tar.gz<br><span class="hljs-keyword">cd</span> zabbix-4.0.2/<br><span class="hljs-string">./configure</span> <span class="hljs-params">--prefix=/home/zabbix/release</span> <span class="hljs-params">--enable-server</span> <span class="hljs-params">--enable-proxy</span> <span class="hljs-params">--enable-agent</span> <span class="hljs-params">--enable-ipv6</span> <span class="hljs-params">--with-postgresql=/opt/pg11/bin/pg_config</span> <span class="hljs-params">--with-net-snmp</span> <span class="hljs-params">--with-ssh2</span> <span class="hljs-params">--with-openipmi</span> <span class="hljs-params">--with-ldap</span> <span class="hljs-params">--with-libcurl</span> <span class="hljs-params">--with-iconv</span> <span class="hljs-params">--enable-bcmath</span> <span class="hljs-params">--enable-mbstring</span>  <span class="hljs-params">--with-gd</span>  <span class="hljs-params">--with-png-dir</span> <span class="hljs-params">--with-jpeg-dir</span> <span class="hljs-params">--with-freetype-dir</span><br>make &amp;&amp; make install<br></code></pre></td></tr></table></figure>
<h1 id="配置zabbix"><a href="#配置zabbix" class="headerlink" title="配置zabbix"></a>配置zabbix</h1><p>cd /home/zabbix/release/sbin<br>vim ../etc/zabbix_server.conf 填写正确DB内容<br><figure class="highlight ini"><table><tr><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">DBHost</span>=DBHost<br><span class="hljs-attr">DBName</span>=DBName<br><span class="hljs-attr">DBUser</span>=DBUser<br><span class="hljs-attr">DBPassword</span>=<span class="hljs-string">&#x27;DBPassword&#x27;</span><br></code></pre></td></tr></table></figure></p>
<h1 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h1><figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">./zabbix_server<br><span class="hljs-regexp">/etc/i</span>nit.d/apache2 start<br>sudo mkdir <span class="hljs-regexp">/var/</span>www<span class="hljs-regexp">/html/</span>zabbix<br>sudo chown -R zabbix:zabbix<br>cp -fr <span class="hljs-regexp">/home/</span>zabbix<span class="hljs-regexp">/zabbix-4.0.2/</span>frontends<span class="hljs-regexp">/php/</span>* <span class="hljs-regexp">/var/</span>www<span class="hljs-regexp">/html/</span>zabbix<br><br></code></pre></td></tr></table></figure>
<p>页面就可以登陆了。</p>
<h1 id="配置zabbix-1"><a href="#配置zabbix-1" class="headerlink" title="配置zabbix"></a>配置zabbix</h1><figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">http:<span class="hljs-regexp">//</span>hostname<span class="hljs-regexp">/zabbix/</span>setup.php<br></code></pre></td></tr></table></figure>
<p><img data-src="/images/zabbix01.png" alt="zabbix01"></p>
<p>下一步，修改php配置保证所有状态直到OK</p>
<p><img data-src="/images/zabbix02.png" alt="zabbix02"></p>
<h1 id="FAQ"><a href="#FAQ" class="headerlink" title="FAQ"></a>FAQ</h1><p>PHP databases support off Fail<br><figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">extension=<span class="hljs-regexp">/opt/</span>remi<span class="hljs-regexp">/php72/</span>root<span class="hljs-regexp">/usr/</span>lib64<span class="hljs-regexp">/php/m</span>odules/pgsql.so<br></code></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>zabbix</category>
      </categories>
      <tags>
        <tag>zabbix</tag>
      </tags>
  </entry>
  <entry>
    <title>利用PostgreSQL LATERAL完成行列转换</title>
    <url>/PostgreSQL/PostgreSQL%E8%A1%8C%E5%88%97%E8%BD%AC%E6%8D%A2/</url>
    <content><![CDATA[<p>利用PostgreSQL LATERAL完成行列转换.</p>
<a id="more"></a>
<h1 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h1><figure class="highlight coq"><table><tr><td class="code"><pre><code class="hljs coq">原始表数据如下：<br><br>name| <span class="hljs-type">English</span> | <span class="hljs-type">Physics</span> | <span class="hljs-type">Math</span><br>------+---------+---------+------<br>Simon |      <span class="hljs-type">90</span> |      <span class="hljs-type">76</span> |   <span class="hljs-type">79</span><br>Lucy  |     <span class="hljs-type">100</span> |      <span class="hljs-type">90</span> |   <span class="hljs-type">85</span><br>Lily  |      <span class="hljs-type">95</span> |      <span class="hljs-type">81</span> |   <span class="hljs-type">84</span><br>David |     <span class="hljs-type">100</span> |      <span class="hljs-type">86</span> |   <span class="hljs-type">89</span><br><br>转换为<br>  name  | <span class="hljs-type">subject</span> | <span class="hljs-type">score</span><br>--------+---------+-------<br> Simon  | <span class="hljs-type">english</span> |    <span class="hljs-type">90</span><br> Simon  | <span class="hljs-type">physics</span> |    <span class="hljs-type">76</span><br> Simon  | <span class="hljs-type">math</span>    |    <span class="hljs-type">79</span><br> Lucy   | <span class="hljs-type">english</span> |   <span class="hljs-type">100</span><br> Lucy   | <span class="hljs-type">physics</span> |    <span class="hljs-type">90</span><br> Lucy   | <span class="hljs-type">math</span>    |    <span class="hljs-type">85</span><br> Lily   | <span class="hljs-type">english</span> |    <span class="hljs-type">95</span><br> Lily   | <span class="hljs-type">physics</span> |    <span class="hljs-type">81</span><br> Lily   | <span class="hljs-type">math</span>    |    <span class="hljs-type">84</span><br> David  | <span class="hljs-type">english</span> |   <span class="hljs-type">100</span><br> David  | <span class="hljs-type">physics</span> |    <span class="hljs-type">86</span><br> David  | <span class="hljs-type">math</span>    |    <span class="hljs-type">89</span><br></code></pre></td></tr></table></figure>
<h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><figure class="highlight angelscript"><table><tr><td class="code"><pre><code class="hljs angelscript">create table test(name text, english <span class="hljs-built_in">int</span>, physics <span class="hljs-built_in">int</span>, math <span class="hljs-built_in">int</span>);<br>\copy test <span class="hljs-keyword">from</span> stdin with delimiter <span class="hljs-string">&#x27;|&#x27;</span><br> Simon  |      <span class="hljs-number">90</span> |      <span class="hljs-number">76</span> |   <span class="hljs-number">79</span><br> Lucy   |     <span class="hljs-number">100</span> |      <span class="hljs-number">90</span> |   <span class="hljs-number">85</span><br> Lily   |      <span class="hljs-number">95</span> |      <span class="hljs-number">81</span> |   <span class="hljs-number">84</span><br> David  |     <span class="hljs-number">100</span> |      <span class="hljs-number">86</span> |   <span class="hljs-number">89</span><br>\.<br></code></pre></td></tr></table></figure>
<h1 id="使用union-all"><a href="#使用union-all" class="headerlink" title="使用union all"></a>使用union all</h1><figure class="highlight routeros"><table><tr><td class="code"><pre><code class="hljs routeros"><span class="hljs-attribute">mydb</span>=# explain analyze  select name, max(english) <span class="hljs-keyword">from</span> test<span class="hljs-built_in"> group </span>by name union all select name, max(physics) <span class="hljs-keyword">from</span> test<span class="hljs-built_in"> group </span>by name union all select name, max(math) <span class="hljs-keyword">from</span> test<span class="hljs-built_in"> group </span>by name;<br>                                                      QUERY PLAN<br>----------------------------------------------------------------------------------------------------------------------<br> Append  (<span class="hljs-attribute">cost</span>=78.10..249.30 <span class="hljs-attribute">rows</span>=600 <span class="hljs-attribute">width</span>=36) (actual <span class="hljs-attribute">time</span>=0.071..0.151 <span class="hljs-attribute">rows</span>=12 <span class="hljs-attribute">loops</span>=1)<br>   -&gt;  HashAggregate  (<span class="hljs-attribute">cost</span>=78.10..80.10 <span class="hljs-attribute">rows</span>=200 <span class="hljs-attribute">width</span>=36) (actual <span class="hljs-attribute">time</span>=0.069..0.078 <span class="hljs-attribute">rows</span>=4 <span class="hljs-attribute">loops</span>=1)<br>        <span class="hljs-built_in"> Group </span>Key: test.name<br>         -&gt;  Seq Scan on test  (<span class="hljs-attribute">cost</span>=0.00..55.40 <span class="hljs-attribute">rows</span>=4540 <span class="hljs-attribute">width</span>=36) (actual <span class="hljs-attribute">time</span>=0.029..0.033 <span class="hljs-attribute">rows</span>=4 <span class="hljs-attribute">loops</span>=1)<br>   -&gt;  HashAggregate  (<span class="hljs-attribute">cost</span>=78.10..80.10 <span class="hljs-attribute">rows</span>=200 <span class="hljs-attribute">width</span>=36) (actual <span class="hljs-attribute">time</span>=0.027..0.035 <span class="hljs-attribute">rows</span>=4 <span class="hljs-attribute">loops</span>=1)<br>        <span class="hljs-built_in"> Group </span>Key: test_1.name<br>         -&gt;  Seq Scan on test test_1  (<span class="hljs-attribute">cost</span>=0.00..55.40 <span class="hljs-attribute">rows</span>=4540 <span class="hljs-attribute">width</span>=36) (actual <span class="hljs-attribute">time</span>=0.009..0.012 <span class="hljs-attribute">rows</span>=4 <span class="hljs-attribute">loops</span>=1)<br>   -&gt;  HashAggregate  (<span class="hljs-attribute">cost</span>=78.10..80.10 <span class="hljs-attribute">rows</span>=200 <span class="hljs-attribute">width</span>=36) (actual <span class="hljs-attribute">time</span>=0.022..0.029 <span class="hljs-attribute">rows</span>=4 <span class="hljs-attribute">loops</span>=1)<br>        <span class="hljs-built_in"> Group </span>Key: test_2.name<br>         -&gt;  Seq Scan on test test_2  (<span class="hljs-attribute">cost</span>=0.00..55.40 <span class="hljs-attribute">rows</span>=4540 <span class="hljs-attribute">width</span>=36) (actual <span class="hljs-attribute">time</span>=0.007..0.010 <span class="hljs-attribute">rows</span>=4 <span class="hljs-attribute">loops</span>=1)<br> Planning Time: 0.511 ms<br> Execution Time: 0.378 ms<br>(12 rows)<br><br><span class="hljs-attribute">mydb</span>=#<br></code></pre></td></tr></table></figure>
<h1 id="自连接"><a href="#自连接" class="headerlink" title="自连接"></a>自连接</h1><figure class="highlight routeros"><table><tr><td class="code"><pre><code class="hljs routeros"><span class="hljs-attribute">mydb</span>=# explain analyze SELECT t.name,s.* <span class="hljs-keyword">from</span> test t JOIN LATERAL(VALUES(<span class="hljs-string">&#x27;english&#x27;</span>,t.english ), (<span class="hljs-string">&#x27;physics&#x27;</span>,t.physics), (<span class="hljs-string">&#x27;math&#x27;</span>,t.math)) s(subject, score) on <span class="hljs-literal">true</span>;<br>                                                  QUERY PLAN<br>--------------------------------------------------------------------------------------------------------------<br> Nested Loop  (<span class="hljs-attribute">cost</span>=0.00..361.85 <span class="hljs-attribute">rows</span>=13620 <span class="hljs-attribute">width</span>=68) (actual <span class="hljs-attribute">time</span>=0.038..0.073 <span class="hljs-attribute">rows</span>=12 <span class="hljs-attribute">loops</span>=1)<br>   -&gt;  Seq Scan on test t  (<span class="hljs-attribute">cost</span>=0.00..55.40 <span class="hljs-attribute">rows</span>=4540 <span class="hljs-attribute">width</span>=44) (actual <span class="hljs-attribute">time</span>=0.021..0.025 <span class="hljs-attribute">rows</span>=4 <span class="hljs-attribute">loops</span>=1)<br>   -&gt;  Values Scan on <span class="hljs-string">&quot;*VALUES*&quot;</span>  (<span class="hljs-attribute">cost</span>=0.00..0.04 <span class="hljs-attribute">rows</span>=3 <span class="hljs-attribute">width</span>=36) (actual <span class="hljs-attribute">time</span>=0.003..0.007 <span class="hljs-attribute">rows</span>=3 <span class="hljs-attribute">loops</span>=4)<br> Planning Time: 0.209 ms<br> Execution Time: 0.128 ms<br>(5 rows)<br></code></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>PostgreSQL</category>
      </categories>
      <tags>
        <tag>PostgreSQL</tag>
        <tag>行列转换</tag>
        <tag>LATERAL</tag>
        <tag>自连接</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/uncategorized/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:left">左对齐标题</th>
<th style="text-align:right">右对齐标题</th>
<th style="text-align:center">居中对齐标题</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">短文本</td>
<td style="text-align:right">中等文本</td>
<td style="text-align:center">稍微长一点的文本</td>
</tr>
<tr>
<td style="text-align:left">稍微长一点的文本</td>
<td style="text-align:right">短文本</td>
<td style="text-align:center">中等文本</td>
</tr>
</tbody>
</table>
</div>
<hr>
<p><strong>NOTE</strong></p>
<p>It works with almost all markdown flavours (the below blank line matters).</p>
<hr>
<p>!!! note</p>
<pre><code> This is a note.
</code></pre>]]></content>
  </entry>
  <entry>
    <title>PostgreSQL HA patroni 测试案例</title>
    <url>/uncategorized/PostgreSQL_patroni/</url>
    <content><![CDATA[<p>主要针对patroni 由1.6.5-2 升级至2.0.1 的版本</p>
<h1 id="测试环境"><a href="#测试环境" class="headerlink" title="测试环境"></a>测试环境</h1><pre><code>zookeeper + CentOS 7 + pg11
</code></pre><h1 id="Switchover-计划内维护"><a href="#Switchover-计划内维护" class="headerlink" title="Switchover (计划内维护)"></a>Switchover (计划内维护)</h1><h2 id="主从切换"><a href="#主从切换" class="headerlink" title="主从切换"></a>主从切换</h2><pre><code>        case 1. 期望原主库降为新从库的场景
        case 2. 期望原主库停掉不做后续处理场景
</code></pre><h2 id="DB集群切换下线1个HA管理的从节点"><a href="#DB集群切换下线1个HA管理的从节点" class="headerlink" title="DB集群切换下线1个HA管理的从节点"></a>DB集群切换下线1个HA管理的从节点</h2><h2 id="DB集群剔除1个HA管理的从节点"><a href="#DB集群剔除1个HA管理的从节点" class="headerlink" title="DB集群剔除1个HA管理的从节点"></a>DB集群剔除1个HA管理的从节点</h2><h2 id="新加从节点"><a href="#新加从节点" class="headerlink" title="新加从节点"></a>新加从节点</h2><pre><code>        case 1. DB集群新加从节点, 期望不需要加入HA管理的场景
        case 2. DB集群新加从节点, 期望需要加入HA管理的场景
</code></pre><h1 id="failover-故障切换"><a href="#failover-故障切换" class="headerlink" title="failover (故障切换)"></a>failover (故障切换)</h1><h2 id="Master"><a href="#Master" class="headerlink" title="Master"></a>Master</h2><h3 id="主库DB实例异常kill-导致主库down"><a href="#主库DB实例异常kill-导致主库down" class="headerlink" title="主库DB实例异常kill, 导致主库down"></a>主库DB实例异常kill, 导致主库down</h3><h3 id="主库DB实例通过pg-ctl-停掉-导致主库down"><a href="#主库DB实例通过pg-ctl-停掉-导致主库down" class="headerlink" title="主库DB实例通过pg_ctl 停掉, 导致主库down"></a>主库DB实例通过pg_ctl 停掉, 导致主库down</h3><h3 id="主库DB实例-patroni-down-kill"><a href="#主库DB实例-patroni-down-kill" class="headerlink" title="主库DB实例 patroni down (kill)"></a>主库DB实例 patroni down (kill)</h3><h3 id="主库DB实例-patroni-down-kill-9"><a href="#主库DB实例-patroni-down-kill-9" class="headerlink" title="主库DB实例 patroni down (kill -9)"></a>主库DB实例 patroni down (kill -9)</h3><h3 id="主库DB实例所在DB-Server-down"><a href="#主库DB实例所在DB-Server-down" class="headerlink" title="主库DB实例所在DB Server  down"></a>主库DB实例所在DB Server  down</h3><h3 id="主库性能抖动的影响"><a href="#主库性能抖动的影响" class="headerlink" title="主库性能抖动的影响"></a>主库性能抖动的影响</h3><h3 id="主库网络抖动的影响"><a href="#主库网络抖动的影响" class="headerlink" title="主库网络抖动的影响"></a>主库网络抖动的影响</h3><h3 id="主从复制断掉影响"><a href="#主从复制断掉影响" class="headerlink" title="主从复制断掉影响"></a>主从复制断掉影响</h3><h3 id="base目录被删除"><a href="#base目录被删除" class="headerlink" title="base目录被删除"></a>base目录被删除</h3><h2 id="Slave"><a href="#Slave" class="headerlink" title="Slave"></a>Slave</h2><h3 id="从库DB实例异常kill-导致从库down"><a href="#从库DB实例异常kill-导致从库down" class="headerlink" title="从库DB实例异常kill, 导致从库down"></a>从库DB实例异常kill, 导致从库down</h3><h3 id="从库DB实例通过pg-ctl-停掉-导致从库down"><a href="#从库DB实例通过pg-ctl-停掉-导致从库down" class="headerlink" title="从库DB实例通过pg_ctl 停掉, 导致从库down"></a>从库DB实例通过pg_ctl 停掉, 导致从库down</h3><h3 id="从库DB实例-patroni-down-kill"><a href="#从库DB实例-patroni-down-kill" class="headerlink" title="从库DB实例 patroni down (kill )"></a>从库DB实例 patroni down (kill )</h3><h3 id="从库DB实例-patroni-down-kill-9"><a href="#从库DB实例-patroni-down-kill-9" class="headerlink" title="从库DB实例 patroni down (kill -9)"></a>从库DB实例 patroni down (kill -9)</h3><h3 id="从库DB实例所在DB-Server-down"><a href="#从库DB实例所在DB-Server-down" class="headerlink" title="从库DB实例所在DB Server  down"></a>从库DB实例所在DB Server  down</h3><h3 id="从库性能抖动的影响"><a href="#从库性能抖动的影响" class="headerlink" title="从库性能抖动的影响"></a>从库性能抖动的影响</h3><h3 id="从库网络抖动的影响"><a href="#从库网络抖动的影响" class="headerlink" title="从库网络抖动的影响"></a>从库网络抖动的影响</h3><h1 id="zk故障"><a href="#zk故障" class="headerlink" title="zk故障"></a>zk故障</h1><h2 id="zk仅到DB集群主库网络不通-zk至DB集群至少有个1个从库都是通的"><a href="#zk仅到DB集群主库网络不通-zk至DB集群至少有个1个从库都是通的" class="headerlink" title="zk仅到DB集群主库网络不通, zk至DB集群至少有个1个从库都是通的"></a>zk仅到DB集群主库网络不通, zk至DB集群至少有个1个从库都是通的</h2><h2 id="zk到DB集群的所有从库网络都不通-zk至DB集群主库是通的"><a href="#zk到DB集群的所有从库网络都不通-zk至DB集群主库是通的" class="headerlink" title="zk到DB集群的所有从库网络都不通, zk至DB集群主库是通的"></a>zk到DB集群的所有从库网络都不通, zk至DB集群主库是通的</h2><h2 id="zk到DB集群的所有节点网络都几乎同时不通-包括主从库"><a href="#zk到DB集群的所有节点网络都几乎同时不通-包括主从库" class="headerlink" title="zk到DB集群的所有节点网络都几乎同时不通,包括主从库"></a>zk到DB集群的所有节点网络都几乎同时不通,包括主从库</h2><h3 id="几乎同时不通-又几乎同时通"><a href="#几乎同时不通-又几乎同时通" class="headerlink" title="几乎同时不通, 又几乎同时通"></a>几乎同时不通, 又几乎同时通</h3><h3 id="几乎同时不通-主库先通-从库后通"><a href="#几乎同时不通-主库先通-从库后通" class="headerlink" title="几乎同时不通, 主库先通, 从库后通"></a>几乎同时不通, 主库先通, 从库后通</h3><h3 id="几乎同时不通-从库先通-过1个ttl-主库再通"><a href="#几乎同时不通-从库先通-过1个ttl-主库再通" class="headerlink" title="几乎同时不通, 从库先通, 过1个ttl, 主库再通"></a>几乎同时不通, 从库先通, 过1个ttl, 主库再通</h3><h3 id="几乎同时不通-从库先通-但不到1个ttl-主库就通了"><a href="#几乎同时不通-从库先通-但不到1个ttl-主库就通了" class="headerlink" title="几乎同时不通, 从库先通, 但不到1个ttl, 主库就通了"></a>几乎同时不通, 从库先通, 但不到1个ttl, 主库就通了</h3><h2 id="zk服务down掉-zk到DB集群的所有节点网络正常-但是都无法正常访问zk"><a href="#zk服务down掉-zk到DB集群的所有节点网络正常-但是都无法正常访问zk" class="headerlink" title="zk服务down掉, zk到DB集群的所有节点网络正常, 但是都无法正常访问zk"></a>zk服务down掉, zk到DB集群的所有节点网络正常, 但是都无法正常访问zk</h2>]]></content>
  </entry>
  <entry>
    <title>PostgreSQL开发指南</title>
    <url>/PostgreSQL/PostgreSQL%E5%BC%80%E5%8F%91%E6%8C%87%E5%8D%97/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容">
  <script id="hbeData" type="hbeData" data-hmacdigest="2c7570d74f5f6f5eb376a8c8a894effa22b71d0a8b6a9c93e242017a1e4a7400"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">您好, 这里需要密码.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>PostgreSQL</category>
      </categories>
      <tags>
        <tag>PostgreSQL</tag>
        <tag>开发指南</tag>
      </tags>
  </entry>
  <entry>
    <title>psql显示风格设置</title>
    <url>/PostgreSQL/psql%E6%98%BE%E7%A4%BA%E9%A3%8E%E6%A0%BC%E8%AE%BE%E7%BD%AE/</url>
    <content><![CDATA[<h1 id="MySQL风格"><a href="#MySQL风格" class="headerlink" title="MySQL风格"></a>MySQL风格</h1><figure class="highlight asciidoc"><table><tr><td class="code"><pre><code class="hljs asciidoc">\pset border 2<br><span class="hljs-code"> </span><br>postgres=# select * from test;<br><span class="hljs-code">+----+</span>----+<br>| id | c1 |<br><span class="hljs-code">+----+</span>----+<br>|  1 |  1 |<br>|  2 |  2 |<br><span class="hljs-code">+----+</span>----+<br>(2 rows)<br><span class="hljs-code"> </span><br>postgres=#<br><span class="hljs-code"> </span><br>--------------------------------------<br><span class="hljs-code"> </span><br>mysql&gt; select * from t;<br><span class="hljs-code">+------+</span><br>| id   |<br><span class="hljs-code">+------+</span><br>|    1 |<br><span class="hljs-code">+------+</span><br>1 row in set (0.01 sec)<br><span class="hljs-code"> </span><br>mysql&gt;<br></code></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>PostgreSQL</category>
      </categories>
      <tags>
        <tag>psql</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux vim常用配置</title>
    <url>/vim/linux%E9%85%8D%E7%BD%AEvim/</url>
    <content><![CDATA[<p>列举一些有用的vim小功能, 能有效的避免重复造轮子.</p>
<a id="more"></a>
<h1 id="vim新建文件时-按F4既可以添加作者信息"><a href="#vim新建文件时-按F4既可以添加作者信息" class="headerlink" title="vim新建文件时, 按F4既可以添加作者信息"></a>vim新建文件时, 按F4既可以添加作者信息</h1><p>~/.vimrc中追加如下内容</p>
<figure class="highlight scilab"><table><tr><td class="code"><pre><code class="hljs scilab"><span class="hljs-string">&quot;进行版权声明的设置</span><br><span class="hljs-string">&quot;</span><span class="hljs-string">&quot;添加或更新头</span><br><span class="hljs-string">map &lt;F4&gt; :call TitleDet() &lt;cr&gt;&#x27;</span>s<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">AddTitle</span><span class="hljs-params">()</span></span><br>    call append(<span class="hljs-number">0</span>,<span class="hljs-string">&quot;/********************************************************&quot;</span>)<br>    call append(<span class="hljs-number">1</span>,<span class="hljs-string">&quot;* Author        : ×××&quot;</span>)<br>    call append(<span class="hljs-number">2</span>,<span class="hljs-string">&quot;* Email         : ×××@×××.com&quot;</span>)<br>    call append(<span class="hljs-number">3</span>,<span class="hljs-string">&quot;* Last modified : &quot;</span>.strftime(<span class="hljs-string">&quot;%Y-%m-%d %H:%M&quot;</span>))<br>    call append(<span class="hljs-number">4</span>,<span class="hljs-string">&quot;* Filename      : &quot;</span>.expand(<span class="hljs-string">&quot;%:t&quot;</span>))<br>    call append(<span class="hljs-number">5</span>,<span class="hljs-string">&quot;* Description   : &quot;</span>)<br>    call append(<span class="hljs-number">6</span>,<span class="hljs-string">&quot;*********************************************************/&quot;</span>)<br>    echohl WarningMsg | echo <span class="hljs-string">&quot;Successful in adding the copyright.&quot;</span> | echohl None<br>endf<br><span class="hljs-string">&quot;更新最近修改时间和文件名</span><br><span class="hljs-string">function UpdateTitle()</span><br><span class="hljs-string">    normal m&#x27;</span><br>    execute <span class="hljs-string">&#x27;/# *Last modified:/s@:.*$@\=strftime(&quot;</span>:\t%Y-%m-%d %H:%M<span class="hljs-string">&quot;)@&#x27;</span><br>    normal <span class="hljs-string">&#x27;&#x27;</span><br>    normal mk                                         <br>    execute <span class="hljs-string">&#x27;/# *Filename:/s@:.*$@\=&quot;</span>:\t\t<span class="hljs-string">&quot;.expand(&quot;</span>%:t<span class="hljs-string">&quot;)@&#x27;</span><br>    execute <span class="hljs-string">&quot;noh&quot;</span>                               <br>    normal <span class="hljs-string">&#x27;k</span><br><span class="hljs-string">    echohl WarningMsg | echo &quot;</span>Successful in updating the copy right | echohl None<br><span class="hljs-keyword">endfunction</span><br><span class="hljs-string">&quot;判断前10行代码里面，是否有Last modified这个单词，</span><br><span class="hljs-string">&quot;</span>如果没有的话，代表没有添加过作者信息，需要新添加；<br><span class="hljs-string">&quot;如果有的话，那么只需要更新即可</span><br><span class="hljs-string">function TitleDet()     </span><br><span class="hljs-string">    let n = 1</span><br><span class="hljs-string">    &quot;</span>默认为添加<br>    <span class="hljs-keyword">while</span> n &lt; <span class="hljs-number">7</span><br>        let line = getline(n)<br>        <span class="hljs-keyword">if</span> line =~ <span class="hljs-string">&#x27;^\#\s*\S*Last\smodified:\S*.*$&#x27;</span><br>            call UpdateTitle()<br>            <span class="hljs-keyword">return</span><br>        endif<br>        let n = n+<span class="hljs-number">1</span><br>    endwhile<br>    call AddTitle()<br><span class="hljs-keyword">endfunction</span><br></code></pre></td></tr></table></figure>
<h1 id="vim新建python或者bash脚本添加固定内容"><a href="#vim新建python或者bash脚本添加固定内容" class="headerlink" title="vim新建python或者bash脚本添加固定内容"></a>vim新建python或者bash脚本添加固定内容</h1><p>~/.vimrc中追加如下内容</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">autocmd</span> BufNewFile *.<span class="hljs-keyword">py</span>,*.<span class="hljs-keyword">sh</span>, exec <span class="hljs-string">&quot;:call SetTitle()&quot;</span><br><span class="hljs-keyword">let</span> $author_name = <span class="hljs-string">&quot;taot.jin&quot;</span><br><span class="hljs-keyword">let</span> $author_email = <span class="hljs-string">&quot;taot.jin@q.com&quot;</span><br><br>func SetTitle()<br>    <span class="hljs-keyword">if</span> &amp;<span class="hljs-keyword">filetype</span> == <span class="hljs-string">&#x27;sh&#x27;</span><br>    <span class="hljs-keyword">call</span> <span class="hljs-built_in">setline</span>(<span class="hljs-number">1</span>,<span class="hljs-string">&quot;\###################################################################&quot;</span>)<br>    <span class="hljs-keyword">call</span> <span class="hljs-keyword">append</span>(<span class="hljs-built_in">line</span>(<span class="hljs-string">&quot;.&quot;</span>), <span class="hljs-string">&quot;\# File Name: &quot;</span>.<span class="hljs-built_in">expand</span>(<span class="hljs-string">&quot;%&quot;</span>))<br>    <span class="hljs-keyword">call</span> <span class="hljs-keyword">append</span>(<span class="hljs-built_in">line</span>(<span class="hljs-string">&quot;.&quot;</span>)+<span class="hljs-number">1</span>, <span class="hljs-string">&quot;\# Author: &quot;</span>.$author_name)<br>    <span class="hljs-keyword">call</span> <span class="hljs-keyword">append</span>(<span class="hljs-built_in">line</span>(<span class="hljs-string">&quot;.&quot;</span>)+<span class="hljs-number">2</span>, <span class="hljs-string">&quot;\# mail: &quot;</span>.$author_email)<br>    <span class="hljs-keyword">call</span> <span class="hljs-keyword">append</span>(<span class="hljs-built_in">line</span>(<span class="hljs-string">&quot;.&quot;</span>)+<span class="hljs-number">3</span>, <span class="hljs-string">&quot;\# Created Time: &quot;</span>.<span class="hljs-built_in">strftime</span>(<span class="hljs-string">&quot;%c&quot;</span>))<br>    <span class="hljs-keyword">call</span> <span class="hljs-keyword">append</span>(<span class="hljs-built_in">line</span>(<span class="hljs-string">&quot;.&quot;</span>)+<span class="hljs-number">4</span>, <span class="hljs-string">&quot;\#=============================================================&quot;</span>)<br>    <span class="hljs-keyword">call</span> <span class="hljs-keyword">append</span>(<span class="hljs-built_in">line</span>(<span class="hljs-string">&quot;.&quot;</span>)+<span class="hljs-number">5</span>, <span class="hljs-string">&quot;\#!/bin/bash&quot;</span>)<br>    <span class="hljs-keyword">call</span> <span class="hljs-keyword">append</span>(<span class="hljs-built_in">line</span>(<span class="hljs-string">&quot;.&quot;</span>)+<span class="hljs-number">6</span>, <span class="hljs-string">&quot;&quot;</span>)<br>    <span class="hljs-keyword">else</span><br>    <span class="hljs-keyword">call</span> <span class="hljs-built_in">setline</span>(<span class="hljs-number">1</span>,<span class="hljs-string">&quot;\###################################################################&quot;</span>)<br>    <span class="hljs-keyword">call</span> <span class="hljs-keyword">append</span>(<span class="hljs-built_in">line</span>(<span class="hljs-string">&quot;.&quot;</span>), <span class="hljs-string">&quot;\# File Name: &quot;</span>.<span class="hljs-built_in">expand</span>(<span class="hljs-string">&quot;%&quot;</span>))<br>    <span class="hljs-keyword">call</span> <span class="hljs-keyword">append</span>(<span class="hljs-built_in">line</span>(<span class="hljs-string">&quot;.&quot;</span>)+<span class="hljs-number">1</span>, <span class="hljs-string">&quot;\# Author: &quot;</span>.$author_name)<br>    <span class="hljs-keyword">call</span> <span class="hljs-keyword">append</span>(<span class="hljs-built_in">line</span>(<span class="hljs-string">&quot;.&quot;</span>)+<span class="hljs-number">2</span>, <span class="hljs-string">&quot;\# mail: &quot;</span>.$author_email)<br>    <span class="hljs-keyword">call</span> <span class="hljs-keyword">append</span>(<span class="hljs-built_in">line</span>(<span class="hljs-string">&quot;.&quot;</span>)+<span class="hljs-number">3</span>, <span class="hljs-string">&quot;\# Created Time: &quot;</span>.<span class="hljs-built_in">strftime</span>(<span class="hljs-string">&quot;%c&quot;</span>))<br>    <span class="hljs-keyword">call</span> <span class="hljs-keyword">append</span>(<span class="hljs-built_in">line</span>(<span class="hljs-string">&quot;.&quot;</span>)+<span class="hljs-number">4</span>, <span class="hljs-string">&quot;\#=============================================================&quot;</span>)<br>    <span class="hljs-keyword">call</span> <span class="hljs-keyword">append</span>(<span class="hljs-built_in">line</span>(<span class="hljs-string">&quot;.&quot;</span>)+<span class="hljs-number">5</span>, <span class="hljs-string">&quot;\#!/usr/bin/python&quot;</span>)<br>    <span class="hljs-keyword">call</span> <span class="hljs-keyword">append</span>(<span class="hljs-built_in">line</span>(<span class="hljs-string">&quot;.&quot;</span>)+<span class="hljs-number">5</span>, <span class="hljs-string">&quot;\# -*- coding: utf-8 -*-&quot;</span>)<br>    <span class="hljs-string">&quot;call append(line(&quot;</span>.<span class="hljs-string">&quot;)+6, &quot;</span><span class="hljs-comment">&quot;)</span><br>    <span class="hljs-keyword">endif</span><br>endfunc<br></code></pre></td></tr></table></figure>
<h1 id="vim新建markdown文件时添加固定信息"><a href="#vim新建markdown文件时添加固定信息" class="headerlink" title="vim新建markdown文件时添加固定信息"></a>vim新建markdown文件时添加固定信息</h1><p>~/.vimrc中追加如下内容</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">autocmd</span> BufNewFile *.md, exec <span class="hljs-string">&quot;:call SetTitle1()&quot;</span><br><span class="hljs-keyword">let</span> $author_name = <span class="hljs-string">&quot;taot.jin&quot;</span><br><span class="hljs-keyword">let</span> $author_email = <span class="hljs-string">&quot;taot.jin@q.com&quot;</span><br><br>func SetTitle1()<br>    <span class="hljs-keyword">call</span> <span class="hljs-built_in">setline</span>(<span class="hljs-number">1</span>,<span class="hljs-string">&quot;---&quot;</span>)<br>    <span class="hljs-keyword">call</span> <span class="hljs-keyword">append</span>(<span class="hljs-built_in">line</span>(<span class="hljs-string">&quot;.&quot;</span>), <span class="hljs-string">&quot;title: &quot;</span>)<br>    <span class="hljs-keyword">call</span> <span class="hljs-keyword">append</span>(<span class="hljs-built_in">line</span>(<span class="hljs-string">&quot;.&quot;</span>)+<span class="hljs-number">1</span>, <span class="hljs-string">&quot;date: &quot;</span>.<span class="hljs-built_in">strftime</span>(<span class="hljs-string">&quot;%Y-%m-%d&quot;</span>))<br>    <span class="hljs-keyword">call</span> <span class="hljs-keyword">append</span>(<span class="hljs-built_in">line</span>(<span class="hljs-string">&quot;.&quot;</span>)+<span class="hljs-number">2</span>, <span class="hljs-string">&quot;tags: &quot;</span>)<br>    <span class="hljs-keyword">call</span> <span class="hljs-keyword">append</span>(<span class="hljs-built_in">line</span>(<span class="hljs-string">&quot;.&quot;</span>)+<span class="hljs-number">3</span>, <span class="hljs-string">&quot;categories: &quot;</span>)<br>    <span class="hljs-keyword">call</span> <span class="hljs-keyword">append</span>(<span class="hljs-built_in">line</span>(<span class="hljs-string">&quot;.&quot;</span>)+<span class="hljs-number">4</span>, <span class="hljs-string">&quot;top: &quot;</span>)<br>    <span class="hljs-keyword">call</span> <span class="hljs-keyword">append</span>(<span class="hljs-built_in">line</span>(<span class="hljs-string">&quot;.&quot;</span>)+<span class="hljs-number">5</span>, <span class="hljs-string">&quot;description: &quot;</span>)<br>    <span class="hljs-keyword">call</span> <span class="hljs-keyword">append</span>(<span class="hljs-built_in">line</span>(<span class="hljs-string">&quot;.&quot;</span>)+<span class="hljs-number">6</span>, <span class="hljs-string">&quot;password: &quot;</span>)<br>    <span class="hljs-keyword">call</span> <span class="hljs-keyword">append</span>(<span class="hljs-built_in">line</span>(<span class="hljs-string">&quot;.&quot;</span>)+<span class="hljs-number">7</span>, <span class="hljs-string">&quot;&quot;</span>)<br>    <span class="hljs-keyword">call</span> <span class="hljs-keyword">append</span>(<span class="hljs-built_in">line</span>(<span class="hljs-string">&quot;.&quot;</span>)+<span class="hljs-number">8</span>, <span class="hljs-string">&quot;---&quot;</span>)<br>endfunc<br></code></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>vim</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>vim</tag>
      </tags>
  </entry>
</search>
